<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FileSystemWatcher.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f524b1e2438cea1c3c824aa9514a36244ccff373.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f524b1e2438cea1c3c824aa9514a36244ccff373</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</source>
          <target state="translated">파일 시스템 변경 알림을 수신하면서 디렉터리 또는 디렉터리의 파일이 변경되면 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch for changes in a specified directory.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 변경 내용이 지정된 된 디렉터리에 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for changes in files and subdirectories of the specified directory.</source>
          <target state="translated">지정된 된 디렉터리의 파일과 하위 디렉터리의 변경 내용을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can create a component to watch files on a local computer, a network drive, or a remote computer.</source>
          <target state="translated">로컬 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 감시 하도록 구성 요소를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch for changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("") or use wildcards ("*.<ph id="ph2">\*</ph>").</source>
          <target state="translated">모든 파일의 변경 내용을 시청 하려면 설정는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 빈 문자열 ("") 하거나 와일드 카드 ("*.<ph id="ph2">\*</ph>").</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">특정 파일을 감시 하도록 설정 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">예를 들어 MyDoc.txt 파일에서 변경 내용을 시청 하려면 설정는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 "MyDoc.txt"입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">특정 유형의 파일에서 변경 내용을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for changes in text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "<ph id="ph2">\*</ph>.txt".</source>
          <target state="translated">예를 들어 텍스트 파일의 변경 내용을 감시를 설정의 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 "<ph id="ph2">\*</ph>.txt"입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>There are several types of changes you can watch for in a directory or file.</source>
          <target state="translated">여러 가지 방법으로 변경 내용을 디렉터리 또는 파일에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, you can watch for changes in <ph id="ph1">`Attributes`</ph>, the <ph id="ph2">`LastWrite`</ph> date and time, or the <ph id="ph3">`Size`</ph> of files or directories.</source>
          <target state="translated">예를 들어에서 변경 내용을 볼 수 있습니다 <ph id="ph1">`Attributes`</ph>, <ph id="ph2">`LastWrite`</ph> 날짜 및 시간, 또는 <ph id="ph3">`Size`</ph> 파일 또는 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This is done by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph> values.</source>
          <target state="translated">설정 하 여 이렇게는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 속성 중 하나에 <ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For more information on the type of changes you can watch, see <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>.</source>
          <target state="translated">확인할 수 있습니다 유형의 변경 작업에 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>You can watch for renaming, deletion, or creation of files or directories.</source>
          <target state="translated">이름 바꾸기, 삭제, 또는 파일 또는 디렉터리 만들기에 대 한 감시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, to watch for renaming of text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt" and call the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method with a <ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph> specified for its parameter.</source>
          <target state="translated">예를 들어 텍스트 파일의 감시를 설정의 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 "*.txt"로 호출은 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> 메서드를 한 <ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph> 해당 매개 변수에 대해 지정 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The Windows operating system notifies your component of file changes in a buffer created by the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">Windows 운영 체제에서 만든 버퍼에서 파일 변경 내용이 구성 요소를에 알립니다.는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increasing the size of the buffer with the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</source>
          <target state="translated">사용 하 여 버퍼의 크기 증가 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성이 비용이 많이 드는 이면 있는 것과 동일 비페이징 메모리는 디스크에 버퍼를 아직 유지 하므로 스와핑할 수 없으므로 큰를 모든 파일 변경 이벤트.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties so you can filter out unwanted change notifications.</source>
          <target state="translated">버퍼 오버플로 방지 하려면 사용 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 변경 알림을 필터링 할 수 있습니다 원치 않는 속성입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">인스턴스에 대 한 초기 속성 값 목록은 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, 참조는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Please note the following when using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> class.</source>
          <target state="translated">사용 하는 경우 다음에 유의 하십시오는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Hidden files are not ignored.</source>
          <target state="translated">숨겨진된 파일 무시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">일부 시스템에서 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</source>
          <target state="translated">"LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFil ~ 합니다. Lon "입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
          <target state="translated">이 클래스는 모든 멤버에 적용 되는 클래스 수준에 상속 요청과 링크 요청을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우에 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
          <target state="translated">보안 요청에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>링크 요청<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The maximum size you can set for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property for monitoring a directory over the network is 64 KB.</source>
          <target state="translated">설정할 수 있는 최대 크기는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 네트워크를 통해 디렉터리를 모니터링 하기 위한 속성은 64KB입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Running <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on Windows 98 is not supported.</source>
          <target state="translated">실행 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> Windows 98에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Copying and moving folders</source>
          <target state="translated">폴더 복사 및 이동</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The operating system and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</source>
          <target state="translated">운영 체제 및 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 잘라내기 및 붙여넣기 작업이 나 폴더와 해당 내용에 대 한 이름 바꾸기 작업으로 이동 작업 개체를 해석 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If you cut and paste a folder with files into a folder being watched, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object reports only the folder as new, but not its contents because they are essentially only renamed.</source>
          <target state="translated">조사 중인 폴더에 파일 폴더 붙여넣기를 잘라낸는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 만 바뀌게 기본적으로 때문에 새 폴더에만 했지만 내용은 가져오지 않고 개체 보고 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To be notified that the contents of folders have been moved or copied into a watched folder, provide <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> event handler methods as suggested in the following table.</source>
          <target state="translated">폴더의 내용을 이동 되거나 감시 폴더에 복사는 알릴 제공 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> 다음 표에서에 설명 된 대로 이벤트 처리기 메서드.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Event Handler</source>
          <target state="translated">이벤트 처리기</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events Handled</source>
          <target state="translated">처리 하는 이벤트</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Performs</source>
          <target state="translated">수행</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Report changes in file attributes, created files, and deleted files.</source>
          <target state="translated">파일 특성, 만든된 파일 및 삭제 된 파일 변경 내용을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>List the old and new paths of renamed files and folders, expanding recursively if needed.</source>
          <target state="translated">이전 구문과 새의 경로 이름이 바뀐된 파일 및 폴더를 재귀적으로 필요한 경우 확장을 나열 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Events and Buffer Sizes</source>
          <target state="translated">이벤트 및 버퍼 크기</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that several factors can affect which file system change events are raised, as described by the following:</source>
          <target state="translated">참고 여러 가지 요소에 영향을 줄 수 있는 파일 시스템 변경 이벤트 발생 다음에 설명 된 대로 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 일부 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> can watch disks as long as they are not switched or removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 으로 전환 되거나 제거 되지 디스크를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 타임 스탬프 및 속성이 변경 될 수 없으므로 Cd 및 Dvd에 대 한 이벤트를 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Remote computers must have one of the required platforms installed for the component to function properly.</source>
          <target state="translated">원격 컴퓨터에 필요한 플랫폼 제대로 작동 하려면 해당 구성 요소 설치 중 하나가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If multiple <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</source>
          <target state="translated">여러 개인 경우 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> Windows XP 서비스 팩 1 이전에서 동일한 UNC 경로 감시 하는 개체 또는 Windows 2000 SP2 또는 개체 중 하나에만 다음 이전 버전을 지정 하면 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects will raise the appropriate events.</source>
          <target state="translated">Windows XP s p 1을 실행 중인 컴퓨터 이상 버전에서는 Windows 2000 SP3 이상 또는 Windows Server 2003, 모든 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 개체 적절 한 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Note that a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> may miss an event when the buffer size is exceeded.</source>
          <target state="translated">한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 버퍼 크기를 초과 했을 때 이벤트를 놓칠 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>To avoid missing events, follow these guidelines:</source>
          <target state="translated">누락 된 이벤트를 방지 하려면 다음이 지침을 따르십시오.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Increase the buffer size by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property.</source>
          <target state="translated">설정 하 여 버퍼 크기를 늘려야는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</source>
          <target state="translated">긴 파일 이름이 버퍼가 가득 찰에 기여 하기 때문에 긴 파일 이름으로 파일을 조사 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Consider renaming these files using shorter names.</source>
          <target state="translated">더 짧은 이름을 사용 하 여 이러한 파일 이름을 바꾸는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Keep your event handling code as short as possible.</source>
          <target state="translated">이벤트 처리 코드를 가능한 한 짧게 유지 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">구성의 변경 내용을로 설정 되어 <ph id="ph1">`LastWrite`</ph> 및 <ph id="ph2">`LastAccess`</ph> 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 이 예제에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>for deriving from the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> class.</source>
          <target state="translated">파생 된 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.FileSystemWatcher">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Named Permission Sets: <ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>.</source>
          <target state="translated">요청 값: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; 명명 된 권한 집합: <ph id="ph2">&lt;see langword="FullTrust" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">다음 표에서의 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>Initial Value</source>
          <target state="translated">초기 값</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>bitwise OR combination of <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, and <ph id="ph3">`DirectoryName`</ph></source>
          <target state="translated">비트 OR 조합 <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, 및 <ph id="ph3">`DirectoryName`</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>"*.<ph id="ph1">\*</ph>" (Watch all files.)</source>
          <target state="translated">"*. <ph id="ph1">\*</ph>"(모든 파일을 조사 합니다.)</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>8192</source>
          <target state="translated">8192</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>empty string ("")</source>
          <target state="translated">빈 문자열 ("")</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">구성 요소에 지정 된 디렉터리를 보지 것입니다는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 설정 되어 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object watches for changes in <ph id="ph2">`LastWrite`</ph> and <ph id="ph3">`LastAccess`</ph> times, and for the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 개체에서 변경 내용을 감시 <ph id="ph2">`LastWrite`</ph> 및 <ph id="ph3">`LastAccess`</ph> 삭제 또는 이름 텍스트의 디렉터리에 파일 시간, 및을 만들 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>If a file is changed, created, or deleted, the path to the file displays to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>When a file is renamed, the old and new paths display to the console.</source>
          <target state="translated">파일의 이름을 바꿀 때 이전 구문과 새 경로 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory to monitor.</source>
          <target state="translated">모니터링할 디렉터리가 지정된 경우 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">구성 요소에 지정 된 디렉터리를 보지 것입니다는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 설정 되어 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property is set by default to watch all files.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성이 기본적으로 모든 파일을 조사 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수가 빈 문자열("")입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수로 지정된 경로가 없는 경우</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph>가 너무 깁니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
          <target state="translated">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The type of files to watch.</source>
          <target state="translated">조사할 파일 형식입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>For example, "*.txt" watches for changes to all text files.</source>
          <target state="translated">예를 들어 "*.txt"를 지정하면 모든 텍스트 파일에 대한 변경 내용을 조사합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> class, given the specified directory and type of files to monitor.</source>
          <target state="translated">모니터링할 디렉터리 및 파일 형식이 지정된 경우 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">구성 요소에 지정 된 디렉터리를 보지 것입니다는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 설정 되어 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
          <target state="translated">구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
          <target state="translated">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
          <target state="translated">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="filter" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="filter" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수가 빈 문자열("")입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>The path specified through the <ph id="ph1">&lt;paramref name="path" /&gt;</ph> parameter does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph> 매개 변수로 지정된 경로가 없는 경우</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is too long.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph>가 너무 깁니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Begins the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">양식에 사용되거나 다른 구성 요소에서 사용하는 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>의 초기화를 시작합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">초기화는 런타임에 발생합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 시작 폼에 사용 되거나 다른 구성 요소에서 사용 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> 메서드 초기화를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is changed.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>에서 파일이나 디렉터리가 변경될 경우에 발생합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> 크기 변경 될 때 이벤트가 발생 시스템 특성, 마지막 작성 시간, 마지막 액세스 시간 또는 파일 또는 디렉터리의 보안 권한을 모니터링 되 고 디렉터리에 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 일부 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> to restrict the number of notifications raised when this event is handled.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 이 이벤트가 처리 될 때 발생 하는 알림 수를 제한할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> 이벤트는 예기치 않게 파일의 이름이 바뀌었지만 디렉터리 이름을 바꿀 때 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>To watch for renaming, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event.</source>
          <target state="translated">조사 하려면 사용 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">되는 순서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> 관련 이벤트는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 이벤트 때 변경 될 수 있습니다는 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph4">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Changed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event to display the file path to the console whenever the watched file is changed.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> 이벤트를 감시 파일이 변경 될 때마다 파일 경로 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is created.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>에서 파일이나 디렉터리가 만들어질 경우에 발생합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">발생 한 파일 또는 디렉터리를 복사 하면는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">두 인스턴스를 만드는 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">"Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">복사와 달리 파일이 나 디렉터리를 이동 하면 두 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 여 발생할 때 이벤트 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 일부 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">되는 순서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 관련 이벤트는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 이벤트 때 변경 될 수 있습니다는 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph4">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 파일을 작성 하는 즉시 발생 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 이벤트가 발생 바로 뒤에 하나 이상의 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Created">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event to display the file path to the console whenever the watched file is created.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 이벤트를 감시 파일을 만들 때마다 콘솔에 파일 경로 표시 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is deleted.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>에서 파일이나 디렉터리가 삭제될 경우에 발생합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">발생 한 파일 또는 디렉터리를 복사 하면는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">두 인스턴스를 만드는 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">"Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
          <target state="translated">복사와 달리 파일이 나 디렉터리를 이동 하면 두 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 여 발생할 때 이벤트 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 일부 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
          <target state="translated">되는 순서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> 관련 이벤트는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 이벤트 때 변경 될 수 있습니다는 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph4">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Deleted">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event to display the file path to the console whenever the watched file is deleted.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> 이벤트를 감시 파일은 삭제 될 때마다 파일 경로 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 보호 된 호출 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Gets or sets a value indicating whether the component is enabled.</source>
          <target state="translated">구성 요소가 활성화되는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the component is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">구성 요소를 사용하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If you are using the component on a designer in <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>, the default is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>의 디자이너에서 구성 요소를 사용하고 있으면 기본값은 <ph id="ph2">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not raise events unless you set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">설정 하지 않으면 구성 요소 이벤트를 발생 하지 것입니다 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property has been set and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">구성 요소에 지정 된 디렉터리를 보지 것입니다는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성이 설정 되어 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method allows event handlers to be invoked to respond to file changes even if this property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> 이 속성을 설정 하는 경우에 파일 변경에 응답 하도록 호출 되어야 하는 이벤트 처리기 메서드를 사용 하면 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">구성의 변경 내용을로 설정 되어 <ph id="ph1">`LastWrite`</ph> 및 <ph id="ph2">`LastAccess`</ph> 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 이 예제에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> object has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> 개체가 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The current operating system is not Microsoft Windows NT or later.</source>
          <target state="translated">현재 운영 체제가 Microsoft Windows NT 이상이 아닙니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source>The directory specified in <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> could not be found.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>에 지정된 디렉터리를 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> has not been set or is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>가 설정되지 않았거나 잘못된 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Ends the initialization of a <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> used on a form or used by another component.</source>
          <target state="translated">양식에 사용되거나 다른 구성 요소에서 사용하는 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>의 초기화를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The initialization occurs at run time.</source>
          <target state="translated">초기화는 런타임에 발생합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component used on a form or used by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 끝냅니다 폼에 사용 되거나 다른 구성 요소에서 사용 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> 메서드 초기화를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Occurs when the instance of <ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph> is unable to continue monitoring changes or when the internal buffer overflows.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>의 인스턴스가 변경을 지속적으로 모니터링 할 수 없는 경우 또는 내부 버퍼가 오버플로되는 경우 발생합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This event is raised whenever something prevents the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object from monitoring changes.</source>
          <target state="translated">이 이벤트는 것을 방지는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 개체에서 변경 사항을 모니터링 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph> event is raised.</source>
          <target state="translated">개체가 원격 디렉터리의 변경 내용을 모니터링 하 고 해당 디렉터리에 대 한 연결이 손실 된 경우 등에서 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</source>
          <target state="translated">구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용을 알려 줍니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">버퍼의 크기를 늘리면 비용이 많이 듭니다, 그리고 비에 있기 때문에 메모리를 디스크에 유지 하므로 스와핑할 수 없으므로 가능한 한 작게 버퍼를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">버퍼 오버플로 방지 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 변경 알림을 원하지 않는 필터링 할 속성입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Common file system operations might raise more than one event.</source>
          <target state="translated">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
          <target state="translated">파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 및 일부 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
          <target state="translated">여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Error">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Gets or sets the filter string used to determine what files are monitored in a directory.</source>
          <target state="translated">디렉터리에서 모니터링할 파일을 결정하는 데 사용되는 필터 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The filter string.</source>
          <target state="translated">필터 문자열입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The default is "*.<ph id="ph1">\*</ph>" (Watches all files.)</source>
          <target state="translated">기본값은 "*. <ph id="ph1">\*</ph>"(모든 파일이 조사 합니다.)</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("").</source>
          <target state="translated">모든 파일의 변경 내용을 시청 하려면 설정는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 빈 문자열 ("").</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">특정 파일을 감시 하도록 설정 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
          <target state="translated">예를 들어 MyDoc.txt 파일에서 변경 내용을 시청 하려면 설정는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 "MyDoc.txt"입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>You can also watch for changes in a certain type of file.</source>
          <target state="translated">특정 유형의 파일에서 변경 내용을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For example, to watch for changes in any text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt".</source>
          <target state="translated">예를 들어 모든 텍스트 파일에 변경 내용을 감시를 설정 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 "*.txt"입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use of multiple filters such as "<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc" is not supported.</source>
          <target state="translated">와 같은 여러 필터를 사용 하 여 "<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc" 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property can be changed after the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object has started receiving events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 이후에 속성을 변경할 수는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 개체 이벤트 수신을 시작 했습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>For more information about filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">원하지 않는 알림을 필터링 하는 방법에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> accepts wildcards for matching files, as shown in the following examples.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 다음 예제에 나와 있는 것 처럼 일치 하는 파일에 대 한 와일드 카드를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Filter string</source>
          <target state="translated">필터 문자열</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches the following files</source>
          <target state="translated">다음 파일을 감시</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.<ph id="ph1">\*</ph></source>
          <target state="translated">*.<ph id="ph1">\*</ph></target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files (default).</source>
          <target state="translated">모든 파일 (기본값)입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>An empty string ("") also watches all files.</source>
          <target state="translated">빈 문자열 ("")도 모든 파일이 조사 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*.txt</source>
          <target state="translated">*.txt</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files with a "txt" extension.</source>
          <target state="translated">"Txt" 확장명을 가진 모든 파일입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>*recipe.doc</source>
          <target state="translated">*recipe.doc</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files ending in "recipe" with a "doc" extension.</source>
          <target state="translated">"Doc" 확장명을 가진 "조리법"로 끝나는 모든 파일입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>win*.xml</source>
          <target state="translated">win*.xml</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>All files beginning with "win" with an "xml" extension.</source>
          <target state="translated">"Xml" 확장명을 가진 "win"로 시작 하는 모든 파일입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales*200?.xls</source>
          <target state="translated">Sales*200?.xls</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Matches the following:</source>
          <target state="translated">다음 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</source>
          <target state="translated">판매 년 7 월 2001.xlsSales/8 / 2002.xlsSales 년 3 월 2004.xls</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>but does not match:</source>
          <target state="translated">일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Sales Nov 1999.xls</source>
          <target state="translated">판매 년 11 월 1999.xls</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>MyReport.Doc</source>
          <target state="translated">MyReport.Doc</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Watches only MyReport.doc</source>
          <target state="translated">만 MyReport.doc를 감시합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">구성의 변경 내용을로 설정 되어 <ph id="ph1">`LastWrite`</ph> 및 <ph id="ph2">`LastAccess`</ph> 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Filter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 이 예제에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</source>
          <target state="translated">지정된 경로 내에 있는 하위 디렉터리를 모니터링해야 하는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if you want to monitor subdirectories; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">하위 디렉터리를 모니터링하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> to <ph id="ph2">`true`</ph> when you want to watch for change notifications for files and directories contained within the directory specified through the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, and its subdirectories.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 한 파일 및 지정 된 디렉터리 내에 포함 된 디렉터리에 대 한 변경 알림을 조사 하려는 경우는 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성 및 그 하위 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property to <ph id="ph2">`false`</ph> helps reduce the number of notifications sent to the internal buffer.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph> 내부 버퍼에 보낸 알림 수를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>When <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is recursive through the entire sub tree, not just the immediate child directories.</source>
          <target state="translated">때 <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 직계 자식 디렉터리 뿐 아니라 전체 하위 트리를 통해 재귀적입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>The relative path to a file or directory within the sub tree returns in the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on changes you are watching for.</source>
          <target state="translated">상대 경로를 파일 또는 디렉터리 하위 트리 내에 반환는 <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph> 속성 <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>에 대 한 감시 하는 변경 내용에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>You can get the fully qualified path from the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on the changes you are watching for.</source>
          <target state="translated">정규화 된 경로 가져올 수 있습니다는 <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph> 속성 <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>에 대 한 감시 하는 변경 내용에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
          <source>If a directory is created in the sub tree of the directory you are watching, and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is <ph id="ph2">`true`</ph>, that directory will automatically be watched.</source>
          <target state="translated">디렉터리를 감시 하는 디렉터리의 하위 트리를 만든 경우 및 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, 해당 디렉터리 자동으로 조사 됩니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Gets or sets the size (in bytes) of the internal buffer.</source>
          <target state="translated">내부 버퍼의 크기(바이트)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The internal buffer size in bytes.</source>
          <target state="translated">내부 버퍼의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The default is 8192 (8 KB).</source>
          <target state="translated">기본값은 8192(8KB)입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</source>
          <target state="translated">4KB로 또는 그에 버퍼를 설정할 수 있지만 64 KB를 초과 해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If you try to set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property to less than 4096 bytes, your value is discarded and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is set to 4096 bytes.</source>
          <target state="translated">설정 하려는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성에 보다 작은 4096 바이트를 사용자가 값은 무시 됩니다 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 4096 바이트 속성입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>For best performance, use a multiple of 4 KB on Intel-based computers.</source>
          <target state="translated">최상의 성능을 위해 Intel 기반 컴퓨터에서 4KB의 배수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</source>
          <target state="translated">구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용이 구성 요소에 알립니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Each event can use up to 16 bytes of memory, not including the file name.</source>
          <target state="translated">각 이벤트의 메모리를 파일 이름을 제외한 16 바이트까지 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
          <target state="translated">짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
          <target state="translated">이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>Increasing the size of the buffer can prevent missing file system change events.</source>
          <target state="translated">버퍼의 크기 증가 방지할 수 없습니다. 파일 시스템 변경 이벤트.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
          <target state="translated">그러나 버퍼 크기 증가 비용이 많이 들며, 비페이징 메모리는 디스크에 따라서 버퍼를 가능한 한 작게 유지 스와핑할 수 없으므로 사용 하므로.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.InternalBufferSize">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
          <target state="translated">버퍼 오버플로 방지 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 변경 알림을 원하지 않는 필터링 할 속성입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Gets or sets the type of changes to watch for.</source>
          <target state="translated">조사할 변경 내용 형식을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The default is the bitwise OR combination of <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>, <ph id="ph2">&lt;see langword="FileName" /&gt;</ph>, and <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="LastWrite" /&gt;</ph>, <ph id="ph2">&lt;see langword="FileName" /&gt;</ph>, <ph id="ph3">&lt;see langword="DirectoryName" /&gt;</ph>의 비트 OR 조합입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>You can combine the members of the <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph> enumeration to watch for more than one type of change at a time.</source>
          <target state="translated">멤버를 결합할 수는 <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph> 변경 한 번에 둘 이상의 유형을 조사 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For example, you can watch for changes in size of a file, and for changes in the <ph id="ph1">`LastWrite`</ph> time.</source>
          <target state="translated">예를 들어 파일의 크기 변경에 대 한과 변경에 대 한를 살펴볼 수 있습니다는 <ph id="ph1">`LastWrite`</ph> 시간입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This raises an event anytime there is a change in file or folder size, or a change in the <ph id="ph1">`LastWrite`</ph> time of the file or folder.</source>
          <target state="translated">이 이벤트를 발생 시키는 변경 되거나 파일 또는 폴더 크기가 변경 되는 <ph id="ph1">`LastWrite`</ph> 파일 또는 폴더의 시간입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>This is one way to filter out unwanted notifications.</source>
          <target state="translated">이것이 필터링 원하지 않는 알림의 수입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
          <target state="translated">원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">구성의 변경 내용을로 설정 되어 <ph id="ph1">`LastWrite`</ph> 및 <ph id="ph2">`LastAccess`</ph> 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 이 예제에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value is not a valid bitwise OR combination of the <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> values.</source>
          <target state="translated">이 값이 <ph id="ph1">&lt;see cref="T:System.IO.NotifyFilters" /&gt;</ph> 값의 유효한 비트 OR 조합이 아닌 경우</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.NotifyFilter">
          <source>The value that is being set is not valid.</source>
          <target state="translated">설정된 값이 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Changed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 크기, 시스템 속성, 마지막으로 쓴 시간, 마지막 액세스 시간 또는 파일이 나 디렉터리의에서 모니터링 되는 디렉터리의 보안 권한을에 변경 내용이 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to restrict the number of events raised when the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is handled.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> 될 때 발생 하는 이벤트 수를 제한 하는 속성은 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 파일을 작성 하는 즉시 발생 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 이벤트가 발생 바로 뒤에 하나 이상의 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Created" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> is called when a file or directory is created in the directory being monitored.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 모니터링 되는 디렉터리에서 파일 또는 디렉터리를 만들 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">발생 한 파일 또는 디렉터리를 복사 하면는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">두 인스턴스를 만드는 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" and paste it into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">"내 문서"에서 파일을 복사 하 고 "Your Documents"에 붙여는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">복사와 달리 두 개의 이벤트를 발생 파일이 나 디렉터리를 이동 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised in FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised in FileSystemWatcher1.</source>
          <target state="translated">이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2에서 이벤트가 발생할 때 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1에서 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 파일을 작성 하는 즉시 발생 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
          <target state="translated">파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> 이벤트가 발생 바로 뒤에 하나 이상의 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.FileSystemEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Deleted" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> is called when a file or directory, within the directory being monitored, is deleted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> 파일 또는 디렉터리를 모니터링 하는 디렉터리 내에서 삭제 될 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
          <target state="translated">복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
          <target state="translated">발생 한 파일 또는 디렉터리를 복사 하면는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
          <target state="translated">다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">두 인스턴스를 만드는 예를 들어 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
          <target state="translated">FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
          <target state="translated">"Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Unlike copying, moving a file or directory raises two events.</source>
          <target state="translated">복사와 달리 두 개의 이벤트를 발생 파일이 나 디렉터리를 이동 합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
          <target state="translated">이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> FileSystemWatcher2 여 발생할 때 이벤트 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.ErrorEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Error" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> is called when an error occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> 오류가 발생할 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.RenamedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.IO.FileSystemWatcher.Renamed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> is called when a file or directory within the directory being monitored is renamed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> 파일 또는 디렉터리는 모니터링 중인 디렉터리 내에서 이름을 바꿀 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Its <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> 인수 변경, 이전 및 새 경로 및 이전 및 새 이름을 유형과 같은 이름 바꾸기 작업에 대 한 정보를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Note that its <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 않습니다 가져오기에 일치 하지 않는 운영 체제에서 이전 및 새 이름 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Gets or sets the path of the directory to watch.</source>
          <target state="translated">조사할 디렉터리의 경로를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The path to monitor.</source>
          <target state="translated">모니터링할 경로입니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The default is an empty string ("").</source>
          <target state="translated">기본값은 빈 문자열("")입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This is a fully qualified path to a directory.</source>
          <target state="translated">디렉터리에 정규화 된 경로입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>,이 디렉터리는 시스템 변경 내용을 감시 하는 루트, 그렇지 않으면 조사 하는 유일한 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to the fully qualified, correct directory, and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
          <target state="translated">특정 파일을 감시 하도록 설정 된 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성을 정규화 하 고 올바른 디렉터리 및 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> 속성을 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property supports Universal Naming Convention (UNC) paths.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성 범용 명명 규칙 (UNC) 경로 지원 합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This property must be set before the component can watch for changes.</source>
          <target state="translated">이 속성은 변경 내용에 대 한 구성 요소를 조사할 수 전에 설정 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a directory is renamed, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> automatically reattaches itself to the newly renamed item.</source>
          <target state="translated">디렉터리의 이름이 변경 되는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 자동으로 자체 이름을 새로 바꾼된 항목에 다시 연결 합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>For example, if you set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</source>
          <target state="translated">예를 들어, 설정 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성을 "C:\My Documents" 및 "C:\Your Documents" 디렉터리를 수동으로 바꿀, 구성 요소 이름을 새로 변경한 디렉터리 변경 알림을 수신 대기를 계속 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>However, when you ask for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, it contains the old path.</source>
          <target state="translated">그러나 요청 하면는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성을 이전 경로 포함 합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</source>
          <target state="translated">조사할 디렉터리 구성 요소를 결정 하기 때문에 이런 디렉터리의 이름이 아니라 핸들에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Renaming does not affect the handle.</source>
          <target state="translated">이름 바꾸기 핸들 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>So, if you destroy the component, and then recreate it without updating the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, your application will fail because the directory no longer exists.</source>
          <target state="translated">따라서 구성 요소를 삭제 한 다음 업데이트 하지 않고 다시 작성 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> 속성을 응용 프로그램 디렉터리에서 더 이상 존재 하기 때문에 실패 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch the directory specified at run time.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 런타임에 지정 된 디렉터리를 조사 하 합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The component is set to watch for changes in <ph id="ph1">`LastWrite`</ph> and <ph id="ph2">`LastAccess`</ph> time, the creation, deletion, or renaming of text files in the directory.</source>
          <target state="translated">구성의 변경 내용을로 설정 되어 <ph id="ph1">`LastWrite`</ph> 및 <ph id="ph2">`LastAccess`</ph> 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>If a file is changed, created, or deleted, the path to the file prints to the console.</source>
          <target state="translated">파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>When a file is renamed, the old and new paths print to the console.</source>
          <target state="translated">파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Path">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces for this example.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO&gt;</ph> 이 예제에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path does not exist or could not be found.</source>
          <target state="translated">지정된 경로가 없거나 찾지 못한 경우</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains wildcard characters.</source>
          <target state="translated">지정된 경로에 와일드카드 문자가 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Path">
          <source>The specified path contains invalid path characters.</source>
          <target state="translated">지정된 경로에 잘못된 경로 문자가 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph> is renamed.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="P:System.IO.FileSystemWatcher.Path" /&gt;</ph>에서 파일이나 디렉터리의 이름이 바뀔 경우 발생합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">`Renamed`</ph> event is an <ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph> delegate that has the following signature:</source>
          <target state="translated"><ph id="ph1">`Renamed`</ph> 이벤트는는 <ph id="ph2">&lt;xref:System.IO.RenamedEventHandler&gt;</ph> 대리자에는 다음 서명이입니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The <ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> object provides information about the renaming operation, such as the type of the rename (the <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph> property), the old and new name, and the old and new path.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.RenamedEventArgs&gt;</ph> 예: 이름 바꾸기의 형식 이름 바꾸기 작업에 대 한 정보를 제공 하는 개체 (의 <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs.ChangeType&gt;</ph> 속성), 이전 및 새 이름 및 이전 구문과 새 경로입니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Note that the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> property may be null for renamed events if the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not get matching old and new name events from the operating system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name&gt;</ph> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 않습니다 가져오기에 일치 하지 않는 운영 체제에서 이전 및 새 이름 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Renaming the directory you are watching will not raise a notification.</source>
          <target state="translated">감시 하는 디렉터리의 이름을 바꾸지 알림이 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>Notifications are only raised for entries inside the directory you are watching.</source>
          <target state="translated">알림은 감시 하는 디렉터리 내의 항목에 대해서만 발생 합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.IO.FileSystemWatcher.Renamed">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event to display the file path to the console whenever the watched file is renamed.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> 이벤트를 감시 파일 이름을 바꿀 때마다 콘솔에 파일 경로 표시 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.IO.FileSystemWatcher" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
          <target state="translated">사이트 바인딩는 <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> 에 <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph> 서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated">디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> that represents the object used to marshal the event handler calls issued as a result of a directory change.</source>
          <target state="translated">디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods handling the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are called on a thread from the system thread pool.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>를 처리 하는 메서드가 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> 시스템 스레드 풀의 스레드라도에서 이벤트를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For more information on system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">시스템 스레드 풀에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are handled by a visual Windows Forms component, such as a <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or may result in an exception.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> 이벤트가 같은 visual Windows Forms 구성 요소에 의해 처리 되는 <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>, 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소를 액세스 하거나 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>Avoid this by setting <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the methods that handle the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events to be called on the same thread on which the component was created.</source>
          <target state="translated">설정 하 여이 문제를 방지 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 처리 하는 메서드 때문에 Windows Forms 구성 요소에는 <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> 구성 요소를 만든 동일한 스레드에서 호출 되는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is used inside <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> in a Windows Forms designer, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> automatically sets to the control that contains the <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 내에서 사용 되 <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> Windows Forms 디자이너에서 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 포함 하는 컨트롤에 자동으로 설정 된 <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.FileSystemWatcher.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on a designer for Form1 (which inherits from <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>) the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is set to the instance of Form1.</source>
          <target state="translated">예를 들어, 배치 하는 경우는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> form1 디자이너에서 (에서 상속 되 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>)는 <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> 속성 <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> Form1의 인스턴스로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="T:System.IO.FileSystemWatcher">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred.</source>
          <target state="translated">발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">조사할 <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</source>
          <target state="translated">모니터링할 변경 내용 형식이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated">발생한 변경 내용에 대한 특정 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method waits indefinitely until the first change occurs and then returns.</source>
          <target state="translated">이 메서드는 발생 하 고 다음을 반환 하는 첫 번째 변경 사항을 때까지 무기한 기다립니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This is the same as using <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> with the <ph id="ph2">`timeout`</ph> parameter set to -1.</source>
          <target state="translated">이 사용 하 여 동일 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> 와 <ph id="ph2">`timeout`</ph> 매개 변수가-1로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">일부 시스템에서 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">"LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFi ~ 합니다. Lon "입니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph> to watch for.</source>
          <target state="translated">조사할 <ph id="ph1">&lt;see cref="T:System.IO.WatcherChangeTypes" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>The time (in milliseconds) to wait before timing out.</source>
          <target state="translated">시간 제한 범위 내에서 대기할 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</source>
          <target state="translated">모니터링할 변경 내용 형식과 제한 시간 범위 내에서 대기할 시간(밀리초)이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph> that contains specific information on the change that occurred.</source>
          <target state="translated">발생한 변경 내용에 대한 특정 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.WaitForChangedResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method waits until a change occurs or it has timed out. A value of -1 for the <ph id="ph1">`timeout`</ph> parameter means wait indefinitely.</source>
          <target state="translated">이 메서드는 변경이 발생 하거나 시간이 초과 될 때까지 대기 합니다. 값이-1은 <ph id="ph1">`timeout`</ph> 매개 변수는 무기한 대기를 의미 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
          <target state="translated">일부 시스템에서 <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
          <target state="translated">"LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFi ~ 합니다. Lon "입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>