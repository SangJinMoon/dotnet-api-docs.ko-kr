<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BinaryReader.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac522a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22a75f9b356ec6c35a6b7fdfaaf1447ea2b69f02</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads primitive data types as binary values in a specific encoding.</source>
          <target state="translated">기본 데이터 형식을 특정 인코딩의 이진 값으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class provides methods that simplify reading primitive data types from a stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 클래스 기본 데이터 형식을 스트림에서 읽기를 단순화 하는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph> method to read the next byte as a Boolean value and advance the current position in the stream by one byte.</source>
          <target state="translated">예를 들어, 사용할 수는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBoolean%2A&gt;</ph> 메서드를 부울 값으로 다음 바이트를 읽고가 1 바이트 스트림 내의 현재 위치를 이동 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The class includes read methods that support different data types.</source>
          <target state="translated">클래스는 서로 다른 데이터 형식을 지 원하는 읽기 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you create a new instance of the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> object.</source>
          <target state="translated">새 인스턴스를 만들 때는 <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 클래스를 삭제 한 후 열어 스트림을 두려면 것인지와에서 읽기 스트림을 제공 하 고 필요에 따라는 인코딩 유형을 지정는 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>If you do not specify an encoding type, UTF-8 is used.</source>
          <target state="translated">인코딩 유형을 지정 하지 않으면 u t F-8이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BinaryReader">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The input stream.</source>
          <target state="translated">입력 스트림입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and using UTF-8 encoding.</source>
          <target state="translated">지정된 스트림을 기반으로 UTF-8 인코딩을 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">스트림이 읽기를 지원하지 않거나 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이거나 이미 닫힌 경우</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The input stream.</source>
          <target state="translated">입력 스트림입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use.</source>
          <target state="translated">사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding.</source>
          <target state="translated">지정된 스트림과 문자 인코딩을 기반으로 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">스트림이 읽기를 지원하지 않거나 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이거나 이미 닫힌 경우</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The input stream.</source>
          <target state="translated">입력 스트림입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use.</source>
          <target state="translated">사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to leave the stream open after the <ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> object is disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 개체를 삭제한 후 스트림을 열어 두려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 닫으려면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class based on the specified stream and character encoding, and optionally leaves the stream open.</source>
          <target state="translated">지정된 스트림과 문자 인코딩을 기반으로 하는 <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 스트림을 선택적으로 연 상태로 둡니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream does not support reading, is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, or is already closed.</source>
          <target state="translated">스트림이 읽기를 지원하지 않거나 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이거나 이미 닫힌 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> or <ph id="ph2">&lt;paramref name="input" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="encoding" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="input" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Exposes access to the underlying stream of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph>의 내부 스트림에 대한 액세스를 노출합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The underlying stream associated with the <ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BinaryReader" /&gt;</ph>와 관련된 내부 스트림입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>Using the underlying stream while reading or while using the <ph id="ph1">`BinaryReader`</ph> can cause data loss and corruption.</source>
          <target state="translated">읽는 동안 또는 사용 하는 동안 스트림 내부를 사용 하 여 <ph id="ph1">`BinaryReader`</ph> 데이터가 손실 되거나 손상 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.</source>
          <target state="translated">예를 들어 같은 바이트를 두 번 이상 읽을 바이트 건너뛸 수 또는 문자 읽기 예측 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 읽고 쓰는 방법을 보여 줍니다. <ph id="ph1">`Double`</ph> 메모리를 사용 하 여 데이터를는 <ph id="ph2">`BinaryReader`</ph> 및 <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> 클래스의 맨 위에 <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BinaryReader.BaseStream">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 읽기 및 쓰기만 <ph id="ph2">`Byte`</ph> 데이터입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Close">
          <source>Closes the current reader and the underlying stream.</source>
          <target state="translated">현재 뷰어 및 기본 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph> method passing a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">이 구현 <ph id="ph1">`Close`</ph> 호출은 <ph id="ph2">&lt;xref:System.IO.BinaryReader.Dispose%2A&gt;</ph> 전달 메서드는 <ph id="ph3">`true`</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 또는 <ph id="ph2">`Close`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 사용을 마치면 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 메서드를 사용하면 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>를 사용할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> was occupying.</source>
          <target state="translated">호출한 후 <ph id="ph1">`Dispose`</ph>에 대 한 모든 참조를 해제 해야는 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> 차지한 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Dispose 메서드를 구현<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>에 대한 마지막 참조를 해제하기 전에 반드시 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph>를 호출하십시오.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이렇게 하지 않으면 가비지 수집기가 <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 개체의 <ph id="ph2">`Finalize`</ph> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.BinaryReader" /&gt;</ph> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method is called by <ph id="ph1">`Dispose`</ph> and <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">`Dispose`</ph> 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">기본적으로이 메서드는 다음과 같이 지정 됩니다.는 <ph id="ph1">`disposing`</ph> 매개 변수로 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 지정 된 <ph id="ph2">`disposing`</ph> 매개 변수로 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 재정의할 때 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about how to implement this method, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">이 메서드를 구현 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The number of bytes to be read.</source>
          <target state="translated">읽을 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Fills the internal buffer with the specified number of bytes read from the stream.</source>
          <target state="translated">스트림에서 읽은 지정된 바이트 수로 내부 버퍼를 채웁니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The internal buffer size is the larger value between 16 and the value returned by <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> for the specified encoding.</source>
          <target state="translated">내부 버퍼 크기는 16에서 반환 되는 값 사이의 보다 큰 값 <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> 대 한 인코딩을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>The end of the stream is reached before <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> could be read.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph>를 읽기 전에 스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
          <source>Requested <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is larger than the internal buffer size.</source>
          <target state="translated">요청된 <ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph>가 내부 버퍼 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>Returns the next available character and does not advance the byte or character position.</source>
          <target state="translated">사용할 수 있는 다음 문자를 반환하고 바이트 또는 문자 위치를 앞으로 이동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The next available character, or -1 if no more characters are available or the stream does not support seeking.</source>
          <target state="translated">사용할 수 있는 다음 문자를 반환하고 사용할 수 있는 문자가 더 이상 없거나 스트림에서 검색을 지원하지 않을 경우 -1을 반환합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>If surrogate characters can be expected in the stream use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method, then set the stream back to the original position.</source>
          <target state="translated">서로게이트 문자 스트림 사용 하 여에서 예상할 수 하는 경우는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> 메서드를 원래 위치로 복원 스트림을 다음으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.PeekChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.PeekChar">
          <source>The current character cannot be decoded into the internal character buffer by using the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> selected for the stream.</source>
          <target state="translated">현재 문자는 스트림에 선택한 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>을 사용하여 내부 문자 버퍼링으로 디코딩할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.IO.BinaryReader">
          <source>Reads bytes from the underlying stream and advances the current position of the stream.</source>
          <target state="translated">내부 스트림에서 바이트를 읽고 스트림의 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">내부 스트림에서 문자를 읽고 사용된 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph>과 스트림에서 읽어오는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The next character from the input stream, or -1 if no characters are currently available.</source>
          <target state="translated">입력 스트림의 다음 문자를 반환하고 현재 사용할 수 있는 문자가 없을 경우 -1을 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">다음 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 경로 문자는 잘못 된 파일의 목록이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">모든 잘못 된 파일 경로 문자 목록을 표시 하는 코드가 시도 하지만 모든 문자가 문자 집합에서 벗어납니다 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">잘못 된 문자의 목록을 시스템에 따라 달라질 수 있으므로이 코드에 대 한 출력도 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">데이터를 읽어올 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">버퍼로 읽어오기를 시작할 버퍼의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">읽을 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</source>
          <target state="translated">바이트 배열의 지정된 지점부터 스트림에서 지정된 바이트 수만큼 읽습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read into <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>로 읽어 온 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">이 바이트 수는 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기 작업에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write binary data by using memory as a backing store.</source>
          <target state="translated">다음 예제에서는 이진 데이터를 백업 저장소로 메모리를 사용 하 여 작성 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>It displays a message to the console that indicates whether the data was written correctly.</source>
          <target state="translated">데이터를 올바르게 작성 하는지 여부를 나타내는 콘솔에 메시지를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This example reads the contents of a file and displays each byte's numeric value in 16-column format.</source>
          <target state="translated">이 예제에서는 파일의 내용을 읽고 각 바이트의 숫자 값을 16 열 형식으로 표시 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The end of the file that is being read is detected when the <ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph> method returns zero bytes.</source>
          <target state="translated">읽고 있는 파일의 끝에서 검색 될 때는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.Read%2A&gt;</ph> 메서드 0 바이트를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 빼면 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">읽을 수 있도록 디코딩된 문자의 수는 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer to read data into.</source>
          <target state="translated">데이터를 읽어올 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The starting point in the buffer at which to begin reading into the buffer.</source>
          <target state="translated">버퍼로 읽어오기를 시작할 버퍼의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">읽을 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Reads the specified number of characters from the stream, starting from a specified point in the character array.</source>
          <target state="translated">문자 배열의 지정된 지점부터 스트림에서 지정된 문자 수만큼 읽습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The total number of characters read into the buffer.</source>
          <target state="translated">버퍼로 읽어온 총 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</source>
          <target state="translated">이 문자 수는 문자가 현재 충분하지 않은 경우 요청된 문자 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기 작업에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The following example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">다음 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This example displays a list of invalid file path characters to the console.</source>
          <target state="translated">이 예제에서는 콘솔에 경로 문자는 잘못 된 파일의 목록이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</source>
          <target state="translated">모든 잘못 된 파일 경로 문자 목록을 표시 하는 코드가 시도 하지만 모든 문자가 문자 집합에서 벗어납니다 됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Because the list of invalid characters can vary based on the system, output for this code may also vary.</source>
          <target state="translated">잘못 된 문자의 목록을 시스템에 따라 달라질 수 있으므로이 코드에 대 한 출력도 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 빼면 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">읽을 수 있도록 디코딩된 문자의 수는 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>Reads in a 32-bit integer in compressed format.</source>
          <target state="translated">압축 형식의 32비트 정수를 읽습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>A 32-bit integer in compressed format.</source>
          <target state="translated">압축 형식의 32비트 정수입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>If the integer will fit in seven bits, the integer takes only one byte of space.</source>
          <target state="translated">7 비트에서 정수 채 맞는 경우 정수는 1 바이트의 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The integer is expected to have been written through <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">정수는를 통해 기록 된 해야 <ph id="ph1">&lt;xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.Read7BitEncodedInt">
          <source>The stream is corrupted.</source>
          <target state="translated">스트림이 손상되었습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>Reads a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">현재 스트림에서 <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> 값을 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the byte is nonzero; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">바이트가 0이 아니면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBoolean">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Reads the next byte from the current stream and advances the current position of the stream by one byte.</source>
          <target state="translated">현재 스트림에서 다음 바이트를 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The next byte read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 다음 바이트입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">데이터 서식 충돌 때문에이 메서드를 사용 하 여 다음 인코딩을 사용 하 여 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">다음 코드 예제에서는 메모리를 사용 하 여 백업 저장소로 이진 데이터를 작성 한 다음 데이터 올바르게 작성 되었다는 확인 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadByte">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of bytes to read.</source>
          <target state="translated">읽을 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This value must be 0 or a non-negative number or an exception will occur.</source>
          <target state="translated">이 값은 0 또는 음수가 아닌 숫자여야 합니다. 그렇지 않으면 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</source>
          <target state="translated">현재 스트림에서 지정된 바이트 수만큼 바이트 배열로 읽어 오고 현재 위치를 해당 바이트 수만큼 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>A byte array containing data read from the underlying stream.</source>
          <target state="translated">내부 스트림에서 읽은 데이터를 포함하는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This might be less than the number of bytes requested if the end of the stream is reached.</source>
          <target state="translated">이 바이트 배열은 스트림의 끝에 도달할 경우 요청된 바이트 수보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기 작업에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</source>
          <target state="translated">다음 코드 예제에서는 메모리를 사용 하 여 백업 저장소로 이진 데이터를 작성 한 다음 데이터 올바르게 작성 되었다는 확인 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This example reads the contents of a file and displays it to the console as dump text.</source>
          <target state="translated">이 예제에서는 파일의 내용을 읽고 덤프 텍스트로 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The end of the file that is being read is detected when the length of the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array returned from <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> is zero.</source>
          <target state="translated">읽고 있는 파일의 끝에서 검색 될 때의 길이 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 에서 반환 된 배열 <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> 0.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">읽을 수 있도록 디코딩된 문자의 수는 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Reads the next character from the current stream and advances the current position of the stream in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">현재 스트림에서 다음 문자를 읽고 사용된 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph>과 스트림에서 읽어오는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A character read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 문자입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> 예외가 스트림의 서로게이트 문자를 읽을 하려고 하는 메서드는 발생 하 고 스트림 내의 위치 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The position is restored to the original location before <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected.</source>
          <target state="translated">위치 하기 전에 원래 위치에 복원 됩니다 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChar%2A&gt;</ph> 경우 호출 된 스트림을 검색할 수 있는지; 그러나 스트림이 검색할 수 없는 경우 위치 수정 되지는 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>If surrogate characters can be expected in the stream, use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method instead.</source>
          <target state="translated">서로게이트 문자 스트림이 나올 수를 사용 하 여는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> 메서드 대신 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>Because of data formatting conflicts, using this method with the following encodings is not recommended:</source>
          <target state="translated">데이터 서식 충돌 때문에이 메서드를 사용 하 여 다음 인코딩을 사용 하 여 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISO-2022-JP</source>
          <target state="translated">ISO-2022-JP</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>ISCII</source>
          <target state="translated">ISCII</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">다음 코드 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChar">
          <source>A surrogate character was read.</source>
          <target state="translated">서로게이트 문자를 읽은 경우</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of characters to read.</source>
          <target state="translated">읽을 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph> used and the specific character being read from the stream.</source>
          <target state="translated">현재 스트림에서 지정된 문자 수만큼 읽어 문자 배열로 데이터를 반환하고, 사용된 <ph id="ph1">&lt;see langword="Encoding" /&gt;</ph>과 스트림에서 읽어 오는 특정 문자의 길이만큼 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>A character array containing data read from the underlying stream.</source>
          <target state="translated">내부 스트림에서 읽은 데이터를 포함하는 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This might be less than the number of characters requested if the end of the stream is reached.</source>
          <target state="translated">이 문자 배열은 스트림의 끝에 도달할 경우 요청된 문자 수보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기 작업에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>When reading from network streams, in some rare cases, the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method might read an extra character from the stream if the <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> was constructed with Unicode encoding.</source>
          <target state="translated">일부 드문 경우에서 네트워크 스트림에서 읽을 때의 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> 경우 메서드는 스트림에서 의도 하지 않은 문자가 읽을 수는 <ph id="ph2">&lt;xref:System.IO.BinaryReader&gt;</ph> 유니코드를 사용 하 여 생성 된 인코딩.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>If this occurs, you can use the <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> method to read a fixed-length byte array, and then pass that array to the <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> method.</source>
          <target state="translated">이 문제가 발생 하는 경우 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadBytes%2A&gt;</ph> 고정 길이 바이트 배열에 읽고 후 해당 배열을 전달 메서드는 <ph id="ph2">&lt;xref:System.IO.BinaryReader.ReadChars%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">다음 코드 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The number of decoded characters to read is greater than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">읽을 수 있도록 디코딩된 문자의 수는 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</source>
          <target state="translated">유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadChars(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</source>
          <target state="translated">현재 스트림에서 10진 값을 읽고 스트림의 현재 위치를 16바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>A decimal value read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 10진 값입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDecimal">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">현재 스트림에서 8바이트 부동 소수점 값을 읽고 스트림의 현재 위치를 8바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An 8-byte floating point value read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 8바이트 부동 소수점 값입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The following code example shows how to read and write <ph id="ph1">`Double`</ph> data to memory by using the <ph id="ph2">`BinaryReader`</ph> and <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> classes on top of the <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 읽고 쓰는 방법을 보여 줍니다. <ph id="ph1">`Double`</ph> 메모리를 사용 하 여 데이터를는 <ph id="ph2">`BinaryReader`</ph> 및 <ph id="ph3">&lt;xref:System.IO.BinaryWriter&gt;</ph> 클래스의 맨 위에 <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadDouble">
          <source><ph id="ph1">`MemoryStream`</ph> only reads and writes <ph id="ph2">`Byte`</ph> data.</source>
          <target state="translated"><ph id="ph1">`MemoryStream`</ph> 읽기 및 쓰기만 <ph id="ph2">`Byte`</ph> 데이터입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadDouble">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</source>
          <target state="translated">현재 스트림에서 부호 있는 2바이트 정수를 읽고 스트림의 현재 위치를 2바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>A 2-byte signed integer read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 있는 2바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">현재 스트림에서 부호 있는 4바이트 정수를 읽고 스트림의 현재 위치를 4바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>A 4-byte signed integer read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 있는 4바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</source>
          <target state="translated">현재 스트림에서 부호 있는 8바이트 정수를 읽고 스트림의 현재 위치를 8바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An 8-byte signed integer read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 있는 8바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>Reads a signed byte from this stream and advances the current position of the stream by one byte.</source>
          <target state="translated">현재 스트림에서 부호 있는 바이트를 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>A signed byte read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 있는 바이트입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSByte">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</source>
          <target state="translated">현재 스트림에서 4바이트 부동 소수점 값을 읽고 스트림의 현재 위치를 4바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>A 4-byte floating point value read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 4바이트 부동 소수점 값입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadSingle">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>Reads a string from the current stream.</source>
          <target state="translated">현재 스트림에서 문자열을 읽습니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string is prefixed with the length, encoded as an integer seven bits at a time.</source>
          <target state="translated">한 번에 7비트 정수로 인코드된 길이는 해당 문자열의 접두사로 붙습니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The string being read.</source>
          <target state="translated">읽어 오는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadString">
          <source>The following code example demonstrates how to store and retrieve application settings in a file.</source>
          <target state="translated">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadString">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</source>
          <target state="translated">little-endian 인코딩을 사용하여 현재 스트림에서 부호 없는 2바이트 정수를 읽고 스트림의 위치를 2바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>A 2-byte unsigned integer read from this stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 없는 2바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt16">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</source>
          <target state="translated">현재 스트림에서 부호 없는 4바이트 정수를 읽고 스트림의 위치를 4바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>A 4-byte unsigned integer read from this stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 없는 4바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt32">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</source>
          <target state="translated">현재 스트림에서 부호 없는 8바이트 정수를 읽고 스트림의 위치를 8바이트 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An 8-byte unsigned integer read from this stream.</source>
          <target state="translated">현재 스트림에서 읽은 부호 없는 8바이트 정수입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> does not restore the file position after an unsuccessful read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 읽기에 실패 한 후에 파일 위치를 복원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source><ph id="ph1">`BinaryReader`</ph> reads this data type in little-endian format.</source>
          <target state="translated"><ph id="ph1">`BinaryReader`</ph> 이 데이터 형식은 little endian 형식으로 읽습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
          <target state="translated">공통적인 I/O 작업의 목록에 대 한 참조 <bpt id="p1">[</bpt>공통적인 I/O 작업<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The end of the stream is reached.</source>
          <target state="translated">스트림의 끝에 도달한 경우</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.IO.BinaryReader.ReadUInt64">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>