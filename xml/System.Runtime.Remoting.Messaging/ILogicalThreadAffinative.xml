<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e64c429592926fe226b56b103440b1340a84a732" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39801794" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e1681-101">
        <see cref="T:System.AppDomain" />의 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />에서 전파되는 개체를 표시합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1681-101">Marks an object that can propagate outside of an <see cref="T:System.AppDomain" /> in a <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1681-102">때 원격 메서드 호출에서 다른 개체에 <xref:System.AppDomain>, 현재 <xref:System.Runtime.Remoting.Messaging.CallContext> 클래스 생성을 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 원격 위치에 대 한 호출과 함께 전송 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1681-102">When a remote method call is made to an object in another <xref:System.AppDomain>, the current <xref:System.Runtime.Remoting.Messaging.CallContext> class generates a <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> that travels along with the call to the remote location.</span></span> <span data-ttu-id="e1681-103">개체만 해당 노출 합니다 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 인터페이스와 저장 됩니다 합니다 <xref:System.Runtime.Remoting.Messaging.CallContext> 전파 됩니다는 <xref:System.AppDomain>.</span><span class="sxs-lookup"><span data-stu-id="e1681-103">Only objects that expose the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface and are stored in the <xref:System.Runtime.Remoting.Messaging.CallContext> are propagated outside the <xref:System.AppDomain>.</span></span> <span data-ttu-id="e1681-104">이 인터페이스를 지원 하지 않는 개체에 전송 되지 않은 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 원격 메서드 호출을 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="e1681-104">Objects that do not support this interface are not transmitted in <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> instances with remote method calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1681-105">다음 코드 예제에서는 합니다 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 전송할 인터페이스 [Principal 개체 및 Identity 개체](~/docs/standard/security/principal-and-identity-objects.md) id에 대 한 원격 위치에.</span><span class="sxs-lookup"><span data-stu-id="e1681-105">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface to transmit [Principal and Identity Objects](~/docs/standard/security/principal-and-identity-objects.md) to a remote location for identification.</span></span> <span data-ttu-id="e1681-106">에 대 한 코드를 보려면 합니다 `HelloServiceClass` 샘플에서 사용 되는 클래스에 대 한 예제를 참조 하십시오는 <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1681-106">To view the code for the `HelloServiceClass` class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method.</span></span> <span data-ttu-id="e1681-107">이 샘플에서 사용 하는 서버 클래스에 대 한 코드를 보려면 예제를 참조 하세요.를 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e1681-107">To view the code for the server class used in this sample, see example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.</span></span> <span data-ttu-id="e1681-108">샘플에 사용 되는 클라이언트 클래스에 대 한 코드를 보려면 참조에 대 한 예제는 <xref:System.Runtime.Remoting.Messaging.CallContext> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e1681-108">To view the code for the client class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext> class.</span></span>  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>