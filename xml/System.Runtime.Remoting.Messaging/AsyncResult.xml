<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncResult.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d8dcfaa989a8bc907f295feb15394366e5aa96ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8dcfaa989a8bc907f295feb15394366e5aa96ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">대리자가 수행하는 비동기 작업의 결과를 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 클래스 대리자를 사용 하 여 비동기 메서드 호출과 함께 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the delegate's <ph id="ph2">`BeginInvoke`</ph> method can be cast to an <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 대리자의 반환 <ph id="ph2">`BeginInvoke`</ph> 메서드도 캐스팅 될 수는 <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> has the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> 대리자를 보유 하는 속성 개체는 비동기 호출이 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`BeginInvoke`</ph> 대리자를 사용 하 여 비동기 호출을 참조 하 고 <bpt id="p1">[</bpt>비동기 프로그래밍를 사용 하 여 대리자<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> 가져올 속성은 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, 대리자에 대 한 비동기 호출 대기 하는 방법과 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">비동기 호출이 완료되면 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 은 신호를 받으며 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드를 호출하여 대기할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">이 예제에서는 두 개의 클래스를 비동기적으로 호출 되는 메서드가 포함 된 클래스가 구성 되어 있으며 포함 하는 클래스는 <ph id="ph1">`Main`</ph> 호출을 수행 하는 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">자세한 내용 및 더 많은 대리자를 사용 하 여 메서드를 비동기적으로 호출의 예에 대 한 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">비동기 호출이 호출된 대리자 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">비동기 호출이 호출된 대리자 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> 속성이 사용자 정의 대리자의 실제 클래스를 캐스팅 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">예를 들어 비동기 호출을 수행 하는 데 사용 된 대리자 형식의 <ph id="ph1">`MyDelegate`</ph>,이 속성에서 반환 되는 대리자를 캐스팅 해야 <ph id="ph2">`MyDelegate`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">콜백 메서드는 대리자의 호출 수 <ph id="ph1">`EndInvoke`</ph> 비동기 메서드 호출의 결과 가져올 올바른 서명이 있는 메서드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property to get the delegate that was used to make the asynchronous call, in order to call <ph id="ph2">`EndInvoke`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> 대리자를 호출 하기 위해 비동기 호출을 수행 하는 데 사용한 가져올 속성 <ph id="ph2">`EndInvoke`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example casts the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, which is the only parameter of the callback method, to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> object.</source>
          <target state="translated">예제에서는 캐스트는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, 콜백 메서드의 유일한 매개 변수인는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">이 예제에서는 두 개의 클래스를 비동기적으로 호출 되는 메서드가 포함 된 클래스가 구성 되어 있으며 포함 하는 클래스는 <ph id="ph1">`Main`</ph> 호출을 수행 하는 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">방식에 대 한 자세한 내용은이 콜백 예제 작동 및 메서드를 호출 하 여 비동기적으로의 추가 예 참조 대리자를 사용 하 여 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The request <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated">요청 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The response <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">응답 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>No value is returned.</source>
          <target state="translated">값이 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface is not relevant to the <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> 인터페이스는 관련이 없습니다는 <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implementation by <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">구현으로 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throw 한 <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Instead, obtain an <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> by casting the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">대신, 얻어야는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 캐스팅 하 여는 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 대리자를 사용 하 여 수행한 비동기 호출에서 반환 되는 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>Gets the object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> 메서드 호출의 마지막 매개 변수로 제공된 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> 메서드 호출의 마지막 매개 변수로 제공된 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`BeginInvoke`</ph> 메서드를 참조 <bpt id="p1">[</bpt>비동기 프로그래밍를 사용 하 여 대리자<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">다음 코드 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> 속성은 콜백 메서드에 정보를 전달 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">마지막 매개 변수는 <ph id="ph1">`BeginInvoke`</ph> 메서드 호출은 형식 문자열, 콜백 메서드를 사용 하 여 출력 메시지의 형식을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">이 예제에서는 두 개의 클래스를 비동기적으로 호출 되는 메서드가 포함 된 클래스가 구성 되어 있으며 포함 하는 클래스는 <ph id="ph1">`Main`</ph> 호출을 수행 하는 메서드.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">방식에 대 한 자세한 내용은이 콜백 예제 작동 및 메서드를 호출 하 여 비동기적으로의 추가 예 참조 대리자를 사용 하 여 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Win32 동기화 핸들을 캡슐화하고 다양한 동기화 체계를 구현할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Win32 동기화 핸들을 캡슐화하고 다양한 동기화 체계를 구현할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 반환한이 메서드는 비동기 작업이 완료 되 면 자동으로 신호를 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">대기 핸들 닫혀 있지 않으면 자동으로 호출 하는 경우 <ph id="ph1">`EndInvoke`</ph> 는 비동기 메서드를 호출 하는 데 사용 된 대리자에서 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">대기 핸들에 대한 모든 참조를 해제하면 가비지 수집에서 대기 핸들을 회수할 때 시스템 리소스가 확보됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>To free the system resources as soon as you are finished using the wait handle, call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">시스템 리소스를 대기 핸들을 사용 하 여 완료 되는 즉시 확보 하기 위해 호출 된 <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">가비지 수집 삭제 가능한 개체는 명시적으로 닫히거나 삭제 하는 경우 보다 효율적으로 작동 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contained in the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 에 포함 된는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> 비동기 호출이 완료 될 때까지 현재 스레드를 차단 하도록 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>However the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> will ignore the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, if one was specified during the <ph id="ph3">`BeginInvoke`</ph> call.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 무시 합니다는 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>하는 동안 지정 된 경우는 <ph id="ph3">`BeginInvoke`</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Therefore, a situation can occur where the application shuts down before the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> has finished executing, even if a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> is used to block until the asynchronous call completion.</source>
          <target state="translated">따라서 응용 프로그램이 있는 하기 전에 종료 하는 상황을 발생할 수는 <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> 가 실행을 완료 경우에는 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> 는 데 사용 됩니다 하 여 비동기 호출이 완료 될 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For an example of such a situation, see the example for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class, and remove the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> statement.</source>
          <target state="translated">이러한 상황의 예에 대 한 예제를 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 클래스와 제거는 <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> 문.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> 가져올 속성은 <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, 대리자에 대 한 비동기 호출 대기 하는 방법과 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">비동기 호출이 완료되면 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 은 신호를 받으며 <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> 메서드를 호출하여 대기할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">이 예제에서는 두 개의 클래스를 비동기적으로 호출 되는 메서드가 포함 된 클래스가 구성 되어 있으며 포함 하는 클래스는 <ph id="ph1">`Main`</ph> 호출을 수행 하는 메서드.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">자세한 내용 및 더 많은 대리자를 사용 하 여 메서드를 비동기적으로 호출의 예에 대 한 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> 호출이 동기적으로 완료되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 호출이 동기적으로 완료되었으면 <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">검색 되 면 하는 <ph id="ph1">`BeginInvoke`</ph> 호출이 동기적으로 완료는 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 이 BeginInvoke를 호출한 스레드가 현재 스레드가 인지 할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Most providers of the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface will not use the capability and will return a default <ph id="ph2">`false`</ph>.</source>
          <target state="translated">대부분의 공급자는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 인터페이스 기능을 사용 하지 않으며 기본값을 반환 합니다 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">현재 구현 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> 항상 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source>Gets or sets a value indicating whether <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>에서 <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph>가 호출되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 현재 <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>에서 호출되었으면 <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">비동기 호출에 대한 응답 메시지를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">원격 개체에 대해 수행된 메서드 호출에 대한 응답을 나타내는 원격 메시지입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method can return an object after the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> 메서드 후에 개체를 반환할 수 있습니다는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> return value can be cast to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> 반환 값으로 캐스팅 될 수는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">그러나 이러한 방법 중 하나를 직접 호출할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">.NET Framework의 원격 인프라에서 사용 하기 위해 것은.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">서버가 호출을 완료했는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> after the server has completed the call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">서버가 호출을 완료했으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">서버 외부에서 합의 된 모든 클라이언트가 제공한 리소스를 사용 하지 않아야로 설정한 후 공유 의미론은 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Thus, it is safe for the client to destroy the resources after the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">즉, 한 후 리소스를 삭제 하는 클라이언트에 대 한 안전 하 게 보호는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> returned by <ph id="ph3">`BeginInvoke`</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> 속성의는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> 반환한 <ph id="ph3">`BeginInvoke`</ph> 비동기 호출이 완료 될 때 검색 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>You might do this when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">사용자 인터페이스를 제공하는 스레드에서 비동기 호출을 수행하는 경우 이 동작을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">완료에 대해 폴링하면 비동기 호출이 <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드에서 실행되는 동안 호출 스레드가 계속 실행될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">이 예제에서는 두 개의 클래스를 비동기적으로 호출 되는 메서드가 포함 된 클래스가 구성 되어 있으며 포함 하는 클래스는 <ph id="ph1">`Main`</ph> 호출을 수행 하는 메서드.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">자세한 내용 및 더 많은 대리자를 사용 하 여 메서드를 비동기적으로 호출의 예에 대 한 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">싱크 체인의 다음 메시지 싱크를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface that represents the next message sink in the sink chain.</source>
          <target state="translated">싱크 체인의 다음 메시지 싱크를 나타내는 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">현재 구현이 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call.</source>
          <target state="translated">현재 원격 메서드 호출에 대한 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>Sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">현재 원격 메서드 호출에 대해 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph>을 설정하여 비동기 메시지가 디스패치된 후에 메시지를 제어할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>You do not need to call the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> method.</source>
          <target state="translated">호출할 필요가 없습니다는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">원격 개체에 대해 수행된 메서드 호출에 대한 응답 메시지입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">원격 개체에 대한 메서드 호출에 의해 반환된 응답 메시지를 동기적으로 처리합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> 메서드 구현에서 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>You do not need to call this method directly.</source>
          <target state="translated">이 메서드를 직접 호출할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">.NET Framework의 원격 인프라에 사용 하기 위해 적합지 않습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invokes the consumer code's <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> 소비자 코드를 호출 <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It also sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method.</source>
          <target state="translated">또한 설정는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> 에서 반환 된 인스턴스는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, the same object is returned by <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`msg`</ph> 매개 변수는 형식 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, 동일한 개체를 반환 <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">그렇지 않으면 원격 예외를 포함 하는 회신 메시지가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> also modifies the value returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> 또한에서 반환 된 값을 수정 하는 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>