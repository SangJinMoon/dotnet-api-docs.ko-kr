<Type Name="IDbCommand" FullName="System.Data.IDbCommand">
  <TypeSignature Language="C#" Value="public interface IDbCommand : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbCommand implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbCommand" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbCommand&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbCommand : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="88a98-101">데이터 소스에 연결된 동안 실행되는 SQL 문을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-101">Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-102"><xref:System.Data.IDbCommand> 인터페이스를 상속 하는 클래스를 나타내는 데이터 원본에서 실행 되는 SQL 문을 명령 클래스를 구현 하 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-102">The <xref:System.Data.IDbCommand> interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source.</span></span> <span data-ttu-id="88a98-103">명령 클래스에 대 한 자세한 내용은 참조 [명령 실행](~/docs/framework/data/adonet/executing-a-command.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-103">For more information about Command classes, see [Executing a Command](~/docs/framework/data/adonet/executing-a-command.md).</span></span>  
  
 <span data-ttu-id="88a98-104">응용 프로그램의 인스턴스를 만들지 않습니다는 <xref:System.Data.IDbCommand> 인터페이스를 직접 상속 하는 클래스의 인스턴스를 만들고 있지만 <xref:System.Data.IDbCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-104">An application does not create an instance of the <xref:System.Data.IDbCommand> interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbCommand>.</span></span>  
  
 <span data-ttu-id="88a98-105">상속 된 클래스는 <xref:System.Data.IDbCommand> 상속 된 모든 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-105">Classes that inherit <xref:System.Data.IDbCommand> must implement all inherited members, and typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="88a98-106">예를 들어는 <xref:System.Data.IDbCommand> 인터페이스 정의 <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="88a98-106">For example, the <xref:System.Data.IDbCommand> interface defines the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method.</span></span> <span data-ttu-id="88a98-107">차례로 <xref:System.Data.SqlClient.SqlCommand> 이 메서드를 상속 하 고 정의 하는 클래스는 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="88a98-107">In turn, the <xref:System.Data.SqlClient.SqlCommand> class inherits this method, and also defines the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88a98-108">다음 예제에서는 파생된 클래스의 인스턴스를 만드는 <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, 및 <xref:System.Data.SqlClient.SqlDataReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-108">The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="88a98-109">이 예제에서는 콘솔에 작성 하는 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-109">The example reads through the data, writing it to the console.</span></span> <span data-ttu-id="88a98-110">마지막는 <xref:System.Data.SqlClient.SqlDataReader>, 하면 <xref:System.Data.SqlClient.SqlConnection>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-110">Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, then the <xref:System.Data.SqlClient.SqlConnection>.</span></span>  
  
 [!code-csharp[Classic WebData SqlCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="88a98-111">.NET Framework 데이터 공급자 간의 일관성으로 승격 하려면 폼에서 상속 하는 클래스 이름을 <paramref name="PrvClassname" /> 여기서 <paramref name="Prv" /> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일정 한 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-111">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="PrvClassname" /> where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="88a98-112">예를 들어 <paramref name="Sql" /> 은의 접두사는 <see cref="T:System.Data.SqlClient.SqlCommand" /> 클래스에 <see langword="System.Data.SqlClient" /> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-112">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlCommand" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
 <span data-ttu-id="88a98-113">상속 하는 경우는 <see cref="T:System.Data.IDbCommand" /> 인터페이스를 다음 생성자를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-113">When you inherit from the <see cref="T:System.Data.IDbCommand" /> interface, you should implement the following constructors:</span></span>  
  
 <span data-ttu-id="88a98-114"><list type="table"><listheader><term> 항목</span><span class="sxs-lookup"><span data-stu-id="88a98-114"><list type="table"><listheader><term> Item</span></span>  
  
 <span data-ttu-id="88a98-115"></term><description> 설명</span><span class="sxs-lookup"><span data-stu-id="88a98-115"></term><description> Description</span></span>  
  
 <span data-ttu-id="88a98-116"></description></listheader><item><term> PrvCommand()</span><span class="sxs-lookup"><span data-stu-id="88a98-116"></description></listheader><item><term> PrvCommand()</span></span>  
  
 <span data-ttu-id="88a98-117"></term><description> PrvCommand 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-117"></term><description> Initializes a new instance of the PrvCommand class.</span></span>  
  
 <span data-ttu-id="88a98-118"></description></item><item><term> PrvCommand (문자열 cmdText)</span><span class="sxs-lookup"><span data-stu-id="88a98-118"></description></item><item><term> PrvCommand(string cmdText)</span></span>  
  
 <span data-ttu-id="88a98-119"></term><description> 쿼리 텍스트와 함께 PrvCommand 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-119"></term><description> Initializes a new instance of the PrvCommand class with the text of the query.</span></span>  
  
 <span data-ttu-id="88a98-120"></description></item><item><term> PrvCommand(string cmdText, PrvConnection connection)</span><span class="sxs-lookup"><span data-stu-id="88a98-120"></description></item><item><term> PrvCommand(string cmdText, PrvConnection connection)</span></span>  
  
 <span data-ttu-id="88a98-121"></term><description> 쿼리와 PrvConnection 텍스트로 PrvCommand 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-121"></term><description> Initializes a new instance of the PrvCommand class with the text of the query and a PrvConnection.</span></span>  
  
 <span data-ttu-id="88a98-122"></description></item><item><term> PrvCommand (문자열 cmdText, PrvConnection 연결, PrvTransaction 트랜잭션)</span><span class="sxs-lookup"><span data-stu-id="88a98-122"></description></item><item><term> PrvCommand(string cmdText, PrvConnection connection, PrvTransaction transaction)</span></span>  
  
 <span data-ttu-id="88a98-123"></term><description> 쿼리, PrvConnection, 및는 PrvTransaction의 텍스트를 가진 PrvCommand 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-123"></term><description> Initializes a new instance of the PrvCommand class with the text of the query, a PrvConnection, and the PrvTransaction.</span></span>  
  
 </description></item></list></para>
    </block>
    <altmember cref="T:System.Data.Common.DbDataAdapter" />
    <altmember cref="T:System.Data.IDbConnection" />
    <altmember cref="T:System.Data.OleDb.OleDbCommand" />
    <altmember cref="T:System.Data.SqlClient.SqlCommand" />
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-124"><see cref="T:System.Data.IDbCommand" /> 실행을 취소하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-124">Attempts to cancels the execution of an <see cref="T:System.Data.IDbCommand" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-125">가 취소할 경우 아무 작업도 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-125">If there is nothing to cancel, nothing happens.</span></span> <span data-ttu-id="88a98-126">그러나 진행 중인 명령이 있는 경우 취소 동작이 실패하더라도 예외가 생성되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-126">However, if there is a command in process, and the attempt to cancel fails, no exception is generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-127">데이터 소스에 대해 실행할 텍스트 명령을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-127">Gets or sets the text command to run against the data source.</span></span></summary>
        <value><span data-ttu-id="88a98-128">실행할 텍스트 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-128">The text command to execute.</span></span> <span data-ttu-id="88a98-129">기본값은 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-129">The default value is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-130">때는 <xref:System.Data.IDbCommand.CommandType%2A> 속성이로 설정 되어 `StoredProcedure`로 설정 된 <xref:System.Data.IDbCommand.CommandText%2A> 속성을 저장된 프로시저의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-130">When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure.</span></span> <span data-ttu-id="88a98-131">사용자는 저장된 프로시저 이름에 특수 문자가 포함 되어 있는 경우 이스케이프 문자 구문을 사용 하는 데 필요한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-131">The user may be required to use escape character syntax if the stored procedure name contains any special characters.</span></span> <span data-ttu-id="88a98-132">이 명령은 Execute 메서드 중 하나를 호출 하면이 저장된 프로시저를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-132">The command will call this stored procedure when you call one of the Execute methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88a98-133">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.OleDb.OleDbCommand> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-133">The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData IDbCommand.CommandText Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandText Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.IDbCommand.CommandType" />
        <altmember cref="P:System.Data.IDbCommand.UpdatedRowSource" />
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CommandTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-134">명령 실행을 종료하고 오류를 생성하기 전 대기 시간을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-134">Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</span></span></summary>
        <value><span data-ttu-id="88a98-135">명령이 실행될 때까지 대기하는 시간(초)입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-135">The time (in seconds) to wait for the command to execute.</span></span> <span data-ttu-id="88a98-136">기본값은 30초입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-136">The default value is 30 seconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="88a98-137">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.SqlClient.SqlCommand> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-137">The following example creates an instance of a derived class, <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="88a98-138">할당된 속성 값이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="88a98-138">The property value assigned is less than 0.</span></span></exception>
        <altmember cref="P:System.Data.IDbCommand.CommandText" />
        <altmember cref="P:System.Data.IDbCommand.Connection" />
        <altmember cref="P:System.Data.IDbCommand.CommandType" />
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandType As CommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::CommandType CommandType { System::Data::CommandType get(); void set(System::Data::CommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-139"><see cref="P:System.Data.IDbCommand.CommandText" /> 속성을 해석하는 방법을 지정하거나 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-139">Indicates or specifies how the <see cref="P:System.Data.IDbCommand.CommandText" /> property is interpreted.</span></span></summary>
        <value><span data-ttu-id="88a98-140"><see cref="T:System.Data.CommandType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-140">One of the <see cref="T:System.Data.CommandType" /> values.</span></span> <span data-ttu-id="88a98-141">기본값은 <see langword="Text" />입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-141">The default is <see langword="Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-142">설정 하는 경우는 <xref:System.Data.IDbCommand.CommandType%2A> 속성을 `StoredProcedure`를 설정 해야는 <xref:System.Data.IDbCommand.CommandText%2A> 속성을 저장된 프로시저의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-142">When you set the <xref:System.Data.IDbCommand.CommandType%2A> property to `StoredProcedure`, you should set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure.</span></span> <span data-ttu-id="88a98-143">Execute 메서드 중 하나를 호출 하면이 저장된 프로시저를 실행 하는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-143">The command executes this stored procedure when you call one of the Execute methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.IDbConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As IDbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbConnection ^ Connection { System::Data::IDbConnection ^ get(); void set(System::Data::IDbConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-144"><see cref="T:System.Data.IDbCommand" />의 이 인스턴스에서 사용되는 <see cref="T:System.Data.IDbConnection" />을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-144">Gets or sets the <see cref="T:System.Data.IDbConnection" /> used by this instance of the <see cref="T:System.Data.IDbCommand" />.</span></span></summary>
        <value><span data-ttu-id="88a98-145">데이터 원본에 대한 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-145">The connection to the data source.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.IDbDataParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDbDataParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateParameter () As IDbDataParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::IDbDataParameter ^ CreateParameter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbDataParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-146"><see cref="T:System.Data.IDbDataParameter" /> 개체의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-146">Creates a new instance of an <see cref="T:System.Data.IDbDataParameter" /> object.</span></span></summary>
        <returns><span data-ttu-id="88a98-147"><see langword="IDbDataParameter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-147">An <see langword="IDbDataParameter" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-148">상속 된 경우 <xref:System.Data.IDbCommand>, 한 강력한 형식의 버전을 구현 하는.NET Framework 데이터 공급자 <xref:System.Data.IDbCommand.CreateParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-148">When inheriting from <xref:System.Data.IDbCommand>, a .NET Framework data provider implements a strongly-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-149">.NET Framework 데이터 공급자의 <see langword="Connection" /> 개체에 대해 SQL 문을 실행하고 영향을 받는 행 수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-149">Executes an SQL statement against the <see langword="Connection" /> object of a .NET Framework data provider, and returns the number of rows affected.</span></span></summary>
        <returns><span data-ttu-id="88a98-150">영향을 받은 행 수입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-150">The number of rows affected.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-151">사용할 수는 <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> (예를 들어 데이터베이스의 구조를 쿼리 또는 테이블과 같은 데이터베이스 개체 만들기), 카탈로그 작업을 수행 하거나 사용 하지 않고 데이터베이스의 데이터를 변경 하려면는 <xref:System.Data.DataSet> UPDATE, INSERT 또는 DELETE를 실행 하 여 문입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-151">You can use the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.</span></span>  
  
 <span data-ttu-id="88a98-152">하지만 <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> 행을 모든 출력 매개 변수가 반환 하지 않거나 반환 값 매개 변수에 매핑된 데이터 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-152">Although the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> does not return any rows, any output parameters or return values mapped to parameters are populated with data.</span></span>  
  
 <span data-ttu-id="88a98-153">UPDATE, INSERT 및 DELETE 문의 경우, 반환 값은 해당 명령의 영향을 받는 행의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-153">For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.</span></span> <span data-ttu-id="88a98-154">다른 형식의 문의 경우에는 반환 값이 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-154">For all other types of statements, the return value is -1.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88a98-155">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.OleDb.OleDbCommand>, 다음 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-155">The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and then executes it.</span></span> <span data-ttu-id="88a98-156">이를 위해 SQL SELECT 문을 문자열과 데이터 원본에 연결 하는 데 사용할 문자열을 메서드에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-156">To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.</span></span>  
  
 [!code-csharp[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="88a98-157">연결이 존재하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-157">The connection does not exist.</span></span>  
  
 <span data-ttu-id="88a98-158">또는</span><span class="sxs-lookup"><span data-stu-id="88a98-158">-or-</span></span>  
  
 <span data-ttu-id="88a98-159">연결이 열려 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-159">The connection is not open.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="88a98-160"><see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-160">Executes the <see cref="P:System.Data.IDbCommand.CommandText" /> against the <see cref="P:System.Data.IDbCommand.Connection" /> and builds an <see cref="T:System.Data.IDataReader" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.IDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader () As IDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::IDataReader ^ ExecuteReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-161"><see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-161">Executes the <see cref="P:System.Data.IDbCommand.CommandText" /> against the <see cref="P:System.Data.IDbCommand.Connection" /> and builds an <see cref="T:System.Data.IDataReader" />.</span></span></summary>
        <returns><span data-ttu-id="88a98-162"><see cref="T:System.Data.IDataReader" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-162">An <see cref="T:System.Data.IDataReader" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.IDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (behavior As CommandBehavior) As IDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::IDataReader ^ ExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior"><span data-ttu-id="88a98-163"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-163">One of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></param>
        <summary><span data-ttu-id="88a98-164"><see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.CommandBehavior" /> 값 중 하나를 사용하여 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-164">Executes the <see cref="P:System.Data.IDbCommand.CommandText" /> against the <see cref="P:System.Data.IDbCommand.Connection" />, and builds an <see cref="T:System.Data.IDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.</span></span></summary>
        <returns><span data-ttu-id="88a98-165"><see cref="T:System.Data.IDataReader" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-165">An <see cref="T:System.Data.IDataReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-166">호출자에 게 호출 해야 합니다는 <xref:System.Data.IDbConnection.Open%2A> 의 메서드는 <xref:System.Data.IDbCommand.Connection%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-166">The caller must call the <xref:System.Data.IDbConnection.Open%2A> method of the <xref:System.Data.IDbCommand.Connection%2A> property.</span></span>  
  
 <span data-ttu-id="88a98-167">경우는 <xref:System.Data.IDbCommand.CommandType%2A> 속성이 `StoredProcedure`, <xref:System.Data.IDbCommand.CommandText%2A> 저장된 프로시저의 이름으로 속성을 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-167">When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.IDbCommand.CommandText%2A> property should be set to the name of the stored procedure.</span></span> <span data-ttu-id="88a98-168">명령이 호출 하는 경우이 저장된 프로시저를 실행 <xref:System.Data.IDbCommand.ExecuteReader%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-168">The command executes this stored procedure when you call <xref:System.Data.IDbCommand.ExecuteReader%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="88a98-169">사용 하 여 <xref:System.Data.CommandBehavior.SequentialAccess> 큰 값 및 이진 데이터를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-169">Use <xref:System.Data.CommandBehavior.SequentialAccess> to retrieve large values and binary data.</span></span> <span data-ttu-id="88a98-170">그렇지 않은 경우는 <xref:System.OutOfMemoryException> 발생할 수 있습니다 및 연결이 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-170">Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.</span></span>  
  
 <span data-ttu-id="88a98-171">동안는 <xref:System.Data.IDataReader> 사용 중인 연결 된 <xref:System.Data.IDbConnection> 계속 제공 되는 <xref:System.Data.IDataReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-171">While the <xref:System.Data.IDataReader> is in use, the associated <xref:System.Data.IDbConnection> is busy serving the <xref:System.Data.IDataReader>.</span></span> <span data-ttu-id="88a98-172">이 상태 동안에 없는 다른 작업을 수행할 수에 <xref:System.Data.IDbConnection> 닫지 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-172">While in this state, no other operations can be performed on the <xref:System.Data.IDbConnection> other than closing it.</span></span> <span data-ttu-id="88a98-173">이 때 까지는 <xref:System.Data.IDataReader.Close%2A> DataReader의 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-173">This is the case until the <xref:System.Data.IDataReader.Close%2A> method of the DataReader is called.</span></span> <span data-ttu-id="88a98-174">DataReader로 만들어 <xref:System.Data.CommandBehavior> 로 설정 `CloseConnection`, DataReader 닫기 자동으로 연결을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-174">If the DataReader is created with <xref:System.Data.CommandBehavior> set to `CloseConnection`, closing the DataReader closes the connection automatically.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ExecuteScalar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-175">쿼리를 실행하고 쿼리에서 반환된 결과 집합에서 첫 번째 행의 첫 번째 열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-175">Executes the query, and returns the first column of the first row in the resultset returned by the query.</span></span> <span data-ttu-id="88a98-176">추가 열이나 행은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-176">Extra columns or rows are ignored.</span></span></summary>
        <returns><span data-ttu-id="88a98-177">결과 집합에 있는 첫째 행의 첫째 열입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-177">The first column of the first row in the resultset.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-178">사용 하 여는 <xref:System.Data.IDbCommand.ExecuteScalar%2A> 데이터베이스에서 단일 값 (예를 들어 집계 값)를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-178">Use the <xref:System.Data.IDbCommand.ExecuteScalar%2A> method to retrieve a single value (for example, an aggregate value) from a database.</span></span> <span data-ttu-id="88a98-179">사용 하 여 보다 적은 코드가 필요는 <xref:System.Data.IDbCommand.ExecuteReader%2A> 메서드를 다음에서 반환 된 데이터를 사용 하 여 단일 값을 생성 하는 데 필요한 작업을 수행 하는 <xref:System.Data.IDataReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-179">This requires less code than using the <xref:System.Data.IDbCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value using the data returned by an <xref:System.Data.IDataReader>.</span></span>  
  
 <span data-ttu-id="88a98-180">일반적인 <xref:System.Data.IDbCommand.ExecuteScalar%2A> 쿼리 다음 C# 예제와 같이 형식을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-180">A typical <xref:System.Data.IDbCommand.ExecuteScalar%2A> query can be formatted as in the following C# example:</span></span>  
  
```  
CommandText = "select count(*) as NumberOfRegions from region";  
Int32 count = (int) ExecuteScalar();  
```  
  
 <span data-ttu-id="88a98-181">결과 집합의 첫 번째 행의 첫 번째 열이 발견 되지 않으면 null 참조 하는 경우 (`Nothing` Visual basic에서)이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-181">If the first column of the first row in the result set is not found, a null reference (`Nothing` in Visual Basic) is returned.</span></span> <span data-ttu-id="88a98-182">데이터베이스의 값이 `null`, 쿼리에서 반환 `DBNull.Value`합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-182">If the value in the database is `null`, the query returns `DBNull.Value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88a98-183">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.SqlClient.SqlCommand>를 사용 하 여 빌드한 다음 실행 <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-183">The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>.</span></span> <span data-ttu-id="88a98-184">이 예제에서는 집계 결과 반환 하는 Transact SQL 문 문자열과 데이터 원본에 연결 하는 데 사용할 문자열을 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-184">The example is passed a string that is a Transact-SQL statement that returns an aggregate result, and a string to use to connect to the data source.</span></span>  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteScalar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteScalar/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteScalar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteScalar/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDataParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As IDataParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDataParameterCollection ^ Parameters { System::Data::IDataParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-185"><see cref="T:System.Data.IDataParameterCollection" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-185">Gets the <see cref="T:System.Data.IDataParameterCollection" />.</span></span></summary>
        <value><span data-ttu-id="88a98-186">SQL 문 또는 저장 프로시저의 매개 변수</span><span class="sxs-lookup"><span data-stu-id="88a98-186">The parameters of the SQL statement or stored procedure.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="88a98-187">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.SqlClient.SqlCommand>, 해당 매개 변수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-187">The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and displays its parameters.</span></span> <span data-ttu-id="88a98-188">예제에서는 응용 프로그램이 전달는 <xref:System.Data.SqlClient.SqlConnection>, 배열 및 Transact SQL SELECT 문에 쿼리 문자열 <xref:System.Data.SqlClient.SqlParameter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-188">In the example, the application passes a <xref:System.Data.SqlClient.SqlConnection>, a query string that is a Transact-SQL SELECT statement, and an array of <xref:System.Data.SqlClient.SqlParameter> objects.</span></span>  
  
 [!code-csharp[Classic WebData IDbCommand.Parameters Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.Parameters Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.Parameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.Parameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.IDataParameter" />
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbCommand.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="88a98-189">데이터 소스에 대해 명령의 준비된(또는 컴파일된) 버전을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-189">Creates a prepared (or compiled) version of the command on the data source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88a98-190">경우는 <xref:System.Data.IDbCommand.CommandType%2A> 속성이 `TableDirect`, <xref:System.Data.IDbCommand.Prepare%2A> 는 아무 작업도 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-190">If the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `TableDirect`, <xref:System.Data.IDbCommand.Prepare%2A> does nothing.</span></span> <span data-ttu-id="88a98-191">경우 <xref:System.Data.IDbCommand.CommandType%2A> 로 설정 된 `StoredProcedure`에 대 한 호출 <xref:System.Data.IDbCommand.Prepare%2A> 성공 해야 합니다는 아무 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-191">If <xref:System.Data.IDbCommand.CommandType%2A> is set to `StoredProcedure`, the call to <xref:System.Data.IDbCommand.Prepare%2A> should succeed, although it may result in a no-op.</span></span> <span data-ttu-id="88a98-192">서버에서 자동으로 다시 사용할 수 있도록; 필요에 따라 계획 캐시 따라서이 메서드를 호출할 클라이언트 응용 프로그램에서 직접 않아도가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-192">The server automatically caches plans for reuse as necessary; therefore, there is no need to call this method directly in your client application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="88a98-193">다음 예제에서는 파생된 클래스의 인스턴스를 만들고 <xref:System.Data.OleDb.OleDbCommand>, 연결을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-193">The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and opens the connection.</span></span> <span data-ttu-id="88a98-194">그런 다음 SQL Select 문을 문자열과 데이터 원본에 연결 하는 데 사용할 문자열을 전달 하 여 데이터 원본에서 저장된 프로시저를 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-194">The example then prepares a stored procedure on the data source by passing a string that is a SQL Select statement and a string to use to connect to the data source.</span></span>  
  
 [!code-csharp[Classic WebData OleDbCommand.Prepare Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Prepare Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.Prepare Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Prepare Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="88a98-195"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="88a98-195">The <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> is not set.</span></span>  
  
 <span data-ttu-id="88a98-196">또는</span><span class="sxs-lookup"><span data-stu-id="88a98-196">-or-</span></span>  
  
 <span data-ttu-id="88a98-197"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />이 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="88a98-197">The <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> is not <see cref="M:System.Data.OleDb.OleDbConnection.Open" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.IDbTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As IDbTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbTransaction ^ Transaction { System::Data::IDbTransaction ^ get(); void set(System::Data::IDbTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-198">.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행되는 트랜잭션을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-198">Gets or sets the transaction within which the <see langword="Command" /> object of a .NET Framework data provider executes.</span></span></summary>
        <value><span data-ttu-id="88a98-199">.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-199">the <see langword="Command" /> object of a .NET Framework data provider executes.</span></span> <span data-ttu-id="88a98-200">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-200">The default value is <see langword="null" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbCommand.UpdatedRowSource" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdatedRowSource As UpdateRowSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::UpdateRowSource UpdatedRowSource { System::Data::UpdateRowSource get(); void set(System::Data::UpdateRowSource value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88a98-201"><see cref="T:System.Data.Common.DbDataAdapter" />의 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 메서드에 의해 사용될 때 명령 결과가 <see cref="T:System.Data.DataRow" />에 적용되는 방법을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-201">Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow" /> when used by the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> method of a <see cref="T:System.Data.Common.DbDataAdapter" />.</span></span></summary>
        <value><span data-ttu-id="88a98-202"><see cref="T:System.Data.UpdateRowSource" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-202">One of the <see cref="T:System.Data.UpdateRowSource" /> values.</span></span> <span data-ttu-id="88a98-203">명령이 자동으로 생성되지 않으면 기본값은 <see langword="Both" />입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-203">The default is <see langword="Both" /> unless the command is automatically generated.</span></span> <span data-ttu-id="88a98-204">그러면 기본값은 <see langword="None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="88a98-204">Then the default is <see langword="None" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="88a98-205">입력한 값이 <see cref="T:System.Data.UpdateRowSource" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="88a98-205">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource" /> values.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>