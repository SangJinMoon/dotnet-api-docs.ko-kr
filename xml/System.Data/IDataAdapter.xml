<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19bc999689e2cb5af52a69b1ab28024ad5ede488" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36678230" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f5066-101">개체가 DataAdapter를 구현하도록 하며, <see cref="T:System.Data.DataSet" />을 채우거나 업데이트하고 데이터 소스를 업데이트하는 데 사용되는 매핑 동작 관련 속성 및 메서드 집합을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5066-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span>
      </span>
      <span data-ttu-id="f5066-102">
        <see cref="T:System.Data.IDbDataAdapter" /> 인스턴스는 텍스트 명령(예: Transact-SQL)을 사용하는 관계형 데이터베이스 또는 그와 유사한 데이터 소스용이며, <see cref="T:System.Data.IDataAdapter" /> 인스턴스는 임의 형식의 데이터 소스를 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5066-102">
          <see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-103"><xref:System.Data.IDataAdapter> 인터페이스에서는 상속 하는 클래스는 데이터 원본 간의 브리지를 나타내는 데이터 어댑터 클래스를 구현 하 고 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="f5066-104">DataAdapter 클래스에 대 한 자세한 내용은 참조 [DataAdapter에서 DataSet 채우기](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span>  
  
 <span data-ttu-id="f5066-105">응용 프로그램의 인스턴스를 만들지 않습니다는 <xref:System.Data.IDataAdapter> 인터페이스를 직접 상속 하는 클래스의 인스턴스를 구현 하지만 <xref:System.Data.IDataAdapter>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="f5066-106">상속 된 클래스는 <xref:System.Data.IDataAdapter> 상속 된 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="f5066-107">예를 들어는 <xref:System.Data.IDataAdapter> 인터페이스 정의 <xref:System.Data.IDataAdapter.Fill%2A> 를 받는 메서드에 <xref:System.Data.DataSet> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="f5066-108">차례로 <xref:System.Data.OleDb.OleDbDataAdapter> 클래스 상속는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 정의의 두 추가 오버 로드는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> ADO 레코드 집합 개체를 매개 변수로 메서드.</span><span class="sxs-lookup"><span data-stu-id="f5066-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5066-109">다음 예제에서는 파생된 클래스를 사용 하 여 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, 및 <xref:System.Data.SqlClient.SqlConnection>, 데이터베이스에서 레코드를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="f5066-110">채워진 <xref:System.Data.DataSet> 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="f5066-111">이 위해 메서드를 전달 초기화 된 <xref:System.Data.DataSet>, 연결 문자열 및 쿼리 문자열은 TRANSACT-SQL SELECT 문입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="f5066-112">
        <para>.NET Framework 데이터 공급자 간의 일관성으로 승격 하려면 폼에서 상속 하는 클래스 이름을 <paramref name="Prv" /> DataAdapter 여기서 <paramref name="Prv" /> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일정 한 접두사입니다. 예를 들어 <paramref name="Sql" /> 은의 접두사는 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스에 <see langword="System.Data.SqlClient" /> 네임 스페이스입니다.  상속 하는 경우는 <see cref="T:System.Data.IDataAdapter" /> 인터페이스를 다음 생성자를 구현 해야: <list type="table"><listheader><term> 항목 </term><description> 설명 </description></listheader><item><term> PrvDataAdapter() </term><description> PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) </term><description> 지정 된 SQL SELECT 문을 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  </description></item><item><term> (문자열 selectCommandText, 문자열 selectConnectionString) PrvDataAdapter </term><description> SQL SELECT 문과 연결 문자열을 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  </description></item><item><term> (문자열 selectCommandText, PrvConnection selectConnection) PrvDataAdapter </term><description> SQL SELECT 문과 PrvConnection 개체를 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  </description></item></list></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="f5066-112">
          <para>To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.  When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:  <list type="table"><listheader><term> Item  </term><description> Description  </description></listheader><item><term> PrvDataAdapter()  </term><description> Initializes a new instance of the PrvDataAdapter class.  </description></item><item><term> PrvDataAdapter(PrvCommand selectCommand)  </term><description> Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.  </description></item><item><term> PrvDataAdapter(string selectCommandText, string selectConnectionString)  </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.  </description></item><item><term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)  </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.  </description></item></list></para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="f5066-113">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-113">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5066-114">
            <see cref="T:System.Data.DataSet" /> 이름을 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataSet" />의 행을 추가하거나 업데이트하고 "Table"이라는 이름의 <see cref="T:System.Data.DataTable" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-114">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5066-115">
            <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-115">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="f5066-116">여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-116">This does not include rows affected by statements that do not return rows.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-117"><xref:System.Data.IDataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-117"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="f5066-118">SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-118">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="f5066-119">하기 전에 연결이 닫히거나 경우 <xref:System.Data.IDataAdapter.Fill%2A> 은 호출은 열 데이터를 검색 하려면 다음 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-119">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="f5066-120">연결 하기 전에 열려 있으면 <xref:System.Data.IDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-120">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="f5066-121"><xref:System.Data.IDataAdapter.Fill%2A> 대상에 행을 추가 하는 작업을 다음 <xref:System.Data.DataTable> 개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체.</span><span class="sxs-lookup"><span data-stu-id="f5066-121">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="f5066-122">만들 때 <xref:System.Data.DataTable> 개체는 <xref:System.Data.IDataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-122">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="f5066-123">그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-123">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="f5066-124">`SelectCommand`가 OUTER JOIN의 결과를 반환하면 `DataAdapter`는 결과 <xref:System.Data.DataTable.PrimaryKey%2A>에 대해 <xref:System.Data.DataTable> 값을 설정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-124">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="f5066-125">중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-125">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="f5066-126">자세한 내용은 참조 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-126">For more information, see [Defining Primary Keys](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).</span></span>  
  
 <span data-ttu-id="f5066-127">경우는 <xref:System.Data.IDataAdapter> 중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3" 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-127">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="f5066-128">배치 되는 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-128">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="f5066-129">여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>, 각 결과 집합은 별도 테이블에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-129">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="f5066-130">추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-130">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="f5066-131">응용 프로그램은 열 및 테이블 이름을 사용 하 여 이러한 명명 패턴과 충돌이 발생 하지 않도록 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-131">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="f5066-132">때 채우는 데 사용 되는 SELECT 문에 <xref:System.Data.DataSet> 여러 결과 반환 SQL 문 한 일괄 처리와 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 건너뛰고에 추가 되지 않습니다는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-132">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="f5066-133">사용할 수는 <xref:System.Data.IDataAdapter.Fill%2A> 메서드가 여러 번 같은 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-133">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="f5066-134">기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-134">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="f5066-135">들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-135">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5066-136">구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.IDataAdapter.Fill%2A> 및 <xref:System.Data.IDataAdapter.FillSchema%2A> .NET Framework 데이터에 대 한 공급자만 첫 번째 결과 대 한 스키마 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-136">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="f5066-137">데이터 소스에서 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-137">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span>
          </span>
        </param>
        <param name="schemaType">
          <span data-ttu-id="f5066-138">
            <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-138">One of the <see cref="T:System.Data.SchemaType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5066-139">지정된 <see cref="T:System.Data.DataTable" />에 "Table"이라는 <see cref="T:System.Data.DataSet" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />을 기반으로 데이터 소스의 스키마와 일치하도록 스키마를 구성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-139">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5066-140">데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-140">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-141"><xref:System.Data.IDataAdapter.FillSchema%2A> 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-141">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="f5066-142">와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 유효 해야 하지만 열려 있이 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-142">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="f5066-143">하기 전에 연결이 닫히거나 경우 <xref:System.Data.IDataAdapter.FillSchema%2A> 은 호출은 열 데이터를 검색 하려면 다음 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-143">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="f5066-144">연결 하기 전에 열려 있으면 <xref:System.Data.IDataAdapter.FillSchema%2A> 는 호출을 열린 상태로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-144">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="f5066-145">A <xref:System.Data.IDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-145">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="f5066-146">그런 다음 열을 추가 <xref:System.Data.DataColumnCollection> 의 <xref:System.Data.DataTable> 하 고 다음 구성 <xref:System.Data.DataColumn> 속성 데이터 원본에 존재 하는 경우:</span><span class="sxs-lookup"><span data-stu-id="f5066-146">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="f5066-147"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5066-147"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="f5066-148">설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 별도로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-148">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="f5066-149"><xref:System.Data.IDataAdapter.FillSchema%2A> 또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A> 및 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:</span><span class="sxs-lookup"><span data-stu-id="f5066-149"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="f5066-150">하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용 되는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-150">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="f5066-151">기본 키 열이 반환 되지 고유 열이 표시 되지만 고유한 모든 열이 nullable이 아닌 경우 고유 열 기본 키로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-151">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="f5066-152">열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-152">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="f5066-153">기본 키 열과 고유 열이 모두 반환 되는 기본 키 열에 대 한 기본 키 열으로 사용 됩니다는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-153">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="f5066-154">기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection> 이전 규칙 하지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-154">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="f5066-155">고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-155">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="f5066-156">기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-156">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="f5066-157">쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-157">For more information about how to specify query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).</span></span>  
  
 <span data-ttu-id="f5066-158">경우는 <xref:System.Data.IDataAdapter> 중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3" 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-158">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="f5066-159">배치 되는 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-159">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="f5066-160">여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>, 각 결과 집합은 별도 테이블에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-160">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="f5066-161">추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-161">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="f5066-162">응용 프로그램은 열 및 테이블 이름을 사용 하 여 이러한 명명 패턴과 충돌이 발생 하지 않도록 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-162">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="f5066-163"><xref:System.Data.IDataAdapter.FillSchema%2A> 행을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-163"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="f5066-164">사용 하 여는 <xref:System.Data.IDataAdapter.Fill%2A> 에 행을 추가 하는 메서드는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-164">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5066-165">SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-165">Gets the parameters set by the user when executing an SQL SELECT statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5066-166">사용자가 설정한 매개 변수를 포함하는 <see cref="T:System.Data.IDataParameter" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-166">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5066-167">매핑되지 않은 소스 테이블과 열 중에서 필터링하거나 오류를 발생시키기 위해 소스 이름과 함께 전달할 항목을 나타내거나 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-167">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5066-168">
            <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-168">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span>
          </span>
          <span data-ttu-id="f5066-169">기본값은 <see langword="Passthrough" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-169">The default is <see langword="Passthrough" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-170"><xref:System.Data.IDataAdapter.TableMappings%2A> 속성은 반환 되는 레코드 사이 마스터 매핑을 제공 및 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-170">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5066-171">설정된 값이 <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-171">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span>
          </span>
        </exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5066-172">누락된 소스 테이블, 열 및 그 관계를 데이터 집합 스키마에 추가할지 무시할지 또는 오류를 발생시킬지를 나타내거나 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-172">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5066-173">
            <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-173">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
          <span data-ttu-id="f5066-174">기본값은 <see langword="Add" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-174">The default is <see langword="Add" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5066-175">설정된 값이 <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-175">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span>
          </span>
        </exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5066-176">소스 테이블이 데이터 집합 테이블에 매핑되는 방식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-176">Indicates how a source table is mapped to a dataset table.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5066-177">반환된 레코드와 <see cref="T:System.Data.DataSet" /> 간의 마스터 매핑을 제공하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-177">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span>
          </span>
          <span data-ttu-id="f5066-178">기본값은 빈 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-178">The default value is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-179"><xref:System.Data.IDataAdapter> "Table" 이라는 원본 테이블에 대 한 매핑을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-179">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="f5066-180">모든 SELECT, INSERT, DELETE 및 UPDATE 문의 데이터를 반환 연결 해야를 사용 하 여 일관 된 열 이름을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-180">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="f5066-181">레코드에 반환 된 열 이름은 고유 해야, 그렇지 않은 경우 열 이름이 중복 된 이전 데이터를 덮어쓰게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-181">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="f5066-182"><xref:System.Data.IDataAdapter.Update%2A>"Table" 이라는 원본 테이블에 매핑되는 테이블이 포함할 조정 하는 변경 내용을 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-182">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <span data-ttu-id="f5066-183">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataSet" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-183">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5066-184">"Table"이라는 <see cref="T:System.Data.DataSet" />의 지정된 <see cref="T:System.Data.DataTable" />에서 삽입, 업데이트 또는 삭제된 각 행에 대해 각각 INSERT, UPDATE 또는 DELETE 문을 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-184">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f5066-185">
            <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-185">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5066-186">응용 프로그램 호출 하는 경우는 <xref:System.Data.IDataAdapter.Update%2A> 메서드를는 <xref:System.Data.IDataAdapter> 검사 하는 <xref:System.Data.DataRow.RowState%2A> 속성을 반복적으로 에구성된인덱스순서에따라각행에대한필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>.</span><span class="sxs-lookup"><span data-stu-id="f5066-186">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="f5066-187">예를 들어 <xref:System.Data.IDataAdapter.Update%2A> 의 행 순서 때문에 그 다음 INSERT 문이 DELETE 문의 한 다음 다른 DELETE 문이 실행 될 수 있습니다는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-187">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="f5066-188">이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 수 각 행은 개별적으로 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-188">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="f5066-189">응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 메서드 (예를 들어 업데이트 하기 전에 삽입) 명령문의 시퀀스를 제어 해야 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="f5066-189">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="f5066-190">자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-190">For more information, see [Updating Data Sources with DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).</span></span>  
  
 <span data-ttu-id="f5066-191">경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DataAdapter.Update%2A> 메서드 예외를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-191">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="f5066-192">만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-192">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="f5066-193">그런 다음 설정 하지 않는 추가적인 모든 SQL 문은 CommandBuilder에 의해 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-193">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="f5066-194">이 생성 논리는 키 열에 대 한 정보가 필요는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-194">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="f5066-195">자세한 내용은 참조 [commandbuilder 생성 명령을](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-195">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="f5066-196"><xref:System.Data.Common.DataAdapter.Update%2A> 메서드는 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-196">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="f5066-197"><xref:System.Data.Common.DataAdapter.Update%2A> 의 값을 사용 하 여 행을 업데이트 한 다음는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-197">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="f5066-198">반환 된 추가 행은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-198">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="f5066-199">모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령에서 반환 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-199">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="f5066-200">행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-200">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="f5066-201">사용 하는 경우 <xref:System.Data.IDataAdapter.Update%2A>, 실행의 순서는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-201">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="f5066-202">값은 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-202">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="f5066-203"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-203">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="f5066-204">명령을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-204">The command executes.</span></span>  
  
4.  <span data-ttu-id="f5066-205">명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 저장 됩니다는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-205">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="f5066-206">에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-206">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="f5066-207"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-207">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="f5066-208"><xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="f5066-208"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="f5066-209">와 연결 된 각 명령에서 <xref:System.Data.IDataAdapter> 은 일반적으로 관련 된 매개 변수 컬렉션을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-209">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="f5066-210">매개 변수를 통해 현재 행에 매핑됩니다.는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-210">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="f5066-211">`SourceColumn` 참조 하는 <xref:System.Data.DataTable> 열 하는 <xref:System.Data.IDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-211">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="f5066-212">`SourceColumn` 테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-212">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="f5066-213">경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-213">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="f5066-214">열거 값</span><span class="sxs-lookup"><span data-stu-id="f5066-214">Enumeration Value</span></span>|<span data-ttu-id="f5066-215">수행 작업</span><span class="sxs-lookup"><span data-stu-id="f5066-215">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="f5066-216">원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="f5066-216">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="f5066-217">A <xref:System.SystemException> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-217">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="f5066-218">매핑을 명시적으로 설정에 대 한 입력된 매개 변수 매핑이 없을 오류가 일반적으로 때문일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-218">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="f5066-219">A <xref:System.SystemException> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-219">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="f5066-220">`SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-220">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="f5066-221">존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-221">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="f5066-222">`SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 사용 여부를 결정은 `Original`, `Current`, 또는 `Proposed` 열 값의 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-222">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="f5066-223">이 기능은 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-223">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5066-224">행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단.</span><span class="sxs-lookup"><span data-stu-id="f5066-224">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="f5066-225">설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-225">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="f5066-226">내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-226">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="f5066-227">내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` 이벤트를 설정는 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성은 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-227">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5066-228">다음 예제에서는 파생된 클래스를 사용 하 여 <xref:System.Data.OleDb.OleDbDataAdapter>을 <xref:System.Data.Common.DataAdapter.Update%2A> 데이터 원본입니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-228">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="f5066-229">이 예에서는 만들었다고 가정는 <xref:System.Data.OleDb.OleDbDataAdapter> 및 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="f5066-229">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">
          <span data-ttu-id="f5066-230">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5066-230">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>