<Type Name="IDbTransaction" FullName="System.Data.IDbTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2066228366ddeba4b875c2f1e8eecded239d6124" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37668365" /></Metadata><TypeSignature Language="C#" Value="public interface IDbTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbTransaction implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type IDbTransaction = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="12577-101">데이터 소스에서 수행할 트랜잭션을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</span><span class="sxs-lookup"><span data-stu-id="12577-101">Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12577-102"><xref:System.Data.IDbTransaction> 데이터 원본에서 수행할 트랜잭션을 나타내는 트랜잭션 클래스를 구현 하는 상속 클래스를 사용 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="12577-102">The <xref:System.Data.IDbTransaction> interface allows an inheriting class to implement a Transaction class, which represents the transaction to be performed at a data source.</span></span> <span data-ttu-id="12577-103">트랜잭션 클래스에 대 한 자세한 내용은 참조 하세요. [트랜잭션 및 동시성](~/docs/framework/data/adonet/transactions-and-concurrency.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-103">For more information about Transaction classes, see [Transactions and Concurrency](~/docs/framework/data/adonet/transactions-and-concurrency.md).</span></span>  
  
 <span data-ttu-id="12577-104">애플리케이션의 인스턴스를 만들지 않습니다 합니다 <xref:System.Data.IDbTransaction> 인터페이스를 직접 상속 된 클래스의 인스턴스를 만들고 있지만 <xref:System.Data.IDbTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-104">An application does not create an instance of the <xref:System.Data.IDbTransaction> interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbTransaction>.</span></span>  
  
 <span data-ttu-id="12577-105">상속 된 클래스 <xref:System.Data.IDbTransaction> 상속 된 멤버를 구현 해야 하며 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-105">Classes that inherit <xref:System.Data.IDbTransaction> must implement the inherited members, and typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="12577-106">예를 들어 합니다 <xref:System.Data.IDbTransaction> 인터페이스를 정의 합니다 <xref:System.Data.IDbTransaction.Commit%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="12577-106">For example, the <xref:System.Data.IDbTransaction> interface defines the <xref:System.Data.IDbTransaction.Commit%2A> method.</span></span> <span data-ttu-id="12577-107">따라서 합니다 <xref:System.Data.OleDb.OleDbTransaction> 클래스는이 속성을 상속 하 고도 정의 <xref:System.Data.OleDb.OleDbTransaction.Begin%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="12577-107">In turn, the <xref:System.Data.OleDb.OleDbTransaction> class inherits this property, and also defines the <xref:System.Data.OleDb.OleDbTransaction.Begin%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12577-108">다음 예제에서는 파생된 클래스의 인스턴스를 만듭니다 <xref:System.Data.SqlClient.SqlConnection> 고 <xref:System.Data.SqlClient.SqlTransaction>입니다.</span><span class="sxs-lookup"><span data-stu-id="12577-108">The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="12577-109">사용 하는 방법을 보여 줍니다 합니다 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="12577-109">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><span data-ttu-id="12577-110"><para>.NET Framework 데이터 공급자의 일관성 수준을 올릴 폼에서 상속 하는 클래스의 이름을 <paramref name="Prv" /> 트랜잭션이 있는 <paramref name="Prv" /> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일관 된 접두사입니다. 예를 들어 <paramref name="Sql" /> 접두사입니다 합니다 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 클래스는 <see langword="System.Data.SqlClient" /> 네임 스페이스입니다.</para></span><span class="sxs-lookup"><span data-stu-id="12577-110"><para>To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> Transaction where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlTransaction" /> class in the <see langword="System.Data.SqlClient" /> namespace.</para></span></span></block>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="abstract member Commit : unit -&gt; unit" Usage="iDbTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="12577-111">데이터베이스 트랜잭션을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-111">Commits the database transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="12577-112">다음 예제에서는 파생된 클래스의 인스턴스를 만듭니다 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-112">The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="12577-113">사용 하는 방법을 보여 줍니다 합니다 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="12577-113">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="12577-114">트랜잭션을 커밋하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="12577-114">An error occurred while trying to commit the transaction.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="12577-115">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="12577-115">The transaction has already been committed or rolled back.</span></span>  
  
<span data-ttu-id="12577-116">또는</span><span class="sxs-lookup"><span data-stu-id="12577-116">-or-</span></span> 
<span data-ttu-id="12577-117">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="12577-117">The connection is broken.</span></span></exception>
        <altmember cref="M:System.Data.SqlClient.SqlConnection.BeginTransaction" />
        <altmember cref="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
        <altmember cref="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.IDbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbTransaction.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As IDbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbConnection ^ Connection { System::Data::IDbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.IDbConnection" Usage="System.Data.IDbTransaction.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="12577-118">트랜잭션과 연결할 Connection 개체를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-118">Specifies the Connection object to associate with the transaction.</span></span></summary>
        <value><span data-ttu-id="12577-119">트랜잭션과 연결할 Connection 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="12577-119">The Connection object to associate with the transaction.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12577-120">단일 애플리케이션에는 각각 0 개 이상의 트랜잭션이 여러 데이터베이스 연결이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="12577-120">A single application may have multiple database connections, each with zero or more transactions.</span></span> <span data-ttu-id="12577-121">이 속성을 사용 하면 특정 트랜잭션과 관련 된 연결 개체를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="12577-121">This property enables you to determine the connection object associated with a particular transaction.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbTransaction.IsolationLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsolationLevel As IsolationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IsolationLevel IsolationLevel { System::Data::IsolationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.IsolationLevel : System.Data.IsolationLevel" Usage="System.Data.IDbTransaction.IsolationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="12577-122">이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-122">Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span></span></summary>
        <value><span data-ttu-id="12577-123">이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />입니다.</span><span class="sxs-lookup"><span data-stu-id="12577-123">The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span></span> <span data-ttu-id="12577-124">기본값은 <see langword="ReadCommitted" />입니다.</span><span class="sxs-lookup"><span data-stu-id="12577-124">The default is <see langword="ReadCommitted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12577-125">병렬 트랜잭션은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="12577-125">Parallel transactions are not supported.</span></span> <span data-ttu-id="12577-126">따라서는 <xref:System.Data.IsolationLevel> 전체 트랜잭션에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="12577-126">Therefore, the <xref:System.Data.IsolationLevel> applies to the entire transaction.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDbTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback();" />
      <MemberSignature Language="F#" Value="abstract member Rollback : unit -&gt; unit" Usage="iDbTransaction.Rollback " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="12577-127">보류 상태에서 트랜잭션을 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-127">Rolls back a transaction from a pending state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12577-128">트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.IDbConnection.BeginTransaction%2A> 가 호출 된 전에 <xref:System.Data.IDbTransaction.Commit%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="12577-128">The transaction can only be rolled back from a pending state (after <xref:System.Data.IDbConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.IDbTransaction.Commit%2A> is called).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12577-129">다음 예제에서는 파생된 클래스의 인스턴스를 만듭니다 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="12577-129">The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="12577-130">사용 하는 방법을 보여 줍니다 합니다 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="12577-130">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="12577-131">트랜잭션을 커밋하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="12577-131">An error occurred while trying to commit the transaction.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="12577-132">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="12577-132">The transaction has already been committed or rolled back.</span></span>  
  
<span data-ttu-id="12577-133">또는</span><span class="sxs-lookup"><span data-stu-id="12577-133">-or-</span></span> 
<span data-ttu-id="12577-134">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="12577-134">The connection is broken.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="12577-135"><para>재정의 하는 경우 <see cref="M:System.Data.IDbTransaction.Rollback" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see langword="Rollback" /> 메서드.</para></span><span class="sxs-lookup"><span data-stu-id="12577-135"><para>When overriding <see cref="M:System.Data.IDbTransaction.Rollback" /> in a derived class, be sure to call the base class's <see langword="Rollback" /> method.</para></span></span></block>
        <altmember cref="M:System.Data.IDbTransaction.Commit" />
        <altmember cref="M:System.Data.IDbConnection.BeginTransaction" />
      </Docs>
    </Member>
  </Members>
</Type>