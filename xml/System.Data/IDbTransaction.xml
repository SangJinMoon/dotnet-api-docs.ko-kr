<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDbTransaction.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cb2cb004bd6b47295425233d86dd6f6146f10339.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb2cb004bd6b47295425233d86dd6f6146f10339</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.IDbTransaction">
          <source>Represents a transaction to be performed at a data source, and is implemented by .NET Framework data providers that access relational databases.</source>
          <target state="translated">데이터 소스에서 수행할 트랜잭션을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>The <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> interface allows an inheriting class to implement a Transaction class, which represents the transaction to be performed at a data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> 인터페이스를 데이터 원본에서 수행할 트랜잭션을 나타내는 트랜잭션 클래스를 구현 하 상속 하는 클래스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>For more information about Transaction classes, see <bpt id="p1">[</bpt>Transactions and Concurrency<ept id="p1">](~/docs/framework/data/adonet/transactions-and-concurrency.md)</ept>.</source>
          <target state="translated">트랜잭션 클래스에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>트랜잭션 및 동시성<ept id="p1">](~/docs/framework/data/adonet/transactions-and-concurrency.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>An application does not create an instance of the <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> interface directly, but creates an instance of a class that inherits <ph id="ph2">&lt;xref:System.Data.IDbTransaction&gt;</ph>.</source>
          <target state="translated">응용 프로그램의 인스턴스를 만들지 않습니다는 <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> 인터페이스를 직접 상속 하는 클래스의 인스턴스를 만들고 있지만 <ph id="ph2">&lt;xref:System.Data.IDbTransaction&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>Classes that inherit <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> must implement the inherited members, and typically define additional members to add provider-specific functionality.</source>
          <target state="translated">상속 된 클래스는 <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> 상속 된 멤버를 구현 해야 하며 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>For example, the <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.Data.IDbTransaction.Commit%2A&gt;</ph> method.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Data.IDbTransaction&gt;</ph> 인터페이스 정의 <ph id="ph2">&lt;xref:System.Data.IDbTransaction.Commit%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>In turn, the <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbTransaction&gt;</ph> class inherits this property, and also defines the <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbTransaction.Begin%2A&gt;</ph> method.</source>
          <target state="translated">차례로 <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbTransaction&gt;</ph> 이 속성을 상속 하 고 정의 하는 클래스는 <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbTransaction.Begin%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>The following example creates instances of the derived classes, <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 파생된 클래스의 인스턴스를 만드는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>It also demonstrates how to use the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> methods.</source>
          <target state="translated">사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>To promote consistency among .NET Framework data providers, name the inheriting class in the form <ph id="ph1">&lt;paramref name="Prv" /&gt;</ph> Transaction where <ph id="ph2">&lt;paramref name="Prv" /&gt;</ph> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</source>
          <target state="translated">.NET Framework 데이터 공급자 간의 일관성으로 승격 하려면 폼에서 상속 하는 클래스 이름을 <ph id="ph1">&lt;paramref name="Prv" /&gt;</ph> 트랜잭션 여기서 <ph id="ph2">&lt;paramref name="Prv" /&gt;</ph> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일정 한 접두사입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IDbTransaction">
          <source>For example, <ph id="ph1">&lt;paramref name="Sql" /&gt;</ph> is the prefix of the <ph id="ph2">&lt;see cref="T:System.Data.SqlClient.SqlTransaction" /&gt;</ph> class in the <ph id="ph3">&lt;see langword="System.Data.SqlClient" /&gt;</ph> namespace.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;paramref name="Sql" /&gt;</ph> 은의 접두사는 <ph id="ph2">&lt;see cref="T:System.Data.SqlClient.SqlTransaction" /&gt;</ph> 클래스에 <ph id="ph3">&lt;see langword="System.Data.SqlClient" /&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Commit">
          <source>Commits the database transaction.</source>
          <target state="translated">데이터베이스 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Commit">
          <source>The following example creates instances of the derived classes, <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> and a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 파생된 클래스의 인스턴스를 만드는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Commit">
          <source>It also demonstrates how to use the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> methods.</source>
          <target state="translated">사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Commit">
          <source>An error occurred while trying to commit the transaction.</source>
          <target state="translated">트랜잭션을 커밋하는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Commit">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백된 경우</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Commit">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Commit">
          <source>The connection is broken.</source>
          <target state="translated">연결이 손상된 경우</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Data.IDbTransaction.Connection">
          <source>Specifies the Connection object to associate with the transaction.</source>
          <target state="translated">트랜잭션과 연결할 Connection 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.Connection">
          <source>The Connection object to associate with the transaction.</source>
          <target state="translated">트랜잭션과 연결할 Connection 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.Connection">
          <source>A single application may have multiple database connections, each with zero or more transactions.</source>
          <target state="translated">단일 응용 프로그램에는 각각 0 개 이상의 트랜잭션을 사용 하 여 여러 데이터베이스 연결을 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.Connection">
          <source>This property enables you to determine the connection object associated with a particular transaction.</source>
          <target state="translated">이 속성을 사용 하면 특정 트랜잭션과 연관 된 연결 개체를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Data.IDbTransaction.IsolationLevel">
          <source>Specifies the <ph id="ph1">&lt;see cref="T:System.Data.IsolationLevel" /&gt;</ph> for this transaction.</source>
          <target state="translated">이 트랜잭션에 대한 <ph id="ph1">&lt;see cref="T:System.Data.IsolationLevel" /&gt;</ph>을 지정합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.IsolationLevel">
          <source>The <ph id="ph1">&lt;see cref="T:System.Data.IsolationLevel" /&gt;</ph> for this transaction.</source>
          <target state="translated">이 트랜잭션에 대한 <ph id="ph1">&lt;see cref="T:System.Data.IsolationLevel" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.IsolationLevel">
          <source>The default is <ph id="ph1">&lt;see langword="ReadCommitted" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="ReadCommitted" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.IsolationLevel">
          <source>Parallel transactions are not supported.</source>
          <target state="translated">병렬 트랜잭션은 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Data.IDbTransaction.IsolationLevel">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> applies to the entire transaction.</source>
          <target state="translated">따라서는 <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> 전체 트랜잭션에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Rollback">
          <source>Rolls back a transaction from a pending state.</source>
          <target state="translated">보류 상태에서 트랜잭션을 롤백합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Rollback">
          <source>The transaction can only be rolled back from a pending state (after <ph id="ph1">&lt;xref:System.Data.IDbConnection.BeginTransaction%2A&gt;</ph> has been called, but before <ph id="ph2">&lt;xref:System.Data.IDbTransaction.Commit%2A&gt;</ph> is called).</source>
          <target state="translated">트랜잭션이 롤백할 수 보류 상태에서 (후 <ph id="ph1">&lt;xref:System.Data.IDbConnection.BeginTransaction%2A&gt;</ph> 호출 하기 전에 <ph id="ph2">&lt;xref:System.Data.IDbTransaction.Commit%2A&gt;</ph> 라고).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Rollback">
          <source>The following example creates instances of the derived classes, <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> and a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 파생된 클래스의 인스턴스를 만드는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Rollback">
          <source>It also demonstrates how to use the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> methods.</source>
          <target state="translated">사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Rollback">
          <source>An error occurred while trying to commit the transaction.</source>
          <target state="translated">트랜잭션을 커밋하는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Rollback">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백된 경우</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Rollback">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Data.IDbTransaction.Rollback">
          <source>The connection is broken.</source>
          <target state="translated">연결이 손상된 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Data.IDbTransaction.Rollback">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Data.IDbTransaction.Rollback" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see langword="Rollback" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Data.IDbTransaction.Rollback" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see langword="Rollback" /&gt;</ph> 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>