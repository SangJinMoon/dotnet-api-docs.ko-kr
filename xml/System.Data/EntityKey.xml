<Type Name="EntityKey" FullName="System.Data.EntityKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6911c2007bc269d038d952c3f18397a65154c85" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityKey : IEquatable&lt;System.Data.EntityKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityKey extends System.Object implements class System.IEquatable`1&lt;class System.Data.EntityKey&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityKey&#xA;Implements IEquatable(Of EntityKey)" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityKey sealed : IEquatable&lt;System::Data::EntityKey ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Data.EntityKey&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="580a3-101">Provides a durable reference to an object that is an instance of an entity type.</span>
      <span class="sxs-lookup">
        <span data-stu-id="580a3-101">Provides a durable reference to an object that is an instance of an entity type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-102"><xref:System.Data.EntityKey> 개체는 변경할 수 없습니다. 즉, 생성된 후에는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-102">The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified.</span></span>  
  
 <span data-ttu-id="580a3-103">자세한 내용은 참조 [엔터티 키 작업](http://msdn.microsoft.com/library/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-103">For more information, see [Working with Entity Keys](http://msdn.microsoft.com/library/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="580a3-104">이러한 예제 기반는 [AdventureWorks Sales 모델](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-104">These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="580a3-105">예제를 만들고 사용 하는 방법을 보여는 <xref:System.Data.EntityKey>합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-105">The examples show you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-106">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-106">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="580a3-107">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-107">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; entityKeyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; entityKeyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, entityKeyValues As IEnumerable(Of KeyValuePair(Of String, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ entityKeyValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="entityKeyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="580a3-108">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-108">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="entityKeyValues">
          <span data-ttu-id="580a3-109">A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-109">A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          </span>
          <span data-ttu-id="580a3-110">Each key/value pair has a property name as the key and the value of that property as the value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-110">Each key/value pair has a property name as the key and the value of that property as the value.</span>
          </span>
          <span data-ttu-id="580a3-111">There should be one pair for each property that is part of the <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-111">There should be one pair for each property that is part of the <see cref="T:System.Data.EntityKey" />.</span>
          </span>
          <span data-ttu-id="580a3-112">The order of the key/value pairs is not important, but each key property should be included.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-112">The order of the key/value pairs is not important, but each key property should be included.</span>
          </span>
          <span data-ttu-id="580a3-113">The property names are simple names that are not qualified with an entity type name or the schema name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-113">The property names are simple names that are not qualified with an entity type name or the schema name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-114">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and a generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-114">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and a generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="580a3-115">이 예제에서는 기반는 [AdventureWorks Sales 모델](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-115">This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="580a3-116">이 예제에서는 만들고 사용 하는 방법을 보여 줍니다.는 <xref:System.Data.EntityKey>합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-116">The example shows you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable&lt;System.Data.EntityKeyMember&gt; entityKeyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.EntityKeyMember&gt; entityKeyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, entityKeyValues As IEnumerable(Of EntityKeyMember))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::Collections::Generic::IEnumerable&lt;System::Data::EntityKeyMember ^&gt; ^ entityKeyValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="entityKeyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.EntityKeyMember&gt;" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="580a3-117">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-117">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="entityKeyValues">
          <span data-ttu-id="580a3-118">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects with which to initialize the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-118">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects with which to initialize the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-119">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-119">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedEntitySetName, string keyName, object keyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedEntitySetName As String, keyName As String, keyValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityKey(System::String ^ qualifiedEntitySetName, System::String ^ keyName, System::Object ^ keyValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedEntitySetName" Type="System.String" />
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="qualifiedEntitySetName">
          <span data-ttu-id="580a3-120">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-120">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</span>
          </span>
        </param>
        <param name="keyName">
          <span data-ttu-id="580a3-121">A <see cref="T:System.String" /> that is the name of the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-121">A <see cref="T:System.String" /> that is the name of the key.</span>
          </span>
        </param>
        <param name="keyValue">
          <span data-ttu-id="580a3-122">An <see cref="T:System.Object" /> that is the key value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-122">An <see cref="T:System.Object" /> that is the key value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-123">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and specific entity key pair.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-123">Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and specific entity key pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="580a3-124">이 예제에서는 기반는 [AdventureWorks Sales 모델](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-124">This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).</span></span> <span data-ttu-id="580a3-125">이 예제에서는 만들고 사용 하는 방법을 보여 줍니다.는 <xref:System.Data.EntityKey>합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-125">The example shows you how to create and use an <xref:System.Data.EntityKey>.</span></span>  
  
 [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]
 [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityContainerName">
      <MemberSignature Language="C#" Value="public string EntityContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntityContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntityContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntityContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-126">Gets or sets the name of the entity container.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-126">Gets or sets the name of the entity container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="580a3-127">
            <see cref="T:System.String" />가 속하는 엔터티에 대한 엔터티 컨테이너의 이름인 <see cref="T:System.Data.EntityKey" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-127">A <see cref="T:System.String" /> value that is the name of the entity container for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityKeyValues">
      <MemberSignature Language="C#" Value="public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.EntityKeyMember[] EntityKeyValues" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntityKeyValues" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityKeyValues As EntityKeyMember()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ EntityKeyValues { cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ get(); void set(cli::array &lt;System::Data::EntityKeyMember ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.EntityKeyMember[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-128">Gets or sets the key values associated with this <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-128">Gets or sets the key values associated with this <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="580a3-129">이 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />에 대한 키 값의 <see cref="T:System.Data.EntityKey" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-129">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of key values for this <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-130"><xref:System.Data.EntityKey> 클래스에는 이 엔터티 형식에 대해 지정된 논리적 키를 구성하는 값의 복사본이 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-130">The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.</span></span>  
  
 <span data-ttu-id="580a3-131">각 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 멤버는 <xref:System.Collections.Generic.KeyValuePair%602>의 속성 이름 및 값을 가집니다. 이때 키는 속성 이름이고 값은 개체의 해당 속성에 대한 실제 값입니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-131">The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityNotValidKey">
      <MemberSignature Language="C#" Value="public static readonly System.Data.EntityKey EntityNotValidKey;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.EntityKey EntityNotValidKey" />
      <MemberSignature Language="DocId" Value="F:System.Data.EntityKey.EntityNotValidKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EntityNotValidKey As EntityKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::EntityKey ^ EntityNotValidKey;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-132">A simple <see cref="T:System.Data.EntityKey" /> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-132">A simple <see cref="T:System.Data.EntityKey" /> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-133">다음과 같은 경우 잘못된 엔터티를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-133">There are various ways to get an invalid entity.</span></span> <span data-ttu-id="580a3-134">가장 일반적인 시나리오는 [!INCLUDE[esql](~/includes/esql-md.md)] 쿼리에서 [처리](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) 를 특정 형식으로는 다형 형식 인스턴스와 해당 인스턴스가 해석 하는 연산자와 일치 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-134">The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match.</span></span> <span data-ttu-id="580a3-135">([처리](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) 유사한 C# `as` 연산자).</span><span class="sxs-lookup"><span data-stu-id="580a3-135">([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator).</span></span> <span data-ttu-id="580a3-136">이 경우 쿼리에서 잘못된 엔터티를 반환하고 결과 엔터티의 엔터티 키가 <xref:System.Data.EntityKey.EntityNotValidKey>로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-136">In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySetName">
      <MemberSignature Language="C#" Value="public string EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.EntitySetName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntitySetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-137">Gets or sets the name of the entity set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-137">Gets or sets the name of the entity set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="580a3-138">
            <see cref="T:System.String" />가 속하는 엔터티에 대한 엔터티 집합의 이름인 <see cref="T:System.Data.EntityKey" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-138">A <see cref="T:System.String" /> value that is the name of the entity set for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-139">Returns a value that indicates whether this instance is equal to a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-139">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Data.EntityKey other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Data.EntityKey other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.Equals(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Data::EntityKey ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="580a3-140">An <see cref="T:System.Data.EntityKey" /> object to compare with this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-140">An <see cref="T:System.Data.EntityKey" /> object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-141">Returns a value that indicates whether this instance is equal to a specified <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-141">Returns a value that indicates whether this instance is equal to a specified <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-142">
            <see langword="true" /> if this instance and <paramref name="other" /> have equal values; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-142">
              <see langword="true" /> if this instance and <paramref name="other" /> have equal values; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-143">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-143">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-144">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-144">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-145">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-145">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-146">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-146">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-147">@FSHO2@즉, 해당 엔터티 집합 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.EntityKey> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-147">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-148">@FSHO2@또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 영구 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-148">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="580a3-149">An <see cref="T:System.Object" /> to compare with this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-149">An <see cref="T:System.Object" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-150">Returns a value that indicates whether this instance is equal to a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-150">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-151">
            <see langword="true" /> if this instance and <paramref name="obj" /> have equal values; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-151">
              <see langword="true" /> if this instance and <paramref name="obj" /> have equal values; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-152">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-152">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-153">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-153">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-154">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-154">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-155">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-155">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-156">즉, 해당 <xref:System.Data.EntityKey> 개체 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.Metadata.Edm.EntitySet> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-156">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-157">@FSHO2@또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 영구 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-157">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntitySet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.EntitySet GetEntitySet(class System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::EntitySet ^ GetEntitySet(System::Data::Metadata::Edm::MetadataWorkspace ^ metadataWorkspace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.EntitySet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataWorkspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
      </Parameters>
      <Docs>
        <param name="metadataWorkspace">
          <span data-ttu-id="580a3-158">The metadata workspace that contains the entity.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-158">The metadata workspace that contains the entity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-159">Gets the entity set for this entity key from the given metadata workspace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-159">Gets the entity set for this entity key from the given metadata workspace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-160">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for the entity key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-160">The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for the entity key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-161">엔터티 집합은 키의 엔터티 컨테이너 이름 및 엔터티 집합 이름을 기반으로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-161">The entity set is accessed based on the entity container name and entity set name of the key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="580a3-162">The entity set could not be located in the specified metadata workspace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-162">The entity set could not be located in the specified metadata workspace.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="580a3-163">Serves as a hash function for the current <see cref="T:System.Data.EntityKey" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-163">Serves as a hash function for the current <see cref="T:System.Data.EntityKey" /> object.</span>
          </span>
          <span data-ttu-id="580a3-164">
            <see cref="M:System.Data.EntityKey.GetHashCode" /> is suitable for hashing algorithms and data structures such as a hash table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-164">
              <see cref="M:System.Data.EntityKey.GetHashCode" /> is suitable for hashing algorithms and data structures such as a hash table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-165">A hash code for the current <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-165">A hash code for the current <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityKey.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-166">Gets a value that indicates whether the <see cref="T:System.Data.EntityKey" /> is temporary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-166">Gets a value that indicates whether the <see cref="T:System.Data.EntityKey" /> is temporary.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="580a3-167">
            <see langword="true" /> 경우는 <see cref="T:System.Data.EntityKey" /> 고, 그러지 않으면 임시 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-167">
              <see langword="true" /> if the <see cref="T:System.Data.EntityKey" /> is temporary; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-168">새 엔터티가 만들어지면 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]는 임시 키를 정의하고 <xref:System.Data.EntityKey.IsTemporary%2A> 속성을 `true`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-168">When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`.</span></span> <span data-ttu-id="580a3-169">호출 하는 경우는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] 영구적인 키를 할당 하 고 설정 하는 <xref:System.Data.EntityKey.IsTemporary%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-169">When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="580a3-170">임시 키는 프레임워크에서 자동으로 생성되며 사용자가 직접 생성할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-170">Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.</span></span>  
  
 <span data-ttu-id="580a3-171">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-171">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-172">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-172">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-173">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-173">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-174">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-174">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-175">@FSHO2@즉, 해당 엔터티 집합 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.EntityKey> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-175">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-176">@FSHO2@또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 영구 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-176">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 <span data-ttu-id="580a3-177">엔터티의 <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>에 대해 <xref:System.Data.Objects.ObjectStateEntry> 메서드를 호출하고 엔터티가 <xref:System.Data.EntityState.Added> 상태에서 <xref:System.Data.EntityState.Unchanged> 상태로 전환되면 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]에서 자동으로 엔터티에 대한 새 영구 키를 계산하고 모든 임시 키 참조를 동기화합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-177">When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState.Added> state to <xref:System.Data.EntityState.Unchanged> state, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoEntitySetKey">
      <MemberSignature Language="C#" Value="public static readonly System.Data.EntityKey NoEntitySetKey;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.EntityKey NoEntitySetKey" />
      <MemberSignature Language="DocId" Value="F:System.Data.EntityKey.NoEntitySetKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoEntitySetKey As EntityKey " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::EntityKey ^ NoEntitySetKey;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="580a3-178">A singleton <see cref="T:System.Data.EntityKey" /> by which a read-only entity is identified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-178">A singleton <see cref="T:System.Data.EntityKey" /> by which a read-only entity is identified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-179">읽기 전용 엔터티는 실제 엔터티 집합과 연결되어 있지 않다는 점만 제외하고 모든 면에서 유효한 엔터티를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-179">A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set.</span></span> <span data-ttu-id="580a3-180">이것은 데이터베이스 테이블에서 검색된 엔터티와 반대로 쿼리의 텍스트에 지정된 엔터티 인스턴스를 생성하고 반환하는 [!INCLUDE[esql](~/includes/esql-md.md)] 쿼리 결과의 일부로 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-180">This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table).</span></span> <span data-ttu-id="580a3-181">엔터티 집합이 없는 엔터티는 엔터티 집합과 연결되기 전까지 데이터베이스에 유지될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-181">An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set.</span></span> <span data-ttu-id="580a3-182">따라서 개체 구체화에서는 이 종류의 엔터티를 지정된 실제 병합 옵션에 상관없이 <xref:System.Data.Objects.MergeOption.NoTracking> 병합 옵션이 지정된 것처럼 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-182">Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified.</span></span> <span data-ttu-id="580a3-183">엔터티 개체는 만들어지지만 해당 ID가 확인되지 않으므로 상태 관리자에 구체화 프로세스의 일부로 추가되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-183">An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialized">
      <MemberSignature Language="C#" Value="public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="580a3-184">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-184">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-185">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-185">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-186"><xref:System.Data.EntityKey.OnDeserialized%2A>은 <xref:System.Data.EntityKey>를 deserialize할 때 개체 서비스에서 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-186"><xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>.</span></span> <span data-ttu-id="580a3-187">자세한 내용은 참조 [개체 직렬화](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-187">For more information, see [Serializing Objects](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserializing">
      <MemberSignature Language="C#" Value="public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnDeserializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="580a3-188">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-188">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-189">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-189">Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-190"><xref:System.Data.EntityKey.OnDeserializing%2A>은 <xref:System.Data.EntityKey>를 deserialize할 때 개체 서비스에서 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-190"><xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>.</span></span> <span data-ttu-id="580a3-191">자세한 내용은 참조 [개체 직렬화](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-191">For more information, see [Serializing Objects](http://msdn.microsoft.com/library/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Data.EntityKey key1, System.Data.EntityKey key2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (key1 As EntityKey, key2 As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Data::EntityKey ^ key1, System::Data::EntityKey ^ key2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key1" Type="System.Data.EntityKey" />
        <Parameter Name="key2" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key1">
          <span data-ttu-id="580a3-192">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-192">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <param name="key2">
          <span data-ttu-id="580a3-193">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-193">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-194">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-194">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-195">
            <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are equal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-195">
              <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-196">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-196">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-197">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-197">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-198">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-198">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-199">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-199">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-200">@FSHO2@즉, 해당 엔터티 집합 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.EntityKey> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-200">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-201">@FSHO2@또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 영구 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-201">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.</span></span>  
  
 <span data-ttu-id="580a3-202">이 연산자는 해당 하는 방법은 <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType> </format> </remarks> </Docs> 
     </Member> 
     <Member MemberName="op_Inequality"> <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);" /> <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" /> <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" /> <MemberType> 메서드</MemberType> <AssemblyInfo> <AssemblyName>System.Data.Entity</AssemblyName> <AssemblyVersion>4.0.0.0</AssemblyVersion> </AssemblyInfo> <ReturnValue> <ReturnType>System.Boolean</ReturnType> </ReturnValue> <Parameters> <Parameter Name="key1" Type="System.Data.EntityKey" /> <Parameter Name="key2" Type="System.Data.EntityKey" /> </Parameters> <Docs> <param name="key1">A <see cref="T:System.Data.EntityKey" /> 을 비교 합니다.</param></span><span class="sxs-lookup"><span data-stu-id="580a3-202">The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType></format> </remarks> </Docs>
    </Member>
    <Member MemberName="op_Inequality"> <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);" /> <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" /> <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" /> <MemberType>Method</MemberType> <AssemblyInfo> <AssemblyName>System.Data.Entity</AssemblyName> <AssemblyVersion>4.0.0.0</AssemblyVersion> </AssemblyInfo> <ReturnValue> <ReturnType>System.Boolean</ReturnType> </ReturnValue> <Parameters> <Parameter Name="key1" Type="System.Data.EntityKey" /> <Parameter Name="key2" Type="System.Data.EntityKey" /> </Parameters> <Docs> <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param></span></span>
        <span data-ttu-id="580a3-203"><param name="key2">A <see cref="T:System.Data.EntityKey" /> 을 비교 합니다.</param></span><span class="sxs-lookup"><span data-stu-id="580a3-203"><param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param></span></span>
        <span data-ttu-id="580a3-204"><summary>두 <see cref="T:System.Data.EntityKey" /> 개체입니다.</summary></span><span class="sxs-lookup"><span data-stu-id="580a3-204"><summary>Compares two <see cref="T:System.Data.EntityKey" /> objects.</summary></span></span>
        <span data-ttu-id="580a3-205"><returns> <see langword="true" /> 경우는 <paramref name="key1" /> 및 <paramref name="key2" /> 값은 같고, 그렇지 않으면 <see langword="false" />합니다.</returns></span><span class="sxs-lookup"><span data-stu-id="580a3-205"><returns> <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, <see langword="false" />.</returns></span></span>
        <span data-ttu-id="580a3-206"><remarks> <format type="text/markdown"><![CDATA[</span><span class="sxs-lookup"><span data-stu-id="580a3-206"><remarks> <format type="text/markdown"><![CDATA[</span></span>  
  
## Remarks  
 <span data-ttu-id="580a3-207">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-207">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-208">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-208">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-209">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-209">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-210">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-210">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-211">@FSHO2@즉, 해당 엔터티 집합 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.EntityKey> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-211">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-212">또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 정규 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-212">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.</span></span>  
  
 <span data-ttu-id="580a3-213">이 연산자는 해당 하는 방법은 <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-213">The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Data.EntityKey key1, System.Data.EntityKey key2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Data.EntityKey key1, class System.Data.EntityKey key2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (key1 As EntityKey, key2 As EntityKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Data::EntityKey ^ key1, System::Data::EntityKey ^ key2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key1" Type="System.Data.EntityKey" />
        <Parameter Name="key2" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key1">
          <span data-ttu-id="580a3-214">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-214">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <param name="key2">
          <span data-ttu-id="580a3-215">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-215">A <see cref="T:System.Data.EntityKey" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="580a3-216">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-216">Compares two <see cref="T:System.Data.EntityKey" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="580a3-217">
            <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="580a3-217">
              <see langword="true" /> if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="580a3-218">@FSHO2@임시 키의 비교 의미 체계는 다음과 같이 영구 키와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-218">Temporary keys have different comparison semantics than permanent keys:</span></span>  
  
-   <span data-ttu-id="580a3-219">@FSHO2@임시 키에서는 참조 비교를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-219">Temporary keys use reference equality.</span></span> <span data-ttu-id="580a3-220">@FSHO2@즉, 똑같은 임시 <xref:System.Data.EntityKey> 인스턴스에 대한 두 참조는 같지만, 다른 <xref:System.Data.EntityKey> 인스턴스는 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-220">That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.</span></span>  
  
-   <span data-ttu-id="580a3-221">@FSHO2@영구 키에서는 포함된 키 속성 및 <xref:System.Data.Metadata.Edm.EntitySet>의 값을 기준으로 같은지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-221">Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>.</span></span> <span data-ttu-id="580a3-222">@FSHO2@즉, 해당 엔터티 집합 및 키 값이 동일할 경우 같은 것으로 간주되는 별개의 두 <xref:System.Data.EntityKey> 인스턴스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-222">That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.</span></span>  
  
 <span data-ttu-id="580a3-223">또한 임시 키에는 <xref:System.Data.Metadata.Edm.EntitySet>이나 키 값이 없지만 정규 키에는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="580a3-223">In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>