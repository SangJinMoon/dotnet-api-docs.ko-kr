<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400177" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Data.DataTable" />에 있는 열의 스키마를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn> 의 스키마를 만들기 위한 기본 빌딩 블록은 한 <xref:System.Data.DataTable>합니다. 하나 이상의 추가 하 여 스키마를 빌드합니다 <xref:System.Data.DataColumn> 개체는 <xref:System.Data.DataColumnCollection>합니다. 자세한 내용은 참조 [DataTable에 열 추가](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)합니다.  
  
 각 <xref:System.Data.DataColumn> 에 <xref:System.Data.DataColumn.DataType%2A> 속성 데이터의 종류를 결정 하는 <xref:System.Data.DataColumn> 포함 합니다. 예를 들어 데이터 형식을 문자열, 정수 또는 10 진수를 제한할 수 있습니다. 때문에 특성에 포함 된 데이터는 <xref:System.Data.DataTable> 병합 일반적으로 다시 원래 데이터 원본에 데이터 원본에서 데이터 형식을 일치 시켜야 합니다. 자세한 내용은 참조 [ADO.NET에서 데이터 형식 매핑을](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md)합니다.  
  
 와 같은 <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, 및 <xref:System.Data.DataColumn.ReadOnly%2A> 항목 및 업데이트 함으로써 데이터 무결성 보장 하기 위해 데이터를 제한 합니다. 사용할 수도 있습니다는 <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, 및 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 자동 데이터 생성을 제어 하는 속성입니다. 에 대 한 자세한 내용은 <xref:System.Data.DataColumn.AutoIncrement%2A> 열 참조 [AutoIncrement 열 만들기](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md)합니다. 자세한 내용은 참조 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
 에 있는 값이 있는지 확인 수는 <xref:System.Data.DataColumn> 는 만들어 고유는 <xref:System.Data.UniqueConstraint> 추가 하는 <xref:System.Data.ConstraintCollection> 의 <xref:System.Data.DataTable> 입니다는 <xref:System.Data.DataColumn> 속한 합니다. 자세한 내용은 참조 [DataTable 제약 조건](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)합니다.  
  
 간의 관계를 만들려면 <xref:System.Data.DataColumn> 개체를 만듭니다는 <xref:System.Data.DataRelation> 개체에 추가 하는 <xref:System.Data.DataRelationCollection> 의 <xref:System.Data.DataSet>합니다.  
  
 사용할 수 있습니다는 <xref:System.Data.DataColumn.Expression%2A> 의 속성에서 <xref:System.Data.DataColumn> 집계 열을 만들거나 열에 값을 계산 하는 개체입니다. 자세한 내용은 참조 [식 열 만들기](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Data.DataTable> 여러 <xref:System.Data.DataColumn> 개체입니다.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 다중 스레드 읽기 작업에 안전 합니다. 쓰기 작업을 동기화 해야 합니다.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 형식 문자열로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 를 만들 때 한 <xref:System.Data.DataColumn> 개체에 기본값이 없으면 <xref:System.Data.DataColumn.ColumnName%2A> 또는 <xref:System.Data.DataColumn.Caption%2A>합니다. 에 추가 하는 경우는 <xref:System.Data.DataColumnCollection>, 이름에 할당 되지 않은 경우 ("Column1", "Column2" 등)는 기본 이름이 생성 됩니다는 <xref:System.Data.DataColumn.ColumnName%2A>합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataColumn>만들고 다양 한 속성을 설정한 다음에 추가 <xref:System.Data.DataColumnCollection> 에 대 한는 <xref:System.Data.DataTable> 개체입니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
        <summary>지정된 열 이름을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 형식 문자열로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 열에 특정 이름이 됩니다는 <xref:System.Data.DataColumn.Caption%2A> 속성 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataColumn> 를 지정 된 <xref:System.Data.DataColumn.ColumnName%2A>합니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
        <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
        <summary>지정된 열 이름과 데이터 형식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataColumn> 를 지정 된 <xref:System.Data.DataColumn.ColumnName%2A> 및 <xref:System.Data.DataColumn.DataType%2A>합니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" />이 지정되지 않은 경우</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
        <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
        <param name="expr">이 열을 만드는 데 사용되는 식입니다. 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하세요.</param>
        <summary>지정된 이름, 데이터 형식 및 식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 계산된 열을 만듭니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" />이 지정되지 않은 경우</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
        <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
        <param name="expr">이 열을 만드는 데 사용되는 식입니다. 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하세요.</param>
        <param name="type">
          <see cref="T:System.Data.MappingType" /> 값 중 하나입니다.</param>
        <summary>열이 특성 열인지 여부를 결정하는 값, 지정된 이름, 데이터 형식 및 식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `type` 인수 집합은 <xref:System.Data.DataColumn.ColumnMapping%2A> 속성입니다. 속성은 지정 방법을 <xref:System.Data.DataColumn> 때 매핑되는 <xref:System.Data.DataSet> XML 문서로 변환 합니다. 예를 들어 열 이름이 "fName" 및 포함 된 값이 "Bob" 및 `type` 로 설정 된 `MappingType.Attribute`, XML 요소는 다음과 같은 것:  
  
 \<Name fName = 'Bob'/>  
  
 열 요소 또는 특성에 매핑되는 방법에 대 한 자세한 내용은 참조는 <xref:System.Data.DataColumn.ColumnMapping%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예에서는 계산된 열을 만듭니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" />이 지정되지 않은 경우</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블에 속해 있는 행의 이 열에 null 값이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          null 값이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataColumn> 설정 하 고 해당 <xref:System.Data.DataColumn.AllowDBNull%2A> 속성을 `true`합니다.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블에 추가되는 새 행의 열 값이 자동으로 증가되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          열 값이 자동으로 증가되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없으면이 열 형식은 Int16, Int32 또는 i n t 64이이 속성이 설정 된 경우는 <xref:System.Data.DataColumn.DataType%2A> 속성 Int32 강제 변환 됩니다. 계산된 열이 있는 경우 예외가 생성 됩니다. <xref:System.Data.DataColumn.Expression%2A> 속성을 설정 합니다. 증가 한 값은 columns 컬렉션에 추가 될 때이 열에 대 한 행의 값은 기본값을 사용 하는 경우에 사용 됩니다.  
  
 사용 하 여 새 행을 만들 수 있습니다는 <xref:System.Data.DataRow.ItemArray%2A> 의 속성은 <xref:System.Data.DataRow> 클래스 및 값의 배열에 전달 합니다. 이 지정 된 열에 대 한 잠재적인 문제를 해당 <xref:System.Data.DataColumn.AutoIncrement%2A> 로 설정 `true`이므로 해당 값이 자동으로 생성 합니다. 사용 하는 <xref:System.Data.DataRow.ItemArray%2A> 속성, 현재 위치 `null` 배열에 있는 열의 위치에 있습니다. 자세한 내용은 참조는 <xref:System.Data.DataRow.ItemArray%2A> 의 속성은 <xref:System.Data.DataRow> 클래스입니다.  
  
 열 형식이 <xref:System.Data.SqlTypes.SqlInt16> 또는 <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> 작동 하지 것입니다. Int16 또는 i n t 32를 대신 사용 합니다.  
  
 열 형식이 <xref:System.Data.SqlTypes.SqlInt64> 또는 <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> 은 부분적 으로만 작동 합니다. Int64 또는 10 진수를 대신 사용 합니다.  
  
 경우는 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 값 현재 값에 추가 되는 오버플로 검사 되지 않습니다.  
  
   
  
## Examples  
 다음 예에서는 <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, 및 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 속성입니다.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">열이 계산 열인 경우</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 속성이 <see langword="true" />로 설정된 열의 시작 값을 가져오거나 설정합니다. 기본값은 0입니다.</summary>
        <value>
          <see cref="P:System.Data.DataColumn.AutoIncrement" />의 시작 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, 및 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 속성입니다.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 속성이 <see langword="true" />로 설정된 열에 사용되는 증분을 가져오거나 설정합니다.</summary>
        <value>열 값이 자동으로 증가되는 정도를 나타내는 숫자입니다. 기본값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, 및 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 속성입니다.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">설정된 값이 0인 경우</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열의 캡션을 가져오거나 설정합니다.</summary>
        <value>열의 캡션입니다. 설정하지 않은 경우 <see cref="P:System.Data.DataColumn.ColumnName" /> 값이 반환됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Data.DataColumn.Caption%2A> 속성에 대 한 설명 또는 친숙 한 이름을 표시 하는 <xref:System.Data.DataColumn>합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataTable>합니다. 그런 다음 세 개의 추가 <xref:System.Data.DataColumn> 개체를 한 <xref:System.Data.DataColumnCollection> 설정는 <xref:System.Data.DataColumn.Caption%2A> 각 속성 <xref:System.Data.DataColumn>합니다.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열의 <see cref="T:System.Data.MappingType" />을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Data.MappingType" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ColumnMapping%2A> 속성 결정 방법을 <xref:System.Data.DataColumn> 때 매핑되는 <xref:System.Data.DataSet> 사용 하 여 XML 문서 저장는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.  
  
 예를 들어 경우는 <xref:System.Data.DataColumn> "customerID" 라는 및 해당 <xref:System.Data.DataColumn.ColumnMapping%2A> 속성이로 설정 되어 `MappingType.Element`, 열 값에는 다음과 같은 XML 생성 합니다.  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 그러나 같은 열에 매핑된 경우 `MappingType.Attribute`, 다음 XML이 생성:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 사용 하 여는 <xref:System.Data.DataColumn.%23ctor%2A> 생성자를 포함 하는 `type` 모두 지정 하는 방법에 대 한 인수는 <xref:System.Data.DataColumn> 경우 매핑된 해당 <xref:System.Data.DataSet> XML 문서를 변환 합니다.  
  
 <xref:System.Data.DataColumn.ColumnMapping%2A> 속성은 생성자 인수에 해당 `type`합니다.  
  
   
  
## Examples  
 다음 예에서는 <xref:System.Data.DataColumn.ColumnMapping%2A> 형식 속성을 새 <xref:System.Data.DataColumn>합니다.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumnCollection" />의 열 이름을 가져오거나 설정합니다.</summary>
        <value>열 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Data.DataColumn> 는 no가 만들어지면 <xref:System.Data.DataColumn.ColumnName%2A> 값입니다. 그러나 때는 <xref:System.Data.DataColumn> 에 추가 되는 <xref:System.Data.DataColumnCollection> 에 대 한는 <xref:System.Data.DataTable> 개체 ("Column1", "Column2" 등)는 기본 이름이 지정 됩니다.  
  
 기본적으로는 <xref:System.Data.DataColumn.Caption%2A> 값으로 설정 됩니다는 <xref:System.Data.DataColumn.ColumnName%2A> 값입니다.  
  
   
  
## Examples  
 다음 예에서는 가져옵니다는 <xref:System.Data.DataColumn.ColumnName%2A> 모든 테이블에 있는 모든 열에 대해 한 <xref:System.Data.DataSet>합니다. 이 예제를 만드는 방법도 보여 줍니다는 <xref:System.Data.DataColumn> 를 새 <xref:System.Data.DataColumn.ColumnName%2A>합니다.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">속성이 <see langword="null" /> 또는 빈 문자열로 설정되어 있고 열이 컬렉션에 속한 경우</exception>
        <exception cref="T:System.Data.DuplicateNameException">이름이 같은 열이 컬렉션에 이미 있는 경우. 대/소문자를 구분하지 않고 이름을 비교합니다.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열에 저장된 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>열 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Data.DataColumn.DataType%2A> 값은 반드시 올바로 만들고 및 데이터 원본의 데이터를에서 업데이트 해야 합니다.  
  
 <xref:System.Data.DataColumn.DataType%2A> 속성은 다음과 같은 기본.NET Framework 데이터 형식을 지원 합니다.  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 다음 배열 형식을:  
  
-   `Byte[]`  
  
 데이터를 저장 하기 시작 된 열 뒤에이 속성을 변경 하는 경우 예외가 생성 됩니다.  
  
 경우 <xref:System.Data.DataColumn.AutoIncrement%2A> 로 설정 된 `true` 설정 하기 전에 <xref:System.Data.DataColumn.DataType%2A> 속성을 유형을 제외 하 고 정수 형식으로 설정 하려고, 예외가 생성 됩니다.  
  
> [!NOTE]
>  데이터 형식의 열 `Byte[]` 이므로, 기본.NET Framework 데이터 형식과 달리, 참조 데이터 형식의 특정 한 경우에는 특별 한 처리를 필요로 합니다. 데이터 형식의 열 `Byte[]` 로 사용 되는 <xref:System.Data.DataTable.PrimaryKey%2A>로 <xref:System.Data.DataView.Sort%2A> 또는 <xref:System.Data.DataView.RowFilter%2A> 에 대 한 키는 <xref:System.Data.DataView>, 열 값을 변경한 할당 해야는 `Byte[]` 별도로 인스턴스화된 열값`Byte[]` 개체입니다. 이 할당 정렬, 필터링 및 기본 키 작업에 의해 사용 되는 내부 인덱스의 업데이트를 트리거하도록 필요 합니다. 다음 예제에서 이를 확인할 수 있습니다.  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  기본.NET Framework 데이터 형식 이외의 다른 데이터 형식의 열을 정의할 수 있지만 및 `Byte[]`, 이러한 열은 다음과 같은 사용 제한에 따라 사용자 정의 형식으로 처리 합니다. (사용자 정의 형식에 대 한 자세한 내용은 참조 하십시오. [만들기 및 사용자 형식](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   열에 포함 될 수 없습니다는 <xref:System.Data.DataView.RowFilter%2A> 또는 <xref:System.Data.DataTable.Select%2A> 식입니다.  
  
-   열으로 사용 되는 경우는 <xref:System.Data.DataTable.PrimaryKey%2A>로 <xref:System.Data.DataView.Sort%2A> 또는 <xref:System.Data.DataView>를 변경할 수 없는 필드로 처리 해야 합니다; 테이블에 추가 되 면 열 데이터를 변경 하지 않아야 합니다.  
  
-   해당 <xref:System.Data.DataColumn.ColumnMapping%2A> 로 설정할 수 있습니다 `MappingType.Element`합니다.  
  
-   열의 데이터 형식이 있어야 구현으로 표시 해야 하는 클래스는 <xref:System.SerializableAttribute>, 필요한 경우 구현 하는 경우는 <xref:System.Runtime.Serialization.ISerializable> 또는 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스입니다.  
  
-   변경 내용 추적에 대 한 지원은 제한 됩니다. 활용 하는 <xref:System.Data.DataTable> 클래스의 변경 내용 추적 메커니즘을 열의 데이터 형식을 구현 하는 클래스를 구현는 <xref:System.ComponentModel.IChangeTracking> 인터페이스, 또는 알리는 하는 것에 대 한 책임은 <xref:System.Data.DataRow> 열 값이 된 경우 호출 하거나 수정 <xref:System.Data.DataRow.SetModified%2A> 행 또는 열 값 개체를 개별적으로 인스턴스화된 열 값 개체를 할당 하 여 합니다.  
  
   
  
## Examples  
 에 여러 데이터 형식의 열을 추가 하는 다음 예제는 <xref:System.Data.DataTable>, 다음 테이블에 하나의 행을 추가 합니다.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">열에 저장된 데이터가 이미 있는 경우</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열의 <see langword="DateTimeMode" />를 가져오거나 설정합니다.</summary>
        <value>지정된 열의 <see cref="T:System.Data.DataSetDateTime" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.DateTimeMode%2A> 행에 추가 된 후에 수정할 수 없습니다는 <xref:System.Data.DataColumn>에서 수정 하는 제외 하 고 <xref:System.Data.DataSetDateTime.Unspecified> 및 <xref:System.Data.DataSetDateTime.UnspecifiedLocal> 또는 그 반대입니다. 수정 `UnspecifiedLocal` 를 `Unspecified` 있으며 반대의 이러한 두 옵션 간의 차이점 serialization 중에 하 고 저장소는 영향을 주지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 행을 만들 때 열의 기본값을 가져오거나 설정합니다.</summary>
        <value>열의 <see cref="P:System.Data.DataColumn.DataType" />에 적합한 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값은 열에 자동으로 할당 된 값 때는 <xref:System.Data.DataRow> 만들어집니다 (예를 들어 날짜와 시간을 <xref:System.Data.DataRow> 생성 합니다.  
  
 때 <xref:System.Data.DataColumn.AutoIncrement%2A> 로 설정 된 true 이면 있을 수 있습니다 기본값이 없습니다.  
  
 사용 하 여 새 행을 만들 수 있습니다는 <xref:System.Data.DataRow.ItemArray%2A> 의 속성은 <xref:System.Data.DataRow> 클래스와 값의 배열을 전달 합니다. 해당 값이 자동으로 생성 하기 때문에 이것이 기본값은 열에 대 한 잠재적인 문제입니다. 사용 하는 <xref:System.Data.DataRow.ItemArray%2A> 속성 이러한 열이 있는 배치 `null` 배열에 있는 열의 위치에 있습니다. 자세한 내용은 <xref:System.Data.DataRow.ItemArray%2A> 속성을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 여러 가지 <xref:System.Data.DataColumn> 각 열에 기본값 개체를 다른 데이터 형식의 적절 한 설정입니다.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">행을 추가할 때 기본값이 열 데이터 형식의 인스턴스가 아닌 경우</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>행을 필터링하거나 열의 값을 계산하거나 집계 열을 만드는 데 사용되는 식을 가져오거나 설정합니다.</summary>
        <value>열의 값을 계산하거나 집계 열을 만드는 식입니다. 식의 반환 형식은 열의 <see cref="P:System.Data.DataColumn.DataType" />에 의해 결정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용도 중 하나는 <xref:System.Data.DataColumn.Expression%2A> 속성은 계산된 열을 만듭니다. 예를 들어 세금 값을 계산 하려면 단가 곱한 특정 지역의 세율 합니다. 세율 영역 마다 다르므로 수 없기 단일 세율; 열에 배치할 수 있습니다. 대신 사용 하 여 값을 계산 되는 <xref:System.Data.DataColumn.Expression%2A> 속성을 다음 섹션에는 Visual Basic 코드에 표시 된 대로:  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 두 번째 용도 집계 열을 만드는 것입니다. 계산된 된 값과 마찬가지로 집계에 있는 행의 전체 집합 기반 연산을 수행는 <xref:System.Data.DataTable>합니다. 집합에 반환 되는 행 수를 계산 하는 간단한 예는 합니다. 이 방법은 사용 하는 것이 Visual Basic 코드에서와 같이 특정 한 영업 사원별으로 완료 된 트랜잭션의 수를 계산 합니다.  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>식 구문  
 식을 만들 때 사용 된 <xref:System.Data.DataColumn.ColumnName%2A> 열을 참조 하는 속성입니다. 예를 들어 경우는 <xref:System.Data.DataColumn.ColumnName%2A> 식이 다음과 같을 수는 하나 이상의 열 다른 "Quantity" 및 "UnitPrice"에 대 한 합니다.  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  식에 사용 되는 열을 해당 열에 종속 되도록 식 이라고 합니다. 종속 열 변경 되거나 제거 된 경우 예외가 throw 되지 않습니다. 현재 중단 된 식 열에 액세스할 때 예외가 throw 됩니다.  
  
 필터에 대 한 식을 만들 때 작은따옴표를 사용 하 여 문자열을 묶습니다.  
  
 "LastName = 'Jones'"  
  
 열 이름 영숫자가 아닌 문자가 포함 된 또는 숫자로 시작 하거나 중 하 나와 일치 사례는 다음과 같은 예약어를 경우 다음 단락에 설명 된 대로 특별 한 처리가 필요 합니다.  
  
 그리고  
  
 사이  
  
 자식  
  
 False  
  
 입력  
  
 예  
  
 Like  
  
 Not  
  
 Null  
  
 또는  
  
 부모  
  
 True  
  
 어느 대괄호로 묶어야 합니다 열 이름을 위의 조건 중 하나를 충족 하는 경우 또는 "'" 따옴표 (억음 악센트 기호). 예를 들어 식에서 "열 #" 라는 열을 사용 하려면 사용자는 #으로 작성 중 하나가 "[열]":  
  
 총 * [열 #]  
  
 또는 "\`열 #'":  
  
 총 * \`열 #'  
  
 열 이름을 대괄호로 다음 어떤 포함 되어 있으면 ']' 및 '\\' 문자 (그러나 다른 문자 하지)에 백슬래시와이 붙여 이스케이프 되어야 합니다 ("\\") 문자. 열 이름은 억음 악센트 문자에 포함 되어 있으면에 억음 악센트 문자 하지 포함 해야 합니다. 예를 들어 라는 열 "열\\"를 작성 합니다.  
  
 Total * [Column[\\]\\\\]  
  
 또는  
  
 총 * \`열\\`  
  
## <a name="user-defined-values"></a>사용자 정의 값  
 사용자 정의 값 열 값과 비교 하기 위해 식 내에서 사용할 수 있습니다. 문자열 값을 작은따옴표로 묶어야 합니다 (및 각 작은따옴표 문자는 문자열 값에 다른 작은따옴표 문자 앞에 추가 하 여 이스케이프) 합니다. 파운드 기호 (#) 또는 데이터 공급자에 따라 단일 따옴표 (') 내에서 날짜 값 포함 되어야 합니다. 과학적 표기법 및 10 진수 숫자 값에 대 한 허용 됩니다. 예:  
  
 "FirstName = 'John'"  
  
 "가격 < 50.00 ="  
  
 "Birthdate < #1/31/82#"  
  
 포함 된 열에 대 한 열거 값을 정수 데이터 형식으로 값을 캐스팅 합니다. 예:  
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>리터럴 식 구문 분석  
 고정 문화권 로캘에서 모든 리터럴 식은 표시 되어야 합니다. 때 `DataSet` 구문 분석 하 고 리터럴 식을 변환 항상 고정 문화권의 경우 현재 문화권이 아닌을 사용 합니다.  
  
 문자열 리터럴은 작은따옴표 값 주위에 있는 경우 식별 됩니다. 예:  
  
 'John'  
  
 `Boolean` 리터럴은 true와 false입니다. 식에서 따옴표로 묶이지 않은 합니다.  
  
 `Integer` 리터럴 [+-]? [0-9] +으로 처리 `System.Int32`, `System.Int64` 또는 `System.Double`합니다. `System.Double` 크기에 따라 숫자 정밀도 떨어질 수 있습니다. 예를 들어, 리터럴 숫자가 2147483650, `DataSet` 는 먼저 숫자도 구문 분석 하려고 한 `Int32`합니다. 이 수 너무 크기 때문에 실패 합니다. 이 경우 `DataSet` 는 숫자도 구문 분석 하는 `Int64`는 성공 합니다. Int64의 최 댓 값 보다 큰 숫자 리터럴이 `DataSet` 사용 하 여 리터럴을 구문 분석 됩니다 `Double`합니다.  
  
 실제 리터럴 4.42372 e 같은 과학적 표기법을 사용 하 여-30을 사용 하 여 구문 분석 `System.Double`합니다.  
  
 실제 리터럴은 과학적 표기법으로는 없지만 소수 부분이 처리 됩니다 `System.Decimal`합니다. 지 원하는 최대값 또는 최소값 값을 초과 하는 경우 `System.Decimal`,으로 구문 분석 됩니다는 `System.Double`합니다. 예:  
  
 142526.144524 변환할 수는 `Decimal`합니다.  
  
 345262.78036719560925667로 취급 됩니다는 `Double`합니다.  
  
## <a name="operators"></a>연산자  
 부울 AND, OR 및 NOT 연산자를 사용 하 여 연결 허용 됩니다. 절을 그룹화 하려면 괄호를 사용할 수 있으며 우선 순위를 강제로 수 있습니다. AND 연산자는 다른 연산자 보다 우선 합니다. 예:  
  
 (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  
  
 비교 식을 만들 때 다음과 같은 연산자를 사용할 수 있습니다.  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 또한 다음과 같은 산술 연산자는 식에서 지원 됩니다.  
  
 \+ (더하기)  
  
 \-(빼기)  
  
 \* (곱하기)  
  
 / (나누기)  
  
 % (계수)  
  
## <a name="string-operators"></a>문자열 연산자  
 문자열을 연결 하려면 사용 된 + 문자가 있습니다. 값은 <xref:System.Data.DataSet.CaseSensitive%2A> 속성은 <xref:System.Data.DataSet> 클래스 문자열 비교는 대/소문자 구분 여부를 결정 합니다. 그러나으로 해당 값을 재정의할 수는 <xref:System.Data.DataTable.CaseSensitive%2A> 의 속성은 <xref:System.Data.DataTable> 클래스입니다.  
  
## <a name="wildcard-characters"></a>와일드카드 문자  
 둘 다의 * 와일드 카드 문자는 LIKE 비교에 대 한 % 같은 의미로 사용할 수 있습니다. LIKE 절에서 문자열을 포함 하는 경우는 * 또는 %, 해당 문자를 대괄호 ()에 포함 되어야 합니다. 대괄호가 절에 있으면 각 대괄호 문자 (예: [[] 또는 []])에 대괄호로 묶어야 합니다. 시작 및 패턴의 끝에 또는 패턴의 끝에 또는 패턴의 시작 부분에 와일드 카드는 허용 됩니다. 예:  
  
 "ItemName 같이 ' * 제품\*'"  
  
 "ItemName 같이 ' * 제품 '"  
  
 "ItemName 같은 ' 제품 *'"  
  
 와일드 카드 문자는 문자열을 포함할 수 없습니다. 예를 들어 ' te * xt' 허용 되지 않습니다.  
  
## <a name="parentchild-relation-referencing"></a>부모/자식 관계 참조  
 열 이름 앞에 추가 하 여 부모 테이블 식에서 참조할 수 있습니다 `Parent`합니다. 예를 들어는 `Parent.Price` 부모 테이블의 열 이름이 참조 `Price`합니다.  
  
 자식에 둘 이상의 부모 행을 Parent(RelationName)를 사용 합니다. 열 이름입니다. 예를 들어 Parent(RelationName) 합니다. 가격 price는 관계를 통해 부모 테이블의 열을 참조 합니다.  
  
 열 이름 앞에 추가 하 여 식에서 자식 테이블의 열을 참조할 수 있습니다 `Child`합니다. 그러나 자식 관계에서 여러 행을 반환할 수 때문에 자식 열에 대 한 참조는 집계 함수에 포함 해야 합니다. 예를 들어 `Sum(Child.Price)` 라는 열의 합계를 반환 합니다 `Price` 자식 테이블에 있습니다.  
  
 구문은 테이블에 있는 경우 둘 이상의 자식,: `Child(RelationName)`합니다. 예를 들어, 테이블에 있는 경우 두 개의 자식 테이블을 명명 된 `Customers` 및 `Orders`, 및 <xref:System.Data.DataRelation> 개체의 이름은 `Customers2Orders`, 참조는 다음과 같이 수:  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>집합체  
 다음과 같은 집계 형식이 지원 됩니다.  
  
 Sum (Sum)  
  
 Avg (평균)  
  
 Min (최소)  
  
 Max (최대)  
  
 Count (개수)  
  
 StDev (통계적 표준 편차)  
  
 Var (통계적 분산)입니다.  
  
 집계는 일반적으로 관계를 따라 수행 됩니다. 부모/자식 관계 참조 앞에서 설명한에 설명 된 대로 앞에서 나열 된 함수 및 자식 테이블의 열 중 하나를 사용 하 여 집계 식을 만듭니다. 예:  
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 단일 테이블에서 집계를 수행할 수도 있습니다. 예를 들어 숫자 값의 요약 열에 라는 "Price" 합니다.  
  
 Sum(Price)  
  
> [!NOTE]
>  단일 테이블을 사용 하 여 집계를 만들 경우 group by 기능 될 수 있습니다. 대신, 모든 행의 열에 동일한 값이 표시 됩니다.  
  
 테이블에 행이 없는 경우 집계 함수 반환 됩니다 `null`합니다.  
  
 데이터 형식을 검사 하 여 항상 확인할 수 있습니다는 <xref:System.Data.DataColumn.DataType%2A> 의 열 속성입니다. 다음 섹션에 표시 된 Convert 함수를 사용 하 여 데이터 형식을 변환할 수도 있습니다.  
  
 집계는 단일 열만 적용할 수 있습니다 및 집계 내 다른 식이 없는 사용할 수 있습니다.  
  
## <a name="functions"></a>함수  
 다음 함수 에서도 지원 됩니다.  
  
 `CONVERT`  
  
|||  
|-|-|  
|설명|특정 식에서 지정 된.NET Framework 형식으로 변환합니다.|  
|구문|Convert(`expression`, `type`)|  
|인수|`expression` --변환할 식입니다.<br /><br /> `type` -.NET Framework 형식을 값 변환할 수 있습니다.|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 모든 변환에는 다음과 같은 예외를 사용 하 여 유효: `Boolean` 에서 강제 변환할 수 있는 `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` 및 자체입니다. `Char` 강제 변환할 수 있는 `Int32`, `UInt32`, `String`, 및 자체입니다. `DateTime` 강제 변환할 수 있는 `String` 및 자체입니다. `TimeSpan` 강제 변환할 수 있는 `String` 및 자체입니다.  
  
 `LEN`  
  
|||  
|-|-|  
|설명|문자열의 길이 가져옵니다.|  
|구문|LEN(`expression`)|  
|인수|`expression` --계산할 문자열입니다.|  
  
 예: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|설명|확인 된 식 또는 대체 값 식과 반환을 확인합니다.|  
|구문|ISNULL(`expression`, `replacementvalue`)|  
|인수|`expression` --확인할 식입니다.<br /><br /> `replacementvalue` --식은 경우 `null`, `replacementvalue` 반환 됩니다.|  
  
 Example: myDataColumn.Expression="IsNull(price, -1)"  
  
 `IIF`  
  
|||  
|-|-|  
|설명|논리 식의 결과 따라 두 값 중 하나를 가져옵니다.|  
|구문|IIF(`expr`, `truepart`, `falsepart`)|  
|인수|`expr` --계산할 식입니다.<br /><br /> `truepart` -식이 true 인 경우 반환할 값입니다.<br /><br /> `falsepart` -식이 false를 반환할 값입니다.|  
  
 Example: myDataColumn.Expression = "IIF(total>1000, 'expensive', 'dear')  
  
 `TRIM`  
  
|||  
|-|-|  
|설명|제거 모든 선행 및 후행 공백 문자 \r, \n, \t, ' '|  
|구문|TRIM(`expression`)|  
|인수|`expression` --Trim을 식.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|설명|문자열에 지정된 된 위치 에서부터 지정 된 길이의 문자열을 가져옵니다.|  
|구문|SUBSTRING(`expression`, `start`, `length`)|  
|인수|`expression` 부분 문자열에 대 한--소스 문자열입니다.<br /><br /> `start` --부분 문자열의 시작 위치를 지정 하는 정수입니다.<br /><br /> `length` --부분 문자열의 길이 지정 하는 정수입니다.|  
  
 예: myDataColumn.Expression = "SUBSTRING (phone, 7, 8)"  
  
> [!NOTE]
>  다시 설정할 수 있습니다는 <xref:System.Data.DataColumn.Expression%2A> null 값 이나 빈 문자열을 할당 하 여 속성입니다. 모든 이전에 채워진된 행 후의 기본 값에 할당 된 기본 값을 식 열에 설정 된 <xref:System.Data.DataColumn.Expression%2A> 속성이 다시 설정 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 세 개의 열에는 <xref:System.Data.DataTable>합니다. 두 번째 및 세 번째 열 식이 포함 됩니다. 가변 세율을 사용 하는 세금을 계산 하는 두 번째 하 고 세 번째는 첫 번째 열의 값으로 계산 결과 추가 합니다. 결과 테이블에 표시 됩니다는 <xref:System.Windows.Forms.DataGrid> 제어 합니다.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> 또는 <see cref="P:System.Data.DataColumn.Unique" /> 속성이 <see langword="true" />로 설정되어 있는 경우</exception>
        <exception cref="T:System.FormatException">CONVERT 함수를 사용하는 동안 식은 문자열로 계산되지만 문자열에 형식 매개 변수로 변환될 수 있는 표현이 포함되지 않은 경우</exception>
        <exception cref="T:System.InvalidCastException">CONVERT 함수를 사용하는 동안 요청된 캐스팅을 수행할 수 없는 경우. 가능한 캐스팅에 대한 자세한 내용은 다음 섹션에서 변환 함수를 참조하십시오.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">SUBSTRING 함수를 사용하는 동안 시작 인수가 범위를 벗어난 경우  
  
 -또는-  
  
 SUBSTRING 함수를 사용하는 동안 길이 인수가 범위를 벗어난 경우</exception>
        <exception cref="T:System.Exception">LEN 또는 TRIM 함수를 사용하는 동안 식이 문자열로 계산되지 않는 경우. 여기에는 <see cref="T:System.Char" />로 계산되는 식이 포함됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumn" />과 관련된 사용자 지정 사용자 정보 컬렉션을 가져옵니다.</summary>
        <value>사용자 지정 정보의 <see cref="T:System.Data.PropertyCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ExtendedProperties%2A> 속성을 사용 하면 개체를 사용 하 여 사용자 지정 정보를 저장할 수 있습니다. 예를 들어 데이터를 새로 고쳐야 할 시간을 저장할 수 있습니다.  
  
 확장된 속성 형식 이어야 합니다 <xref:System.String>합니다. 형식이 아닌 속성 <xref:System.String> 유지 되지 않습니다는 <xref:System.Data.DataColumn> XML로 기록 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 사용자 지정 속성을 추가 <xref:System.Data.PropertyCollection> 에서 반환 되는 <xref:System.Data.DataColumn.ExtendedProperties%2A> 속성입니다. 두 번째 예에서는 사용자 지정 속성을 검색합니다.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>텍스트 열의 최대 길이를 가져오거나 설정합니다.</summary>
        <value>열의 최대 길이(문자 수)입니다. 열에 최대 길이가 없으면 값은 ?1(기본값)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.MaxLength%2A> 텍스트가 아닌 열에 대 한 속성은 무시 됩니다. A <xref:System.ArgumentException> 할당 하는 경우 예외가 발생 <xref:System.Data.DataColumn.MaxLength%2A> 문자열이 아닌 열에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumn" />의 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Data.DataColumn" />의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.Namespace%2A> 에 문서를 읽고 XML을 쓸 때 속성은 사용는 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet> 를 사용 하는 <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, 또는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.  
  
 XML 문서의 네임 스페이스 XML 특성 및 요소를 읽을 때 범위를 지정 하는 데 사용 되는 <xref:System.Data.DataSet>합니다. 예를 들어 한 <xref:System.Data.DataSet> 스키마가 포함 된 "myCompany" 네임 스페이스를 포함 문서에서 읽은 데이터를 읽을 하려고 및 (으로 <xref:System.Data.DataSet.ReadXml%2A> 메서드) "theirCompany" 네임 스페이스를 포함 하는 문서에서 기존 스키마에 해당 하지 않는 모든 데이터는 무시 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">네임스페이스에 데이터가 이미 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">매개 변수 참조입니다.</param>
        <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataColumnCollection" /> 컬렉션에서 0부터 시작하는 열의 위치를 가져옵니다.</summary>
        <value>열 위치입니다. 열이 컬렉션의 멤버가 아니면 -1을 가져옵니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 열의 열 서 수, 이름과 데이터 형식을 반환합니다.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.DataTable" /> 네임스페이스의 별칭인 XML 접두사를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> 네임스페이스의 XML 접두사입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Prefix%2A> 에 대 한 네임 스페이스에 속하는 요소를 식별 하는 XML 문서 전체에서 사용 되는 <xref:System.Data.DataSet> 개체 (의해 설정 된 <xref:System.Data.DataSet.Namespace%2A> 속성).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">매개 변수 참조입니다.</param>
        <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블에 행을 추가한 후 열을 변경할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          열이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 한 <xref:System.Data.DataColumn> 설정 하 고 해당 <xref:System.Data.DataColumn.ReadOnly%2A> 속성 `true`합니다.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">속성이 계산 열에서 <see langword="false" />로 설정된 경우</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">지정된 서수입니다.</param>
        <summary>
          <see cref="T:System.Data.DataColumn" />의 서수나 위치를 지정된 서수나 위치로 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn>의 서수나 위치를 지정된 서수나 위치로 변경합니다. 경우 서 수는 0 보다 작거나 열-1 (마지막으로 열의 서 수를 보다 큼)의 기존 번호 보다 큰 다음 잘못 된 <xref:System.ArgumentException> throw 됩니다.  
  
 열의 서 수를 변경 하면 열 열의 컬렉션에서 새 위치로 이동 합니다. 열의 새 서 수를 조정 하는 이전 및 새 서 수 사이 모든 열 번호가 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열이 속한 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Data.DataTable" />이 속한 <see cref="T:System.Data.DataColumn" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 부모 테이블을 반환 하는 다음 예제는 <xref:System.Data.DataColumn> 를 통해 해당 <xref:System.Data.DataColumn.Table%2A> 속성입니다.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>열의 <see cref="P:System.Data.DataColumn.Expression" />이 있으면 가져옵니다.</summary>
        <returns>속성이 설정되어 있으면 <see cref="P:System.Data.DataColumn.Expression" /> 값을 반환하고, 그렇지 않으면 <see cref="P:System.Data.DataColumn.ColumnName" /> 속성을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Data.DataColumn.ToString%2A> 의 컬렉션의 각 멤버의 기본 문자열을 반환 하는 속성 <xref:System.Data.DataColumn> 개체입니다.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열의 각 행에 있는 값이 고유해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          값이 고유해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 false에서 true로 변경 되는 즉시 값이 고유한 지 확인 하려면이 열에 대해 unique 제약 조건을 만들어질 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Data.DataColumn>, 해당 속성을 설정 하 고 테이블의 열 컬렉션에 추가 합니다.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">열이 계산 열인 경우</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>