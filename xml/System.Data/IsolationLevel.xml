<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd1598b6f019ec4266a4507137cb374b09d7767b" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33679394" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>연결에 대한 트랜잭션 잠금 동작을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IsolationLevel> 값 트랜잭션을 수행 하는 경우.NET Framework 데이터 공급자에서 사용 됩니다.  
  
 <xref:System.Data.IsolationLevel> 계속 적용 될 때까지 명시적으로 변경 되지만 언제 든 지 변경할 수 있습니다. 새 값은 구문 분석 시간이 아닌 실행 시 사용 됩니다. 트랜잭션 중 변경 하는 경우에 예상 되는 동작은 서버 나머지 모든 문은 새 잠금 수준을 적용할 것입니다.  
  
   
  
## Examples  
 이 응용 프로그램에 사용 하는 방법을 보여 줍니다 <xref:System.Data.IsolationLevel> 에서 <xref:System.Data.Common.DbTransaction>합니다. 샘플에서는 각 격리 수준에는 사용할 수 있는 다음 동작을 보여 줍니다.  
  
-   더티 읽기입니다.  
  
-   반복 불가능 읽기입니다.  
  
-   팬텀 합니다.  
  
 이 응용 프로그램은 다음 격리 수준에 있는 실행 됩니다.  
  
-   ReadUncommitted  
  
-   ReadCommitted  
  
-   RepeatableRead  
  
-   직렬화 가능  
  
-   스냅숏  
  
 PhantomReadThreads 클래스 특정 트랜잭션이 팬텀 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다. 트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.  
  
-   첫 번째 스레드가 products(All)를 선택 합니다.  
  
-   두 번째 스레드가 새 제품을 삽입 합니다.  
  
-   두 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
-   제품을 다시 선택 합니다.  
  
-   첫 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
 트랜잭션 동작을 허용 하는 경우 두 개의 Select 작업 서로 다른 결과 얻을 수 있습니다.  
  
 NonrepeatableReadThreads 클래스 특정 트랜잭션이 반복 하지 않는 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다. 트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.  
  
-   첫 번째 스레드가 product(ProductId=1)를 선택 합니다.  
  
-   두 번째 스레드가 수량 value(ProductId=1)를 업데이트 합니다.  
  
-   두 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
-   제품을 다시 선택 합니다.  
  
-   첫 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
 트랜잭션 동작을 허용 하는 경우 두 개의 Select 작업 서로 다른 결과 얻을 수 있습니다.  
  
 ExchangeValuesThreads 클래스 Serializable 및 Snapshot 트랜잭션 간의 차이 보여 줍니다. 직렬화 가능 트랜잭션 스레드는 다음 순서 대로 적용:  
  
-   첫 번째 스레드에서 변수에 product(ProductId=2)와 저장소의 가격을 가져옵니다.  
  
-   첫 번째 스레드에서 product(ProductId=2) 가격이 product(ProductId=1)의 가격을 업데이트 합니다.  
  
-   첫 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
-   두 번째 스레드에서 변수에 product(ProductId=1)와 저장소의 가격을 가져옵니다.  
  
-   두 번째 스레드에서 product(ProductId=1) 가격이 product(ProductId=2)의 가격을 업데이트 합니다.  
  
-   두 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
 이제 가격의 값 (ProductId = 1 및 ProductId = 2)은 원래 Product(ProductId=2) 가격와 동일 합니다.  
  
 스냅숏 트랜잭션에 대 한 스레드는 다음 순서 운영 됩니다.  
  
-   첫 번째 스레드에서 변수에; product(ProductId=2)와 저장소의 가격을 가져옵니다  
  
-   첫 번째 스레드에서 product(ProductId=2) 가격이 product(ProductId=1)의 가격을 업데이트 합니다.  
  
-   두 번째 스레드에서 스냅숏에서 product(ProductId=1)의 가격을 가져오고 변수에 저장 합니다.  
  
-   두 번째 스레드에서 product(ProductId=1) 가격이 product(ProductId=2)의 가격을 업데이트 합니다.  
  
-   두 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
-   첫 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
 이제 제품의 가격을 교환 (ProductId = 1 및 ProductId = 2).  
  
 DirtyReadThreads 클래스 특정 트랜잭션이 커밋되지 않은 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다. 트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.  
  
-   첫 번째 스레드가에서 트랜잭션을 시작 하 고 수량 value(ProductId=1)를 추가 합니다.  
  
-   두 번째 스레드에서 수량 값 읽고 값을 다시 추가 합니다.  
  
-   두 번째 스레드가에서 트랜잭션을 커밋하십시오.  
  
-   첫 번째 스레드가에서 트랜잭션을 롤백하십시오.  
  
 트랜잭션 동작을 허용 하는 경우에 수량 값을 두 번 추가 됩니다.  
  
 이 코드 예제와 함께 C# 및 Visual Basic 프로젝트에서 확인할 수 있습니다 [개발자 코드 샘플](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4)합니다.  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>격리 수준이 높은 트랜잭션에서 보류 중인 변경은 덮어쓸 수 없습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>공유 잠금은 커밋되지 않은 읽기를 방지하기 위해 데이터를 읽는 동안 유지되지만 트랜잭션이 끝나기 전에 데이터가 변경되어 반복되지 않은 읽기나 팬텀 데이터가 생성될 수 있습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>공유 잠금이 발행되지 않았고 단독 잠금이 부여되지 않았음을 의미하는 더티 읽기가 가능합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>잠금은 쿼리에서 사용되는 모든 데이터에 적용되어 데이터를 다른 사용자가 업데이트할 수 없게 합니다. 반복되지 않은 읽기를 금지하지만 팬텀 행의 경우는 가능합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>범위 잠금을 <see cref="T:System.Data.DataSet" />에 적용하여 트랜잭션이 완료될 때까지 다른 사용자가 데이터 집합에 행을 삽입하거나 업데이트할 수 없게 합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>동일한 데이터에 대해 한 응용 프로그램에서 데이터를 수정하고 있을 때 또 다른 응용 프로그램에서 읽을 수 있는 데이터 버전을 저장하여 차단을 줄입니다. 다시 쿼리해도 한 트랜잭션에서 다른 트랜잭션의 변경 내용을 볼 수 없음을 나타냅니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>지정된 격리 수준과 다른 수준이 사용되지만 수준을 결정할 수는 없습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 경우 <xref:System.Data.Odbc.OdbcTransaction>설정 하지 않은 경우, <xref:System.Data.IsolationLevel> 설정한 또는 <xref:System.Data.IsolationLevel> 를 `Unspecified`, 트랜잭션이 사용 되는 드라이버에 의해 결정 되는 격리 수준에 따라 실행 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>