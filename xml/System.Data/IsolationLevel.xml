<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IsolationLevel.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe07fd1598b6f019ec4266a4507137cb374b09d7767b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd1598b6f019ec4266a4507137cb374b09d7767b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Data.IsolationLevel">
          <source>Specifies the transaction locking behavior for the connection.</source>
          <target state="translated">연결에 대한 트랜잭션 잠금 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> values are used by a .NET Framework data provider when performing a transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> 값 트랜잭션을 수행 하는 경우.NET Framework 데이터 공급자에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> remains in effect until explicitly changed, but it can be changed at any time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> 계속 적용 될 때까지 명시적으로 변경 되지만 언제 든 지 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The new value is used at execution time, not parse time.</source>
          <target state="translated">새 값은 구문 분석 시간이 아닌 실행 시 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</source>
          <target state="translated">트랜잭션 중 변경 하는 경우에 예상 되는 동작은 서버 나머지 모든 문은 새 잠금 수준을 적용할 것입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>This application demonstrates how to use <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> in <ph id="ph2">&lt;xref:System.Data.Common.DbTransaction&gt;</ph>.</source>
          <target state="translated">이 응용 프로그램에 사용 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Data.IsolationLevel&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Data.Common.DbTransaction&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</source>
          <target state="translated">샘플에서는 각 격리 수준에는 사용할 수 있는 다음 동작을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Dirty reads.</source>
          <target state="translated">더티 읽기입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Non-repeatable reads.</source>
          <target state="translated">반복 불가능 읽기입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Phantoms.</source>
          <target state="translated">팬텀 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>This application will execute in the following isolation levels:</source>
          <target state="translated">이 응용 프로그램은 다음 격리 수준에 있는 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>ReadUncommitted</source>
          <target state="translated">ReadUncommitted</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>ReadCommitted</source>
          <target state="translated">ReadCommitted</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>RepeatableRead</source>
          <target state="translated">RepeatableRead</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Serializable</source>
          <target state="translated">직렬화 가능</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Snapshot</source>
          <target state="translated">스냅숏</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</source>
          <target state="translated">PhantomReadThreads 클래스 특정 트랜잭션이 팬텀 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the threads will operate in the following order:</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, select the products(All).</source>
          <target state="translated">첫 번째 스레드가 products(All)를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In the second thread, insert a new product.</source>
          <target state="translated">두 번째 스레드가 새 제품을 삽입 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in second thread.</source>
          <target state="translated">두 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Select the products again.</source>
          <target state="translated">제품을 다시 선택 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in first thread.</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the two Select operations will get the different results.</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우 두 개의 Select 작업 서로 다른 결과 얻을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</source>
          <target state="translated">NonrepeatableReadThreads 클래스 특정 트랜잭션이 반복 하지 않는 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the threads will operate in the following order:</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, select the product(ProductId=1).</source>
          <target state="translated">첫 번째 스레드가 product(ProductId=1)를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In the second thread, update the Quantity value(ProductId=1).</source>
          <target state="translated">두 번째 스레드가 수량 value(ProductId=1)를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in second thread.</source>
          <target state="translated">두 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Select the product again.</source>
          <target state="translated">제품을 다시 선택 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in first thread.</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the two Select operations will get the different results.</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우 두 개의 Select 작업 서로 다른 결과 얻을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</source>
          <target state="translated">ExchangeValuesThreads 클래스 Serializable 및 Snapshot 트랜잭션 간의 차이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>For the Serializable transaction, threads will operate in the following order:</source>
          <target state="translated">직렬화 가능 트랜잭션 스레드는 다음 순서 대로 적용:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, get the Price of product(ProductId=2) and store in the variable.</source>
          <target state="translated">첫 번째 스레드에서 변수에 product(ProductId=2)와 저장소의 가격을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</source>
          <target state="translated">첫 번째 스레드에서 product(ProductId=2) 가격이 product(ProductId=1)의 가격을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in first thread.</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In second thread, get the Price of product(ProductId=1) and store in the variable.</source>
          <target state="translated">두 번째 스레드에서 변수에 product(ProductId=1)와 저장소의 가격을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</source>
          <target state="translated">두 번째 스레드에서 product(ProductId=1) 가격이 product(ProductId=2)의 가격을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in second thread.</source>
          <target state="translated">두 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</source>
          <target state="translated">이제 가격의 값 (ProductId = 1 및 ProductId = 2)은 원래 Product(ProductId=2) 가격와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>For the Snapshot transaction, threads will operate in the following order:</source>
          <target state="translated">스냅숏 트랜잭션에 대 한 스레드는 다음 순서 운영 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, get the Price of product(ProductId=2) and store in the variable;</source>
          <target state="translated">첫 번째 스레드에서 변수에; product(ProductId=2)와 저장소의 가격을 가져옵니다</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</source>
          <target state="translated">첫 번째 스레드에서 product(ProductId=2) 가격이 product(ProductId=1)의 가격을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</source>
          <target state="translated">두 번째 스레드에서 스냅숏에서 product(ProductId=1)의 가격을 가져오고 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</source>
          <target state="translated">두 번째 스레드에서 product(ProductId=1) 가격이 product(ProductId=2)의 가격을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in second thread.</source>
          <target state="translated">두 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in first thread.</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Now exchange the Price of products(ProductId=1 and ProductId=2).</source>
          <target state="translated">이제 제품의 가격을 교환 (ProductId = 1 및 ProductId = 2).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</source>
          <target state="translated">DirtyReadThreads 클래스 특정 트랜잭션이 커밋되지 않은 읽기 동작 수 있도록 허용 하는 경우를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the threads will operate in the following order:</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우 스레드는 다음 순서 운영 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In first thread, begin a transaction and add the Quantity value(ProductId=1).</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 시작 하 고 수량 value(ProductId=1)를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>In the second thread, read the Quantity value and add the value again.</source>
          <target state="translated">두 번째 스레드에서 수량 값 읽고 값을 다시 추가 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Commit the transaction in second thread.</source>
          <target state="translated">두 번째 스레드가에서 트랜잭션을 커밋하십시오.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>Roll back the transaction in first thread.</source>
          <target state="translated">첫 번째 스레드가에서 트랜잭션을 롤백하십시오.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>If the transaction allows the behavior, the Quantity value will be added twice.</source>
          <target state="translated">트랜잭션 동작을 허용 하는 경우에 수량 값을 두 번 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Data.IsolationLevel">
          <source>C# and Visual Basic projects with this code sample can be found on <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&amp;f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&amp;f%5B0%5D.Type=SearchText&amp;ac=4)</ept>.</source>
          <target state="translated">이 코드 예제와 함께 C# 및 Visual Basic 프로젝트에서 확인할 수 있습니다 <bpt id="p1">[</bpt>개발자 코드 샘플<ept id="p1">](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&amp;f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&amp;f%5B0%5D.Type=SearchText&amp;ac=4)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.Chaos">
          <source>The pending changes from more highly isolated transactions cannot be overwritten.</source>
          <target state="translated">격리 수준이 높은 트랜잭션에서 보류 중인 변경은 덮어쓸 수 없습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.ReadCommitted">
          <source>Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</source>
          <target state="translated">공유 잠금은 커밋되지 않은 읽기를 방지하기 위해 데이터를 읽는 동안 유지되지만 트랜잭션이 끝나기 전에 데이터가 변경되어 반복되지 않은 읽기나 팬텀 데이터가 생성될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.ReadUncommitted">
          <source>A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</source>
          <target state="translated">공유 잠금이 발행되지 않았고 단독 잠금이 부여되지 않았음을 의미하는 더티 읽기가 가능합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.RepeatableRead">
          <source>Locks are placed on all data that is used in a query, preventing other users from updating the data.</source>
          <target state="translated">잠금은 쿼리에서 사용되는 모든 데이터에 적용되어 데이터를 다른 사용자가 업데이트할 수 없게 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.RepeatableRead">
          <source>Prevents non-repeatable reads but phantom rows are still possible.</source>
          <target state="translated">반복되지 않은 읽기를 금지하지만 팬텀 행의 경우는 가능합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.Serializable">
          <source>A range lock is placed on the <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</source>
          <target state="translated">범위 잠금을 <ph id="ph1">&lt;see cref="T:System.Data.DataSet" /&gt;</ph>에 적용하여 트랜잭션이 완료될 때까지 다른 사용자가 데이터 집합에 행을 삽입하거나 업데이트할 수 없게 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.Snapshot">
          <source>Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</source>
          <target state="translated">동일한 데이터에 대해 한 응용 프로그램에서 데이터를 수정하고 있을 때 또 다른 응용 프로그램에서 읽을 수 있는 데이터 버전을 저장하여 차단을 줄입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.Snapshot">
          <source>Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</source>
          <target state="translated">다시 쿼리해도 한 트랜잭션에서 다른 트랜잭션의 변경 내용을 볼 수 없음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="F:System.Data.IsolationLevel.Unspecified">
          <source>A different isolation level than the one specified is being used, but the level cannot be determined.</source>
          <target state="translated">지정된 격리 수준과 다른 수준이 사용되지만 수준을 결정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Data.IsolationLevel.Unspecified">
          <source>When using <ph id="ph1">&lt;xref:System.Data.Odbc.OdbcTransaction&gt;</ph>, if you do not set <ph id="ph2">&lt;xref:System.Data.IsolationLevel&gt;</ph> or you set <ph id="ph3">&lt;xref:System.Data.IsolationLevel&gt;</ph> to <ph id="ph4">`Unspecified`</ph>, the transaction executes according to the isolation level that is determined by the driver that is being used.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">&lt;xref:System.Data.Odbc.OdbcTransaction&gt;</ph>설정 하지 않은 경우, <ph id="ph2">&lt;xref:System.Data.IsolationLevel&gt;</ph> 설정한 또는 <ph id="ph3">&lt;xref:System.Data.IsolationLevel&gt;</ph> 를 <ph id="ph4">`Unspecified`</ph>, 트랜잭션이 사용 되는 드라이버에 의해 결정 되는 격리 수준에 따라 실행 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>