<Type Name="DataSet" FullName="System.Data.DataSet">
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c3bb7-101">데이터의 인-메모리 캐시를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-101">Represents an in-memory cache of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-102"><xref:System.Data.DataSet>, 데이터 원본에서 검색 된 데이터의 메모리 내 캐시는 ADO.NET 아키텍처의 주요 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-102">The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</span></span> <span data-ttu-id="c3bb7-103"><xref:System.Data.DataSet> 의 컬렉션 <xref:System.Data.DataTable> 개체를 통해 서로 연결할 수 있습니다 <xref:System.Data.DataRelation> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-103">The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects.</span></span> <span data-ttu-id="c3bb7-104">데이터 무결성을 적용할 수 있습니다는 <xref:System.Data.DataSet> 를 사용 하 여는 <xref:System.Data.UniqueConstraint> 및 <xref:System.Data.ForeignKeyConstraint> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-104">You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects.</span></span> <span data-ttu-id="c3bb7-105">작업에 대 한 자세한 내용은 <xref:System.Data.DataSet> 개체 참조 [데이터 집합, Datatable 및 Dataview](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-105">For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).</span></span>  
  
 <span data-ttu-id="c3bb7-106">반면 <xref:System.Data.DataTable> 개체 데이터가 <xref:System.Data.DataRelationCollection> 테이블 계층 구조를 탐색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-106">Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy.</span></span> <span data-ttu-id="c3bb7-107">테이블에 포함 된 한 <xref:System.Data.DataTableCollection> 를 통해 액세스는 <xref:System.Data.DataSet.Tables%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-107">The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property.</span></span> <span data-ttu-id="c3bb7-108">에 액세스할 때 <xref:System.Data.DataTable> 개체, 조건에 따라 대/소문자 구분 되는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-108">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="c3bb7-109">예를 들어 하나의 <xref:System.Data.DataTable> "mydatatable" 라고 하 고 "Mydatatable" 라는 다른, 테이블 중 하나를 검색 하는 데 사용 하는 문자열 같이 대/소문자 구분 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-109">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="c3bb7-110">그러나 "mydatatable" 있으며 "Mydatatable" 하지 않는 경우 검색 문자열 소문자 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-110">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="c3bb7-111">작업에 대 한 자세한 내용은 <xref:System.Data.DataTable> 개체 참조 [DataTable 만들기](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-111">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).</span></span>  
  
 <span data-ttu-id="c3bb7-112">A <xref:System.Data.DataSet> 읽고 XML 문서로 데이터와 스키마를 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-112">A <xref:System.Data.DataSet> can read and write data and schema as XML documents.</span></span> <span data-ttu-id="c3bb7-113">데이터 및 스키마 다음 전체 HTTP 전송 및 사용할 수는 XML을 사용 하도록 설정 하는 모든 플랫폼에서 모든 응용 프로그램에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-113">The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</span></span> <span data-ttu-id="c3bb7-114">스키마와 XML 스키마로 저장할 수 있습니다는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드, 및 스키마와 데이터 모두를 사용 하 여 저장할 수는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-114">You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-115">사용 하 여 스키마와 데이터 모두 포함 하는 XML 문서를 읽으려면는 <xref:System.Data.DataSet.ReadXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-115">To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-116">일반적인 다중 계층 구현을 만들고 새로 고침 단계에서 한 <xref:System.Data.DataSet>에 원래 데이터를 업데이트 하 고:</span><span class="sxs-lookup"><span data-stu-id="c3bb7-116">In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:</span></span>  
  
1.  <span data-ttu-id="c3bb7-117">빌드 및 각 채우기 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet> 사용 하 여 데이터 소스의 데이터로 <xref:System.Data.Common.DataAdapter>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-117">Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.</span></span>  
  
2.  <span data-ttu-id="c3bb7-118">개인의 데이터 변경 <xref:System.Data.DataTable> 추가, 업데이트 또는 삭제 하 여 개체 <xref:System.Data.DataRow> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-118">Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.</span></span>  
  
3.  <span data-ttu-id="c3bb7-119">호출 된 <xref:System.Data.DataSet.GetChanges%2A> 초를 만드는 메서드를 <xref:System.Data.DataSet> 만 데이터를 변경 하는 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-119">Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.</span></span>  
  
4.  <span data-ttu-id="c3bb7-120">호출의 <xref:System.Data.Common.DataAdapter.Update%2A> 의 메서드는 <xref:System.Data.Common.DataAdapter>, 두 번째 전달 <xref:System.Data.DataSet> 인수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-120">Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.</span></span>  
  
5.  <span data-ttu-id="c3bb7-121">호출는 <xref:System.Data.DataSet.Merge%2A> 메서드를 두 번째의 변경 내용을 병합 <xref:System.Data.DataSet> 첫 번째에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-121">Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.</span></span>  
  
6.  <span data-ttu-id="c3bb7-122">호출 된 <xref:System.Data.DataSet.AcceptChanges%2A> 에 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-122">Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-123">또는, 호출 <xref:System.Data.DataSet.RejectChanges%2A> 변경 내용을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-123">Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-124"><xref:System.Data.DataSet> 및 <xref:System.Data.DataTable> 개체에서 상속 <xref:System.ComponentModel.MarshalByValueComponent>, 및 지원에서 <xref:System.Runtime.Serialization.ISerializable> 원격 제어를 위한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-124">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting.</span></span> <span data-ttu-id="c3bb7-125">이 두 개체는 원격으로 연결할 수 있는 유일한 ADO.NET 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-125">These are the only ADO.NET objects that can be remoted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-126">클래스에서 상속 된 <xref:System.Data.DataSet> 종료자 억제 되었기 때문에 가비지 수집기에 의해 종료 되지 않습니다 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-126">Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-127">파생된 클래스를 호출할 수는 <xref:System.GC.ReRegisterForFinalize%2A> 해당 생성자를 클래스에는 가비지 수집기에 의해 종료 될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-127">The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-128">다음 예제에서는 결합 된 여러 가지 방법으로 이루어져을 만들고 채우는 <xref:System.Data.DataSet> 에서 **Northwind** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-128">The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.</span></span>  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c3bb7-129">이 형식은 다중 스레드 읽기 작업에 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-129">This type is safe for multithreaded read operations.</span></span> <span data-ttu-id="c3bb7-130">쓰기 작업을 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-130">You must synchronize any write operations.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-131"><see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-131">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-132"><see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-132">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-133">이 구현에서 <xref:System.Data.DataSet> 생성자 매개 변수를 하 고 새 인스턴스에 대 한 기본 이름이 "NewDataSet"를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-133">This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</span></span>  
  
 <span data-ttu-id="c3bb7-134">에 대 한 이름을 <xref:System.Data.DataSet> 의 XML 표현이 있는지 확인 하는 데 필요한는 <xref:System.Data.DataSet> 항상 스키마 정의에 최상위 요소가 문서 요소에 대 한 이름을 가집니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-134">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-135">다음 예제에서는 새 <xref:System.Data.DataSet>, 두 개 추가 <xref:System.Data.DataTable> 개체를 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-135">The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName"><span data-ttu-id="c3bb7-136"><see cref="T:System.Data.DataSet" />의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-136">The name of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-137">지정된 이름을 사용하여 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-137">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class with the given name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-138">에 대 한 이름을 <xref:System.Data.DataSet> 의 XML 표현이 있는지 확인 하는 데 필요한는 <xref:System.Data.DataSet> 항상 스키마 정의에서 가장 높은 수준의 요소가 있는 문서 요소에 대 한 이름을 가집니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-138">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-139">다음 예제에서는 새 <xref:System.Data.DataSet>, 두 개의를 <xref:System.Data.DataTable> 개체가 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-139">The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-140">개체를 serialize 또는 deserialize하는 데 필요한 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-140">The data needed to serialize or deserialize an object.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-141">serialize된 특정 스트림의 소스와 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-141">The source and destination of a given serialized stream.</span></span></param>
        <summary><span data-ttu-id="c3bb7-142">지정한 serialization 정보와 컨텍스트가 있는 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-142">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class that has the given serialization information and context.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-143"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체</span><span class="sxs-lookup"><span data-stu-id="c3bb7-143">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-144"><see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체</span><span class="sxs-lookup"><span data-stu-id="c3bb7-144">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <param name="ConstructSchema"><span data-ttu-id="c3bb7-145">부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-145">The boolean value.</span></span></param>
        <summary><span data-ttu-id="c3bb7-146"><see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-146">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-147">이 <see cref="T:System.Data.DataSet" />이 로드된 이후 또는 <see cref="M:System.Data.DataSet.AcceptChanges" />가 마지막으로 호출된 이후에 변경된 DataSet의 모든 내용을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-147">Commits all the changes made to this <see cref="T:System.Data.DataSet" /> since it was loaded or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-148">둘 다는 <xref:System.Data.DataRow> 및 <xref:System.Data.DataTable> 클래스에는 <xref:System.Data.DataSet.AcceptChanges%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-148">Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods.</span></span> <span data-ttu-id="c3bb7-149">호출 <xref:System.Data.DataTable.AcceptChanges%2A> 에 <xref:System.Data.DataTable> 원인을 수준는 <xref:System.Data.DataRow.AcceptChanges%2A> 메서드 각각에 대해 <xref:System.Data.DataRow> 를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-149">Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called.</span></span> <span data-ttu-id="c3bb7-150">마찬가지로, 호출 <xref:System.Data.DataSet.AcceptChanges%2A> 에 <xref:System.Data.DataSet> 하면 <xref:System.Data.DataTable.AcceptChanges%2A> 각 테이블에 대해 호출 되는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-150">Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-151">이러한 방식으로 메서드를 호출할 수 있는 여러 수준을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-151">In this manner, you have multiple levels at which the method can be invoked.</span></span> <span data-ttu-id="c3bb7-152">호출 된 <xref:System.Data.DataSet.AcceptChanges%2A> 의 <xref:System.Data.DataSet> 호출 하 여 모든 하위 개체 (예: 테이블 및 행)에 대 한 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-152">Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</span></span>  
  
 <span data-ttu-id="c3bb7-153">호출 하는 경우 `AcceptChanges` 에 `DataSet`있으면 모든 <xref:System.Data.DataRow> 아직 편집 모드에에서는 개체의 편집을 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-153">When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully.</span></span> <span data-ttu-id="c3bb7-154"><xref:System.Data.DataRow.RowState%2A> 각 속성 <xref:System.Data.DataRow> 설치 경로도 변경 됩니다. `Added` 및 `Modified` 될 행 `Unchanged`, 및 `Deleted` 행이 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-154">The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="c3bb7-155">경우는 `DataSet` 포함 <xref:System.Data.ForeignKeyConstraint> 개체를 호출 하는 `AcceptChanges` 메서드는 <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-155">If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-156">`AcceptChanges` 및 `RejectChanges` 에 적용 `DataRow` 관련 변경 내용 (즉, 추가, 제거, 삭제 및 수정).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-156">`AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify).</span></span> <span data-ttu-id="c3bb7-157">스키마 나 구조 변경 내용을 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-157">They are not applicable to schema or structural changes.</span></span>  
>   
>  <span data-ttu-id="c3bb7-158">AcceptChanges를 호출 복제 되지 않습니다 이러한 변경 내용을 데이터 소스에 다시 DataAdapter를 사용 하 여 데이터 집합 채워진 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-158">Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</span></span> <span data-ttu-id="c3bb7-159">이러한 상황에서는 호출 <xref:System.Data.Common.DataAdapter.Update%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-159">In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead.</span></span> <span data-ttu-id="c3bb7-160">참조 [Dataadapter로 데이터 원본 업데이트](http://msdn.microsoft.com/library/33y2221y.aspx) 자세한 정보에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-160">See [Updating Data Sources with DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-161">다음 예제에서는 추가 <xref:System.Data.DataRow> 에 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-161">The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-162"><xref:System.Data.DataSet.AcceptChanges%2A> 에서 메서드가 호출 됩니다는 <xref:System.Data.DataSet>, 모두에 적용 <xref:System.Data.DataTable> 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-162">The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-163">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataSet" />의 초기화를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-163">Begins the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="c3bb7-164">초기화는 런타임에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-164">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-165">Visual Studio 디자인 환경이이 메서드를 사용 하 여 폼에 사용 되거나 다른 구성 요소에서 사용 하는 구성 요소 초기화를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-165">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="c3bb7-166"><xref:System.Data.DataSet.EndInit%2A> 메서드 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-166">The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="c3bb7-167">사용 하는 <xref:System.Data.DataSet.BeginInit%2A> 및 <xref:System.Data.DataSet.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-167">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-168"><see cref="T:System.Data.DataTable" /> 개체에서 문자열을 비교할 때 대/소문자를 구분하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-168">Gets or sets a value indicating whether string comparisons within <see cref="T:System.Data.DataTable" /> objects are case-sensitive.</span></span></summary>
        <value>
          <span data-ttu-id="c3bb7-169">대/소문자를 구분하여 문자열을 비교하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-169"><see langword="true" /> if string comparisons are case-sensitive; otherwise <see langword="false" />.</span></span> <span data-ttu-id="c3bb7-170">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-170">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-171"><xref:System.Data.DataSet.CaseSensitive%2A> 속성 정렬, 검색 및 필터링 작업도 각에서 수행 하는 방법에 영향을 줍니다. <xref:System.Data.DataTable> 에 포함 된 개체는 <xref:System.Data.DataSet> 사용 하는 경우는 <xref:System.Data.DataTable.Select%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-171">The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-172">기본적으로 설정는 <xref:System.Data.DataSet.CaseSensitive%2A> 속성에 대 한는 <xref:System.Data.DataSet> 설정는 <xref:System.Data.DataTable.CaseSensitive%2A> 의 연결 된 각 속성 <xref:System.Data.DataTable> 과 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-172">By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-173">다음 예제에서는 설정/해제는 <xref:System.Data.DataSet.CaseSensitive%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-173">The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-174">모든 테이블에서 행을 모두 제거하여 데이터의 <see cref="T:System.Data.DataSet" />을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-174">Clears the <see cref="T:System.Data.DataSet" /> of any data by removing all rows in all tables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-175">경우는 <xref:System.Data.DataSet> 에 바인딩된는 <xref:System.Xml.XmlDataDocument>호출, <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> 또는 <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> 발생는 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-175">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="c3bb7-176">이러한 상황을 방지 하려면 한 번에 하나씩 행을 제거, 각 테이블을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-176">To avoid this situation, traverse each table, removing each row one at a time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-177">다음 예제에서는 지웁니다는 <xref:System.Data.DataSet> 모든 테이블의 모든 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-177">The following example clears the <xref:System.Data.DataSet> of all rows in all tables.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-178">모든 <see cref="T:System.Data.DataSet" /> 스키마, 관계 및 제약 조건을 포함하여 <see cref="T:System.Data.DataTable" />의 구조를 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-178">Copies the structure of the <see cref="T:System.Data.DataSet" />, including all <see cref="T:System.Data.DataTable" /> schemas, relations, and constraints.</span></span> <span data-ttu-id="c3bb7-179">데이터는 복사하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-179">Does not copy any data.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-180">현재 <see cref="T:System.Data.DataSet" />과 같은 스키마를 가지지만 데이터가 없는 새 <see cref="T:System.Data.DataSet" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-180">A new <see cref="T:System.Data.DataSet" /> with the same schema as the current <see cref="T:System.Data.DataSet" />, but none of the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-181">이러한 클래스 서브클래싱된 복제본 서브 클래스 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-181">If these classes have been subclassed, the clone will also be of the same subclasses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-182">다음 예제에서는의 복제본을 만듭니다는 <xref:System.Data.DataSet> 개체의 스키마입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-182">The following example creates a clone of a <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-183">이 <see cref="T:System.Data.DataSet" />의 구조와 데이터를 모두 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-183">Copies both the structure and data for this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-184">이 <see cref="T:System.Data.DataSet" />과 같은 구조(테이블 스키마, 관계 및 제약 조건)와 데이터를 가진 새 <see cref="T:System.Data.DataSet" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-184">A new <see cref="T:System.Data.DataSet" /> with the same structure (table schemas, relations, and constraints) and data as this <see cref="T:System.Data.DataSet" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="c3bb7-185">이 클래스가 서브클래싱된 경우 서브클래스도 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-185">If these classes have been subclassed, the copy will also be of the same subclasses.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3bb7-186">다음 예제에서는 <xref:System.Data.DataSet.Copy%2A> 원본의 복사본을 만드는 메서드를 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-186">The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-187">테이블이 <see cref="T:System.Data.DataTableReader" /> 컬렉션에 나타나는 순서대로 <see cref="T:System.Data.DataTable" />마다 결과 집합이 하나씩 있는 <see cref="P:System.Data.DataSet.Tables" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-187">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-188">반환 된 결과 집합의 순서를 보장 하기 위해 <xref:System.Data.DataTableReader>경우는 <xref:System.Data.DataTable> 내는 <xref:System.Data.DataSet> 가 비어 있는 경우 것으로 표시 됩니다는 빈 결과 집합 반환 된 `DataTableReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-188">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it will be represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-189">이 예제에서는 콘솔 응용 프로그램을 세 개를 만들며 <xref:System.Data.DataTable> 인스턴스를 추가 하는 각각로 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-189">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-190">예제에서는 호출은 <xref:System.Data.DataSet.CreateDataReader%2A> 메서드와 표시 합니다. 반환된 된 내용의 <xref:System.Data.DataTableReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-190">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="c3bb7-191">집합 결과의 순서는 `DataTableReader` 의 순서 의해 제어 되는 `DataTable` 매개 변수로 전달 된 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-191">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-192">오버 로드 된 버전 중 하나를 사용 하는 방법을 보여 주는이 예제 `CreateDataReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-192">This example shows how to use one of the overloaded versions of `CreateDataReader`.</span></span> <span data-ttu-id="c3bb7-193">사용할 수 있는 다른 예제를 오버 로드 개별 항목을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-193">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="c3bb7-194">이 예제에서는 콘솔 창에 다음 코드를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-194">The example displays the following code in the Console window:</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-195">테이블이 <see cref="T:System.Data.DataTableReader" /> 컬렉션에 나타나는 순서대로 <see cref="T:System.Data.DataTable" />마다 결과 집합이 하나씩 있는 <see cref="P:System.Data.DataSet.Tables" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-195">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-196">결과 집합을 하나 이상 포함하는 <see cref="T:System.Data.DataTableReader" />이고, 소스 <see cref="T:System.Data.DataTable" />에 포함된 <see cref="T:System.Data.DataSet" /> 인스턴스에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-196">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-197">반환 된 결과 집합의 순서를 보장 하기 위해 <xref:System.Data.DataTableReader>경우는 <xref:System.Data.DataTable> 내는 <xref:System.Data.DataSet> 는 빈 결과 반환 된 집합으로 표현 비어 됩니다 `DataTableReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-197">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-198">다음 예제에서는 세 개의 <xref:System.Data.DataTable> 인스턴스와 각각을 추가 하는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-198">The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-199">이 예제에서는 다음 채워진 전달 `DataSet` 를 호출 하는 프로시저에는 <xref:System.Data.DataSet.CreateDataReader%2A> 메서드와 진행 내에 포함 된 모든 결과 집합을 반복 하는 <xref:System.Data.DataTableReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-199">The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="c3bb7-200">이 예제에서는 콘솔 창에 결과 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-200">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables"><span data-ttu-id="c3bb7-201"><see cref="T:System.Data.DataTableReader" />에 반환될 결과 집합의 순서를 제공하는 DataTables의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-201">An array of DataTables providing the order of the result sets to be returned in the <see cref="T:System.Data.DataTableReader" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-202"><see cref="T:System.Data.DataTableReader" />마다 결과 집합이 하나씩 있는 <see cref="T:System.Data.DataTable" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-202">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-203">결과 집합을 하나 이상 포함하는 <see cref="T:System.Data.DataTableReader" />이고, 소스 <see cref="T:System.Data.DataTable" />에 포함된 <see cref="T:System.Data.DataSet" /> 인스턴스에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-203">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="c3bb7-204">반환된 결과 집합은 <paramref name="dataTables" /> 매개 변수에 의해 지정된 순서를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-204">The returned result sets are in the order specified by the <paramref name="dataTables" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-205">반환 된 결과의 순서를 설정 한다는 보장 하기 위해 <xref:System.Data.DataTableReader>경우는 <xref:System.Data.DataTable> 내는 <xref:System.Data.DataSet> 는 빈 결과 반환 된 집합으로 표현 비어 됩니다 `DataTableReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-205">In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span> <span data-ttu-id="c3bb7-206">이 오버 로드 된 버전의 목록을 제공할 수 있으므로 `DataTable` 인스턴스 매개 변수로 반환 된 결과 집합을 나타나는 순서를 지정할 수 있습니다 `DataTableReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-206">Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-207">이 예제에서는 콘솔 응용 프로그램을 세 개를 만들며 <xref:System.Data.DataTable> 인스턴스를 추가 하는 각각로 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-207">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-208">예제에서는 호출은 <xref:System.Data.DataSet.CreateDataReader%2A> 메서드와 표시 합니다. 반환된 된 내용의 <xref:System.Data.DataTableReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-208">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="c3bb7-209">집합 결과의 순서는 `DataTableReader` 의 순서 의해 제어 되는 `DataTable` 매개 변수로 전달 된 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-209">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span> <span data-ttu-id="c3bb7-210">이 예제에서는 콘솔 창에 결과 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-210">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-211">현재 <see cref="T:System.Data.DataSet" />의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-211">Gets or sets the name of the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-212"><see cref="T:System.Data.DataSet" />의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-212">The name of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3bb7-213">다음 예제에서는 새 <xref:System.Data.DataSet> 와 주어진 <xref:System.Data.DataSet.DataSetName%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-213">The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-214">사용자 지정 <see cref="T:System.Data.DataSet" />를 사용하여 필터링, 검색 및 탐색 작업을 수행할 수 있도록 <see cref="T:System.Data.DataViewManager" />에 포함된 데이터의 사용자 지정 뷰를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-214">Gets a custom view of the data contained in the <see cref="T:System.Data.DataSet" /> to allow filtering, searching, and navigating using a custom <see cref="T:System.Data.DataViewManager" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-215"><see cref="T:System.Data.DataViewManager" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-215">A <see cref="T:System.Data.DataViewManager" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-216"><xref:System.Data.DataViewManager> 에서 반환 되는 <xref:System.Data.DataSet.DefaultViewManager%2A> 속성 각각에 대 한 사용자 지정 설정을 만들 수 있습니다 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-216">The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-217">가져올 때 한 <xref:System.Data.DataView> 에서 <xref:System.Data.DataTable>, 필터링, 정렬 순서 및 <xref:System.Data.DataViewRowState> 설정에 따라 구성 된는 <xref:System.Data.DataSet.DefaultViewManager%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-217">When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-218">다음 예제에서는 기본 가져옵니다 <xref:System.Data.DataViewManager> 에 대 한는 <xref:System.Data.DataSet>, 추가 <xref:System.Data.DataTable> 에 <xref:System.Data.DataTableCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-218">The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-219"><see cref="P:System.Data.DataSet.SchemaSerializationMode" />의 <see cref="T:System.Data.DataSet" />를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-219">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-220">형식화 된를 역직렬화 할 때이 메서드를 호출할 수 있습니다 <xref:System.Data.DataSet> 확인 하려면 해당 <xref:System.Data.DataSet.SchemaSerializationMode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-220">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-221"><see cref="T:System.Xml.XmlReader" />을 deserialization을 수행하는 동안 전달되는 <see cref="T:System.Data.DataSet" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-221">The <see cref="T:System.Xml.XmlReader" /> instance that is passed during deserialization of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-222"><see cref="P:System.Data.DataSet.SchemaSerializationMode" />의 <see cref="T:System.Data.DataSet" />를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-222">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-223">스키마 정보가 페이로드에서 생략되었는지 여부를 나타내는 <see cref="T:System.Data.SchemaSerializationMode" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-223">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-224">형식화 된를 역직렬화 할 때이 메서드를 호출할 수 있습니다 <xref:System.Data.DataSet> 확인 하려면 해당 <xref:System.Data.DataSet.SchemaSerializationMode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-224">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-225">원격 시나리오에서 deserialization을 수행하는 동안 <see langword="DataSet" />의 protected 생성자 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 호출하는 데 사용되는 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-225">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that a <see langword="DataSet" />’s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-226">원격 시나리오에서 deserialization을 수행하는 동안 <see langword="DataSet" />의 protected 생성자 <see cref="T:System.Runtime.Serialization.StreamingContext" />를 호출하는 데 사용되는 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-226">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that a <see langword="DataSet" />’s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <summary><span data-ttu-id="c3bb7-227"><see cref="P:System.Data.DataSet.SchemaSerializationMode" />의 <see cref="T:System.Data.DataSet" />를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-227">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-228">스키마 정보가 페이로드에서 생략되었는지 여부를 나타내는 <see cref="T:System.Data.SchemaSerializationMode" /> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-228">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-229">형식화 된를 역직렬화 할 때이 메서드를 호출할 수 있습니다 <xref:System.Data.DataSet> 확인 하려면 해당 <xref:System.Data.DataSet.SchemaSerializationMode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-229">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-230">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataSet" />의 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-230">Ends the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="c3bb7-231">초기화는 런타임에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-231">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-232">Visual Studio 디자인 환경이이 메서드를 사용 하 여 폼에 사용 되거나 다른 구성 요소에서 사용 하는 구성 요소 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-232">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="c3bb7-233"><xref:System.Data.DataSet.BeginInit%2A> 메서드 초기화를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-233">The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="c3bb7-234">사용 하는 <xref:System.Data.DataSet.BeginInit%2A> 및 <xref:System.Data.DataSet.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-234">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-235">업데이트 작업을 수행할 때 제약 조건 규칙을 따르는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-235">Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</span></span></summary>
        <value>
          <span data-ttu-id="c3bb7-236">규칙이 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-236"><see langword="true" /> if rules are enforced; otherwise <see langword="false" />.</span></span> <span data-ttu-id="c3bb7-237">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-237">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-238">제약 조건에 설정 되 고 <xref:System.Data.DataTable> 수준 (<xref:System.Data.DataTable.Constraints%2A> 속성).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-238">Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property).</span></span> <span data-ttu-id="c3bb7-239">제약 조건을 만드는 방법에 대 한 자세한 내용은 참조 [DataTable 제약 조건](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-239">For more information about creating constraints, see [DataTable Constraints](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-240">다음 예제에서는 한 <xref:System.Data.DataSet> 한 테이블, 열, 생성자와 5 개의 행을 가진 <xref:System.Data.UniqueConstraint>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-240">The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>.</span></span> <span data-ttu-id="c3bb7-241"><xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false` 있고 각 행의 값이 동일한 값으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-241">The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value.</span></span> <span data-ttu-id="c3bb7-242">경우는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성으로 다시 설정 됩니다 `true`, <xref:System.Data.ConstraintException> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-242">When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="c3bb7-243">제약 조건을 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-243">One or more constraints cannot be enforced.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-244"><see langword="DataSet" />에 연결된 사용자 지정 사용자 정보의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-244">Gets the collection of customized user information associated with the <see langword="DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-245">모든 사용자 지정 사용자 정보가 있는 <see cref="T:System.Data.PropertyCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-245">A <see cref="T:System.Data.PropertyCollection" /> with all custom user information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-246"><xref:System.Data.DataSet.ExtendedProperties%2A> 속성을 사용 하 여 사용자 지정 정보를 저장할 수는 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-246">The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`.</span></span> <span data-ttu-id="c3bb7-247">예를 들어 데이터를 새로 고쳐야 할 시간을 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-247">For example, you might store a time when the data should be refreshed.</span></span>  
  
 <span data-ttu-id="c3bb7-248">확장된 속성 형식 이어야 합니다 <xref:System.String> 파일과 유지는 <xref:System.Data.DataSet> XML로 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-248">Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-249">다음 예제에서는 사용자 지정 속성을 추가 <xref:System.Data.PropertyCollection> 에서 반환 되는 <xref:System.Data.DataColumn.ExtendedProperties%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-249">The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property.</span></span> <span data-ttu-id="c3bb7-250">두 번째 예에서는 사용자 지정 속성을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-250">The second example retrieves the custom property.</span></span>  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-251">마지막으로 로드되거나 <see cref="T:System.Data.DataSet" />가 호출된 후에 변경된 내용이 모두 들어 있는 <see cref="M:System.Data.DataSet.AcceptChanges" />의 복사본을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-251">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-252">로드되거나 <see cref="T:System.Data.DataSet" />가 마지막으로 호출된 후에 변경된 내용이 모두 들어 있는 <see cref="M:System.Data.DataSet.AcceptChanges" />의 복사본을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-252">Gets a copy of the <see cref="T:System.Data.DataSet" /> that contains all changes made to it since it was loaded or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was last called.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-253">작업을 수행한 다음 <see cref="T:System.Data.DataSet" />를 사용하여 다시 병합할 수 있는 경우 이 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />의 변경 사항 복사본을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-253">A copy of the changes from this <see cref="T:System.Data.DataSet" /> that can have actions performed on it and later be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="c3bb7-254">변경된 행이 없으면 메서드는 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-254">If no changed rows are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-255">새 <xref:System.Data.DataSet> 원래에 모든 행의 복사본이 포함 된 <xref:System.Data.DataSet> 보류 중인 변경 내용이 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-255">Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="c3bb7-256">관계 제약 조건으로 인해 새에 추가할 추가 변경 되지 않은 행 <xref:System.Data.DataSet> 변경 되지 않은 행에는 변경 된 행에서 외래 키에 해당 하는 기본 키를 포함 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-256">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="c3bb7-257">메서드가 반환 `null` 원래에서 행이 없는 경우 <xref:System.Data.DataSet> 보류 중인 변경 내용이입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-257">The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-258">다음 예제에서는 간단한 <xref:System.Data.DataSet> 된 한 테이블과 두 개의 열 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-258">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-259">두 값이 변경 되 고 하나의 행이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-259">Two values are changed, and one row is added.</span></span> <span data-ttu-id="c3bb7-260">변경된 된 데이터의 하위 집합을 사용 하 여 만들어집니다는 <xref:System.Data.DataSet.GetChanges%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-260">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="c3bb7-261">오류를 조정한 다음 새 열은 스키마 변경 되는 하위 집합에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-261">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="c3bb7-262">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드는 `missingSchemaAction` 로 설정 `MissingSchemaAction.Add`, 새 열이 원본에 추가 <xref:System.Data.DataSet> 개체의 스키마입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-262">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="c3bb7-263"><see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-263">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-264">마지막으로 로드되거나 <see cref="T:System.Data.DataSet" />가 호출된 후에 변경되어 <see cref="M:System.Data.DataSet.AcceptChanges" />를 기준으로 필터링된 내용이 모두 들어 있는 <see cref="T:System.Data.DataRowState" />의 복사본을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-264">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-265">작업을 수행한 다음 <see cref="T:System.Data.DataSet" />를 사용하여 다시 병합할 수 있는 경우 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />의 필터링된 복사본을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-265">A filtered copy of the <see cref="T:System.Data.DataSet" /> that can have actions performed on it, and subsequently be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="c3bb7-266">원하는 <see cref="T:System.Data.DataRowState" /> 행이 없으면 이 메서드는 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-266">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-267"><xref:System.Data.DataSet.GetChanges%2A> 초를 생성 하기 위해 메서드를 사용 하는 <xref:System.Data.DataSet> 원래에 도입 된 변경 내용만 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-267">The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="c3bb7-268">사용 하 여는 `rowStates` 인수를 새 개체에 포함 될 변경 유형을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-268">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="c3bb7-269">이 복사본이 원래에 다시 병합 될 하도록 되어 반환 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-269">This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-270">관계 제약 조건으로 표시 된 부모 행 않을 `Unchanged` 포함 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-270">Relationship constraints may cause parent rows marked `Unchanged` to be included.</span></span> <span data-ttu-id="c3bb7-271">원하는 행이 없으면 <xref:System.Data.DataRowState> 발견 되는 <xref:System.Data.DataSet.GetChanges%2A> 메서드 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-271">If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-272">사용 하 여 다음 예제는 <xref:System.Data.DataSet.GetChanges%2A> 메서드를 두 번째 <xref:System.Data.DataSet> 개체 다음에 사용 되는 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-272">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet"><span data-ttu-id="c3bb7-273">지정된 스키마 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-273">The specified schema set.</span></span></param>
        <summary><span data-ttu-id="c3bb7-274">DataSet에 대한 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 복사본을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-274">Gets a copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" /> for the DataSet.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-275"><see cref="T:System.Xml.Schema.XmlSchemaSet" />의 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-275">A copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-276"><see cref="T:System.Runtime.Serialization.SerializationInfo" />과 연결된 serialize된 개체가 들어 있는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-276">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-277"><see cref="T:System.Runtime.Serialization.StreamingContext" />과 연결된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-277">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-278"><see cref="T:System.Data.DataSet" />을 serialize하는 데 필요한 데이터로 serialization 정보 개체를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-278">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3bb7-279"><paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-279">The <paramref name="info" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-280">serializable <see cref="T:System.Xml.Schema.XMLSchema" /> 인스턴스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-280">Returns a serializable <see cref="T:System.Xml.Schema.XMLSchema" /> instance.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-281"><see cref="T:System.Xml.Schema.XMLSchema" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-281">The <see cref="T:System.Xml.Schema.XMLSchema" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-282"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-282">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-283">스트리밍 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-283">The streaming context.</span></span></param>
        <summary><span data-ttu-id="c3bb7-284">이진 또는 XML 스트림에서 테이블 데이터를 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-284">Deserializes the table data from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-285"><see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-285">Returns the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-286"><see cref="T:System.Data.DataSet" />에 저장된 데이터를 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-286">A string that is a representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-287">이 메서드를 호출 하는 것은 호출 동일 <xref:System.Data.DataSet.WriteXml%2A> 와 <xref:System.Data.XmlWriteMode> 로 설정 <xref:System.Data.XmlWriteMode.IgnoreSchema>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-287">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.</span></span>  
  
 <span data-ttu-id="c3bb7-288"><xref:System.Data.DataSet.GetXml%2A> XML을 문자열로 반환 하 고 보다 많은 오버 헤드가 발생 하므로 <xref:System.Data.DataSet.WriteXml%2A> XML 파일에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-288"><xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="c3bb7-289">작성 하는 경우는 <xref:System.Data.DataSet> 스키마 유추를 사용 하 고 serialize XML 또는 웹 서비스를 사용 하 고, 열 순서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-289">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-290">다음 예제에서는 한 <xref:System.Data.DataSet> 및 <xref:System.Data.DataTable>예제 데이터를 추가 하 고 XML 형식으로 데이터를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-290">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c3bb7-291">이 샘플에는 데이터 집합에서 XML 파일에 데이터를 작성 하 고 XML에서 데이터 집합에 데이터를 읽는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-291">This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML.</span></span> <span data-ttu-id="c3bb7-292">이 샘플 하나의 데이터 집합에 두 개의 테이블이 포함 된, 두 가지 방법으로 데이터 집합 (WriteXml 및 GetXml) XML 파일로 내보내려면를 사용 하 여 만들고 사용 (ReadXml 및 InferXmlSchema)를 XML 파일에서 데이터 집합을 가져오는 두 가지 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-292">This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.</span></span>  
  
 <span data-ttu-id="c3bb7-293">컴파일 및 샘플을 실행 하기 전에 예제 디렉터리에 4 개의 XML 파일을 만들 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-293">Before you compile and run the sample, you need to create four XML files in the sample directory.</span></span> <span data-ttu-id="c3bb7-294">먼저, ElementsWithAttributes.xml를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-294">First, create ElementsWithAttributes.xml:</span></span>  
  
```  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="c3bb7-295">다음으로 ElementsWithChildElementsxml.xml를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-295">Next, create ElementsWithChildElementsxml.xml:</span></span>  
  
```  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 <span data-ttu-id="c3bb7-296">이제 ElementsWithOnlyAttributes.xml를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-296">Now create ElementsWithOnlyAttributes.xml:</span></span>  
  
```  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 <span data-ttu-id="c3bb7-297">마지막으로, RepeatingElements.xml를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-297">And finally, create RepeatingElements.xml:</span></span>  
  
```  
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="c3bb7-298">이제 컴파일 하 고 다음 소스 코드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-298">Now you can compile and run the following source code.</span></span>  <span data-ttu-id="c3bb7-299">[저장소 데이터의 데이터 집합을 XML 파일로 방법](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) 이 샘플에 대 한 Visual Basic 및 C# 프로젝트에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-299">[How to Store Data of DataSet into XML File](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.</span></span>  
  
```  
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-300"><see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현에 대한 XML 스키마를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-300">Returns the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-301"><see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현에 대한 XML 스키마 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-301">String that is the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-302">이 메서드를 호출 하는 것은 호출 동일 <xref:System.Data.DataSet.WriteXmlSchema%2A>한다는 점을 제외 하는 기본 스키마만 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-302">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.</span></span>  
  
 <span data-ttu-id="c3bb7-303"><xref:System.Data.DataSet.GetXmlSchema%2A> XML을 문자열로 반환 하 고 보다 많은 오버 헤드가 발생 하므로 <xref:System.Data.DataSet.WriteXmlSchema%2A> XML 파일에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-303"><xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="c3bb7-304">작성 하는 경우는 <xref:System.Data.DataSet> 스키마 유추를 사용 하 고 serialize XML 또는 웹 서비스를 사용 하 고, 열 순서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-304">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-305">다음 예제에서는 한 <xref:System.Data.DataSet> 및 <xref:System.Data.DataTable>, 다음 XML 형식에는 스키마를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-305">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-306"><see cref="T:System.Data.DataSet" />에 새 행, 삭제된 행 또는 수정된 행을 포함하여 변경 내용이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-306">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-307"><see cref="T:System.Data.DataSet" />에 새 행, 삭제된 행 또는 수정된 행을 포함하여 변경 내용이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-307">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <returns>
          <span data-ttu-id="c3bb7-308"><see cref="T:System.Data.DataSet" />에 변경 내용이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-308"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3bb7-309">다음 예제에서는 <xref:System.Data.DataSet.GetChanges%2A> 메서드를 두 번째 <xref:System.Data.DataSet> 데이터 원본을 업데이트 하려면 다음 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-309">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="c3bb7-310"><see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-310">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-311"><see cref="T:System.Data.DataSet" />에 새 행, 삭제된 행 또는 수정된 행을 포함하여 <see cref="T:System.Data.DataRowState" />를 기준으로 필터링된 변경 내용이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-311">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns>
          <span data-ttu-id="c3bb7-312"><see cref="T:System.Data.DataSet" />에 변경 내용이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-312"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-313">검사는 <xref:System.Data.DataSet.HasChanges%2A> 의 속성은 `DataSet` 호출 하기 전에 <xref:System.Data.DataSet.GetChanges%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-313">Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-314">사용 하 여 다음 예제는 <xref:System.Data.DataSet.GetChanges%2A> 메서드를 두 번째 <xref:System.Data.DataSet> 개체 다음에 사용 되는 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-314">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-315">이 <see cref="T:System.Data.DataTable" /> 내의 <see cref="T:System.Data.DataSet" /> 개체에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-315">Gets a value indicating whether there are errors in any of the <see cref="T:System.Data.DataTable" /> objects within this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value>
          <span data-ttu-id="c3bb7-316">테이블에 오류가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-316"><see langword="true" /> if any table contains an error;otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-317">각 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet> 역시는 <xref:System.Data.DataTable.HasErrors%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-317">Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property.</span></span> <span data-ttu-id="c3bb7-318">사용 하 여는 `HasErrors` 속성은 `DataSet` 테이블 개별 검사 하기 전에 오류를에 있는지 확인 하려면 첫 번째 <xref:System.Data.DataTable> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-318">Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects.</span></span> <span data-ttu-id="c3bb7-319">경우는 `DataTable` 에 오류가 <xref:System.Data.DataTable.GetErrors%2A> 메서드 배열을 반환 <xref:System.Data.DataRow> 오류를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-319">If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-320">다음 예제에서는 <xref:System.Data.DataSet.HasErrors%2A> 속성을 확인 여부는 <xref:System.Data.DataSet> 개체에 오류가 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-320">The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors.</span></span> <span data-ttu-id="c3bb7-321">이 경우 각각에 대 한 오류 <xref:System.Data.DataRow> 각 <xref:System.Data.DataTable> 인쇄 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-321">If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-322"><see cref="T:System.Data.DataSet" />에 XML 스키마를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-322">Applies XML schema to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-323">스키마를 읽어올 <see langword="Stream" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-323">The <see langword="Stream" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="c3bb7-324">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-324">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="c3bb7-325">지정된 <see cref="T:System.IO.Stream" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-325">Applies the XML schema from the specified <see cref="T:System.IO.Stream" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-326">스키마를 읽어올 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-326">The <see langword="TextReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="c3bb7-327">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-327">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="c3bb7-328">지정된 <see cref="T:System.IO.TextReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-328">Applies the XML schema from the specified <see cref="T:System.IO.TextReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-329">스키마를 읽어올 파일의 경로를 포함한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-329">The name of the file (including the path) from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="c3bb7-330">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-330">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="c3bb7-331">지정된 파일에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-331">Applies the XML schema from the specified file to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-332"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-332"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-333">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-333">For reading and writing files.</span></span> <span data-ttu-id="c3bb7-334">연관된 열거형: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-334">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-335">스키마를 읽어올 <see langword="XMLReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-335">The <see langword="XMLReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="c3bb7-336">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-336">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="c3bb7-337">지정된 <see cref="T:System.Xml.XmlReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-337">Applies the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-338"><see cref="T:System.Data.DataSet" />이 초기화된 후 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-338">Occurs after the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-339">자세한 내용은 <xref:System.Data.DataSet.IsInitialized%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-339">For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-340">이진 또는 XML 스트림에서 DataSet의 모든 테이블 데이터를 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-340">Deserialize all of the tables data of the DataSet from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c3bb7-341"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체</span><span class="sxs-lookup"><span data-stu-id="c3bb7-341">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="c3bb7-342"><see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체</span><span class="sxs-lookup"><span data-stu-id="c3bb7-342">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <summary><span data-ttu-id="c3bb7-343"><see langword="DataSet" />의 serialize된 표현에 대한 형식을 검사합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-343">Inspects the format of the serialized representation of the <see langword="DataSet" />.</span></span></summary>
        <returns>
          <span data-ttu-id="c3bb7-344">지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" />가 이진 형식으로 serialize된 <see langword="true" />을 나타내면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-344"><see langword="true" /> if the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> represents a <see langword="DataSet" /> serialized in its binary format, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-345">이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-345">This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-346"><see cref="T:System.Data.DataSet" />이 초기화되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-346">Gets a value that indicates whether the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <value>
          <span data-ttu-id="c3bb7-347">구성 요소의 초기화가 완료되었음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-347"><see langword="true" /> to indicate the component has completed initialization; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-348">상태를 반환 하는 <xref:System.Data.DataSet> 것은 생성 되 고, 예를 들어 Visual Studio에서 동안 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-348">Returns the status of the <xref:System.Data.DataSet> while it’s being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="c3bb7-349"><xref:System.Data.DataSet.BeginInit%2A> 메서드를 설정 `false` 및 <xref:System.Data.DataSet.EndInit%2A> 메서드를 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-349">The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-350">제공된 <see cref="T:System.Data.DataSet" />를 사용해서 <see cref="T:System.Data.IDataReader" />을 데이터 소스의 값으로 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-350">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-351"><xref:System.Data.DataTable.Load%2A> 메서드는 단일을 채우기 위한 수 있는 방법을 제공 <xref:System.Data.DataTable> 에서 검색 된 데이터와는 <xref:System.Data.IDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-351">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="c3bb7-352">여러 결과 집합을 로드할 수 있습니다, 동일한 기능을 제공 하는이 메서드는 `IDataReader` 내에서 여러 테이블에는 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-352">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
 <span data-ttu-id="c3bb7-353">`DataSet`에 이미 행이 포함되어 있으면 데이터 소스에서 들어오는 데이터가 기존 행과 병합됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-353">If the `DataSet` already contains rows, the incoming data from the data source is merged with the existing rows.</span></span>  
  
 <span data-ttu-id="c3bb7-354">`Load` 몇 가지 일반적인 시나리오는 지정 된 데이터 원본에서 데이터 가져오기 및 현재 데이터 컨테이너에 추가에서 메서드를 사용할 수 있습니다 (이 경우는 `DataSet`).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-354">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataSet`).</span></span> <span data-ttu-id="c3bb7-355">에 대 한 일반 사용법을 설명 하는 이러한 시나리오는 `DataSet`해당 업데이트를 설명 하는, 및 동작을 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-355">These scenarios describe standard usage for a `DataSet`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="c3bb7-356">A `DataSet` 동기화 하거나 단일 기본 데이터 원본을 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-356">A `DataSet` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="c3bb7-357">`DataSet` 주 데이터 소스와 동기화 할 수 있도록 변경 내용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-357">The `DataSet` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="c3bb7-358">또한 한 `DataSet` 하나 이상의 보조 데이터 원본의 증분 데이터를 수락할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-358">In addition, a `DataSet` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="c3bb7-359">`DataSet` 보조 데이터 소스와 동기화 할 수 있도록 변경 내용을 추적 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-359">The `DataSet` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="c3bb7-360">이러한 두 개의 가상의 데이터 소스를 매개 변수로 받아 사용자 해야 하는 다음 동작 중 하나:</span><span class="sxs-lookup"><span data-stu-id="c3bb7-360">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="c3bb7-361">초기화 `DataSet` 주 데이터 원본에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-361">Initialize `DataSet` from a primary data source.</span></span> <span data-ttu-id="c3bb7-362">이 시나리오에서 사용자는 빈 초기화 하려는 `DataSet` 주 데이터 원본의 값으로.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-362">In this scenario, the user wants to initialize an empty `DataSet` with values from the primary data source.</span></span> <span data-ttu-id="c3bb7-363">하나 이상의 DataTable의 내용은 수정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-363">One or more DataTable's contents are modified.</span></span> <span data-ttu-id="c3bb7-364">나중에 사용자를 기본 데이터 소스 변경 내용을 전파 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-364">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="c3bb7-365">변경 내용을 유지 하 고 기본 데이터 원본에서 다시 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-365">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="c3bb7-366">이 시나리오에서는 사용자가 수행 하는 `DataSet` 이전 시나리오에서의 변경 내용을 유지 하는 기본 데이터 원본과 증분 동기화를 수행 채워지고는 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-366">In this scenario, the user wants to take the `DataSet` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataSet`.</span></span>  
  
-   <span data-ttu-id="c3bb7-367">증분 데이터를 보조 데이터 원본에서 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-367">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="c3bb7-368">이 시나리오에서는 사용자가 하나 이상의 보조 데이터 원본에서 변경 내용을 병합 하 여 다시 주 데이터 원본에 해당 변경 내용을 전파 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-368">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="c3bb7-369">`Load` 메서드 이러한 모든 시나리오 가능 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-369">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="c3bb7-370">이 메서드를 사용 하면 로드 옵션 매개 변수를 지정할 수 있습니다를 나타내는 방법을 있는 행 한 <xref:System.Data.DataTable> 로드 중인 행과 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-370">This method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="c3bb7-371">다음 표에에서 제공 하는 세 가지 부하 옵션은 <xref:System.Data.LoadOption> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-371">The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="c3bb7-372">각각의 경우 설명 들어오는 데이터에 있는 행의 기본 키에는 기존 행의 기본 키와 일치 하는 경우 동작을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-372">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="c3bb7-373">로드 옵션</span><span class="sxs-lookup"><span data-stu-id="c3bb7-373">Load Option</span></span>|<span data-ttu-id="c3bb7-374">설명</span><span class="sxs-lookup"><span data-stu-id="c3bb7-374">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="c3bb7-375">`PreserveChanges`(기본값)</span><span class="sxs-lookup"><span data-stu-id="c3bb7-375">`PreserveChanges` (default)</span></span>|<span data-ttu-id="c3bb7-376">들어오는 행의 값을 가진 행의 원래 버전을 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-376">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="c3bb7-377">들어오는 행의 값을 가진 행의 현재 버전과 원래 버전을 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-377">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="c3bb7-378">들어오는 행의 값을 가진 행의 현재 버전을 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-378">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="c3bb7-379">일반적으로 `PreserveChanges` 및 `OverwriteChanges` 옵션은 사용자를 동기화 해야 하는 시나리오에 대 한 않습니다는 `DataSet` 및 기본 데이터 원본과 해당 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-379">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="c3bb7-380">`Upsert` 옵션을 하나 이상의 보조 데이터 원본에서 집계 변경 내용을 용이 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-380">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-381">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-381">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="c3bb7-382"><see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see cref="T:System.Data.DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-382">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="c3bb7-383"><see cref="T:System.Data.DataTable" /> 메서드가 이름 및 네임스페이스 정보를 검색하는 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 인스턴스의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-383">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span> <span data-ttu-id="c3bb7-384">이러한 테이블은 각각 이 <see cref="T:System.Data.DataTableCollection" />에 포함된 <see cref="T:System.Data.DataSet" />의 멤버여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-384">Each of these tables must be a member of the <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-385"><see cref="T:System.Data.DataSet" /> 인스턴스의 배열을 사용해 스키마 및 네임스페이스 정보를 제공하여, 제공된 <see cref="T:System.Data.IDataReader" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.DataTable" />을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-385">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-386"><xref:System.Data.DataTable.Load%2A> 메서드는 단일을 채우기 위한 수 있는 방법을 제공 <xref:System.Data.DataTable> 에서 검색 된 데이터와는 <xref:System.Data.IDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-386">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="c3bb7-387">여러 결과 집합을 로드할 수 있습니다, 동일한 기능을 제공 하는이 메서드는 <xref:System.Data.IDataReader> 내에서 여러 테이블에는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-387">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-388">로드 작업이 실패 하며는 <xref:System.InvalidOperationException> 경우 들어오는 원본 데이터 열 `reader` 계산된 열이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-388">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="c3bb7-389">`loadOption` 매개 변수를 사용 하면 가져온 데이터를 기존 데이터와 상호 작용 및의 값 중 하나일 수 있습니다 방법을 지정할 수 있습니다는 <xref:System.Data.LoadOption> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-389">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="c3bb7-390">에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> 이 매개 변수를 사용 하 여 대 한 자세한 내용은 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-390">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="c3bb7-391">`tables` 매개 변수 배열을 지정할 수 있습니다 <xref:System.Data.DataTable> 해당 각 결과 집합 판독기에서 로드 하는 테이블의 순서를 나타내는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-391">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="c3bb7-392"><xref:System.Data.DataSet.Load%2A> 메서드 채우기 각 제공 <xref:System.Data.DataTable> 단일 결과 집합에서 원본 데이터 판독기에서에서 데이터를 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-392">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="c3bb7-393">각 결과 집합 후의 <xref:System.Data.DataSet.Load%2A> 메서드 다음 결과 결과 집합이 더 이상 없을 때까지 판독기 내에서 집합으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-393">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="c3bb7-394">이 메서드에 대 한 이름 확인 스키마 뒤와 같은지는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 의 메서드는 <xref:System.Data.Common.DbDataAdapter> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-394">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-395">다음 예제에서는 새 <xref:System.Data.DataSet>, 두 개 추가 <xref:System.Data.DataTable> 인스턴스는 <xref:System.Data.DataSet>, 후 채우는 <xref:System.Data.DataSet> 를 사용 하는 <xref:System.Data.DataSet.Load%2A> 에서 데이터를 검색할 메서드는 <xref:System.Data.DataTableReader> 두 개의 결과 집합을 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-395">The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets.</span></span> <span data-ttu-id="c3bb7-396">마지막으로,이 예제에서는 콘솔 창에는 테이블의 내용을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-396">Finally, the example displays the contents of the tables in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="tables" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-397">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-397">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="c3bb7-398"><see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see langword="DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-398">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see langword="DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="c3bb7-399"><see langword="Load" /> 메서드가 테이블 이름 정보를 검색하는 문자열의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-399">An array of strings, from which the <see langword="Load" /> method retrieves table name information.</span></span></param>
        <summary><span data-ttu-id="c3bb7-400">문자열의 배열을 사용해 <see langword="DataSet" /> 내의 테이블에 대한 이름을 제공하여, 제공된 <see cref="T:System.Data.DataSet" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.IDataReader" />를 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-400">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of strings to supply the names for the tables within the <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-401"><xref:System.Data.DataTable.Load%2A> 메서드는 단일을 채우기 위한 수 있는 방법을 제공 <xref:System.Data.DataTable> 에서 검색 된 데이터와는 <xref:System.Data.IDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-401">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="c3bb7-402">여러 결과 집합을 로드할 수 있습니다, 동일한 기능을 제공 하는이 메서드는 `IDataReader` 내에서 여러 테이블에는 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-402">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-403">로드 작업이 실패 하며는 <xref:System.InvalidOperationException> 경우 들어오는 원본 데이터 열 `reader` 계산된 열이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-403">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="c3bb7-404">`loadOption` 매개 변수를 사용 하면 가져온 데이터를 기존 데이터와 상호 작용 및의 값 중 하나일 수 있습니다 방법을 지정할 수 있습니다는 <xref:System.Data.LoadOption> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-404">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="c3bb7-405">에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.DataTable.Load%2A> 이 매개 변수를 사용 하 여 대 한 자세한 내용은 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-405">See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="c3bb7-406">`tables` 매개 변수를 사용 하면 해당 각 결과 집합 판독기에서 로드 하는 테이블의 순서를 나타내는 테이블 이름의 배열을 지정 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-406">The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="c3bb7-407">`Load` 메서드 내에서 테이블을 찾으려고는 `DataSet` 이름과 일치 하는 순서로 테이블 이름의 배열에서 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-407">The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order.</span></span> <span data-ttu-id="c3bb7-408">일치 하는 테이블 발견 되 면 해당 테이블은 현재 결과 집합의 내용을 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-408">If a matching table is found, that table is loaded with the content of the current result set.</span></span> <span data-ttu-id="c3bb7-409">일치 하는 테이블이 있으면 테이블 이름의 배열에 제공 된 이름을 사용 하 여 테이블을 만들 하 고 새 테이블의 스키마는 결과 집합에서 유추 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-409">If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</span></span> <span data-ttu-id="c3bb7-410">각 결과 집합 후의 `Load` 메서드 다음 결과 결과 집합이 더 이상 없을 때까지 판독기 내에서 집합으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-410">After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="c3bb7-411">와 연결 된 기본 네임 스페이스 `DataSet`있는 경우 새로 만든 각와 연결 된 경우, `DataTable`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-411">The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`.</span></span> <span data-ttu-id="c3bb7-412">이 메서드에 대 한 이름 확인 스키마 뒤와 같은지는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 의 메서드는 <xref:System.Data.Common.DbDataAdapter> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-412">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-413">다음 콘솔 응용 프로그램 예제에서는 먼저 테이블을 만들고에 판독기에서 데이터를 로드 한 <xref:System.Data.DataSet>를 사용 하 여는 `Load` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-413">The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method.</span></span> <span data-ttu-id="c3bb7-414">이 예제에는 다음에 테이블을 추가 <xref:System.Data.DataSet> 하 고 테이블의 데이터로 채우는 하려고 한 <xref:System.Data.DataTableReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-414">The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="c3bb7-415">이 예제에 전달 된 매개 변수는 `Load` 메서드 존재 하지 않는 테이블 이름으로 나타낼는 `Load` 메서드 매개 변수로 전달 된 이름과 일치 하도록 새 테이블을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-415">In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter.</span></span> <span data-ttu-id="c3bb7-416">데이터가 로드 되 면이 예제에서는 모든 테이블의 내용을 콘솔 창에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-416">Once the data has been loaded, the example displays the contents of all its tables in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
        <Parameter Name="tables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-417">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-417">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="c3bb7-418"><see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see cref="T:System.Data.DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-418">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="errorHandler"><span data-ttu-id="c3bb7-419">데이터를 로드하는 동안 오류가 발생하면 호출할 <see cref="T:System.Data.FillErrorEventHandler" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-419">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span></span></param>
        <param name="tables"><span data-ttu-id="c3bb7-420"><see cref="T:System.Data.DataTable" /> 메서드가 이름 및 네임스페이스 정보를 검색하는 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 인스턴스의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-420">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span></param>
        <summary><span data-ttu-id="c3bb7-421"><see cref="T:System.Data.DataSet" /> 인스턴스의 배열을 사용해 스키마 및 네임스페이스 정보를 제공하여, 제공된 <see cref="T:System.Data.IDataReader" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.DataTable" />을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-421">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-422"><xref:System.Data.DataTable.Load%2A> 메서드는 단일을 채우기 위한 수 있는 방법을 제공 <xref:System.Data.DataTable> 에서 검색 된 데이터와는 <xref:System.Data.IDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-422">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="c3bb7-423">여러 결과 집합을 로드할 수 있습니다, 동일한 기능을 제공 하는이 메서드는 <xref:System.Data.IDataReader> 내에서 여러 테이블에는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-423">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-424">로드 작업이 실패 하며는 <xref:System.InvalidOperationException> 경우 들어오는 원본 데이터 열 `reader` 계산된 열이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-424">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="c3bb7-425">`loadOption` 매개 변수를 사용 하면 가져온 데이터를 기존 데이터와 상호 작용 및의 값 중 하나일 수 있습니다 방법을 지정할 수 있습니다는 <xref:System.Data.LoadOption> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-425">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="c3bb7-426">에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> 이 매개 변수를 사용 하 여 대 한 자세한 내용은 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-426">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="c3bb7-427">`errorHandler` 매개 변수는 한 <xref:System.Data.FillErrorEventHandler> 데이터를 로드 하는 동안 오류가 발생할 때 호출 되는 프로시저를 참조 하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-427">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="c3bb7-428"><xref:System.Data.FillErrorEventArgs> 발생 한 오류, 데이터의 현재 행에 대 한 정보를 검색할 수 있도록 하는 속성을 제공 하는 프로시저에 전달 된 매개 변수 및 <xref:System.Data.DataTable> 채워지고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-428">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="c3bb7-429">이 대리자 메커니즘을 사용 하 여, 대신 간단한 try/catch 블록을 오류를 확인할 수 있습니다 상황을 처리을 원하는 경우 처리를 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-429">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="c3bb7-430"><xref:System.Data.FillErrorEventArgs> 매개 변수를 제공는 <xref:System.Data.FillErrorEventArgs.Continue%2A> 속성:이 속성을 설정 `true` 오류 및; 처리를 계속 하려는 처리 했음을 나타내기 위해 속성을 설정 `false` 처리를 중단 하려면 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-430">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="c3bb7-431">주의 해당 속성을 설정 `false` 하면 예외를 throw 하는 문제를 발생 시킨 코드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-431">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
 <span data-ttu-id="c3bb7-432">`tables` 매개 변수 배열을 지정할 수 있습니다 <xref:System.Data.DataTable> 해당 각 결과 집합 판독기에서 로드 하는 테이블의 순서를 나타내는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-432">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="c3bb7-433"><xref:System.Data.DataSet.Load%2A> 메서드 채우기 각 제공 <xref:System.Data.DataTable> 단일 결과 집합에서 원본 데이터 판독기에서에서 데이터를 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-433">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="c3bb7-434">각 결과 집합 후의 <xref:System.Data.DataSet.Load%2A> 메서드 다음 결과 결과 집합이 더 이상 없을 때까지 판독기 내에서 집합으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-434">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="c3bb7-435">이 메서드에 대 한 이름 확인 스키마 뒤와 같은지는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 의 메서드는 <xref:System.Data.Common.DbDataAdapter> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-435">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-436">표를 추가 하는 다음 예제는 <xref:System.Data.DataSet>, 사용 하려고 하 고는 <xref:System.Data.DataSet.Load%2A> 에서 데이터를 로드 하는 메서드는 <xref:System.Data.DataTableReader> 호환 되지 않는 스키마를 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-436">The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema.</span></span> <span data-ttu-id="c3bb7-437">이 예에서는 오류를 트래핑 하는 대신는 <xref:System.Data.FillErrorEventHandler> 조사 하 고 오류 처리는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-437">Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error.</span></span> <span data-ttu-id="c3bb7-438">출력은 콘솔 창에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-438">The output is displayed in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-439">테이블 내의 문자열을 비교하는 데 사용되는 로캘 정보를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-439">Gets or sets the locale information used to compare strings within the table.</span></span></summary>
        <value><span data-ttu-id="c3bb7-440">사용자의 컴퓨터 로캘에 대한 데이터가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-440">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span></span> <span data-ttu-id="c3bb7-441">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-441">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-442"><xref:System.Data.DataSet.Locale%2A> 속성 로캘을 지정 정렬을 적용할 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-442">The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.</span></span>  
  
 <span data-ttu-id="c3bb7-443">기본적으로 설정는 <xref:System.Data.DataSet.Locale%2A> 에 대 한는 <xref:System.Data.DataSet> 설정는 <xref:System.Data.DataSet.Locale%2A> 각각에 대해 <xref:System.Data.DataTable> 개체의 `DataSet` 과 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-443">By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-444">식이 포함 된 열에는 <xref:System.StringComparison.InvariantCulture> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-444">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="c3bb7-445"><xref:System.StringComparison.CurrentCulture> 는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-445">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-446">다음 예제에서는 가져옵니다는 <xref:System.Globalization.CultureInfo> 에 대 한는 <xref:System.Data.DataSet> 하 고 출력은 <xref:System.Globalization.CultureInfo.DisplayName%2A> 및 <xref:System.Globalization.CultureInfo.EnglishName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-446">The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-447">지정된 <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" /> 또는 <see cref="T:System.Data.DataRow" /> 개체의 배열을 현재 <see langword="DataSet" /> 또는 <see langword="DataTable" />에 병합합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-447">Merges a specified <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, or array of <see cref="T:System.Data.DataRow" /> objects into the current <see langword="DataSet" /> or <see langword="DataTable" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="c3bb7-448"><see langword="DataRow" />에 병합되는 <see langword="DataSet" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-448">The array of <see langword="DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-449"><see cref="T:System.Data.DataRow" /> 개체의 배열을 현재 <see cref="T:System.Data.DataSet" />에 병합합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-449">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-450"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-450">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-451">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-451">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-452">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-452">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-453"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-453">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-454">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-454">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-455">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-455">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-456">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-456">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-457">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-457">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-458">이 하위 집합은 일반적으로 더 작은 때문에 보다 효율적으로 중간 계층 구성 요소에 다시 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-458">This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-459">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-459">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-460">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-460">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-461">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-461">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-462">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-462">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-463">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-463">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-464">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-464">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-465">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-465">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-466">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-466">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-467">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-467">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-468">소스 행 한 <xref:System.Data.DataRowState> 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-468">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-469">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-469">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-470">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-470">If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-471">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-471">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-472">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-472">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="c3bb7-473">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-473">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="c3bb7-474">지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-474">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-475"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-475">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-476">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-476">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-477">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-477">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-478"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-478">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-479">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-479">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-480">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-480">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-481">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-481">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-482">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-482">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-483">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-483">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-484">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-484">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-485">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-485">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-486">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-486">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-487">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-487">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-488">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-488">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-489">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-489">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-490">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-490">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-491">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-491">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-492">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-492">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-493">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-493">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-494">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-494">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-495">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-495">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-496">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-496">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-497">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-497">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-498">다음 예제에서는 <xref:System.Data.DataSet.GetChanges%2A>, 업데이트 및 <xref:System.Data.DataSet.Merge%2A> 에 대 한 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-498">The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="c3bb7-499">제약 조건을 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-499">One or more constraints cannot be enabled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3bb7-500"><paramref name="dataSet" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-500">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="c3bb7-501">데이터와 스키마를 병합할 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-501">The <see cref="T:System.Data.DataTable" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="c3bb7-502">지정된 <see cref="T:System.Data.DataTable" /> 및 스키마를 현재 <see cref="T:System.Data.DataSet" />에 병합합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-502">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-503"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-503">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-504">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-504">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-505">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-505">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-506"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-506">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-507">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-507">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-508">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-508">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-509">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-509">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-510">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-510">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-511">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-511">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-512">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-512">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-513">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-513">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-514">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-514">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-515">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-515">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-516">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-516">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-517">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-517">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-518">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-518">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-519">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-519">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-520">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-520">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-521">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-521">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-522">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-522">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-523">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-523">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-524">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-524">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-525">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-525">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-526">다음 예제에서는 간단한 <xref:System.Data.DataSet> 된 한 테이블과 두 개의 열 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-526">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-527">두 번째 <xref:System.Data.DataTable> 즉 만들어질 첫 번째와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-527">A second <xref:System.Data.DataTable> is created that is identical to the first.</span></span> <span data-ttu-id="c3bb7-528">다음에 병합 되는 두 번째 테이블에 두 개의 행이 추가 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-528">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3bb7-529"><paramref name="table" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-529">The <paramref name="table" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="c3bb7-530">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-530">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges">
          <span data-ttu-id="c3bb7-531">현재 <see langword="true" />의 변경 내용을 유지하려면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-531"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-532">지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다. 이때 지정된 인수에 따라 이 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-532">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />, preserving or discarding any changes in this <see langword="DataSet" /> according to the given argument.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-533"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-533">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-534">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-534">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-535">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-535">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-536"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-536">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-537">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-537">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-538">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-538">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-539">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-539">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-540">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-540">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-541">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-541">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-542">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-542">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-543">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-543">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-544">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-544">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-545">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-545">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-546">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-546">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-547">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-547">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-548">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-548">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-549">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-549">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-550">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-550">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-551">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-551">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-552">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-552">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-553">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-553">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-554">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-554">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-555">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-555">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-556">다음 예제에서는 간단한 <xref:System.Data.DataSet> 된 한 테이블과 두 개의 열 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-556">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-557">10 개의 행을 추가한 후 두 개의 값이 변경 되 및 한 개의 행이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-557">After adding ten rows, two values are changed, and one row is added.</span></span> <span data-ttu-id="c3bb7-558">변경된 된 데이터의 하위 집합을 사용 하 여 만들어집니다는 <xref:System.Data.DataSet.GetChanges%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-558">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="c3bb7-559">오류를 조정한 다음 하위 집합 데이터를 병합할 원래 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-559">After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="c3bb7-560"><see cref="T:System.Data.DataRow" />에 병합되는 <see langword="DataSet" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-560">The array of <see cref="T:System.Data.DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <param name="preserveChanges">
          <span data-ttu-id="c3bb7-561"><see langword="true" />의 변경 내용을 유지하려면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-561"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="c3bb7-562"><see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-562">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-563"><see cref="T:System.Data.DataRow" /> 개체의 배열을 현재 <see cref="T:System.Data.DataSet" />에 병합합니다. 이때 지정된 인수에 따라 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-563">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-564"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-564">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-565">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-565">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-566">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-566">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-567"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-567">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-568">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-568">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-569">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-569">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-570">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-570">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-571">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-571">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-572">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-572">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-573">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-573">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-574">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-574">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-575">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-575">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-576">설명은 용이 하 게 하려면는 <xref:System.Data.DataSet.Merge%2A> 메서드를 사용 하 여 "대상" 현재 나타낼 <xref:System.Data.DataSet>, 및 두 번째 (매개 변수) 이름을 지정 하는 "source" <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-576">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-577">대상 <xref:System.Data.DataSet> 가 의미 하는 동작 (병합) 발생 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-577">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="c3bb7-578">두 번째 <xref:System.Data.DataSet> 포함 된 정보를 변경 되지 않지만 대신 현재에 병합 되 때문에 "source" 라고 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-578">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-579">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-579">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-580">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-580">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-581">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-581">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-582">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-582">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-583">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-583">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-584">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-584">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-585">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-585">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-586">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-586">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-587">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-587">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-588">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-588">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-589">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-589">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="c3bb7-590">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-590">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges">
          <span data-ttu-id="c3bb7-591">현재 <see langword="true" />의 변경 내용을 유지하려면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-591"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="c3bb7-592"><see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-592">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-593">지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다. 이때 지정된 인수에 따라 현재 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-593">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema with the current <see langword="DataSet" />, preserving or discarding changes in the current <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-594"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-594">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-595">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-595">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-596">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-596">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-597"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-597">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-598">클라이언트 응용 프로그램에서는 일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-598">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-599">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-599">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-600">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-600">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-601">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-601">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-602">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-602">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-603">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-603">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-604">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-604">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-605">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-605">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-606">설명은 용이 하 게 하려면는 <xref:System.Data.DataSet.Merge%2A> 메서드를 사용 하 여 "대상" 현재 나타낼 <xref:System.Data.DataSet>, 및 두 번째 (매개 변수) 이름을 지정 하는 "source" <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-606">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-607">대상 <xref:System.Data.DataSet> 가 의미 하는 동작 (병합) 발생 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-607">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="c3bb7-608">두 번째 <xref:System.Data.DataSet> 포함 된 정보를 변경 되지 않지만 대신 현재에 병합 되 때문에 "source" 라고 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-608">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-609">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-609">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-610">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-610">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-611">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-611">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-612">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-612">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-613">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-613">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-614">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-614">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-615">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-615">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-616">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-616">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-617">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-617">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-618">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-618">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-619">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-619">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-620">다음 예제에서는 간단한 <xref:System.Data.DataSet> 된 한 테이블과 두 개의 열 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-620">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-621">두 값이 변경 되 고 하나의 행이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-621">Two values are changed, and one row is added.</span></span> <span data-ttu-id="c3bb7-622">변경된 된 데이터의 하위 집합을 사용 하 여 만들어집니다는 <xref:System.Data.DataSet.GetChanges%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-622">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="c3bb7-623">오류를 조정한 다음 새 열은 스키마 변경 되는 하위 집합에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-623">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="c3bb7-624">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드는 `missingSchemaAction` 로 설정 `MissingSchemaAction.Add`, 새 열이 원본에 추가 <xref:System.Data.DataSet> 개체의 스키마입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-624">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3bb7-625"><paramref name="dataSet" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-625">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="c3bb7-626">데이터와 스키마를 병합할 <see langword="DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-626">The <see langword="DataTable" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="c3bb7-627"><see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-627">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <param name="missingSchemaAction">
          <span data-ttu-id="c3bb7-628"><see langword="true" />의 변경 내용을 유지하려면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-628"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-629">지정된 <see cref="T:System.Data.DataTable" /> 및 스키마를 현재 <see langword="DataSet" />과 병합합니다. 이때 지정된 인수에 따라 현재 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-629">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see langword="DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-630"><xref:System.Data.DataSet.Merge%2A> 병합할 두 개의 메서드를 사용 하는 <xref:System.Data.DataSet> 비슷하긴 하지만 스키마가 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-630">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="c3bb7-631">기존 데이터 원본에서 최신 변경 내용을 통합 하는 클라이언트 응용 프로그램에는 병합은 일반적으로 사용 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-631">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-632">이렇게 하면 클라이언트 응용 프로그램을 새로 고칠 수 있습니다. <xref:System.Data.DataSet> 데이터 원본의 최신 데이터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-632">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="c3bb7-633"><xref:System.Data.DataSet.Merge%2A> 메서드는 일반적으로 일련의 변경 내용의 유효성 검사, 오류 조정으로 변경 되는 데이터 소스 업데이트 및 기존 새로 고침 관련 된 절차의 끝에 호출 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-633">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-634">일반적으로 한 번의 단추는 사용자가 클릭할 수 있는 변경 된 데이터를 수집 하 고 중간 계층 구성 요소에 다시 보내기 전에 유효성 검사를 수행 하는 클라이언트 응용 프로그램 이온 되었기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-634">iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-635">이 시나리오는 <xref:System.Data.DataSet.GetChanges%2A> 메서드가 먼저 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-635">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="c3bb7-636">이 메서드는 두 번째 <xref:System.Data.DataSet> 유효성 검사 및 병합에 대해 최적화 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-636">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="c3bb7-637">이 두 번째 <xref:System.Data.DataSet> 개체에만 포함 되어는 <xref:System.Data.DataTable> 및 <xref:System.Data.DataRow> 원래의 하위 집합에 변경 된 개체 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-637">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-638">이 하위 집합은 일반적으로 더 작은 및 따라서 더 효율적으로 다시는 중간 계층 구성 요소에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-638">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="c3bb7-639">중간 계층 구성 요소는 다음 저장된 프로시저를 통해 변경 내용으로 원래 데이터 소스를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-639">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="c3bb7-640">중간 계층은 새 다시 보낼 수 있습니다 <xref:System.Data.DataSet> (다시 실행 하 여 원래 쿼리), 원래 데이터와 데이터 원본에서 최신 데이터를 포함 하는 또는 데이터 원본에서 변경 된 내용이 있는 하위 집합을 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-640">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="c3bb7-641">(예를 들어 데이터 원본에서 자동으로 고유 기본 키 값을 만드는 경우 이러한 값 수에 다시 전파할 수 클라이언트 응용 프로그램입니다.) 두 경우 모두 반환 된 <xref:System.Data.DataSet> 클라이언트 응용 프로그램의 원래로 다시 병합 되어야 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-641">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-642">경우는 <xref:System.Data.DataSet.Merge%2A> 메서드가 호출 되 면 두 스키마 <xref:System.Data.DataSet> 개체는 스키마 변경 되었을 수 있기 때문에 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-642">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="c3bb7-643">예를 들어, 기업 간 시나리오에서 새 열 수 있습니다에 추가한 XML 스키마는 자동화 된 프로세스에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-643">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="c3bb7-644">경우 소스 <xref:System.Data.DataSet> 스키마 요소를 포함 (추가 <xref:System.Data.DataColumn> 개체) 대상에 누락 된, 스키마 요소를 설정 하 여 대상에 추가할 수는 `missingSchemaAction` 인수 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-644">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="c3bb7-645">병합 된 경우에서 <xref:System.Data.DataSet> 추가 된 스키마와 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-645">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="c3bb7-646">스키마를 병합 한 후 데이터를 병합 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-646">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="c3bb7-647">새 소스를 병합할 때 <xref:System.Data.DataSet> 대상에 모든 소스 행 한 <xref:System.Data.DataRowState> 값 `Unchanged`, `Modified`, 또는 `Deleted` 동일한 기본 키 값을 가진 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-647">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="c3bb7-648">소스 행 한 `DataRowState` 값 `Added` 새 원본 행과 동일한 기본 키 값을 가진 새 대상 행에 대응 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-648">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="c3bb7-649">병합 하는 동안 제약 조건이 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-649">During a merge, constraints are disabled.</span></span> <span data-ttu-id="c3bb7-650">병합의 끝에 모든 제약 조건을 사용할 수 없으면는 <xref:System.Data.ConstraintException> 생성 되 고 병합 된 데이터는 제약 조건을 해제 된 동안 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-650">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="c3bb7-651">이 경우에 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성이 `false`, 오류에서 유효 하지 않은 모든 행을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-651">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="c3bb7-652">다시 설정 하기 전에 오류를 해결 해야 합니다는 <xref:System.Data.DataSet.EnforceConstraints%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-652">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-653">다음 예제에서는 간단한 <xref:System.Data.DataSet> 된 한 테이블과 두 개의 열 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-653">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-654">두 번째 <xref:System.Data.DataTable> 즉 만들어질 첫 번째 거의 동일한 점을 제외 하 고 새 `DataColumn` 테이블에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-654">A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table.</span></span> <span data-ttu-id="c3bb7-655">다음에 병합 되는 두 번째 테이블에 두 개의 행이 추가 <xref:System.Data.DataSet> 와 `preserveChanges` 인수로 설정 `false`, 및 `missingSchemaAction` 인수로 설정 `MissingSchemaAction.Add`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-655">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c3bb7-656"><paramref name="dataSet" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-656">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-657">대상과 소스 <see cref="T:System.Data.DataRow" />의 기본 키 값이 같고 <see cref="P:System.Data.DataSet.EnforceConstraints" />를 true로 설정한 경우 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-657">Occurs when a target and source <see cref="T:System.Data.DataRow" /> have the same primary key value, and <see cref="P:System.Data.DataSet.EnforceConstraints" /> is set to true.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-658">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-658">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-659">다음 예제에서는 <xref:System.Data.DataSet.MergeFailed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-659">The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-660"><see cref="T:System.Data.DataSet" />의 네임스페이스를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-660">Gets or sets the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-661"><see cref="T:System.Data.DataSet" />의 네임스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-661">The namespace of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-662"><xref:System.Data.DataSet.Namespace%2A> 에 문서를 읽고 XML을 쓸 때 속성은 사용 된 <xref:System.Data.DataSet> 를 사용 하 여는 <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, 또는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-662">The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.</span></span>  
  
 <span data-ttu-id="c3bb7-663">XML 문서의 네임 스페이스 XML 특성 및 요소를 읽을 때 범위를 지정 하는 데 사용 되는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-663">The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-664">예를 들어 경우는 <xref:System.Data.DataSet> 스키마가 포함 된 네임 스페이스가 "myCompany" 문서에서 읽은 및만 다른 네임 스페이스를 사용 하 여 문서에서에서 데이터를 읽을 하려고 시도 하 고, 기존 스키마에 해당 하지 않는 모든 데이터는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-664">For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-665">다음 예에서는 <xref:System.Data.DataSet.Prefix%2A> 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-665">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c3bb7-666">네임스페이스에 데이터가 이미 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-666">The namespace already has data.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent"><span data-ttu-id="c3bb7-667">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-667">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="c3bb7-668"><see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-668">Raises the <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-669">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-669">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="c3bb7-670">에 대 한 개요 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-670">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="c3bb7-671">재정의 하는 경우 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-671">When overriding <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation"><span data-ttu-id="c3bb7-672">제거 중인 <see cref="T:System.Data.DataRelation" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-672">The <see cref="T:System.Data.DataRelation" /> being removed.</span></span></param>
        <summary><span data-ttu-id="c3bb7-673"><see cref="T:System.Data.DataRelation" />에서 <see cref="T:System.Data.DataTable" /> 개체를 제거할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-673">Occurs when a <see cref="T:System.Data.DataRelation" /> object is removed from a <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-674">이 메서드는 테이블을 제거 하 고 제한 하는 서브 클래스에서 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-674">This method should be overridden by subclasses to restrict tables being removed</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="c3bb7-675">제거 중인 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-675">The <see cref="T:System.Data.DataTable" /> being removed.</span></span></param>
        <summary><span data-ttu-id="c3bb7-676"><see cref="T:System.Data.DataTable" />에서 <see cref="T:System.Data.DataSet" />을 제거할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-676">Occurs when a <see cref="T:System.Data.DataTable" /> is removed from a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-677">이 메서드는 제거 되지 않도록 테이블을 제한 하는 서브 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-677">This method can be overridden by subclasses to restrict tables from being removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-678">다음 예제에서 파생 된 클래스를 보여 줍니다.는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.OnRemoveTable%2A> 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-678">The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-679"><see cref="T:System.Data.DataSet" /> 네임스페이스의 별칭인 XML 접두사를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-679">Gets or sets an XML prefix that aliases the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-680"><see cref="T:System.Data.DataSet" /> 네임스페이스의 XML 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-680">The XML prefix for the <see cref="T:System.Data.DataSet" /> namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-681"><xref:System.Data.DataSet.Prefix%2A> 속성은 사용 하는 XML 문서 전체에서 네임 스페이스에 속한 요소를 식별 하는 <xref:System.Data.DataSet> 개체 (의해 설정는 <xref:System.Data.DataSet.Namespace%2A> 속성).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-681">The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-682">다음 예에서는 <xref:System.Data.DataSet.Prefix%2A> 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-682">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c3bb7-683">변경될 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-683">The name of the property that is about to change.</span></span></param>
        <summary><span data-ttu-id="c3bb7-684">지정된 <see cref="T:System.Data.DataSet" /> 속성이 변경될 것이라는 알림을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-684">Sends a notification that the specified <see cref="T:System.Data.DataSet" /> property is about to change.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-685">XML 스키마와 데이터를 <see cref="T:System.Data.DataSet" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-685">Reads XML schema and data into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-686"><see cref="T:System.IO.Stream" />에서 파생되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-686">An object that derives from <see cref="T:System.IO.Stream" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-687">지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.Stream" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-687">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-688">데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-688">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-689"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-689">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-690">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-690">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-691">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-691">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-692">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-692">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-693">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-693">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-694"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-694">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-695">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-695">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-696">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-696">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-697">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-697">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-698">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-698">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-699">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-699">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-700">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-700">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-701">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-701">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-702">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-702">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-703">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-703">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema, as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-704">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-704">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-705">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-705">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-706">다음 예에서는 간단한을 먼저 만듭니다 <xref:System.Data.DataSet> 하나로 <xref:System.Data.DataTable>, 두 개의 열과 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-706">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-707"><xref:System.Data.DataSet> 스키마와 데이터를 호출 하 여 디스크에 기록 된 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-707">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-708">두 번째 <xref:System.Data.DataSet> 만들어집니다 및 <xref:System.Data.DataSet.ReadXml%2A> 메서드 스키마와 데이터를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-708">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-709">스키마와 데이터를 읽어올 <see langword="TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-709">The <see langword="TextReader" /> from which to read the schema and data.</span></span></param>
        <summary><span data-ttu-id="c3bb7-710">지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.TextReader" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-710">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-711">데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-711">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-712"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-712">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-713">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-713">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-714">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-714">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-715">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-715">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-716">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-716">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-717"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-717">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-718">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-718">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-719">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-719">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-720">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-720">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-721">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-721">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-722">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-722">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-723">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-723">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-724">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-724">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-725">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-725">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-726">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-726">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="c3bb7-727">클래스에서 상속 되는 <xref:System.IO.TextReader> 클래스에 포함 된 <xref:System.IO.StreamReader> 및 <xref:System.IO.StringReader> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-727">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-728">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-728">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-729">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-729">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-730">다음 예에서는 간단한을 먼저 만듭니다 <xref:System.Data.DataSet> 하나로 <xref:System.Data.DataTable>, 두 개의 열과 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-730">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-731"><xref:System.Data.DataSet> 스키마와 데이터를 호출 하 여 디스크에 기록 된 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-731">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-732">두 번째 <xref:System.Data.DataSet> 만들어집니다 및 <xref:System.Data.DataSet.ReadXml%2A> 메서드 스키마와 데이터를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-732">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-733">읽어올 파일의 경로를 포함한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-733">The filename (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-734">지정된 파일을 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.DataSet" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-734">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-735">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-735">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-736"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-736">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-737">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-737">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-738">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-738">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-739">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-739">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-740">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-740">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-741"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-741">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-742">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-742">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-743">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-743">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-744">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-744">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-745">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-745">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-746">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-746">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-747">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-747">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-748">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-748">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-749">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함는 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-749">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-750">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-750">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-751">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-751">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-752">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-752">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-753">다음 예에서는 간단한을 먼저 만듭니다 <xref:System.Data.DataSet> 하나로 <xref:System.Data.DataTable>, 두 개의 열과 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-753">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-754"><xref:System.Data.DataSet> 스키마와 데이터를 호출 하 여 디스크에 기록 된 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-754">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-755">두 번째 <xref:System.Data.DataSet> 만들어집니다 및 <xref:System.Data.DataSet.ReadXml%2A> 메서드 스키마와 데이터를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-755">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-756"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-756"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-757">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-757">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-758">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-758">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-759">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-759">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-760">지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Xml.XmlReader" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-760">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-761">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-761">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-762"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-762">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-763">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-763">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-764">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-764">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-765">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-765">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-766">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-766">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-767"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-767">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-768">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-768">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-769">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-769">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-770">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-770">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-771">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-771">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-772">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-772">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-773">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-773">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-774">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-774">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-775">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함는 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-775">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-776">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-776">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="c3bb7-777"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType>는 <xref:System.Xml.XmlReader>에서 상속됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-777"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> inherits from <xref:System.Xml.XmlReader>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-778">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-778">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-779">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-779">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-780">다음 예에서는 간단한을 먼저 만듭니다 <xref:System.Data.DataSet> 하나로 <xref:System.Data.DataTable>, 두 개의 열과 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-780">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-781"><xref:System.Data.DataSet> 스키마와 데이터를 호출 하 여 디스크에 기록 된 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-781">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-782">두 번째 <xref:System.Data.DataSet> 만들어집니다 및 <xref:System.Data.DataSet.ReadXml%2A> 메서드 스키마와 데이터를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-782">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-783">읽어올 <see cref="T:System.IO.Stream" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-783">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-784"><see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-784">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-785">지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.IO.Stream" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-785">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-786">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-786">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-787"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-787">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-788">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-788">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-789">에 마찬가지입니다는 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-789">The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-790">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-790">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-791">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-791">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-792">사용 하는 경우 <xref:System.Data.DataSet.ReadXml%2A> 설정한 <xref:System.Data.XmlReadMode> 를 `Diffgram`, 대상의 내용을 `DataSet` 과 원래 `DataSet` diffgram 생성 되 고 처리 되는 방식으로 인해 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-792">When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed.</span></span> <span data-ttu-id="c3bb7-793">Diffgram에 대 한 자세한 내용은 참조 하십시오. [Diffgram](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-793">For more information on diffgrams, see [DiffGrams](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-794"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-794">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-795">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-795">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-796">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-796">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-797">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-797">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-798">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-798">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-799">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-799">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-800">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-800">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-801">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-801">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-802">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-802">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-803">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-803">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-804">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-804">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-805">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-805">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-806">읽어올 <see cref="T:System.IO.TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-806">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-807"><see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-807">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-808">지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.IO.TextReader" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-808">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-809">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-809">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-810"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-810">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-811">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-811">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-812">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-812">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-813">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-813">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-814">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-814">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-815"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-815">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-816">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-816">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-817">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-817">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-818">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-818">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-819">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-819">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-820">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-820">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-821">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-821">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-822">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-822">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-823">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-823">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-824">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-824">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-825">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-825">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-826">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-826">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-827">읽어올 파일의 경로를 포함한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-827">The filename (including the path) from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-828"><see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-828">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-829">지정된 파일과 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-829">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-830">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-830">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-831"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-831">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-832">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-832">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-833">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-833">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-834">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-834">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-835">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-835">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-836"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-836">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-837">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-837">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-838">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-838">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-839">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-839">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-840">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-840">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-841">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-841">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-842">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-842">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-843">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-843">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-844">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함는 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-844">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-845">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-845">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-846">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-846">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-847">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-847">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-848"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-848"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-849">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-849">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-850">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-850">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-851">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-851">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-852"><see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-852">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-853">지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.Xml.XmlReader" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-853">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-854">데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-854">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-855"><xref:System.Data.DataSet.ReadXml%2A> 메서드 데이터와 스키마를를 모두만 데이터를 읽을 수 있습니다는 <xref:System.Data.DataSet> XML 문서 로부터 반면는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드는 스키마만 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-855">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="c3bb7-856">데이터 및 스미카를 읽으려면 중 하나를 사용는 `ReadXML` 포함 하는 오버 로드는 `mode` 매개 변수를 해당 값을 설정 하 고 `ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-856">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-857">동일한은 대 한 적용 된 <xref:System.Data.DataSet.WriteXml%2A> 및 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-857">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-858">XML 데이터 또는 둘 다 스키마와 데이터를 작성 하는 `DataSet`를 사용 하 여는 `WriteXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-858">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="c3bb7-859">스키마만을 작성 하기 위해 사용 하 여는 `WriteXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-859">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-860"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-860">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="c3bb7-861">인라인 스키마를 지정 하는 경우 데이터를 로드 하기 전에 기존 관계형 구조를 확장 하는 인라인 스키마 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-861">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="c3bb7-862">충돌이 있는지 (예를 들어 다른 데이터 형식으로 정의 된 동일한 테이블에 동일한 열)에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-862">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="c3bb7-863">인라인 스키마를 지정 하는 경우 XML 문서의 구조에 따라 동일한 관계형 구조를 필요에 따라 유추를 통해 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-863">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="c3bb7-864">유추를 통해 모든 데이터를 노출 하기 위해 스키마를 확장할 수 없습니다, 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-864">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-865">`DataSet` 해당 XML 요소를 연결 하지는 않습니다 `DataColumn` 또는 `DataTable` 는 serialize 된 xml ("_")와 같은 문자가 올바른 XML 문자는 이스케이프 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-865">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="c3bb7-866">`DataSet` XML 요소 이름에 잘못 된 XML 문자가 이스케이프 자신과 따라서만 사용할 수는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-866">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="c3bb7-867">XML 요소 이름에 사용할 수 있는 문자는 이스케이프 처리 하는 동안 요소가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-867">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="c3bb7-868">경우에 대 한 XML 스키마는 <xref:System.Data.DataSet> 포함는 `targetNamespace`, 데이터를 읽을 수 있습니다, 그리고 및를 호출할 때 예외가 발생할 수 있습니다 <xref:System.Data.DataSet.ReadXml%2A> 로드 하는 <xref:System.Data.DataSet> 정규화 네임 스페이스가 없는 요소가 포함 된 XML과 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-868">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="c3bb7-869">정규화 되지 않은 요소를 읽으려면 설정 `elementFormDefault` 같은를 "qualified" XML 스키마에서 다음 예제에서 보여 주듯이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-869">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-870">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXml%2A> 지정 하 여 `XmlReadMode.ReadSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-870">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="c3bb7-871">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-871">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-872">XML 스키마를 <see cref="T:System.Data.DataSet" />으로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-872">Reads an XML schema into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-873">읽어올 <see cref="T:System.IO.Stream" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-873">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-874">지정된 <see cref="T:System.IO.Stream" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-874">Reads the XML schema from the specified <see cref="T:System.IO.Stream" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-875">사용 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 에 대 한 스키마를 만들려면 다음 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-875">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-876">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-876">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-877">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-877">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-878">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-878">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-879">msdata:DataType 및 xs:type 형식 일치 하지 않는 경우 데이터 손상이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-879">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="c3bb7-880">예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-880">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="c3bb7-881"><xref:System.Data.DataSet.ReadXmlSchema%2A> 일반적으로 메서드를 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 채우는 데 사용 되는 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-881">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-882">파생 된 클래스는 <xref:System.IO.Stream> 클래스 포함 <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, 및 <xref:System.Net.Sockets.NetworkStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-882">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-883">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 예외가 throw에 스키마를 읽을 때는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXmlSchema%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-883">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="c3bb7-884">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-884">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-885">다음 예제에서는 <xref:System.IO.FileStream> 개체, XML 스키마 읽기를 호출 하는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-885">The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-886">읽어올 <see cref="T:System.IO.TextReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-886">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-887">지정된 <see cref="T:System.IO.TextReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-887">Reads the XML schema from the specified <see cref="T:System.IO.TextReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-888">사용 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 에 대 한 스키마를 만들려면 다음 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-888">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-889">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-889">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-890">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-890">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-891">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-891">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-892">msdata:DataType 및 xs:type 형식 일치 하지 않는 경우 데이터 손상이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-892">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="c3bb7-893">예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-893">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="c3bb7-894"><xref:System.Data.DataSet.ReadXmlSchema%2A> 일반적으로 메서드를 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 채우는 데 사용 되는 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-894">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-895">클래스에서 상속 되는 <xref:System.IO.TextReader> 클래스에 포함 된 <xref:System.IO.StreamReader> 및 <xref:System.IO.StringReader> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-895">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-896">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 예외가 throw에 스키마를 읽을 때는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXmlSchema%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-896">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="c3bb7-897">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-897">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-898">다음 예제에서는 한 <xref:System.IO.StreamReader> , 스키마를 읽거나 개체를 호출 하는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 개체와 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-898">The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-899">읽을 파일 이름(경로 포함)입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-899">The file name (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-900">지정된 파일에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-900">Reads the XML schema from the specified file into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-901">사용 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 에 대 한 스키마를 만들려면 다음 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-901">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-902">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-902">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-903">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-903">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-904">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-904">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-905">msdata:DataType 및 xs:type 형식 일치 하지 않는 경우 데이터 손상이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-905">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="c3bb7-906">예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-906">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="c3bb7-907"><xref:System.Data.DataSet.ReadXmlSchema%2A> 일반적으로 메서드를 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 채우는 데 사용 되는 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-907">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-908">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 스키마를 읽고 하려고 할 때 예외가 throw 됩니다는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXmlSchema%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-908">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="c3bb7-909">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-909">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-910"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-910"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-911">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-911">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-912">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-912">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-913">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-913">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="c3bb7-914">지정된 <see cref="T:System.Xml.XmlReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-914">Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-915">사용 하 여는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 에 대 한 스키마를 만들려면 다음 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-915">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="c3bb7-916">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-916">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="c3bb7-917">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-917">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-918">msdata:DataType 및 xs:type 형식 일치 하지 않는 경우 데이터 손상이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-918">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="c3bb7-919">예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-919">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="c3bb7-920"><xref:System.Data.DataSet.ReadXmlSchema%2A> 일반적으로 메서드를 호출 하기 전에 <xref:System.Data.DataSet.ReadXml%2A> 채우는 데 사용 되는 메서드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-920">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-921"><xref:System.Xml.XmlReader?displayProperty=nameWithType> 클래스는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-921">The <xref:System.Xml.XmlReader?displayProperty=nameWithType> class is abstract.</span></span> <span data-ttu-id="c3bb7-922">상속 되는 클래스는 `XmlReader` 는 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-922">A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-923">경우에 대 한 스키마 프로그램 <xref:System.Data.DataSet> 요소가 동일한 이름 이지만 동일한 네임 스페이스의 다른 종류의 예외가 throw에 스키마를 읽을 때는 <xref:System.Data.DataSet> 와 <xref:System.Data.DataSet.ReadXmlSchema%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-923">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="c3bb7-924">.NET Framework 버전 1.0 사용 하는 경우이 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-924">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-925">다음 예제에서는 새 <xref:System.Data.DataSet> 및 <xref:System.IO.FileStream?displayProperty=nameWithType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-925">The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="c3bb7-926"><xref:System.IO.FileStream> 파일 경로 파일 이름을 사용 하 여 만든 개체를 만드는 데 사용 되는 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 에 인수로 전달 되는 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-926">The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-927">지정된 XML 판독기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-927">The specified XML reader.</span></span></param>
        <summary><span data-ttu-id="c3bb7-928">특성을 무시하고 빈 DataSet을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-928">Ignores attributes and returns an empty DataSet.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-929"><see cref="T:System.Data.DataSet" />이 만들어진 이후 또는 <see cref="M:System.Data.DataSet.AcceptChanges" />가 마지막으로 호출된 이후에 해당 DataSet에서 변경된 내용을 모두 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-929">Rolls back all the changes made to the <see cref="T:System.Data.DataSet" /> since it was created, or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-930">호출 된 <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> 호출 하는 <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> 모든 메서드 <xref:System.Data.DataTable> 개체에 포함 된는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-930">Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="c3bb7-931"><xref:System.Data.DataRow> 에 포함 된 개체는 <xref:System.Data.DataSet> 호출 하 여 편집 모드로 설정할 수 있습니다는 <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-931"><xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c3bb7-932">호출 후는 <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> 메서드를 호출 하 여 변경 내용이 거부 될 수 있습니다는 <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> 에 <xref:System.Data.DataTable> 입니다는 <xref:System.Data.DataRow> 개체 속합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-932">After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.</span></span>  
  
 <span data-ttu-id="c3bb7-933">경우는 <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> 메서드가 호출 되 면 행이 편집 모드에 계속 편집이 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-933">When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method is called, any rows still in edit-mode cancel their edits.</span></span> <span data-ttu-id="c3bb7-934">새 행이 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-934">New rows are removed.</span></span> <span data-ttu-id="c3bb7-935">원래 상태로 다시 수정 및 삭제 된 행을 반환 합니다. (`DataRowState.Unchanged`).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-935">Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).</span></span>  
  
 <span data-ttu-id="c3bb7-936">AcceptChanges 및 RejectChanges에만 적용 <xref:System.Data.DataRow> 관련 변경 내용 (즉, `Add`, `Remove`, `Delete`, 및 `Modify`).</span><span class="sxs-lookup"><span data-stu-id="c3bb7-936">AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`).</span></span> <span data-ttu-id="c3bb7-937">스키마 나 구조 변경 내용을 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-937">They are not applicable to schema or structural changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-938">다음 예제에서 파생 된 클래스는 <xref:System.Data.DataSet> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-938">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="c3bb7-939"><xref:System.Data.DataSet.RejectChanges%2A> 이벤트 함수 내에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-939">The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-940">테이블을 연결하고 부모 테이블에서 자식 테이블까지 탐색할 수 있는 관계 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-940">Get the collection of relations that link tables and allow navigation from parent tables to child tables.</span></span></summary>
        <value><span data-ttu-id="c3bb7-941"><see cref="T:System.Data.DataRelationCollection" /> 개체 컬렉션을 포함하는 <see cref="T:System.Data.DataRelation" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-941">A <see cref="T:System.Data.DataRelationCollection" /> that contains a collection of <see cref="T:System.Data.DataRelation" /> objects.</span></span> <span data-ttu-id="c3bb7-942"><see cref="T:System.Data.DataRelation" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-942">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3bb7-943">다음 예제에서는 출력을 통해 모든 자식 테이블의 열 이름에서 <xref:System.Data.DataSet.Relations%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-943">The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-944">원격 작업 동안 사용된 <see cref="T:System.Data.SerializationFormat" />의 <see cref="T:System.Data.DataSet" />을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-944">Gets or sets a <see cref="T:System.Data.SerializationFormat" /> for the <see cref="T:System.Data.DataSet" /> used during remoting.</span></span></summary>
        <value><span data-ttu-id="c3bb7-945"><see cref="T:System.Data.SerializationFormat" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-945">A <see cref="T:System.Data.SerializationFormat" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-946">모든 테이블을 지우고 <see cref="T:System.Data.DataSet" />에서 모든 관계, 외래 제약 조건 및 테이블을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-946">Clears all tables and removes all relations, foreign constraints, and tables from the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="c3bb7-947">서브클래스에서 <see cref="M:System.Data.DataSet.Reset" />을 재정의하여 <see cref="T:System.Data.DataSet" />을 원래 상태로 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-947">Subclasses should override <see cref="M:System.Data.DataSet.Reset" /> to restore a <see cref="T:System.Data.DataSet" /> to its original state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-948"><see cref="T:System.Data.SchemaSerializationMode" />에 대한 <see cref="T:System.Data.DataSet" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-948">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-949"><see cref="T:System.Data.SchemaSerializationMode" />에 대한 <see cref="T:System.Data.DataSet" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-949">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-950">A <xref:System.Data.DataSet> 웹 서비스 및 원격 시나리오에 기본적으로 해당 스키마 및 인스턴스 데이터를 serialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-950">A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios.</span></span> <span data-ttu-id="c3bb7-951">설정의 <xref:System.Data.DataSet.SchemaSerializationMode%2A> 의 형식화 된 속성 `DataSet` 를 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> serialization 페이로드에서 제외 되어야 하는 스키마 정보로 인해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-951">Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.</span></span>  
  
 <span data-ttu-id="c3bb7-952"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 지원 되는 형식화 된에 대해서만 `DataSet`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-952"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`.</span></span> <span data-ttu-id="c3bb7-953">형식화 되지 않은 `DataSet` 이 속성 설정할 수 있습니다 <xref:System.Data.SchemaSerializationMode.IncludeSchema>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-953">For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="c3bb7-954"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 기본 스키마 정보를 입력 한 경우에만 사용 해야 `DataTables`, `DataRelations` 및 `Constraints` 수정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-954"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified.</span></span> <span data-ttu-id="c3bb7-955">전체, 오류가 발생 했습니다 스키마 정보를 serialize 해야 수정 작업이 필요한 경우 <xref:System.Data.SchemaSerializationMode.IncludeSchema>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-955">If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="c3bb7-956"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 2.0 이상 버전의.NET Framework에서 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-956"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.</span></span>  
  
 <span data-ttu-id="c3bb7-957">때 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> 설정 되어만 최상위 수준 런타임 속성에는 <xref:System.Data.DataSet> serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-957">When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized.</span></span> <span data-ttu-id="c3bb7-958">또한 기본 값과에서 다를 경우에 serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-958">In addition, they are serialized only if they happen to be different from the default values.</span></span> <span data-ttu-id="c3bb7-959">중에서 `Tables`, `Relations` 또는 `Constraints` serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-959">None of the `Tables`, `Relations` or `Constraints` are serialized.</span></span> <span data-ttu-id="c3bb7-960">Serialize 된 런타임 속성에 포함 <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, 및 <xref:System.Data.DataSet.CaseSensitive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-960">The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>.</span></span> <span data-ttu-id="c3bb7-961">이러한 속성은 전체 런타임 데이터 무결성이 유지 되도록 serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-961">These properties are serialized to make sure that overall runtime data integrity is preserved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-962"><see cref="P:System.Data.DataSet.Relations" /> 속성을 유지해야 하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-962">Gets a value indicating whether <see cref="P:System.Data.DataSet.Relations" /> property should be persisted.</span></span></summary>
        <returns>
          <span data-ttu-id="c3bb7-963">속성 값이 기본값에서 변경되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-963"><see langword="true" /> if the property value has been changed from its default; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-964">에 대 한 디자이너를 만들거나 하는 경우 일반적으로이 메서드를 사용는 <xref:System.Data.DataSet>를 포함 하는 사용자 고유의 컨트롤을 만드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-964">You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-965">다음 예제에서는 보여에서 파생 된 클래스는 <xref:System.Data.DataSet> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-965">The following examples show a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="c3bb7-966"><xref:System.Data.DataSet.Reset%2A> 및 <xref:System.Data.DataSet.ShouldSerializeRelations%2A> 메서드는 파생된 클래스에서 함수 내에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-966">The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-967"><see cref="P:System.Data.DataSet.Tables" /> 속성을 유지해야 하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-967">Gets a value indicating whether <see cref="P:System.Data.DataSet.Tables" /> property should be persisted.</span></span></summary>
        <returns>
          <span data-ttu-id="c3bb7-968">속성 값이 기본값에서 변경되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-968"><see langword="true" /> if the property value has been changed from its default; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-969">에 대 한 디자이너를 만들거나 하는 경우에이 메서드를 일반적으로 사용 된 <xref:System.Data.DataSet>, 포함 하는 사용자 고유의 컨트롤을 만드는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-969">You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-970">다음 예제에서 파생 된 클래스는 <xref:System.Data.DataSet> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-970">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="c3bb7-971"><xref:System.Data.DataSet.ShouldSerializeTables%2A> 파생된 클래스에서 함수 내에서 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-971">The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-972"><see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataSet" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-972">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-973"><see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-973">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-974">사이트 바인딩는 <xref:System.ComponentModel.Component> 에 <xref:System.ComponentModel.Container> 서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-974">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-975">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-975">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-976">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-976">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-977">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="c3bb7-977">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c3bb7-978"><xref:System.Data.DataSet> 인스턴스가 <xref:System.ComponentModel.IListSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-978">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-979">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-979">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-980">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-980">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-981">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="c3bb7-981">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c3bb7-982"><xref:System.Data.DataSet> 인스턴스가 <xref:System.ComponentModel.IListSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-982">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3bb7-983">이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-983">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></summary>
        <returns><span data-ttu-id="c3bb7-984">이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-984">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-985">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="c3bb7-985">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c3bb7-986"><xref:System.Data.DataSet> 인스턴스가 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-986">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c3bb7-987"><see cref="T:System.Xml.XmlReader" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-987">A <see cref="T:System.Xml.XmlReader" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-988">이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-988">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-989">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="c3bb7-989">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c3bb7-990"><xref:System.Data.DataSet> 인스턴스가 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-990">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-991"><see cref="T:System.Xml.XmlWriter" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-991">A <see cref="T:System.Xml.XmlWriter" />.</span></span></param>
        <summary><span data-ttu-id="c3bb7-992">이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-992">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-993">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="c3bb7-993">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="c3bb7-994"><xref:System.Data.DataSet> 인스턴스가 <xref:System.Xml.Serialization.IXmlSerializable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-994">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3bb7-995"><see cref="T:System.Data.DataSet" />에 포함된 테이블 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-995">Gets the collection of tables contained in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="c3bb7-996">이 <see cref="T:System.Data.DataTableCollection" />에 포함된 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-996">The <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="c3bb7-997"><see cref="T:System.Data.DataTable" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-997">An empty collection is returned if no <see cref="T:System.Data.DataTable" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-998">컬렉션에 테이블을 추가 하려면 사용 <xref:System.Data.DataTableCollection.Add%2A> 의 메서드는 <xref:System.Data.DataTableCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-998">To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>.</span></span> <span data-ttu-id="c3bb7-999">사용 하 여 테이블을 제거 하려면는 <xref:System.Data.DataTableCollection.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-999">To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1000">다음 예제에서는 반환 된 <xref:System.Data.DataSet> 개체의 <xref:System.Data.DataTableCollection>, 하 고 각 테이블에서 행 및 열을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1000">The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-1001"><see cref="T:System.Data.DataSet" />에서 XML 데이터를 쓰고 선택적으로 스키마를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1001">Writes XML data, and optionally the schema, from the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-1002">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1002">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1003">지정된 <see cref="T:System.Data.DataSet" />을 사용하여 <see cref="T:System.IO.Stream" />의 현재 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1003">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1004">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1004">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1005">데이터와 스키마를 작성 하려면 포함 하는 오버 로드 중 하나를 사용는 `mode` 매개 변수를 해당 값을 설정 하 고 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1005">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1006">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1006">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1007">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1007">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1008">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1008">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1009"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1009">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1010">다음 예제에서는 한 <xref:System.IO.FileStream?displayProperty=nameWithType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1010">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="c3bb7-1011">개체가 만들어진는 <xref:System.Data.DataSet.WriteXml%2A> 메서드는 XML 문서를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1011">The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1012">쓰기에 사용할 <see cref="T:System.IO.TextWriter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1012">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1013">지정된 <see cref="T:System.Data.DataSet" />을 사용하여 <see cref="T:System.IO.TextWriter" />의 현재 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1013">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1014">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1014">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1015">데이터와 스키마를 작성 하려면 포함 하는 오버 로드 중 하나를 사용는 `mode` 매개 변수를 해당 값을 설정 하 고 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1015">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1016">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1016">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1017">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1017">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1018">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1018">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1019"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1019">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-1020">쓸 대상 파일 이름(경로 포함)입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1020">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1021">지정된 파일에 <see cref="T:System.Data.DataSet" />의 현재 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1021">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1022">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1022">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1023">데이터와 스키마를 작성 하려면 포함 하는 오버 로드 중 하나를 사용는 `mode` 매개 변수를 해당 값을 설정 하 고 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1023">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1024">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1024">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1025">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1025">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1026">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1026">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1027"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1027">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-1028"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1028"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-1029">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1029">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-1030">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-1030">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1031">쓰기에 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1031">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1032">지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.Xml.XmlWriter" />의 현재 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1032">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1033">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1033">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1034">데이터와 스키마를 작성 하려면 포함 하는 오버 로드 중 하나를 사용는 `mode` 매개 변수를 해당 값을 설정 하 고 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1034">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1035">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1035">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1036">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1036">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1037">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1037">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1038"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1038">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-1039">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1039">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-1040"><see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1040">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1041">지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.IO.Stream" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1041">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="c3bb7-1042">스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1042">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1043">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1043">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1044">데이터와 스키마를 작성 하려면 설정는 `mode` 매개 변수를 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1044">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1045">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1045">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1046">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1046">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1047">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1047">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1048"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1048">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1049">문서를 작성하는 데 사용되는 <see cref="T:System.IO.TextWriter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1049">A <see cref="T:System.IO.TextWriter" /> object used to write the document.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-1050"><see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1050">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1051">지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1051">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="c3bb7-1052">스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1052">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1053">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1053">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1054">데이터와 스키마를 작성 하려면 설정는 `mode` 매개 변수를 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1054">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1055">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1055">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1056">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1056">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1057">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1057">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1058"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1058">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1059">다음 예에서는 간단한을 먼저 만듭니다 <xref:System.Data.DataSet> 하나로 <xref:System.Data.DataTable>, 두 개의 열과 10 개 행입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1059">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="c3bb7-1060"><xref:System.Data.DataSet> 스키마와 데이터를 호출 하 여 디스크에 기록 된 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1060">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="c3bb7-1061">두 번째 <xref:System.Data.DataSet> 만들어집니다 및 <xref:System.Data.DataSet.ReadXml%2A> 메서드 스키마와 데이터를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1061">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-1062">쓸 대상 파일 이름(경로 포함)입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1062">The file name (including the path) to which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-1063"><see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1063">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1064">지정된 <see cref="T:System.Data.DataSet" />를 사용하여 지정된 파일에 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1064">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="c3bb7-1065">스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1065">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1066">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1066">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1067">데이터와 스키마를 작성 하려면 설정는 `mode` 매개 변수를 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1067">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1068">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1068">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1069">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1069">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1070">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1070">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1071"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1071">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1072">다음 예제에서는 <xref:System.Data.DataSet.WriteXml%2A> 메서드는 XML 문서를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1072">The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-1073"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1073"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-1074">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1074">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-1075">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-1075">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1076">쓰기에 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1076">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="c3bb7-1077"><see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1077">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1078">지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1078">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="c3bb7-1079">스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1079">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1080">`WriteXml` 메서드 데이터와에서 스키마를 모두만 데이터를 작성 하는 방법을 제공는 <xref:System.Data.DataSet> XML 문서로 반면는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1080">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="c3bb7-1081">데이터와 스키마를 작성 하려면 설정는 `mode` 매개 변수를 `WriteSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1081">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="c3bb7-1082">동일한은 대 한 적용 된 <xref:System.Data.DataSet.ReadXml%2A> 및 <xref:System.Data.DataSet.ReadXmlSchema%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1082">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="c3bb7-1083">XML 데이터 또는 둘 다 스키마와 데이터를 읽을 수는 `DataSet`를 사용 하 여는 `ReadXml` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1083">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="c3bb7-1084">사용 하 여 스키마만 읽을 수는 `ReadXmlSchema` 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1084">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3bb7-1085"><xref:System.InvalidOperationException> 경우의 열 유형이 throw 됩니다는 `DataRow` 에서 읽거나 구현에 기록 되 고 <xref:System.Dynamic.IDynamicMetaObjectProvider> 구현 하지 않으므로 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1085">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1086">다음 예제에서는 한 <xref:System.IO.FileStream?displayProperty=nameWithType> 새로 만들려면 사용 되는 개체 <xref:System.Xml.XmlTextWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1086">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object that is used to create a new <xref:System.Xml.XmlTextWriter>.</span></span> <span data-ttu-id="c3bb7-1087"><xref:System.Xml.XmlTextWriter> 개체 함께 사용 되는 <xref:System.Data.DataSet.WriteXml%2A> 메서드는 XML 문서를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1087">The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3bb7-1088"><see cref="T:System.Data.DataSet" /> 구조를 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1088">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-1089">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1089">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1090"><see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.Stream" /> 개체에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1090">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1091">사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 에 대 한 스키마를 작성 하는 메서드는 <xref:System.Data.DataSet> XML 문서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1091">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="c3bb7-1092">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1092">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-1093">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1093">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1094">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1094">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="c3bb7-1095">XML 문서에 데이터 쓰기를 사용 하 여는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1095">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1096">파생 된 클래스는 <xref:System.IO.Stream> 클래스 포함 <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, 및 <xref:System.Net.Sockets.NetworkStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1096">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1097">다음 예제에서는 새 <xref:System.IO.FileStream> 에 전달 되는 개체는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드는 스키마를 디스크에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1097">The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1098">쓰기에 사용할 <see cref="T:System.IO.TextWriter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1098">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1099"><see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.TextWriter" /> 개체에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1099">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1100">사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 에 대 한 스키마를 작성 하는 메서드는 <xref:System.Data.DataSet> XML 문서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1100">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="c3bb7-1101">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1101">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-1102">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1102">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1103">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1103">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="c3bb7-1104">XML 문서에 데이터 쓰기를 사용 하 여는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1104">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1105">클래스에서 파생 되는는 <xref:System.IO.TextWriter?displayProperty=nameWithType> 클래스에 포함 된 <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, 및 <xref:System.IO.StringWriter?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1105">Classes the derive from the <xref:System.IO.TextWriter?displayProperty=nameWithType> class include the <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, and <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1106">다음 예제에서는 <xref:System.Text.StringBuilder?displayProperty=nameWithType> 개체를 하는 데 새 <xref:System.IO.StringWriter?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1106">The following example creates a <xref:System.Text.StringBuilder?displayProperty=nameWithType> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c3bb7-1107"><xref:System.IO.StringWriter> 에 전달 되는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드와 결과 문자열이 콘솔 창에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1107">The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-1108">쓸 대상 파일 이름(경로 포함)입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1108">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1109"><see cref="T:System.Data.DataSet" /> 구조를 파일에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1109">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1110">사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 에 대 한 스키마를 작성 하는 메서드는 <xref:System.Data.DataSet> XML 문서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1110">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="c3bb7-1111">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1111">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-1112">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1112">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1113">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1113">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="c3bb7-1114">XML 문서에 데이터 쓰기를 사용 하 여는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1114">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c3bb7-1115"><see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1115"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="c3bb7-1116">에 파일 읽기 및 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1116">for reading and writing files.</span></span> <span data-ttu-id="c3bb7-1117">연결 된 열거형의 경우: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span><span class="sxs-lookup"><span data-stu-id="c3bb7-1117">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1118">쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1118">The <see cref="T:System.Xml.XmlWriter" /> to write to.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1119"><see cref="T:System.Data.DataSet" /> 구조를 <see cref="T:System.Xml.XmlWriter" /> 개체에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1119">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3bb7-1120">사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 에 대 한 스키마를 작성 하는 메서드는 <xref:System.Data.DataSet> XML 문서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1120">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="c3bb7-1121">스키마에 테이블, 관계 및 제약 조건 정의가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1121">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="c3bb7-1122">스키마는 XML 문서를 작성 하려면 사용 하 여는 <xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1122">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1123">XML 스키마는 XSD 표준을 사용 하 여 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1123">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="c3bb7-1124">XML 문서에 데이터 쓰기를 사용 하 여는 <xref:System.Data.DataSet.WriteXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1124">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="c3bb7-1125">하나의 클래스에서 상속 되는 <xref:System.Xml.XmlWriter?displayProperty=nameWithType> 클래스는는 <xref:System.Xml.XmlTextWriter> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1125">One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=nameWithType> class is the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3bb7-1126">다음 예제에서는 새 <xref:System.IO.FileStream?displayProperty=nameWithType> 지정 된 경로 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1126">The following example creates a new <xref:System.IO.FileStream?displayProperty=nameWithType> object with the specified path.</span></span> <span data-ttu-id="c3bb7-1127"><xref:System.IO.FileStream> 개체를 만드는 데 사용 되는 <xref:System.Xml.XmlTextWriter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1127">The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XmlTextWriter> object.</span></span> <span data-ttu-id="c3bb7-1128"><xref:System.Data.DataSet.WriteXmlSchema%2A> 메서드를 호출 합니다는 <xref:System.Xml.XmlTextWriter> 스키마 디스크에 쓸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1128">The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="c3bb7-1129">쓸 <see cref="T:System.IO.Stream" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1129">A <see cref="T:System.IO.Stream" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="c3bb7-1130"><see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1130">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1131"><see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.Stream" /> 개체에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1131">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1132">쓸 <see cref="T:System.IO.TextWriter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1132">A <see cref="T:System.IO.TextWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="c3bb7-1133"><see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1133">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1134">지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.IO.TextWriter" /> 구조를 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1134">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="c3bb7-1135">쓸 파일의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1135">The name of the file to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="c3bb7-1136"><see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1136">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1137"><see cref="T:System.Data.DataSet" /> 구조를 파일에 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1137">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c3bb7-1138">쓸 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1138">A <see cref="T:System.Xml.XmlWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="c3bb7-1139"><see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1139">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="c3bb7-1140">지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.Xml.XmlWriter" /> 구조를 XML 스키마로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="c3bb7-1140">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>