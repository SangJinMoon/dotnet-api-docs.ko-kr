<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomReflectionContext.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52cb0994464985332742e76a283814be590106a9b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cb0994464985332742e76a283814be590106a9b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Represents a customizable reflection context.</source>
          <target state="translated">사용자 지정 가능한 리플렉션 컨텍스트를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source><ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> provides a way for you to add or remove custom attributes from reflection objects, or add dummy properties to those objects, without re-implementing the complete reflection model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 추가 또는 리플렉션 개체에서 사용자 지정 특성을 제거 하거나 전체 리플렉션 모델을 다시 구현 하지 않고 해당 개체에 더미 속성을 추가할 수 있는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>The default <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> simply wraps reflection objects without making any changes, but by subclassing and overriding the relevant methods, you can add, remove, or change the attributes that apply to any reflected parameter or member, or add new properties to a reflected type.</source>
          <target state="translated">기본 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 변경 하지 않고 개체를 래핑하고 리플렉션을 단순히 하지만 서브클래싱 하 고 관련 메서드를 재정의 추가, 제거 또는 반영 된 매개 변수 또는 멤버에 적용 되는 특성을 변경 하거나 추가할 수 있습니다에 새 속성을 리플 렉 트 된 유형입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>For example, suppose that your code follows the convention of applying a particular attribute to factory methods, but you are now required to work with third-party code that lacks attributes.</source>
          <target state="translated">예를 들어, 코드의 특정 특성 팩터리 메서드를 적용 하는 규칙을 따르는지를 있지만 제 3 자 코드 특성이 없는 작업에 이제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>You can use <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> to specify a rule for identifying the objects that should have attributes and to supply the objects with those attributes when they are viewed from your code.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 특성을 가져야 하는 개체를 식별 하는 것에 대 한 규칙을 지정 하 고 사용자 코드에서 볼 때 이러한 특성이 포함 된 개체를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>To use <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> effectively, the code that uses the reflected objects must support the notion of specifying a reflection context, instead of assuming that all reflected objects are associated with the runtime reflection context.</source>
          <target state="translated">사용 하도록 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 리플 렉 트 된 개체를 사용 하는 코드에서 반영 모든 개체는 연결 된 런타임 리플렉션 컨텍스트를 가정 하는 대신 리플렉션 컨텍스트를 지정 하의 개념을 지원 해야 합니다는 효과적으로 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Many reflection methods in the .NET Framework provide a <ph id="ph1">&lt;xref:System.Reflection.ReflectionContext&gt;</ph> parameter for this purpose.</source>
          <target state="translated">.NET Framework의 많은 리플렉션 메서드를 제공는 <ph id="ph1">&lt;xref:System.Reflection.ReflectionContext&gt;</ph> 이 용도 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>To modify the attributes that are applied to a reflected parameter or member, override the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29&gt;</ph> method.</source>
          <target state="translated">리플 렉 트 된 매개 변수 또는 멤버에 적용 되는 특성을 수정 하려면는 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>These methods take the reflected object and the list of attributes under its current reflection context, and return the list of attributes it should have under the custom reflection context.</source>
          <target state="translated">이러한 메서드 리플 렉 트 된 개체와 해당 현재 리플렉션 컨텍스트의 특성 목록이 걸리고는 사용자 지정 리플렉션 컨텍스트의 있어야 하는 특성 목록을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source><ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> methods should not access the list of attributes of a reflected object or method directly by calling the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method on the provided <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> instance, but should instead use the <ph id="ph5">`declaredAttributes`</ph> list, which is passed as a parameter to the <ph id="ph6">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A&gt;</ph> method overloads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 메서드를 호출 하 여 직접 반영된 개체 또는 메서드의 특성 목록에 액세스 하지 않아야는 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> 메서드를 제공 된 <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> 인스턴스를 대신 사용 해야 하지만 <ph id="ph5">`declaredAttributes`</ph> 매개 변수로 전달 되는 목록 에 <ph id="ph6">&lt;xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>To add properties to a reflected type, override the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> method.</source>
          <target state="translated">리플 렉 트 된 형식으로 속성을 추가 하려면 재정의 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>The method accepts a parameter that specifies the reflected type, and returns a list of additional properties.</source>
          <target state="translated">메서드는 반영된 유형을 지정 하 고 추가 속성의 목록을 반환 하는 매개 변수를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>You should use the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A&gt;</ph> method to create property objects to return.</source>
          <target state="translated">사용 해야는 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A&gt;</ph> 메서드를 반환 하는 속성 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>You can specify delegates when creating the property that will serve as the property accessor, and you can omit one of the accessors to create a read-only or write-only property.</source>
          <target state="translated">속성 접근자 역할을 수행 하는 속성을 만들 하며 읽기 전용 이거나 쓰기 전용 속성을 만들려면 접근자 중 하나를 생략할 수 있습니다 때 대리자를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Note that such dummy properties have no metadata or Common Intermediate Language (CIL) backing.</source>
          <target state="translated">더미 등의 속성 메타 데이터 또는 공용 중간 언어 (CIL) 백업 없습니다 한지 note 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Be cautious about equality among reflected objects when you work with reflection contexts, because objects may represent the same reflected object in multiple contexts.</source>
          <target state="translated">있으므로 주의 해야 반영된 개체 간에 일치에 대 한 리플렉션 컨텍스트를 사용 하 여 작업할 때 개체는 여러 컨텍스트에서 동일한 리플 렉 트 된 개체를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>You can use the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.MapType%2A&gt;</ph> method to obtain a particular reflection context's version of a reflected object.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.MapType%2A&gt;</ph> 메서드 리플 렉 트 된 개체의 특정 리플렉션 컨텍스트의 버전을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> object alters the attributes returned by a particular reflection object, such as those obtained by the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 등으로 가져온 특정 리플렉션 개체를 반환 하는 특성을 변경 하는 개체는 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>It does not alter the custom attribute data returned by the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A&gt;</ph> method, and these two lists will not match when you use a custom reflection context.</source>
          <target state="translated">반환 된 사용자 지정 특성 데이터를 변경 하지 않습니다는 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A&gt;</ph> 메서드와이 두 목록 사용자 지정 리플렉션 컨텍스트를 사용 하는 경우 일치 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>The following example demonstrates how to subclass  <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> to add a custom attribute to all the members of a given type whose names begin with "To".</source>
          <target state="translated">다음 예제에서는 서브 클래스 하는 방법을 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> 에 이름이 "To"로 시작 하는 지정 된 형식의 모든 멤버에 사용자 지정 특성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>To run this code, paste it into an empty console project, and make sure to include a reference to System.Reflection.Context.dll.</source>
          <target state="translated">이 코드를 실행 하는 비어 있는 콘솔 프로젝트에 붙여 넣고 System.Reflection.Context.dll에 대 한 참조를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)">
          <source>The reflection context to use as a base.</source>
          <target state="translated">기본으로 사용할 리플렉션 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> class with the specified reflection context as a base.</source>
          <target state="translated">지정된 리플렉션 컨텍스트를 기반으로 사용하여 <ph id="ph1">&lt;see cref="T:System.Reflection.Context.CustomReflectionContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)">
          <source>The type to add properties to.</source>
          <target state="translated">속성을 추가할 형식입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)">
          <source>When overridden in a derived class, provides a collection of additional properties for the specified type, as represented in this reflection context.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이 리플렉션 컨텍스트에 제공된 바와 같이 지정된 형식에 대한 추가 속성 컬렉션을 제공합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)">
          <source>A collection of additional properties for the specified type.</source>
          <target state="translated">지정된 형식에 대한 추가 속성 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)">
          <source>Override this method to specify which properties should be added to a given type.</source>
          <target state="translated">지정된 된 형식에 추가할 속성을 지정 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)">
          <source>To create the properties, use the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A&gt;</ph> method.</source>
          <target state="translated">속성을 만들려면 사용은 <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>Creates an object that represents a property to be added to a type, as specified by the <ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> 메서드가 지정하는 대로 형식에 추가될 속성을 나타내는 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>The type of the property to create.</source>
          <target state="translated">만들 속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>The name of the property to create.</source>
          <target state="translated">만들 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>An object that represents the property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 접근자를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>An object that represents the property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 접근자를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>Creates an object that represents a property to be added to a type, to be used with the <ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> 메서드와 함께 사용할 형식에 추가될 속성을 나타내는 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>An object that represents the property.</source>
          <target state="translated">속성을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
          <source>Objects that are returned by this method are not complete <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects, and should be used only in the context of the <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드에 의해 반환 되는 개체 완전 하지 않은 <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> 개체, 및의 경우에만 사용 해야는 <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>The type of the property to create.</source>
          <target state="translated">만들 속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>The name of the property to create.</source>
          <target state="translated">만들 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>An object that represents the property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 접근자를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>An object that represents the property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 접근자를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>A collection of custom attributes to apply to the property.</source>
          <target state="translated">속성에 적용할 사용자 지정 특성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>A collection of custom attributes to apply to the property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 접근자에 적용할 사용자 지정 특성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>A collection of custom attributes to apply to the property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">속성의 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 접근자에 적용할 사용자 지정 특성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>Creates an object that represents a property to be added to a type, to be used with the <ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> method and using the specified custom attributes.</source>
          <target state="translated">지정된 사용자 지정 특성을 사용하여 <ph id="ph1">&lt;see cref="M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)" /&gt;</ph> 메서드와 함께 사용할 형식에 추가될 속성을 나타내는 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>An object that represents the property.</source>
          <target state="translated">속성을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
          <source>Objects that are returned by this method are not complete <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects, and should be used only in the context of the <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드에 의해 반환 되는 개체 완전 하지 않은 <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> 개체, 및의 경우에만 사용 해야는 <ph id="ph2">&lt;xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Reflection.Context.CustomReflectionContext">
          <source>When overridden in a derived class, provides a modified collection of custom attributes for the specified object, as represented in this reflection context.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이 리플렉션 컨텍스트에 제공된 바와 같이 지정된 개체에 대한 사용자 지정 특성의 수정된 컬렉션을 제공합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>The member whose custom attributes will be returned.</source>
          <target state="translated">사용자 지정 특성이 반환되는 멤버입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>A collection of the member's attributes in its current context.</source>
          <target state="translated">현재 컨텍스트에 있는 멤버 특성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>When overridden in a derived class, provides a list of custom attributes for the specified member, as represented in this reflection context.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이 리플렉션 컨텍스트에 제공된 바와 같이 지정된 멤버에 대한 사용자 지정 특성 목록을 제공합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>A collection that represents the custom attributes of the specified member in this reflection context.</source>
          <target state="translated">이 리플렉션 컨텍스트에서 지정된 멤버의 사용자 지정 특성을 나타내는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>The parameter whose custom attributes will be returned.</source>
          <target state="translated">사용자 지정 특성이 반환되는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>A collection of the parameter's attributes in its current context.</source>
          <target state="translated">현재 컨텍스트에 있는 매개 변수 특성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>When overridden in a derived class, provides a list of custom attributes for the specified parameter, as represented in this reflection context.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이 리플렉션 컨텍스트에 제공된 바와 같이 지정된 매개 변수에 대한 사용자 지정 특성 목록을 제공합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
          <source>A collection that represents the custom attributes of the specified parameter in this reflection context.</source>
          <target state="translated">이 리플렉션 컨텍스트에서 지정된 매개 변수의 사용자 지정 특성을 나타내는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)">
          <source>The external representation of the assembly to represent in this context.</source>
          <target state="translated">이 컨텍스트에서 나타낼 어셈블리의 외부 표현입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)">
          <source>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context.</source>
          <target state="translated">다른 리플렉션 컨텍스트에서 개체가 나타내는 어셈블리의 표현을 이 리플렉션 컨텍스트에 가져옵니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)">
          <source>The representation of the assembly in this reflection context.</source>
          <target state="translated">이 리플렉션 컨텍스트의 어셈블리 표현입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)">
          <source>The external representation of the type to represent in this context.</source>
          <target state="translated">이 컨텍스트에서 나타낼 형식의 외부 표현입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)">
          <source>Gets the representation, in this reflection context, of a type represented by an object from another reflection context.</source>
          <target state="translated">다른 리플렉션 컨텍스트에서 개체가 나타내는 형식의 표현을 이 리플렉션 컨텍스트에 가져옵니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)">
          <source>The representation of the type in this reflection context.</source>
          <target state="translated">이 리플렉션 컨텍스트의 형식 표현입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>