<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Match.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fb63372e2192302c84aaf2b9879a89ead4000664.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb63372e2192302c84aaf2b9879a89ead4000664</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.RegularExpressions.Match">
          <source>Represents the results from a single regular expression match.</source>
          <target state="translated">정규식으로 찾은 단일 일치 항목의 결과를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object is immutable and has no public constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 개체는 변경할 수 없습니다 및 public 생성자가 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>An instance of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> class is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method and represents the first pattern match in a string.</source>
          <target state="translated">인스턴스는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 클래스에서 반환 되는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> 메서드와 문자열에서 첫 번째 패턴 일치를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Subsequent matches are represented by <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">후속 일치 항목으로 표시 됩니다 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>In addition, a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that consists of zero, one, or more <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects is returned by the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">또한 한 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 0 개 이상의 구성 된 개체 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 개체에서 반환 되는 <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method fails to match a regular expression pattern in an input string, it returns an empty <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> 입력된 문자열에서 정규식 패턴과 일치 하는 메서드가 실패 하면, 빈 반환 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can then use a <ph id="ph1">`foreach`</ph> construct in C# or a <ph id="ph2">`For Each`</ph> construct in Visual Basic to iterate the collection.</source>
          <target state="translated">사용할 수 있습니다는 <ph id="ph1">`foreach`</ph> C#의 생성 또는 <ph id="ph2">`For Each`</ph> 컬렉션을 반복 하는 Visual Basic에서 구성 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method fails to match the regular expression pattern, it returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that is equal to <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> 정규식 패턴과 일치 하는 메서드가 실패 하면 반환는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 개체와 같은 <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property to determine whether the match was successful.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> 속성을 일치 하는 성공 했는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example provides an illustration.</source>
          <target state="translated">다음 예제에서 이에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If a pattern match is successful, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the matched substring, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture.Index%2A&gt;</ph> property indicates the zero-based starting position of the matched substring in the input string, and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Capture.Length%2A&gt;</ph> property indicates the length of matched substring in the input string.</source>
          <target state="translated">패턴 일치를 사용 하는 성공 하는 경우는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> 속성에는 일치 하는 부분 문자열이 포함 되어는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture.Index%2A&gt;</ph> 속성은 입력된 문자열에서 일치 하는 부분 문자열의 0부터 시작 위치를 나타냅니다 및 <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Capture.Length%2A&gt;</ph> 속성 나타냅니다는 입력된 문자열에서 일치 하는 부분 문자열의 길이입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Because a single match can involve multiple capturing groups, <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> has a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property that returns the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>.</source>
          <target state="translated">단일 일치 항목에는 여러 캡처링 그룹 이루어질 수 있기 때문에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> 속성을 반환 하는 <ph id="ph3">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> instance itself is equivalent to the first object in the collection, at <ph id="ph2">`Match.Groups[0]`</ph> (<ph id="ph3">`Match.Groups(0)`</ph> in Visual Basic), which represents the entire match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 인스턴스 자체는 컬렉션의 첫 번째 개체에 해당 하는에서 <ph id="ph2">`Match.Groups[0]`</ph> (<ph id="ph3">`Match.Groups(0)`</ph> Visual basic에서), 전체 일치를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can access the captured groups in a match in the following ways:</source>
          <target state="translated">다음과 같은 방법으로 일치 하는 항목의 캡처된 그룹에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can iterate the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object  by using a <ph id="ph2">`foreach`</ph> (C#) or <ph id="ph3">`For Each`</ph> (Visual Basic) construct.</source>
          <target state="translated">멤버를 반복할 수는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> 사용 하 여 개체는 <ph id="ph2">`foreach`</ph> (C#) 또는 <ph id="ph3">`For Each`</ph> 구문 (Visual Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType&gt;</ph> property to retrieve groups by the number of the capturing group.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType&gt;</ph> 속성은 캡처링 그룹의 수로 그룹을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that you can determine which numbered groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">번호가 매겨진된 그룹 인스턴스를 호출 하 여 정규식에을 결정할 수 있도록 하는 참고 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType&gt;</ph> property to retrieve groups by the name of the capturing group.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType&gt;</ph> 캡처링 그룹의 이름으로 그룹을 검색할 속성입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that you can determine which named groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">인스턴스를 호출 하 여 명명 된 그룹을 정규식에 결정할 수 있도록 하는 참고 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following examples use the regular expression <ph id="ph1">`Console\.Write(Line)?`</ph>.</source>
          <target state="translated">다음 예제에서는 정규식을 사용 하 여 <ph id="ph1">`Console\.Write(Line)?`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The regular expression is interpreted as follows:</source>
          <target state="translated">정규식은 다음과 같이 해석됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Console<ph id="ph1">\\</ph>.Write</source>
          <target state="translated">콘솔<ph id="ph1">\\</ph>합니다. 쓰기</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Match the string "Console.Write".</source>
          <target state="translated">"Console.Write"라는 문자열을 찾습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</source>
          <target state="translated">"." 문자와 일치 하는 와일드 카드로 하는 것이 아니라 리터럴 마침표로 해석 됩니다 되도록 문자를 이스케이프 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>(Line)?</source>
          <target state="translated">(줄)?</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">"Line"이라는 0개 또는 1개의 문자열을 찾습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method to retrieve all pattern matches in an input string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 입력된 문자열에 패턴 일치 항목을 모두 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>It then iterates the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the returned <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object to display information about each match.</source>
          <target state="translated">반복은 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 반환 된 개체 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 각 일치 항목에 대 한 정보를 표시 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예제 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> methods to retrieve one match at a time.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> 메서드를 한 번에 하나의 일치 항목을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>Gets the empty group.</source>
          <target state="translated">빈 그룹을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>All failed matches return this empty match.</source>
          <target state="translated">일치 항목을 찾지 못하는 모든 경우에는 이 빈 일치 항목이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>An empty match.</source>
          <target state="translated">빈 일치 항목입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>This property should not be used to determine if a match is successful.</source>
          <target state="translated">이 속성 일치 하는 성공 인지 확인 하려면 쓰일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>Instead, use the <ph id="ph1">`Match.Success`</ph> property (which is inherited from <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">대신를 사용 하 여는 <ph id="ph1">`Match.Success`</ph> 속성 (에서 상속 됨 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Gets a collection of groups matched by the regular expression.</source>
          <target state="translated">정규식으로 일치시킨 그룹의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The character groups matched by the pattern.</source>
          <target state="translated">해당 패턴으로 일치시킨 문자 그룹입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</source>
          <target state="translated">정규식 패턴은 괄호에 정규식 패턴의 일부를 포함 하 여 정의 되는 하위 식을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Every such subexpression forms a group.</source>
          <target state="translated">이러한 모든 하위 식 그룹을 형성합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property provides access to information about those subexpression matches.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> 속성은 해당 하위 식 일치 항목에 대 한 정보에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>For example, the regular expression pattern <ph id="ph1">`(\d{3})-(\d{3}-\d{4})`</ph>, which matches North American telephone numbers, has two subexpressions.</source>
          <target state="translated">예를 들어 정규식 패턴 <ph id="ph1">`(\d{3})-(\d{3}-\d{4})`</ph>, 두 개의 하위 식에 북미 전화 번호와 일치 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The first consists of the area code, which composes the first three digits of the telephone number.</source>
          <target state="translated">첫 번째 지역 번호, 전화 번호의 처음 세 자리 구성으로 이루어져 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>This group is captured by the first portion of the regular expression, <ph id="ph1">`(\d{3})`</ph>.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</source>
          <target state="translated">이 그룹은 정규식을 첫 번째 부분에 의해 캡처됩니다 <ph id="ph1">`(\d{3})`</ph>합니다. 두 번째 전화 번호의 마지막 7 자리를 작성 하는 개별 전화 번호로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>This group is captured by the second portion of the regular expression, <ph id="ph1">`(\d{3}-\d{4})`</ph>.</source>
          <target state="translated">이 그룹은 정규식을 두 번째 부분에 의해 캡처됩니다 <ph id="ph1">`(\d{3}-\d{4})`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>These two groups can then be retrieved from the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property, as the following example shows.</source>
          <target state="translated">이 두 그룹에서 검색할 수 있습니다는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> 에서 반환 되는 개체는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> 다음 예제와 같이 속성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType&gt;</ph> property is a zero-based collection object that always has at least one member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType&gt;</ph> 속성은 항상 구성원을 하나 이상에 0부터 시작 하는 컬렉션 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>If the regular expression engine cannot find any matches in a particular input string, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph> property of the single <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the collection (the object at index 0) is set to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object's <ph id="ph5">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property is set to <ph id="ph6">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">정규식 엔진은 특정 입력된 문자열에서 일치 항목을 찾을 수 없는 경우는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph> 단일 속성 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> (인덱스 0에 있는 개체) 컬렉션에 있는 개체로 설정 되어 <ph id="ph3">`false`</ph> 및 <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> 개체의 <ph id="ph5">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph>속성이 <ph id="ph6">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>If the regular expression engine can find a match, the first element of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object (the element at index 0) returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property contains a string that matches the entire regular expression pattern.</source>
          <target state="translated">경우 정규식 엔진이 일치 항목의 첫 번째 요소를 찾을 수는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> 개체 (인덱스 0에 있는 요소)에서 반환 되는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> 속성 전체 정규식 패턴과 일치 하는 문자열을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</source>
          <target state="translated">각 후속 요소 인덱스 하나에서 위쪽으로, 나타냅니다 캡처된 그룹을 정규식 캡처링 그룹을 포함 하는 경우.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>For more information, see the "Grouping Constructs and Regular Expression Objects" section of the <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> article.</source>
          <target state="translated">자세한 내용은의 "그룹화 구문 및 정규식 개체" 섹션을 참조 하십시오.는 <bpt id="p1">[</bpt>그룹화 구문<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> 문서.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The following example attempts to match a regular expression pattern against a sample string.</source>
          <target state="translated">다음 예제에서는 샘플 문자열에 대 한 정규식 패턴 일치 시 키 려 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property to store information that is retrieved by the match for display to the console.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> 속성을 콘솔에 표시 하기 위해 일치에 의해 검색 되는 정보를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</source>
          <target state="translated">마지막 일치 항목이 끝나는 위치(마지막으로 일치한 문자 다음 문자)에서 시작하여 다음 일치 항목에 대한 결과와 함께 새로운 <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The next regular expression match.</source>
          <target state="translated">다음 정규식 일치 항목입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This method is similar to calling <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> again and passing (<ph id="ph2">`Index+Length`</ph>) as the new starting position.</source>
          <target state="translated">이 메서드를 호출 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> 다시 및 전달 (<ph id="ph2">`Index+Length`</ph>)으로 새 위치를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This method does not modify the current instance.</source>
          <target state="translated">이 메서드는 현재 인스턴스를 수정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Instead, it returns a new <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that contains information about the next match.</source>
          <target state="translated">대신, 새 반환 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 다음 일치 항목에 대 한 정보를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Attempting to retrieve the next match may throw a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</source>
          <target state="translated">Throw 될 수 있습니다 다음 일치 항목을 검색 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> 경우 일치 작업에 대 한 제한 시간 값이 고 해당 시간 제한 간격을 초과 하는 다음 일치 항목을 찾으려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> method to capture regular expression matches beyond the first match.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> 첫 번째 일치 항목 이외의 메서드를 캡처 정규식 일치 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>A time-out occurred.</source>
          <target state="translated">시간이 초과되었습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>When a match attempt is repeated by calling the <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> method, the regular expression engine gives empty matches special treatment.</source>
          <target state="translated">일치 시도 호출 하 여 반복 되는 경우는 <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> 메서드, 정규식 엔진이 제공 빈 일치 항목 특별 하 게 처리 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Usually, <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> begins the search for the next match exactly where the previous match left off.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> 정확 하 게 이전 일치 항목 종료 한 위치에 관계 없이 다음 일치 항목에 대 한 검색을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>However, after an empty match, the <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> method advances by one character before trying the next match.</source>
          <target state="translated">그러나 빈 일치 후의 <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> 메서드 한 문자씩 다음 일치 항목을 시도 하기 전에.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This behavior guarantees that the regular expression engine will progress through the string.</source>
          <target state="translated">이러한 동작은 보장 정규식 엔진이 문자열을 통해 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</source>
          <target state="translated">그렇지 않으면 빈 일치 하는 모든 앞으로 이동 되지 않습니다, 때문에 다음 일치 항목 정확히 이전 일치 항목으로 같은 위치에서 시작 및 찾게 동일한 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The following example provides an illustration.</source>
          <target state="translated">다음 예제에서 이에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The regular expression pattern <bpt id="p1">&lt;c&gt;</bpt>a*<ept id="p1">&lt;/c&gt;</ept> searches for zero or more occurrences of the letter "a" in the string "abaabb".</source>
          <target state="translated">정규식 패턴 <bpt id="p1">&lt;c&gt;</bpt>는 *<ept id="p1">&lt;/c&gt;</ept> 문자의 0 개 이상의 항목을 검색 "abaabb" 문자열에 "a"입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>As the output from the example shows, the search finds six matches.</source>
          <target state="translated">예제의 출력에서 볼 수 있듯이 검색 6 명의 일치 항목을 찾습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The first match attempt finds the first "a".</source>
          <target state="translated">첫 번째 일치 시도가 찾은 첫 번째 "a"입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</source>
          <target state="translated">정확 하 게 첫 번째 검사가 첫 번째 b; 앞에 끝에서 두 번째 검사를 시작 "a"의 0 항목을 찾아서 빈 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The third match does not begin exactly where the second match ended, because the second match returned an empty string.</source>
          <target state="translated">빈 문자열을 반환 하기 때문에 세 번째 일치는 정확 하 게 두 번째 일치 항목 찾기가 종료 된 위치, 시작 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Instead, it begins one character later, after the first "b".</source>
          <target state="translated">대신, 첫 번째 "b" 후 나중에, 한 문자를 시작합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The third match finds two occurrences of "a" and returns "aa".</source>
          <target state="translated">세 번째 일치 하는 "a"의 두 일치 항목을 찾아 "aa"를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</source>
          <target state="translated">네 번째 일치 시도가 다음에 세 번째 검사에서 나옵니다, 앞의 두 번째 "b", 빈 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</source>
          <target state="translated">다섯 번째 일치 시도가 다시 진행 한 문자 "b" 세 번째 하기 전에 시작 하 고 빈 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The sixth match begins after the last "b" and returns an empty string again.</source>
          <target state="translated">여섯 번째 일치 하는 마지막 "b" 다음에 시작 하 고 빈 문자열을 다시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The replacement pattern to use.</source>
          <target state="translated">사용할 바꾸기 패턴입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Returns the expansion of the specified replacement pattern.</source>
          <target state="translated">지정된 바꾸기 패턴의 확장을 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The expanded version of the <ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> 매개 변수의 확장 버전입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Whereas the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> method replaces all matches in an input string with a specified replacement pattern, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method replaces a single match with a specified replacement pattern.</source>
          <target state="translated">반면는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> 메서드는 지정 된 바꾸기 패턴에서 입력된 문자열에서 일치 항목을 모두 바꿉니다는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> 메서드는 지정 된 바꾸기 패턴으로 단일 일치 항목을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method.</source>
          <target state="translated">개별 일치에서 작동 하기 때문에 것도 가능 호출 하기 전에 일치 하는 문자열에서 처리를 수행 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The <ph id="ph1">`replacement`</ph> parameter is a standard regular expression replacement pattern.</source>
          <target state="translated"><ph id="ph1">`replacement`</ph> 매개 변수는 표준 정규식 바꾸기 패턴입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>It can consist of literal characters and regular expression substitutions.</source>
          <target state="translated">리터럴 문자 및 정규식 대체를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions<ept id="p1">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>대체<ept id="p1">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</source>
          <target state="translated">다음 예제에서는 시작 하 고 괄호와 함께 괄호 식을 끝내 고 하이픈을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The regular expression pattern <ph id="ph1">`--(.+?)--`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`--(.+?)--`</ph>는 다음 테이블과 같이 해석됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Pattern</source>
          <target state="translated">패턴</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match two hyphens.</source>
          <target state="translated">하이픈을 두 개를 찾습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match any character one or more times, but as few times as possible.</source>
          <target state="translated">모든 문자를 하나 이상 가능한 한 적은 개수로 찾습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>This is the first capturing group.</source>
          <target state="translated">이 그룹은 첫 번째 캡처링 그룹입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match two hyphens.</source>
          <target state="translated">하이픈을 두 개를 찾습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Note that the regular expression pattern <ph id="ph1">`--(.+?)--`</ph> uses the lazy quantifier <ph id="ph2">`+?`</ph>.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`--(.+?)--`</ph> lazy 수량자를 사용 하 여 <ph id="ph2">`+?`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>If the greedy quantifier <ph id="ph1">`+`</ph> were used instead, the regular expression engine would find only a single match in the input string.</source>
          <target state="translated">경우 greedy 수량자 <ph id="ph1">`+`</ph> 사용 된 정규식 엔진이 입력된 문자열에서 단일 일치만을 찾을 것 대신 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The replacement string <ph id="ph1">`($1)`</ph> replaces the match with the first captured group, which is enclosed in parentheses.</source>
          <target state="translated">대체 문자열 <ph id="ph1">`($1)`</ph> 일치 하는 괄호로 묶인 처음 캡처한 그룹으로 대체 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Expansion is not allowed for this pattern.</source>
          <target state="translated">이 패턴에 대해 확장이 허용되지 않는 경우</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>A regular expression match equivalent to the one expected.</source>
          <target state="translated">예상된 일치 항목과 동등한 정규식 일치 항목입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> instance equivalent to the one supplied that is suitable to share between multiple threads.</source>
          <target state="translated">여러 스레드 간에 공유하기에 적합하고 제공된 인스턴스와 동등한 <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>A regular expression match that is suitable to share between multiple threads.</source>
          <target state="translated">여러 스레드 간에 공유하기에 적합한 정규식 일치 항목입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source><ph id="ph1">&lt;paramref name="inner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inner" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>