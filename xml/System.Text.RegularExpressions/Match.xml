<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb63372e2192302c84aaf2b9879a89ead4000664" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530127" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0eaea-101">정규식으로 찾은 단일 일치 항목의 결과를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0eaea-101">Represents the results from a single regular expression match.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eaea-102"><xref:System.Text.RegularExpressions.Match> 개체는 변경할 수 없습니다 및 public 생성자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-102">The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor.</span></span> <span data-ttu-id="0eaea-103">인스턴스는 <xref:System.Text.RegularExpressions.Match> 클래스에서 반환 되는 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 메서드와 문자열에서 첫 번째 패턴 일치를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-103">An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method and represents the first pattern match in a string.</span></span> <span data-ttu-id="0eaea-104">후속 일치 항목으로 표시 됩니다 <xref:System.Text.RegularExpressions.Match> 에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0eaea-104">Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="0eaea-105">또한 한 <xref:System.Text.RegularExpressions.MatchCollection> 0 개 이상의 구성 된 개체 <xref:System.Text.RegularExpressions.Match> 개체에서 반환 되는 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0eaea-105">In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0eaea-106">경우는 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 입력된 문자열에서 정규식 패턴과 일치 하는 메서드가 실패 하면, 빈 반환 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-106">If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="0eaea-107">사용할 수 있습니다는 `foreach` C#의 생성 또는 `For Each` 컬렉션을 반복 하는 Visual Basic에서 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-107">You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.</span></span>  
  
 <span data-ttu-id="0eaea-108">경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 정규식 패턴과 일치 하는 메서드가 실패 하면 반환는 <xref:System.Text.RegularExpressions.Match> 개체와 같은 <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-108">If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0eaea-109">사용할 수는 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성을 일치 하는 성공 했는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-109">You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful.</span></span> <span data-ttu-id="0eaea-110">다음 예제에서 이에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-110">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 <span data-ttu-id="0eaea-111">패턴 일치를 사용 하는 성공 하는 경우는 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에는 일치 하는 부분 문자열이 포함 되어는 <xref:System.Text.RegularExpressions.Capture.Index%2A> 속성은 입력된 문자열에서 일치 하는 부분 문자열의 0부터 시작 위치를 나타냅니다 및 <xref:System.Text.RegularExpressions.Capture.Length%2A> 속성 나타냅니다는 입력된 문자열에서 일치 하는 부분 문자열의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-111">If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.</span></span>  
  
 <span data-ttu-id="0eaea-112">단일 일치 항목에는 여러 캡처링 그룹 이루어질 수 있기 때문에 <xref:System.Text.RegularExpressions.Match> 에 <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성을 반환 하는 <xref:System.Text.RegularExpressions.GroupCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-112">Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>.</span></span> <span data-ttu-id="0eaea-113"><xref:System.Text.RegularExpressions.Match> 인스턴스 자체는 컬렉션의 첫 번째 개체에 해당 하는에서 `Match.Groups[0]` (`Match.Groups(0)` Visual basic에서), 전체 일치를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-113">The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match.</span></span> <span data-ttu-id="0eaea-114">다음과 같은 방법으로 일치 하는 항목의 캡처된 그룹에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-114">You can access the captured groups in a match in the following ways:</span></span>  
  
-   <span data-ttu-id="0eaea-115">멤버를 반복할 수는 <xref:System.Text.RegularExpressions.GroupCollection> 사용 하 여 개체는 `foreach` (C#) 또는 `For Each` 구문 (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="0eaea-115">You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.</span></span>  
  
-   <span data-ttu-id="0eaea-116">사용할 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> 속성은 캡처링 그룹의 수로 그룹을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-116">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> property to retrieve groups by the number of the capturing group.</span></span> <span data-ttu-id="0eaea-117">번호가 매겨진된 그룹 인스턴스를 호출 하 여 정규식에을 결정할 수 있도록 하는 참고 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0eaea-117">Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="0eaea-118">사용할 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> 캡처링 그룹의 이름으로 그룹을 검색할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-118">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> property to retrieve groups by the name of the capturing group.</span></span> <span data-ttu-id="0eaea-119">인스턴스를 호출 하 여 명명 된 그룹을 정규식에 결정할 수 있도록 하는 참고 <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0eaea-119">Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eaea-120">다음 예제에서는 정규식을 사용 하 여 `Console\.Write(Line)?`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-120">The following examples use the regular expression `Console\.Write(Line)?`.</span></span> <span data-ttu-id="0eaea-121">정규식은 다음과 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-121">The regular expression is interpreted as follows:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="0eaea-122">콘솔\\합니다. 쓰기</span><span class="sxs-lookup"><span data-stu-id="0eaea-122">Console\\.Write</span></span>|<span data-ttu-id="0eaea-123">"Console.Write"라는 문자열을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-123">Match the string "Console.Write".</span></span> <span data-ttu-id="0eaea-124">"." 문자와 일치 하는 와일드 카드로 하는 것이 아니라 리터럴 마침표로 해석 됩니다 되도록 문자를 이스케이프 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-124">Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</span></span>|  
|<span data-ttu-id="0eaea-125">(줄)?</span><span class="sxs-lookup"><span data-stu-id="0eaea-125">(Line)?</span></span>|<span data-ttu-id="0eaea-126">"Line"이라는 0개 또는 1개의 문자열을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-126">Match zero or one occurrence of the string "Line".</span></span>|  
  
 <span data-ttu-id="0eaea-127">**예 1**</span><span class="sxs-lookup"><span data-stu-id="0eaea-127">**Example 1**</span></span>  
  
 <span data-ttu-id="0eaea-128">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 입력된 문자열에 패턴 일치 항목을 모두 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-128">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to retrieve all pattern matches in an input string.</span></span> <span data-ttu-id="0eaea-129">반복은 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 각 일치 항목에 대 한 정보를 표시 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-129">It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 <span data-ttu-id="0eaea-130">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="0eaea-130">**Example 2**</span></span>  
  
 <span data-ttu-id="0eaea-131">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 및 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 메서드를 한 번에 하나의 일치 항목을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-131">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0eaea-132">빈 그룹을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-132">Gets the empty group.</span>
          </span>
          <span data-ttu-id="0eaea-133">일치 항목을 찾지 못하는 모든 경우에는 이 빈 일치 항목이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-133">All failed matches return this empty match.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0eaea-134">빈 일치 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-134">An empty match.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eaea-135">이 속성 일치 하는 성공 인지 확인 하려면 쓰일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-135">This property should not be used to determine if a match is successful.</span></span> <span data-ttu-id="0eaea-136">대신를 사용 하 여는 `Match.Success` 속성 (에서 상속 됨 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="0eaea-136">Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0eaea-137">정규식으로 일치시킨 그룹의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-137">Gets a collection of groups matched by the regular expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0eaea-138">해당 패턴으로 일치시킨 문자 그룹입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-138">The character groups matched by the pattern.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eaea-139">정규식 패턴은 괄호에 정규식 패턴의 일부를 포함 하 여 정의 되는 하위 식을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-139">A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</span></span> <span data-ttu-id="0eaea-140">이러한 모든 하위 식 그룹을 형성합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-140">Every such subexpression forms a group.</span></span> <span data-ttu-id="0eaea-141"><xref:System.Text.RegularExpressions.Match.Groups%2A> 속성은 해당 하위 식 일치 항목에 대 한 정보에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-141">The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches.</span></span> <span data-ttu-id="0eaea-142">예를 들어 정규식 패턴 `(\d{3})-(\d{3}-\d{4})`, 두 개의 하위 식에 북미 전화 번호와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-142">For example, the regular expression pattern `(\d{3})-(\d{3}-\d{4})`, which matches North American telephone numbers, has two subexpressions.</span></span> <span data-ttu-id="0eaea-143">첫 번째 지역 번호, 전화 번호의 처음 세 자리 구성으로 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-143">The first consists of the area code, which composes the first three digits of the telephone number.</span></span> <span data-ttu-id="0eaea-144">이 그룹은 정규식을 첫 번째 부분에 의해 캡처됩니다 `(\d{3})`합니다. 두 번째 전화 번호의 마지막 7 자리를 작성 하는 개별 전화 번호로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-144">This group is captured by the first portion of the regular expression, `(\d{3})`.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</span></span> <span data-ttu-id="0eaea-145">이 그룹은 정규식을 두 번째 부분에 의해 캡처됩니다 `(\d{3}-\d{4})`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-145">This group is captured by the second portion of the regular expression, `(\d{3}-\d{4})`.</span></span> <span data-ttu-id="0eaea-146">이 두 그룹에서 검색할 수 있습니다는 <xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 되는 개체는 <xref:System.Text.RegularExpressions.Match.Groups%2A> 다음 예제와 같이 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-146">These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <span data-ttu-id="0eaea-147"><xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성은 항상 구성원을 하나 이상에 0부터 시작 하는 컬렉션 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-147">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property is a zero-based collection object that always has at least one member.</span></span> <span data-ttu-id="0eaea-148">정규식 엔진은 특정 입력된 문자열에서 일치 항목을 찾을 수 없는 경우는 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 단일 속성 <xref:System.Text.RegularExpressions.Group> (인덱스 0에 있는 개체) 컬렉션에 있는 개체로 설정 되어 `false` 및 <xref:System.Text.RegularExpressions.Group> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A>속성이 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-148">If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0eaea-149">경우 정규식 엔진이 일치 항목의 첫 번째 요소를 찾을 수는 <xref:System.Text.RegularExpressions.GroupCollection> 개체 (인덱스 0에 있는 요소)에서 반환 되는 <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성 전체 정규식 패턴과 일치 하는 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-149">If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern.</span></span> <span data-ttu-id="0eaea-150">각 후속 요소 인덱스 하나에서 위쪽으로, 나타냅니다 캡처된 그룹을 정규식 캡처링 그룹을 포함 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="0eaea-150">Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="0eaea-151">자세한 내용은의 "그룹화 구문 및 정규식 개체" 섹션을 참조 하십시오.는 [그룹화 구문](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) 문서.</span><span class="sxs-lookup"><span data-stu-id="0eaea-151">For more information, see the "Grouping Constructs and Regular Expression Objects" section of the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eaea-152">다음 예제에서는 샘플 문자열에 대 한 정규식 패턴 일치 시 키 려 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-152">The following example attempts to match a regular expression pattern against a sample string.</span></span> <span data-ttu-id="0eaea-153">이 예제에서는 사용 된 <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성을 콘솔에 표시 하기 위해 일치에 의해 검색 되는 정보를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-153">The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0eaea-154">마지막 일치 항목이 끝나는 위치(마지막으로 일치한 문자 다음 문자)에서 시작하여 다음 일치 항목에 대한 결과와 함께 새로운 <see cref="T:System.Text.RegularExpressions.Match" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-154">Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0eaea-155">다음 정규식 일치 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-155">The next regular expression match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eaea-156">이 메서드를 호출 하는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 다시 및 전달 (`Index+Length`)으로 새 위치를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-156">This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> again and passing (`Index+Length`) as the new starting position.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0eaea-157">이 메서드는 현재 인스턴스를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-157">This method does not modify the current instance.</span></span> <span data-ttu-id="0eaea-158">대신, 새 반환 <xref:System.Text.RegularExpressions.Match> 다음 일치 항목에 대 한 정보를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-158">Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.</span></span>  
  
 <span data-ttu-id="0eaea-159">Throw 될 수 있습니다 다음 일치 항목을 검색 하는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 경우 일치 작업에 대 한 제한 시간 값이 고 해당 시간 제한 간격을 초과 하는 다음 일치 항목을 찾으려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-159">Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eaea-160">다음 예제에서는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 첫 번째 일치 항목 이외의 메서드를 캡처 정규식 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-160">The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="0eaea-161">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-161">A time-out occurred.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="0eaea-162">일치 시도 호출 하 여 반복 되는 경우는 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 메서드, 정규식 엔진이 제공 빈 일치 항목 특별 하 게 처리 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-162">When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment.</span>
            </span>
            <span data-ttu-id="0eaea-163">일반적으로 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 정확 하 게 이전 일치 항목 종료 한 위치에 관계 없이 다음 일치 항목에 대 한 검색을 시작 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-163">Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off.</span>
            </span>
            <span data-ttu-id="0eaea-164">그러나 빈 일치 후의 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 메서드 한 문자씩 다음 일치 항목을 시도 하기 전에.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-164">However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match.</span>
            </span>
            <span data-ttu-id="0eaea-165">이러한 동작은 보장 정규식 엔진이 문자열을 통해 진행 됩니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-165">This behavior guarantees that the regular expression engine will progress through the string.</span>
            </span>
            <span data-ttu-id="0eaea-166">그렇지 않으면 빈 일치 하는 모든 앞으로 이동 되지 않습니다, 때문에 다음 일치 항목 정확히 이전 일치 항목으로 같은 위치에서 시작 및 찾게 동일한 빈 문자열입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-166">Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</span>
            </span>
            <span data-ttu-id="0eaea-167">다음 예제에서 이에 대해 설명합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-167">The following example provides an illustration.</span>
            </span>
            <span data-ttu-id="0eaea-168">정규식 패턴 <c>는 \*</c> 문자의 0 개 이상의 항목을 검색 "abaabb" 문자열에 "a"입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-168">The regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb".</span>
            </span>
            <span data-ttu-id="0eaea-169">예제의 출력에서 볼 수 있듯이 검색 6 명의 일치 항목을 찾습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-169">As the output from the example shows, the search finds six matches.</span>
            </span>
            <span data-ttu-id="0eaea-170">첫 번째 일치 시도가 찾은 첫 번째 "a"입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-170">The first match attempt finds the first "a".</span>
            </span>
            <span data-ttu-id="0eaea-171">정확 하 게 첫 번째 검사가 첫 번째 b; 앞에 끝에서 두 번째 검사를 시작 "a"의 0 항목을 찾아서 빈 문자열을 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-171">The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</span>
            </span>
            <span data-ttu-id="0eaea-172">빈 문자열을 반환 하기 때문에 세 번째 일치는 정확 하 게 두 번째 일치 항목 찾기가 종료 된 위치, 시작 되지 않습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-172">The third match does not begin exactly where the second match ended, because the second match returned an empty string.</span>
            </span>
            <span data-ttu-id="0eaea-173">대신, 첫 번째 "b" 후 나중에, 한 문자를 시작합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-173">Instead, it begins one character later, after the first "b".</span>
            </span>
            <span data-ttu-id="0eaea-174">세 번째 일치 하는 "a"의 두 일치 항목을 찾아 "aa"를 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-174">The third match finds two occurrences of "a" and returns "aa".</span>
            </span>
            <span data-ttu-id="0eaea-175">네 번째 일치 시도가 다음에 세 번째 검사에서 나옵니다, 앞의 두 번째 "b", 빈 문자열을 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-175">The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</span>
            </span>
            <span data-ttu-id="0eaea-176">다섯 번째 일치 시도가 다시 진행 한 문자 "b" 세 번째 하기 전에 시작 하 고 빈 문자열을 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-176">The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</span>
            </span>
            <span data-ttu-id="0eaea-177">여섯 번째 일치 하는 마지막 "b" 다음에 시작 하 고 빈 문자열을 다시 반환 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="0eaea-177">The sixth match begins after the last "b" and returns an empty string again.</span>
            </span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">
          <span data-ttu-id="0eaea-178">사용할 바꾸기 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-178">The replacement pattern to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0eaea-179">지정된 바꾸기 패턴의 확장을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-179">Returns the expansion of the specified replacement pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0eaea-180">
            <paramref name="replacement" /> 매개 변수의 확장 버전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-180">The expanded version of the <paramref name="replacement" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0eaea-181">반면는 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> 메서드는 지정 된 바꾸기 패턴에서 입력된 문자열에서 일치 항목을 모두 바꿉니다는 <xref:System.Text.RegularExpressions.Match.Result%2A> 메서드는 지정 된 바꾸기 패턴으로 단일 일치 항목을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-181">Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern.</span></span> <span data-ttu-id="0eaea-182">개별 일치에서 작동 하기 때문에 것도 가능 호출 하기 전에 일치 하는 문자열에서 처리를 수행 하는 <xref:System.Text.RegularExpressions.Match.Result%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0eaea-182">Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.</span></span>  
  
 <span data-ttu-id="0eaea-183">`replacement` 매개 변수는 표준 정규식 바꾸기 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-183">The `replacement` parameter is a standard regular expression replacement pattern.</span></span> <span data-ttu-id="0eaea-184">리터럴 문자 및 정규식 대체를 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-184">It can consist of literal characters and regular expression substitutions.</span></span> <span data-ttu-id="0eaea-185">자세한 내용은 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="0eaea-185">For more information, see [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0eaea-186">다음 예제에서는 시작 하 고 괄호와 함께 괄호 식을 끝내 고 하이픈을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-186">The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 <span data-ttu-id="0eaea-187">정규식 패턴 `--(.+?)--`는 다음 테이블과 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-187">The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="0eaea-188">패턴</span><span class="sxs-lookup"><span data-stu-id="0eaea-188">Pattern</span></span>|<span data-ttu-id="0eaea-189">설명</span><span class="sxs-lookup"><span data-stu-id="0eaea-189">Description</span></span>|  
|-------------|-----------------|  
|`--`|<span data-ttu-id="0eaea-190">하이픈을 두 개를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-190">Match two hyphens.</span></span>|  
|`(.+?)`|<span data-ttu-id="0eaea-191">모든 문자를 하나 이상 가능한 한 적은 개수로 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-191">Match any character one or more times, but as few times as possible.</span></span> <span data-ttu-id="0eaea-192">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-192">This is the first capturing group.</span></span>|  
|`--`|<span data-ttu-id="0eaea-193">하이픈을 두 개를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-193">Match two hyphens.</span></span>|  
  
 <span data-ttu-id="0eaea-194">정규식 패턴 `--(.+?)--` lazy 수량자를 사용 하 여 `+?`합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-194">Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`.</span></span> <span data-ttu-id="0eaea-195">경우 greedy 수량자 `+` 사용 된 정규식 엔진이 입력된 문자열에서 단일 일치만을 찾을 것 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-195">If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.</span></span>  
  
 <span data-ttu-id="0eaea-196">대체 문자열 `($1)` 일치 하는 괄호로 묶인 처음 캡처한 그룹으로 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="0eaea-196">The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0eaea-197">
            <paramref name="replacement" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-197">
              <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="0eaea-198">이 패턴에 대해 확장이 허용되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-198">Expansion is not allowed for this pattern.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">
          <span data-ttu-id="0eaea-199">예상된 일치 항목과 동등한 정규식 일치 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-199">A regular expression match equivalent to the one expected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0eaea-200">여러 스레드 간에 공유하기에 적합하고 제공된 인스턴스와 동등한 <see cref="T:System.Text.RegularExpressions.Match" /> 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-200">Returns a <see cref="T:System.Text.RegularExpressions.Match" /> instance equivalent to the one supplied that is suitable to share between multiple threads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0eaea-201">여러 스레드 간에 공유하기에 적합한 정규식 일치 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-201">A regular expression match that is suitable to share between multiple threads.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0eaea-202">
            <paramref name="inner" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="0eaea-202">
              <paramref name="inner" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>