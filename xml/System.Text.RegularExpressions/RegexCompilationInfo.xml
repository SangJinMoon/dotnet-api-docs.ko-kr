<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="731a068feb7a24b5a370b0ee36313a7a143e71c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530207" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>정규식을 독립 실행형 어셈블리로 컴파일하는 데 사용하는 정규식에 대한 정보를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열을 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 개체에 전달 되는 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드는 어셈블리에 포함 시킬 각 정규식에 대 한 정보를 제공 합니다. 어셈블리에 포함 된 각 컴파일된 정규식에서 파생 된 클래스로 표현 됩니다 <xref:System.Text.RegularExpressions.Regex>합니다. 속성은 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 정규식의 클래스 이름, 정규화 된 이름 (즉, 해당 네임 스페이스 및 해당 형식 이름), 정규식 패턴 (정규식이 있는지 여부 등의 추가 옵션을 정의 하는 형식 대/소문자 구분), 및 정규식 엔진이 일치 항목을 검색 해야 기간을 지정 하는 시간 제한 간격입니다.  
  
 인스턴스화할 수 있습니다는 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 오버 로드 된 클래스 생성자를 호출 하 여 개체입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">컴파일할 정규식입니다.</param>
        <param name="options">정규식을 컴파일할 때 사용할 정규식 옵션입니다.</param>
        <param name="name">컴파일된 정규식을 나타내는 형식의 이름입니다.</param>
        <param name="fullnamespace">새 형식이 속한 네임스페이스입니다.</param>
        <param name="ispublic">
          컴파일된 정규식을 공개적으로 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>어셈블리에 포함할 정규식에 대한 정보를 포함하는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 매개 변수에 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> 의 속성에 직접 해당 하는 생성자는 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 클래스입니다. 모든 속성 읽기/쓰기 이기 때문에 해당 값 직접 할당할 수도 있습니다.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드 컴파일된 정규식을 포함 하는 어셈블리를 생성 합니다. 지정 하지 않아야 따라서 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 의 다음 값 중 하나로 `options`합니다.  
  
 경우 `ispublic` 은 `true`, 컴파일된 정규식 클래스에 public 액세스 가능성이 지정 됩니다. 즉, 모든 어셈블리에서 실행 되는 코드에서 인스턴스화할 수 있습니다. 경우 `ispublic` 은 `false`의 컴파일된 정규식 제공 `internal` (C#에서) 또는 `Friend` (Visual Basic)에서는 내게 필요한 옵션입니다. 즉, 정규식 클래스와 동일한 어셈블리에서 실행 되는 코드 에서만에서 인스턴스화할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 만들고 컴파일된 정규식을 사용 하 여 두 단계를 수행에서 합니다.  
  
 첫 번째 단계에서 컴파일하고 다음 코드 예제를 실행 합니다. <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> 생성자의 코드 예제에서는 컴파일된 정규식을 정의 합니다. 코드 실행의 결과 라는 컴파일된 정규식 형식이 포함 된 FishRegex.dll 이라는 어셈블리 `FishRegex`합니다.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 두 번째 단계에서 FishRegex.dll에 대 한 참조를 사용 하 여 다음 코드 예제를 컴파일하고 결과 실행 파일을 실행 합니다. 사용 하 여을 대상 문자열과 일치 하는 실행 파일의 `FishRegex` 를 입력 하 고 대상 문자열에 일치 하는 항목, 그룹, 캡처 그룹 및 일치 하는 항목의 인덱스 위치를 표시 합니다.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />가 <see cref="F:System.String.Empty" />인 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" />가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="name" />가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="fullnamespace" />가 <see langword="null" />인 경우</exception>
        <block subset="none" type="usage">
          <para>이 생성자는 생성 되는 응용 프로그램 도메인의 기본 제한 시간 값을 사용 하는 컴파일된 정규식을 만듭니다. 컴파일된 정규식 시간 제한 값은 응용 프로그램 도메인에 대해 정의 된 경우 값을 사용 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 패턴 일치 작업을 시간 초과 방지 하는 합니다. 컴파일된 정규식을 만들기 위한 권장된 생성자는 <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">컴파일할 정규식입니다.</param>
        <param name="options">정규식을 컴파일할 때 사용할 정규식 옵션입니다.</param>
        <param name="name">컴파일된 정규식을 나타내는 형식의 이름입니다.</param>
        <param name="fullnamespace">새 형식이 속한 네임스페이스입니다.</param>
        <param name="ispublic">
          컴파일된 정규식을 공개적으로 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <param name="matchTimeout">정규식에 대한 기본 시간 제한 간격입니다.</param>
        <summary>어셈블리에 포함할 지정된 시간 제한 값의 정규식에 대한 정보를 포함하는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 매개 변수에 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> 의 속성에 직접 해당 하는 생성자는 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 클래스입니다. 모든 속성 읽기/쓰기 이기 때문에 해당 값 직접 할당할 수도 있습니다.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드 컴파일된 정규식을 포함 하는 어셈블리를 생성 합니다. 지정 하지 않아야 따라서 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 의 다음 값 중 하나로 `options`합니다.  
  
 경우 `ispublic` 은 `true`, 컴파일된 정규식 클래스에 public 액세스 가능성이 지정 됩니다. 즉, 모든 어셈블리에서 실행 되는 코드에서 인스턴스화할 수 있습니다. 경우 `ispublic` 은 `false`의 컴파일된 정규식 제공 `internal` (C#에서) 또는 `Friend` (Visual Basic)에서는 내게 필요한 옵션입니다. 즉, 정규식 클래스와 동일한 어셈블리에서 실행 되는 코드 에서만에서 인스턴스화할 수 있습니다.  
  
 `matchTimeout` 매개 변수는 컴파일된 정규식에 대 한 기본 시간 제한 간격을 정의 합니다. 이 값은 컴파일된 정규식 개체에서 작업 시간이 초과 정규식 엔진은 throw 전에 단일 일치 작업을 실행할 시간의 대략적인 양에 나타냅니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 다음 타이밍 검사 중 발생 한 예외 . 시간 제한 값에 대 한 자세한 내용은 참조는 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> 속성입니다.  
  
> [!IMPORTANT]
>  항상 컴파일된 정규식에 대 한 기본 제한 시간 값을 설정 하는 것이 좋습니다. 정규식 라이브러리 소비자에 게 전달 하 여 해당 시간 제한 값을 재정의할 수는 <xref:System.TimeSpan> 이 생성자 오버 로드에 새 시간 제한 간격을 나타내는 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 컴파일된 정규식 라는 `DuplicateChars` 식별 하는 입력된 문자열에서 동일한 문자와 두 개 이상 찾습니다. 컴파일된 정규식에는 기본 제한 시간 2 초에 있습니다. 예를 실행 하는 경우 컴파일된 정규식을 포함 하는 RegexLib.dll 라는 클래스 라이브러리를 만듭니다.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 정규식 패턴 `(\w)\1+`는 다음 테이블과 같이 정의됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`(\w)`|단어 문자를 첫 번째 캡처링 그룹에 할당 합니다.|  
|`\1+`|캡처된 첫 번째 그룹의 값의 하나 이상의 항목을 일치 합니다.|  
  
 다음 예제에서는 `DuplicatedChars` 정규식 문자열 배열에 중복 된 문자를 식별 합니다. 호출할 때는 `DuplicatedChars` 생성자, 시간 제한 간격을.5 초로 변경 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />가 <see cref="F:System.String.Empty" />인 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" />가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="name" />가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="fullnamespace" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큰 경우</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컴파일된 정규식을 공개적으로 표시할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          정규식을 공개적으로 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> 속성은 `false`, 클래스를 포함 하는 어셈블리에서 실행 되는 코드를 통해서만 현재 인스턴스에 의해 정의 된 정규식 클래스를 인스턴스화할 수 있습니다. 그러나 때문에 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> 만 컴파일된 정규식을 포함 하 고 여기에 코드 추가를 허용 하지 않는 한 어셈블리를 생성 하는 메서드,이 속성의 값을 할당할 수 없는 이유는 일반적으로 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규식의 기본 시간 제한 간격을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />이 throw되기 전에 패턴 일치 작업에서 경과할 수 있는 기본 최대 시간 간격이며, 제한 시간이 비활성화된 경우는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> 속성은 컴파일된 정규식에 대 한 기본 시간 제한 간격을 정의 합니다. 이 값은 컴파일된 정규식을 작업 시간이 초과 하 고 정규식 엔진은 throw 하기 전에 단일 일치 작업을 실행할 수 있는 시간의 대략적인 크기를 나타냅니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 다음 타이밍 검사 중 발생 한 예외입니다.  
  
> [!IMPORTANT]
>  항상 컴파일된 정규식에 대 한 기본 제한 시간 값을 설정 하는 것이 좋습니다. 정규식 라이브러리 소비자에 게 전달 하 여 해당 시간 제한 값을 재정의할 수는 <xref:System.TimeSpan> 컴파일된 정규식의 클래스 생성자에 새 시간 제한 간격을 나타내는 값입니다.  
  
 기본 제한 시간 값을 할당할 수는 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 다음 방법 중 하나에서 개체:  
  
-   호출 하 여는 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 메서드와의 문자열 표현을 제공 하는 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성 값입니다.  
  
-   호출 하 여는 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> 생성자 및에 대 한 값을 제공 하는 `matchTimeout` 매개 변수입니다.  
  
-   이 속성의 값을 설정 합니다.  
  
 적절 한 시간 제한 간격을 설정 하려면 다음 요소를 고려 합니다.  
  
-   길이 복잡 한 정규식 패턴입니다. 길고 복잡 한 정규식 짧고 간단 것 보다 더 많은 시간이 필요합니다.  
  
-   에서는 예상된 컴퓨터 로드 합니다. 처리는 높은 CPU 및 메모리 사용률 있는 시스템에서 많은 시간이 소요 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 컴파일된 정규식 라는 `DuplicateChars` 식별 하는 입력된 문자열에서 동일한 문자와 두 개 이상 찾습니다. 컴파일된 정규식에는 기본 제한 시간 2 초에 있습니다. 예를 실행 하는 경우 컴파일된 정규식을 포함 하는 RegexLib.dll 라는 클래스 라이브러리를 만듭니다.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 정규식 패턴 `(\w)\1+`는 다음 테이블과 같이 정의됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`(\w)`|단어 문자를 첫 번째 캡처링 그룹에 할당 합니다.|  
|`\1+`|캡처된 첫 번째 그룹의 값의 하나 이상의 항목을 일치 합니다.|  
  
 다음 예제에서는 `DuplicatedChars` 정규식 문자열 배열에 중복 된 문자를 식별 합니다. 호출할 때는 `DuplicatedChars` 생성자, 시간 제한 간격을.5 초로 변경 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컴파일된 정규식을 나타내는 형식의 이름을 가져오거나 설정합니다.</summary>
        <value>새 형식의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 클래스에서 파생 된 클래스로 표현 되는 컴파일된 일반 식을 정의 하는 데 사용 됩니다 <xref:System.Text.RegularExpressions.Regex>합니다. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> 속성 정의 정규식 종류의 클래스 이름 및 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> 및 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> 속성의 정규화 된 이름을 정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">이 속성의 값은 빈 문자열입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 형식이 속한 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>새 형식의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 클래스에서 파생 된 클래스로 표현 되는 컴파일된 일반 식을 정의 하는 데 사용 됩니다 <xref:System.Text.RegularExpressions.Regex>합니다. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> 컴파일된 정규식 형식이 포함 된 네임 스페이스를 정의 하는 속성 및 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> 및 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> 속성의 정규화 된 이름을 정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규식을 컴파일할 때 사용할 옵션을 가져오거나 설정합니다.</summary>
        <value>열거형 값의 비트 조합입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드 컴파일된 정규식을 포함 하는 어셈블리를 생성 합니다. 지정할 필요가 없습니다 따라서 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 로이 속성의 값 중 하나입니다. 가 존재 하는 경우는 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> 옵션은 무시 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컴파일할 정규식을 가져오거나 설정합니다.</summary>
        <value>컴파일할 정규식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> 속성에 유효한 모든 정규식이 포함 될 수 있습니다. 하는 경우의 값은 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> 속성은 올바른 구문의 정규식 패턴에 대 한 호출 하지는 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드가 throw는 <xref:System.ArgumentException>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">이 속성 값이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>