<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5b1b16e45086d2dbf7c8f1afa213b88dfe4f122" />
    <Meta Name="ms.sourcegitcommit" Value="9f18ecaf63382fa565dfaeb7274bc1a9e81c35e9" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/19/2018" />
    <Meta Name="ms.locfileid" Value="36208850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex : System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="50409-101">변경할 수 없는 정규식을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50409-101">Represents an immutable regular expression.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-102"><xref:System.Text.RegularExpressions.Regex> 클래스는.NET Framework의 정규식 엔진을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-102">The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine.</span></span> <span data-ttu-id="50409-103">신속 하 게 많은 양의; 특정 문자 패턴을 찾을 텍스트를 구문 분석에 사용할 수 있습니다. 추출, 편집, 바꾸기 또는 삭제 텍스트 부분 문자열입니다. 및 보고서를 생성 하는 컬렉션에 추출 된 문자열을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-103">It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-104">주 관심 특정 패턴을 따르는지 여부를 확인 하 여 문자열을 확인 하는 것을 사용할 수 있습니다는 <xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-104">If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="50409-105">에 설명 된 구문을 사용 하 여 텍스트 스트림에 확인 하는 패턴 정규식을 사용 하려면 정의한 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-105">To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="50409-106">그런 다음 필요에 따라를 인스턴스화할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-106">Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="50409-107">마지막으로, 정규식 패턴과 일치 하는 텍스트 바꾸기 또는 패턴 일치를 식별 하는 등 특정 작업을 수행 하는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-107">Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-108">몇 가지 일반적인 정규식 패턴에 대 한 참조 [일반 식 예제](~/docs/standard/base-types/regular-expression-examples.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-108">For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md).</span></span> <span data-ttu-id="50409-109">또한 온라인 라이브러리의 정규식 패턴에 있는 것과 같은 여러 가지 [일반 Expressions.info](https://www.regular-expressions.info/examples.html)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-109">There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](https://www.regular-expressions.info/examples.html).</span></span>  
  
<a name="remarks"></a> <span data-ttu-id="50409-110">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Text.RegularExpressions.Regex> 이 항목의 다음 섹션을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="50409-110">For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:</span></span>  
  
-   [<span data-ttu-id="50409-111">Regex vs입니다. 문자열 처리 메서드</span><span class="sxs-lookup"><span data-stu-id="50409-111">Regex vs. String Methods</span></span>](#regex_vs_string)  
  
-   [<span data-ttu-id="50409-112">정적 포트 대 인스턴스 메서드</span><span class="sxs-lookup"><span data-stu-id="50409-112">Static vs. Instance Methods</span></span>](#static_vs_instance)  
  
-   [<span data-ttu-id="50409-113">정규식 작업 수행</span><span class="sxs-lookup"><span data-stu-id="50409-113">Performing Regular Expression Operations</span></span>](#regex_ops)  
  
-   [<span data-ttu-id="50409-114">시간 제한 값을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-114">Defining a Time-Out Value</span></span>](#define_timeout)  
  
 <span data-ttu-id="50409-115">정규식 언어에 대한 자세한 내용은 [정규식 언어 - 빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)를 참조하거나, 다음 브로슈어 중 하나를 다운로드하여 인쇄하세요.</span><span class="sxs-lookup"><span data-stu-id="50409-115">For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:</span></span>  
  
 [<span data-ttu-id="50409-116">Word(.docx) 형식의 빠른 참조</span><span class="sxs-lookup"><span data-stu-id="50409-116">Quick Reference in Word (.docx) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [<span data-ttu-id="50409-117">PDF(.pdf) 형식의 빠른 참조</span><span class="sxs-lookup"><span data-stu-id="50409-117">Quick Reference in PDF (.pdf) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## <a name="regex-vs-string-methods"></a><span data-ttu-id="50409-118">Regex vs입니다. 문자열 처리 메서드</span><span class="sxs-lookup"><span data-stu-id="50409-118">Regex vs. String Methods</span></span>  
 <span data-ttu-id="50409-119"><xref:System.String?displayProperty=nameWithType> 클래스는 텍스트 패턴 일치를 수행 하는 데 사용할 수 있는 몇 가지 검색 및 비교 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-119">The <xref:System.String?displayProperty=nameWithType> class includes several search and comparison methods that you can use to perform pattern matching with text.</span></span> <span data-ttu-id="50409-120">예를 들어는 <xref:System.String.Contains%2A?displayProperty=nameWithType>, <xref:System.String.EndsWith%2A?displayProperty=nameWithType>, 및 <xref:System.String.StartsWith%2A?displayProperty=nameWithType> 메서드 문자열 인스턴스입니다; 지정된 된 부분 문자열에 포함 되는지 여부를 결정 및 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>, <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>, 및 <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType> 메서드 문자열의 지정된 된 부분 문자열의 시작 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-120">For example, the <xref:System.String.Contains%2A?displayProperty=nameWithType>, <xref:System.String.EndsWith%2A?displayProperty=nameWithType>, and <xref:System.String.StartsWith%2A?displayProperty=nameWithType> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>, <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType> methods return the starting position of a specified substring in a string.</span></span> <span data-ttu-id="50409-121">메서드를 사용 하 여는 <xref:System.String?displayProperty=nameWithType> 특정 문자열 검색 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-121">Use the methods of the <xref:System.String?displayProperty=nameWithType> class when you are searching for a specific string.</span></span> <span data-ttu-id="50409-122">사용 하 여는 <xref:System.Text.RegularExpressions.Regex> 문자열의 특정 패턴에 대 한 검색 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-122">Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string.</span></span> <span data-ttu-id="50409-123">자세한 내용 및 예제에 대 한 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-123">For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
 [<span data-ttu-id="50409-124">주의 돌아가기</span><span class="sxs-lookup"><span data-stu-id="50409-124">Back to Remarks</span></span>](#remarks)  
  
<a name="static_vs_instance"></a>   
## <a name="static-vs-instance-methods"></a><span data-ttu-id="50409-125">정적 포트 대 인스턴스 메서드</span><span class="sxs-lookup"><span data-stu-id="50409-125">Static vs. Instance Methods</span></span>  
 <span data-ttu-id="50409-126">정규식 패턴을 정의한 후에 두 가지 방법 중 하나로 정규식 엔진에 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-126">After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:</span></span>  
  
-   <span data-ttu-id="50409-127">인스턴스화하여는 <xref:System.Text.RegularExpressions.Regex> 정규식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-127">By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression.</span></span> <span data-ttu-id="50409-128">정규식 패턴을 전달 하면이 작업을 수행 하는 <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-128">To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor.</span></span> <span data-ttu-id="50409-129">A <xref:System.Text.RegularExpressions.Regex> 개체는 변경할 수 없습니다; 인스턴스화하는 경우는 <xref:System.Text.RegularExpressions.Regex> 개체는 정규식 개체의 정규식을 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-129">A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.</span></span>  
  
-   <span data-ttu-id="50409-130">정규식과에 검색할 텍스트를 모두 제공 하 여 한 `static` (`Shared` Visual basic에서) <xref:System.Text.RegularExpressions.Regex> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-130">By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method.</span></span> <span data-ttu-id="50409-131">이렇게 하면 명시적으로 만들지 않고도 정규식을 사용 하는 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-131">This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="50409-132">모든 <xref:System.Text.RegularExpressions.Regex> 패턴 식별 포함 정적 메서드와 인스턴스 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-132">All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.</span></span>  
  
 <span data-ttu-id="50409-133">정규식 엔진이 패턴을 사용 하려면 먼저 특정 패턴을 컴파일해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-133">The regular expression engine must compile a particular pattern before the pattern can be used.</span></span> <span data-ttu-id="50409-134">때문에 <xref:System.Text.RegularExpressions.Regex> 발생 하는 일회성 절차와, 개체를 변경할 수 없는 경우는 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자 또는 정적 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-134">Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called.</span></span> <span data-ttu-id="50409-135">반복 해 서 단일 정규식을 컴파일할 필요를 제거 하려면 정규식 엔진은 정적 메서드 호출에 사용 된 컴파일된 정규식을 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-135">To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="50409-136">결과적으로, 정규식 패턴 일치 메서드에 비슷한 성능을 정적 및 인스턴스 메서드를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-136">As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50409-137">.NET Framework 버전 1.0 및 1.1에서는 모든 컴파일된 정규식에서 인스턴스 또는 정적 메서드에 사용 되는 여부 호출, 캐시 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-137">In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached.</span></span> <span data-ttu-id="50409-138">.NET Framework 2.0 부터는 정규식만 정적 메서드 호출에 사용 되는 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-138">Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.</span></span>  
  
 <span data-ttu-id="50409-139">그러나 캐싱 다음 두 가지 경우에는 성능을 저하 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-139">However, caching can adversely affect performance in the following two cases:</span></span>  
  
-   <span data-ttu-id="50409-140">정규식의 다 수 포함 된 정적 메서드 호출을 사용 하면.</span><span class="sxs-lookup"><span data-stu-id="50409-140">When you use static method calls with a large number of regular expressions.</span></span> <span data-ttu-id="50409-141">기본적으로 정규식 엔진은 15 가장 최근에 사용한 정적 정규식을 캐시합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-141">By default, the regular expression engine caches the 15 most recently used static regular expressions.</span></span> <span data-ttu-id="50409-142">15 개 정적 정규식을 사용 하는 응용 프로그램, 몇 가지 일반 식은 컴파일해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-142">If your application uses more than 15 static regular expressions, some regular expressions must be recompiled.</span></span> <span data-ttu-id="50409-143">이 재컴파일을 방지 하려면 늘릴 수 있습니다는 <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-143">To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="50409-144">인스턴스화하는 경우 새로운 <xref:System.Text.RegularExpressions.Regex> 이전에 컴파일된 정규식을 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-144">When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled.</span></span> <span data-ttu-id="50409-145">예를 들어 다음 코드는 텍스트 스트림에 중복 된 단어를 찾을 수 있는 정규식을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-145">For example, the following code defines a regular expression to locate duplicated words in a text stream.</span></span> <span data-ttu-id="50409-146">이 예제에서는 단일 정규식을 사용 하지만 새 인스턴스화합니다 <xref:System.Text.RegularExpressions.Regex> 각 텍스트 줄을 처리 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-146">Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text.</span></span> <span data-ttu-id="50409-147">이 인해 루프의 각 반복 정규식 다시 컴파일해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-147">This results in the recompilation of the regular expression with each iteration of the loop.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     <span data-ttu-id="50409-148">재컴파일을 방지 하려면 단일 인스턴스화해야 <xref:System.Text.RegularExpressions.Regex> 다시 쓴 다음 예에서 같이 필요로 하는 모든 코드에 액세스할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-148">To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [<span data-ttu-id="50409-149">주의 돌아가기</span><span class="sxs-lookup"><span data-stu-id="50409-149">Back to Remarks</span></span>](#remarks)  
  
<a name="regex_ops"></a>   
## <a name="performing-regular-expression-operations"></a><span data-ttu-id="50409-150">정규식 작업 수행</span><span class="sxs-lookup"><span data-stu-id="50409-150">Performing Regular Expression Operations</span></span>  
 <span data-ttu-id="50409-151">하기로 한 경우 인스턴스화하는 <xref:System.Text.RegularExpressions.Regex> 개체 및 해당 메서드를 호출 하거나 정적 메서드를 호출 하는 <xref:System.Text.RegularExpressions.Regex> 클래스는 다음 패턴 일치 기능을 제공:</span><span class="sxs-lookup"><span data-stu-id="50409-151">Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:</span></span>  
  
-   <span data-ttu-id="50409-152">일치 하는 항목의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-152">Validation of a match.</span></span> <span data-ttu-id="50409-153">호출 하는 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드를 일치 하는 항목이 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-153">You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.</span></span>  
  
-   <span data-ttu-id="50409-154">단일 일치 항목의 검색입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-154">Retrieval of a single match.</span></span> <span data-ttu-id="50409-155">호출 하 여 <xref:System.Text.RegularExpressions.Regex.Match%2A> 를 검색할 메서드는 <xref:System.Text.RegularExpressions.Match> 나 부분 문자열로 문자열에서 첫 번째 일치 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-155">You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string.</span></span> <span data-ttu-id="50409-156">호출 하 여 후속 일치 항목을 검색할 수 있습니다는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-156">Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="50409-157">모든 일치 항목을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-157">Retrieval of all matches.</span></span> <span data-ttu-id="50409-158">호출 하 여 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 를 검색할 메서드는 <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType> 나 부분 문자열로 문자열에서 찾은 모든 일치 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-158">You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType> object that represents all the matches found in a string or in part of a string.</span></span>  
  
-   <span data-ttu-id="50409-159">일치 하는 텍스트 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-159">Replacement of matched text.</span></span> <span data-ttu-id="50409-160">호출 하는 <xref:System.Text.RegularExpressions.Regex.Replace%2A> 메서드를 일치 하는 텍스트를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-160">You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text.</span></span> <span data-ttu-id="50409-161">정규식으로 대체 텍스트를 정의할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-161">The replacement text can also be defined by a regular expression.</span></span> <span data-ttu-id="50409-162">일부에서는 <xref:System.Text.RegularExpressions.Regex.Replace%2A> 메서드를 포함 한 <xref:System.Text.RegularExpressions.MatchEvaluator> 매개 변수를 사용 하는 프로그래밍 방식으로 바꿀 텍스트를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-162">In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.</span></span>  
  
-   <span data-ttu-id="50409-163">입력된 문자열의 부분 구성 된 문자열 배열 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-163">Creation of a string array that is formed from parts of an input string.</span></span> <span data-ttu-id="50409-164">호출 하는 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드를 정규식으로 정의 된 위치에서 입력된 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-164">You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.</span></span>  
  
 <span data-ttu-id="50409-165">해당 패턴 일치 메서드를 외에도 <xref:System.Text.RegularExpressions.Regex> 클래스는 몇 가지 특수 한 용도의 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-165">In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:</span></span>  
  
-   <span data-ttu-id="50409-166"><xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드 정규식 이나 입력된 문자열에서 정규식 연산자로 해석 될 수 있는 모든 문자를 이스케이프 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-166">The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.</span></span>  
  
-   <span data-ttu-id="50409-167"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> 메서드 이러한 이스케이프 문자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-167">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.</span></span>  
  
-   <span data-ttu-id="50409-168"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 메서드는 미리 정의 된 정규식을 포함 하는 어셈블리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-168">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions.</span></span> <span data-ttu-id="50409-169">이러한 특수 한 용도의 어셈블리의 예제를 포함 하는.NET Framework는 <xref:System.Web.RegularExpressions?displayProperty=nameWithType> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-169">The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=nameWithType> namespace.</span></span>  
  
 [<span data-ttu-id="50409-170">주의 돌아가기</span><span class="sxs-lookup"><span data-stu-id="50409-170">Back to Remarks</span></span>](#remarks)  
  
<a name="define_timeout"></a>   
## <a name="defining-a-time-out-value"></a><span data-ttu-id="50409-171">시간 제한 값을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-171">Defining a Time-Out Value</span></span>  
 <span data-ttu-id="50409-172">.NET Framework 상당한 기능과 유연성 패턴 일치에서 제공 하는 모든 기능을 갖춘 정규식 언어를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-172">The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching.</span></span> <span data-ttu-id="50409-173">그러나 강력 하며 유연성 비용이 듭니다: 성능 저하의 위험 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-173">However, the power and flexibility come at a cost: the risk of poor performance.</span></span> <span data-ttu-id="50409-174">불완전 하 게 수행 하는 정규식은 매우 쉽게 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-174">Regular expressions that perform poorly are surprisingly easy to create.</span></span> <span data-ttu-id="50409-175">일부 경우에는 정규식 패턴과 거의 일치 하는 텍스트를 처리 하는 경우 응답 하지 않는 것 과도 한 역 추적을 사용 하는 정규식 작업 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-175">In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="50409-176">.NET Framework 정규식 엔진에 대 한 자세한 내용은 참조 [세부 정보 정규식 동작 정부](~/docs/standard/base-types/details-of-regular-expression-behavior.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-176">For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md).</span></span> <span data-ttu-id="50409-177">과도 한 역 추적 하는 방법에 대 한 자세한 내용은 참조 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-177">For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="50409-178">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 정규식 일치에 대 한 시간 제한 간격을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-178">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches.</span></span> <span data-ttu-id="50409-179">정규식 엔진이이 시간 간격 내에서 일치 하는 항목을 식별할 수 없으면, 일치 하는 작업에서 throw 한 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-179">If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-180">대부분의 경우에서 이렇게 하면 정규식 엔진에서 처리 능력을 정규식 패턴과 거의 일치 하는 텍스트와 일치 하도록 시도 하 여 낭비 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-180">In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="50409-181">그러나 또한 나타낼 수, 제한 시간 간격이 설정 되어 있는지를 너무 낮게 또는 현재 컴퓨터 부하가 성능에는 전반적인 성능 저하를 발생 했습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-181">It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.</span></span>  
  
 <span data-ttu-id="50409-182">예외를 처리 하는 방법은 예외의 원인에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-182">How you handle the exception depends on the cause of the exception.</span></span> <span data-ttu-id="50409-183">시간 제한 간격이 너무 낮게 설정 되어 있기 때문에 예외가 발생 하는 경우 또는 과도 한 시스템 부하 때문에, 시간 제한 간격을 늘릴 수 있으며 일치 하는 작업을 다시 시도 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-183">If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation.</span></span> <span data-ttu-id="50409-184">과도 한 역 추적이 정규식 사용 때문에 예외가 발생 하는 경우에 일치 하는 존재 하지 않는 하 고, 필요에 따라 정규식 패턴을 수정 하는 데 도움이 되는 정보를 기록할 수 있습니다를 가정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-184">If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.</span></span>  
  
 <span data-ttu-id="50409-185">호출 하 여 시간 제한 간격을 설정할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 정규식 개체를 인스턴스화할 때 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-185">You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object.</span></span> <span data-ttu-id="50409-186">정적 메서드에 대 한 일치 하는 메서드를 오버 로드를 호출 하 여 시간 제한 간격을 설정할 수 있습니다는 `matchTimeout` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-186">For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter.</span></span> <span data-ttu-id="50409-187">시간 제한 값을 명시적으로 설정 하지 않으면 기본 제한 시간 값이 다음과 같이 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-187">If you do not set a time-out value explicitly, the default time-out value  is determined as follows:</span></span>  
  
-   <span data-ttu-id="50409-188">응용 프로그램 수준 시간 제한을 사용 하 여 값을 한 경우 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-188">By using the application-wide time-out value, if one exists.</span></span> <span data-ttu-id="50409-189">이는 응용 프로그램 도메인에 적용 되는 모든 시간 제한 값이 될 수는 <xref:System.Text.RegularExpressions.Regex> 개체가 인스턴스화되거나 정적 메서드 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-189">This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made.</span></span> <span data-ttu-id="50409-190">호출 하 여 응용 프로그램 수준 시간 제한 값을 설정할 수는 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 의 문자열 표현을 할당 하는 메서드는 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-190">You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method to assign the string representation of a <xref:System.TimeSpan> value to the "REGEX_DEFAULT_MATCH_TIMEOUT" property.</span></span>  
  
-   <span data-ttu-id="50409-191">값을 사용 하 여 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>없는 응용 프로그램 수준 시간 제한 값이 설정 된 경우.</span><span class="sxs-lookup"><span data-stu-id="50409-191">By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50409-192">모든 정규식 패턴 일치 작업에서 시간 제한 값을 설정 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-192">We recommend that you set a time-out value in all regular expression pattern-matching operations.</span></span> <span data-ttu-id="50409-193">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-193">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 [<span data-ttu-id="50409-194">주의 돌아가기</span><span class="sxs-lookup"><span data-stu-id="50409-194">Back to Remarks</span></span>](#remarks)  
  
   
  
## Examples  
 <span data-ttu-id="50409-195">다음 예제에서는 문자열에서 단어의 반복 된 발생에 대 한 확인 하려면 정규식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-195">The following example uses a regular expression to check for repeated occurrences of words in a string.</span></span> <span data-ttu-id="50409-196">정규식 `\b(?<word>\w+)\s+(\k<word>)\b` 다음 표와 같이 해석 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-196">The regular expression `\b(?<word>\w+)\s+(\k<word>)\b` can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-197">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-197">Pattern</span></span>|<span data-ttu-id="50409-198">설명</span><span class="sxs-lookup"><span data-stu-id="50409-198">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-199">단어 경계에서 일치 항목 찾기를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-199">Start the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="50409-200">단어 경계까지 하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-200">Match one or more word characters up to a word boundary.</span></span> <span data-ttu-id="50409-201">이 캡처된 그룹의 이름을 `word`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-201">Name this captured group `word`.</span></span>|  
|`\s+`|<span data-ttu-id="50409-202">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-202">Match one or more white-space characters.</span></span>|  
|`(\k<word>)`|<span data-ttu-id="50409-203">라는 캡처된 그룹을 찾습니다 `word`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-203">Match the captured group that is named `word`.</span></span>|  
|`\b`|<span data-ttu-id="50409-204">단어 경계를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-204">Match a word boundary.</span></span>|  
  
 [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]
 [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]
 [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  
  
 <span data-ttu-id="50409-205">다음 예제에서는 문자열에 통화 값을 나타내는 또는 통화 값을 나타내는 올바른 형식의 있는지 여부를 확인 하려면 정규식의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-205">The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value.</span></span> <span data-ttu-id="50409-206">이 경우 정규식에서 동적으로 작성 되는 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> 사용자의 현재 문화권에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="50409-206">In this case, the regular expression is built dynamically from the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties for the user's current culture.</span></span> <span data-ttu-id="50409-207">시스템의 현재 문화권이 EN-US, 정규식은 `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-207">If the system's current culture is en-US, the resulting regular expression is `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`.</span></span> <span data-ttu-id="50409-208">이 정규식은 다음 표에 나와 있는 것 처럼 해석할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-208">This regular expression can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-209">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-209">Pattern</span></span>|<span data-ttu-id="50409-210">설명</span><span class="sxs-lookup"><span data-stu-id="50409-210">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-211">문자열의 시작 부분에서 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-211">Start at the beginning of the string.</span></span>|  
|`\s*`|<span data-ttu-id="50409-212">0개 이상의 공백 문자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-212">Match zero or more white-space characters.</span></span>|  
|`[\+-]?`|<span data-ttu-id="50409-213">양수 부호 또는 음의 부호가 없거나 1 개 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-213">Match zero or one occurrence of either the positive sign or the negative sign.</span></span>|  
|`\s?`|<span data-ttu-id="50409-214">0번 이상 나오는 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-214">Match zero or one white-space character.</span></span>|  
|`\$?`|<span data-ttu-id="50409-215">달러 기호는 없거나 1 개 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-215">Match zero or one occurrence of the dollar sign.</span></span>|  
|`\s?`|<span data-ttu-id="50409-216">0번 이상 나오는 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-216">Match zero or one white-space character.</span></span>|  
|`\d*`|<span data-ttu-id="50409-217">0번 이상 나오는 10진수를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-217">Match zero or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="50409-218">소수점 기호가 0 회 이상 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-218">Match zero or one decimal point symbol.</span></span>|  
|`\d{2}?`|<span data-ttu-id="50409-219">두 개의 10 진수 0 개 또는 1 개 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-219">Match two decimal digits zero or one time.</span></span>|  
|`(\d*\.?\d{2}?){1}`|<span data-ttu-id="50409-220">한 번 이상 소수점 기호로 구분 된 정수 부분과 소수 부분 자릿수 패턴과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-220">Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.</span></span>|  
|`$`|<span data-ttu-id="50409-221">문자열의 끝 부분을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-221">Match the end of the string.</span></span>|  
  
 <span data-ttu-id="50409-222">이 경우 정규식 가정 유효한 통화 문자열에 그룹 구분 기호가 포함 되지 않습니다는 현재 문화권에 의해 정의 된 소수 자릿수 또는 소수 자릿수 없이 있기 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-222">In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> property.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  
  
 <span data-ttu-id="50409-223">이 예의 정규식을 동적으로 작성 하기 때문에 म 알지 못할 디자인 타임에 현재 문화권의 통화 기호, 10 진수 기호 또는 양수 기호와 음수 기호 잘못 해석 될 수는 정규식 엔진이 정규식 언어 연산자로 여부.</span><span class="sxs-lookup"><span data-stu-id="50409-223">Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators.</span></span> <span data-ttu-id="50409-224">이 예제에서는 잘못 된 해석을 방지 하려면를 동적으로 생성 된 각 문자열에 전달 된 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-224">To prevent any misinterpretation, the example passes each dynamically generated string to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="50409-225">
        <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스는 변경할 수 없습니다 (읽기 전용) 하 고 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50409-225">The <see cref="T:System.Text.RegularExpressions.Regex" /> class is immutable (read-only) and thread safe.</span>
      </span>
      <span data-ttu-id="50409-226">
        <see cref="T:System.Text.RegularExpressions.Regex" /> 개체는 모든 스레드에서 만들고 스레드 사이 공유할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50409-226">
          <see cref="T:System.Text.RegularExpressions.Regex" /> objects can be created on any thread and shared between threads.</span>
      </span>
      <span data-ttu-id="50409-227">자세한 내용은 [스레드 Safety](~/docs/standard/base-types/thread-safety-in-regular-expressions.md)을 참조 하십시오.</span>
      <span class="sxs-lookup">
        <span data-stu-id="50409-227">For more information, see [Thread Safety](~/docs/standard/base-types/thread-safety-in-regular-expressions.md).</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-228">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-228">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-229">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-229">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-230">이 생성자가 보호 되는지; 참고 파생 된 클래스 에서만 호출 될 수는 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-230">Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="50409-231">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-231">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-232">지정된 정규 식에 대해 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-232">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-233">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-233">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-234">정규식에 대 한 자세한 내용은 참조는 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-234">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="50409-235">호출는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> 생성자는 호출 하는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 의 값과 <xref:System.Text.RegularExpressions.RegexOptions.None> 에 대 한는 `options` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-235">Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument.</span></span>  
  
 <span data-ttu-id="50409-236">A <xref:System.Text.RegularExpressions.Regex> 개체가 변경 불가능, 즉, 만들 때 정의한 일치 패턴에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-236">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it.</span></span> <span data-ttu-id="50409-237">그러나 수 있습니다 다시 컴파일하지 않고 여러 번 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-237">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="50409-238">이 생성자에 정의 된 모든 알파벳 문자 대/소문자 구분 일치를 시도 하는 정규식 개체를 인스턴스화하고 `pattern`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-238">This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`.</span></span> <span data-ttu-id="50409-239">대/소문자 구분 비교를 사용 하 여는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-239">For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-240">다음 예제를 인스턴스화하는 문자로 시작 하는 단어와 일치 하는 정규식이이 생성자를 사용 하는 방법 "a" 또는 "t"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-240">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  
  
 <span data-ttu-id="50409-241">참고 정규식 패턴 일치 단어 수 없습니다 "The" 텍스트의 시작 부분에서 기본적으로 대/소문자를 구분 하 여 비교 하므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-241">Note that the regular expression pattern cannot match the word "The" at the beginning of the text, because comparisons are case-sensitive by default.</span></span> <span data-ttu-id="50409-242">예를 보려면 대/소문자 비구분 비교 참조는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-242">For an example of case-insensitive comparison, see the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-243">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-243">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-244">
            <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-244">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-245">
            <para>이 생성자는 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성는 응용 프로그램 도메인의 기본 제한 시간 값을 사용 하는 개체입니다. 응용 프로그램 도메인에 대 한 시간 제한 값이 정의 되지 않은 경우는 <see cref="T:System.Text.RegularExpressions.Regex" /> 값을 사용 하는 개체 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 작업이 시간 초과 방지 하는 합니다. 만들기 위한 권장된 생성자는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체가 <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-245">
              <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain,  the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="50409-246">serialize된 패턴과 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-246">The object that contains a serialized pattern and <see cref="T:System.Text.RegularExpressions.RegexOptions" /> information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="50409-247">이 serialization의 대상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-247">The destination for this serialization.</span>
          </span>
          <span data-ttu-id="50409-248">이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-248">(This parameter is not used; specify <see langword="null" />.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-249">serialize된 데이터를 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-249">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class by using serialized data.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-250">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-250">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-251">
            <paramref name="info" />에 포함된 패턴이 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-251">The pattern that <paramref name="info" /> contains is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-252">
            <paramref name="info" />에 잘못된 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 플래그가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-252">
              <paramref name="info" /> contains an invalid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> flag.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="50409-253">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-253">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-254">정규식을 수정하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-254">A bitwise combination of the enumeration values that modify the regular expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-255">패턴을 수정할 수 있는 옵션을 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 지정된 정규식에 대해 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-255">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-256">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-256">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-257">정규식에 대 한 자세한 내용은 참조는 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-257">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="50409-258">A <xref:System.Text.RegularExpressions.Regex> 개체가 변경 불가능, 즉, 일치 매개 변수를 만들 경우 정의 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-258">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it.</span></span> <span data-ttu-id="50409-259">그러나 수 있습니다 다시 컴파일하지 않고 여러 번 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-259">However, it can be used any number of times without being recompiled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-260">다음 예제를 인스턴스화하는 문자로 시작 하는 단어와 일치 하는 정규식이이 생성자를 사용 하는 방법 "a" 또는 "t"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-260">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  
  
 <span data-ttu-id="50409-261">일치 컬렉션 때문에 텍스트를 시작 하 "The" 단어를 포함 하는 참고는 `options` 매개 변수의 대/소문자 구분 비교를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-261">Note that the match collection includes the word "The" that begins the text because the `options` parameter has defined case-insensitive comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-262">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-262">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-263">
            <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-263">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-264">
            <paramref name="options" />에 잘못된 플래그가 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-264">
              <paramref name="options" /> contains an invalid flag.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-265">
            <para>이 생성자는 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성는 응용 프로그램 도메인의 기본 제한 시간 값을 사용 하는 개체입니다. 응용 프로그램 도메인에 대 한 시간 제한 값이 정의 되지 않은 경우는 <see cref="T:System.Text.RegularExpressions.Regex" /> 값을 사용 하는 개체 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 작업이 시간 초과 방지 하는 합니다. 만들기 위한 권장된 생성자는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체가 <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-265">
              <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain, the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="50409-266">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-266">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-267">정규식을 수정하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-267">A bitwise combination of the enumeration values that modify the regular expression.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-268">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-268">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-269">시간이 초과되기 전에 패턴 일치 메서드가 일치하도록 시도해야 하는 시간을 지정한 패턴과 값을 수정할 수 있는 옵션을 사용하여 <see cref="T:System.Text.RegularExpressions.Regex" /> 클래스의 새 인스턴스를 지정된 정규식에 대해 초기화하고 컴파일합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-269">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-270">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-270">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-271">정규식에 대 한 자세한 내용은 참조는 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-271">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="50409-272">A <xref:System.Text.RegularExpressions.Regex> 개체가 변경 불가능, 즉, 만들 때 정의 하는 일치 패턴에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-272">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it.</span></span> <span data-ttu-id="50409-273">그러나 수 있습니다 다시 컴파일하지 않고 여러 번 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-273">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="50409-274">`matchTimeout` 매개 변수 지정 시간에 패턴 일치 메서드는 시간이 초과 되기 전에 일치 항목을 찾을 시도해 야 합니다. 일치 항목이 없으면 해당 시간 간격에서 발견 되 면 패턴 일치 메서드가 throw 한 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-274">The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-275">`matchTimeout` 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값 재정의 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-275">`matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-276">관찰 하는 인스턴스 패턴 일치 메서드는 `matchTimeout` 시간 제한 간격에는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-276">The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="50409-277">입력을 처리 하는 경우 응답을 중지 하 게 표시 되지 않도록 과도 한 역 추적을 사용 하는 정규식 시간 제한 간격을 설정 하면 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-277">Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-278">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-278">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-279">적절 한 시간 제한 간격을 설정 하려면 다음 요소를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-279">To set a reasonable time-out interval, consider the following factors:</span></span>  
  
-   <span data-ttu-id="50409-280">길이 복잡 한 정규식 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-280">The length and complexity of the regular expression pattern.</span></span> <span data-ttu-id="50409-281">길고 복잡 한 정규식 짧고 간단 것 보다 더 많은 시간이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-281">Longer and more complex regular expressions require more time than shorter and simpler ones.</span></span>  
  
-   <span data-ttu-id="50409-282">에서는 예상된 컴퓨터 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-282">The expected machine load.</span></span> <span data-ttu-id="50409-283">처리는 높은 CPU 및 메모리 사용률을 갖는 시스템에서 많은 시간이 소요 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-283">Processing takes more time on systems that have high CPU and memory utilization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-284">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 생성자를 인스턴스화하는 <xref:System.Text.RegularExpressions.Regex> 1 초의 시간 제한 값을 가진 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-284">The following example calls the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor to instantiate a <xref:System.Text.RegularExpressions.Regex> object with a time-out value of one second.</span></span> <span data-ttu-id="50409-285">줄의 끝에 하나 이상의 "a" 문자가 포함된 하나 이상의 시퀀스와 일치하는 정규식 패턴 `(a+)+$`는 과도한 역추적의 대상이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-285">The regular expression pattern `(a+)+$`, which matches one or more sequences of one or more "a" characters at the end of a line, is subject to excessive backtracking.</span></span> <span data-ttu-id="50409-286">경우는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 가 throw이 예제에서는 시간 제한 값 3 초의 최대값까지 늘립니다.</span><span class="sxs-lookup"><span data-stu-id="50409-286">If a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> is thrown, the example increases the time-out value up to the maximum value of three seconds.</span></span> <span data-ttu-id="50409-287">그렇지 않은 경우는 패턴 일치를 시도 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-287">Otherwise, it abandons the attempt to match the pattern.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-288">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-288">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-289">
            <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-289">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-290">
            <paramref name="options" />은 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-290">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
          <span data-ttu-id="50409-291">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-291">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-292">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-292">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CacheSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CacheSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-293">컴파일된 정규식에 대한 현재 정적 캐시의 최대 엔트리 수를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-293">Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-294">현재 정적 캐시의 최대 엔트리 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-294">The maximum number of entries in the static cache.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-295"><xref:System.Text.RegularExpressions.Regex> 클래스 정적 메서드 호출에 사용 된 컴파일된 정규식의 내부 캐시를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-295">The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="50409-296">Set 작업에 지정 된 값을 사용 하면 현재 캐시 크기 보다 작으면, 캐시 항목은 캐시 크기는 지정 된 값과 같은 될 때까지 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-296">If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.</span></span>  
  
 <span data-ttu-id="50409-297">기본적으로 캐시 15 컴파일된 정적 정규식을 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-297">By default, the cache holds 15 compiled static regular expressions.</span></span> <span data-ttu-id="50409-298">캐시의 크기를 수정 하려면 일반적으로 응용 프로그램을 설치 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-298">Your application typically will not have to modify the size of the cache.</span></span> <span data-ttu-id="50409-299">사용 하 여는 <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> 캐싱 나 매우 큰 캐시를 보유 하는 경우 해제 하려는 경우에 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-299">Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-300">Set 작업의 값이 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-300">The value in a set operation is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-301">
            <para>이전에.NET Framework에는 [! INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], 정적에 사용 되는 정규식 및 캐시 된 인스턴스 메서드 호출 합니다. 부터는 [! INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], 일반만에 사용 된 식 정적 메서드 호출 캐시 됩니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-301">
              <para>In the .NET Framework prior to the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], regular expressions used in both static and instance method calls were cached. Beginning with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], only regular expressions used in static method calls are cached.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capnames As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ capnames;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-302">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-302">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberSignature Language="VB.NET" Value="Protected Property CapNames As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ CapNames { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-303">명명된 캡처링 그룹을 인덱스 값에 매핑하는 사전을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-303">Gets or sets a dictionary that maps named capturing groups to their index values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-304">명명된 캡처링 그룹을 인덱스 값에 매핑하는 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-304">A dictionary that maps named capturing groups to their index values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-305">참고는이 속성은 보호 됩니다. 파생 된 클래스에서만 액세스할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-305">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="50409-306">Set 작업 속성에 할당 된 값으로 변환 하려고 한 <xref:System.Collections.Hashtable> 개체;이 변환에 실패 하는 경우 호출 하는 <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-306">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-307">집합 작업의 <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> 속성에 할당된 값은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-307">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> property in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberSignature Language="VB.NET" Value="Protected Friend caps As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ caps;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-308">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-308">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberSignature Language="VB.NET" Value="Protected Property Caps As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Caps { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-309">번호가 매겨진 캡처링 그룹을 인덱스 값에 매핑하는 사전을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-309">Gets or sets a dictionary that maps numbered capturing groups to their index values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-310">번호가 매겨진 캡처링 그룹을 인덱스 값에 매핑하는 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-310">A dictionary that maps numbered capturing groups to their index values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-311">참고는이 속성은 보호 됩니다. 파생 된 클래스에서만 액세스할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-311">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="50409-312">Set 작업 속성에 할당 된 값으로 변환 하려고 한 <xref:System.Collections.Hashtable> 개체;이 변환에 실패 하는 경우 호출 하는 <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-312">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-313">집합 작업의 <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> 속성에 할당된 값은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-313">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> property in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected internal int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capsize As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected public: int capsize;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-314">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-314">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected internal string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capslist As String() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::String ^&gt; ^ capslist;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-315">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-315">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-316">정규식을 컴파일하고 단일 어셈블리의 디스크에 저장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-316">Compiles regular expressions and saves them to disk in a single assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="50409-317">.NET Core에서 호출 하는 `Regex.CompileToAssembly` 메서드 throw 한 <xref:System.PlatformNotSupportedException>; 어셈블리를 쓰는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-317">On .NET Core, calls to the `Regex.CompileToAssembly` method throw a <xref:System.PlatformNotSupportedException>; writing out an assembly is not supported.</span></span>
  
       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="50409-318">컴파일할 정규식을 설명하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-318">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="50409-319">어셈블리의 파일 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-319">The file name of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-320">하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 명명된 어셈블리로 컴파일합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-320">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-321"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> 각각의 정규식에서 정의에서.NET Framework 어셈블리를 생성 하는 메서드는 `regexinfos` 배열 클래스로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-321">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="50409-322">일반적으로 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> 컴파일된 정규식의 어셈블리를 생성 하는 별도 응용 프로그램에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-322">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="50409-323">어셈블리에 포함 된 각 정규식에는 다음과 같은 특징이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-323">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="50409-324">파생 된 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-324">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="50409-325">정의 된 정규화 된 이름이 할당 됩니다는 `fullnamespace` 및 `name` 해당 매개 변수 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-325">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="50409-326">(또는 매개 변수가 없는) 기본 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-326">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="50409-327">일반적으로 코드를 인스턴스화하고 컴파일된 정규식을 사용 하는 어셈블리 또는 어셈블리를 만드는 코드에서 별도 응용 프로그램에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-327">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-328">다음 예제에서는 RegexLib.dll 이라는 어셈블리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-328">The following example creates an assembly named RegexLib.dll.</span></span> <span data-ttu-id="50409-329">어셈블리에 두 개의 컴파일된 정규식에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-329">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="50409-330">첫 번째 `Utilities.RegularExpressions.DuplicatedString`, 동일한 두 개의 연속 단어와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-330">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="50409-331">두 번째 페이지인 `Utilities.RegularExpressions.EmailAddress`, 문자열이 올바른 형식으로 전자 메일 주소에 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-331">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 <span data-ttu-id="50409-332">중복 된 단어에 대 한 문자열을 검사 하는 정규식은 다음 의해 인스턴스화되어 사용 되며 다음 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-332">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="50409-333">이 두 번째 예제의 컴파일이 성공 프로젝트에 추가할 RegexLib.dll (첫 번째 예제에서 생성 된 어셈블리)에 대 한 참조가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-333">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-334">
            <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-334">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="50409-335">-또는-  <paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-335">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-336">
            <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-336">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="50409-337">.NET Core에만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-337">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-338">
            <para>포함 된 시스템에서 개발 하는 경우 [! INCLUDE[net_v45](~/includes/net-v45-md.md)] 대상 설치 해당 포인트 릴리스 또는 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 사용 하는 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 포함 된 어셈블리를 만드는 메서드를 컴파일된 정규식입니다. 가 시스템에서 어셈블리에 있는 정규식 중 하나를 사용 하는 동안 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 예외가 throw 됩니다. 이 문제를 해결 하려면 하나를 수행 하면 다음 중:-있는 시스템에서 컴파일된 정규식이 포함 된 어셈블리를 빌드합니다 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 대신 이후 버전의 설치 됩니다.  -대신 호출의 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 사용 정적 또는 인스턴스를 어셈블리에서 컴파일된 정규식을 검색 하 고 <see cref="T:System.Text.RegularExpressions.Regex" /> 있는 메서드는 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 인스턴스화할 때 옵션는 <see cref="T:System.Text.RegularExpressions.Regex" /> 정규식 호출할 또는 개체 패턴 일치 하는 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-338">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="50409-339">컴파일할 정규식을 설명하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-339">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="50409-340">어셈블리의 파일 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-340">The file name of the assembly.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="50409-341">어셈블리에 적용할 특성을 정의하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-341">An array that defines the attributes to apply to the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-342">지정된 특성을 사용하여 하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 명명된 어셈블리로 컴파일합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-342">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly with the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-343"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> 각각의 정규식에서 정의에서.NET Framework 어셈블리를 생성 하는 메서드는 `regexinfos` 배열 클래스로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-343">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="50409-344">일반적으로 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> 컴파일된 정규식의 어셈블리를 생성 하는 별도 응용 프로그램에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-344">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="50409-345">어셈블리에 포함 된 각 정규식에는 다음과 같은 특징이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-345">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="50409-346">파생 된 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-346">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="50409-347">정의 된 정규화 된 이름이 할당 됩니다는 `fullnamespace` 및 `name` 해당 매개 변수 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-347">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="50409-348">(또는 매개 변수가 없는) 기본 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-348">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="50409-349">일반적으로 코드를 인스턴스화하고 컴파일된 정규식을 사용 하는 어셈블리 또는 어셈블리를 만드는 코드에서 별도 응용 프로그램에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-349">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="50409-350">때문에 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 특정 언어의 클래스 정의 키워드를 사용 하는 대신 메서드 호출에서.NET Framework 어셈블리를 생성 하는 메서드 (같은 `class` C# 또는 `Class`...`End Class`</span><span class="sxs-lookup"><span data-stu-id="50409-350">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="50409-351">Visual basic)에서는.NET Framework 특성 개발 언어 표준 특성 구문을 사용 하 여 어셈블리에 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-351">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="50409-352">`attributes` 매개 변수는 어셈블리에 적용 되는 특성을 정의 하기 위한 대체 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-352">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="50409-353">어셈블리에 적용 하려는 각 특성에 대해 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-353">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="50409-354">배열을 만들어 <xref:System.Type> 호출 하고자 하는 특성 생성자의 매개 변수 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-354">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="50409-355">검색 한 <xref:System.Type> 새 어셈블리에 적용할 특성 클래스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-355">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="50409-356">호출의 <xref:System.Type.GetConstructor%2A> 메서드 특성의 <xref:System.Type> 검색할 개체는 <xref:System.Reflection.ConstructorInfo> 호출 하고자 하는 특성 생성자를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-356">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="50409-357">전달 된 <xref:System.Type.GetConstructor%2A> 메서드 배열의 <xref:System.Type> 생성자의 매개 변수 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-357">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.</span></span>  
  
4.  <span data-ttu-id="50409-358">만들기는 <xref:System.Object> 특성의 생성자에 전달할 매개 변수를 정의 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-358">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="50409-359">인스턴스화하는 <xref:System.Reflection.Emit.CustomAttributeBuilder> 생성자에 전달 하 여 개체는 <xref:System.Reflection.ConstructorInfo> 3 단계에서 개체 검색 및 <xref:System.Object> 4 단계에서 만든 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-359">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="50409-360">그런 다음 이러한 배열을 전달 <xref:System.Reflection.Emit.CustomAttributeBuilder> 개체 대신는 `attributes` 매개 변수를는 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-360">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-361">다음 예제에서는 RegexLib.dll 이라는 어셈블리를 만들고 적용 하는 <xref:System.Reflection.AssemblyTitleAttribute> 특성을 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-361">The following example creates an assembly named RegexLib.dll and applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to it.</span></span> <span data-ttu-id="50409-362">어셈블리에 두 개의 컴파일된 정규식에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-362">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="50409-363">첫 번째 `Utilities.RegularExpressions.DuplicatedString`, 동일한 두 개의 연속 단어와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-363">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="50409-364">두 번째 페이지인 `Utilities.RegularExpressions.EmailAddress`, 문자열이 올바른 형식으로 전자 메일 주소에 있는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-364">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 <span data-ttu-id="50409-365">확인할 수 있습니다는 <xref:System.Reflection.AssemblyTitleAttribute> 특성이 해당 매니페스트 ILDasm 같은 리플렉션 유틸리티를 검사 하 여 어셈블리에 적용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-365">You can verify that the <xref:System.Reflection.AssemblyTitleAttribute> attribute has been applied to the assembly by examining its manifest with a reflection utility such as ILDasm.</span></span>  
  
 <span data-ttu-id="50409-366">중복 된 단어에 대 한 문자열을 검사 하는 정규식은 다음 의해 인스턴스화되어 사용 되며 다음 예제에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-366">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="50409-367">이 두 번째 예제의 컴파일이 성공 프로젝트에 추가할 RegexLib.dll (첫 번째 예제에서 생성 된 어셈블리)에 대 한 참조가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-367">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-368">
            <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-368">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="50409-369">-또는-  <paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-369">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-370">
            <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-370">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="50409-371">.NET Core에만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-371">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-372">
            <para>포함 된 시스템에서 개발 하는 경우 [! INCLUDE[net_v45](~/includes/net-v45-md.md)] 대상 설치 해당 포인트 릴리스 또는 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 사용 하는 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 포함 된 어셈블리를 만드는 메서드를 컴파일된 정규식입니다. 가 시스템에서 어셈블리에 있는 정규식 중 하나를 사용 하는 동안 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 예외가 throw 됩니다. 이 문제를 해결 하려면 하나를 수행 하면 다음 중:-있는 시스템에서 컴파일된 정규식이 포함 된 어셈블리를 빌드합니다 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 대신 이후 버전의 설치 됩니다.  -대신 호출의 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 사용 정적 또는 인스턴스를 어셈블리에서 컴파일된 정규식을 검색 하 고 <see cref="T:System.Text.RegularExpressions.Regex" /> 있는 메서드는 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 인스턴스화할 때 옵션는 <see cref="T:System.Text.RegularExpressions.Regex" /> 정규식 호출할 또는 개체 패턴 일치 하는 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-372">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes, System::String ^ resourceFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
        <Parameter Name="resourceFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="50409-373">컴파일할 정규식을 설명하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-373">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="50409-374">어셈블리의 파일 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-374">The file name of the assembly.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="50409-375">어셈블리에 적용할 특성을 정의하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-375">An array that defines the attributes to apply to the assembly.</span>
          </span>
        </param>
        <param name="resourceFile">
          <span data-ttu-id="50409-376">어셈블리에 포함될 Win32 리소스 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-376">The name of the Win32 resource file to include in the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-377">지정된 특성을 사용하여 하나 이상의 지정된 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체와 지정된 리소스 파일을 명명된 어셈블리로 컴파일합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-377">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects and a specified resource file to a named assembly with the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-378">[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName% 2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > 각각의 정규식에서 정의에서.NET Framework 어셈블리를 생성 하는 메서드는 `regexinfos` 배열 클래스로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-378">The [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="50409-379">일반적으로 [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D% 2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > 컴파일된 정규식의 어셈블리를 생성 하는 별도 응용 프로그램에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-379">Typically, the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="50409-380">어셈블리에 포함 된 각 정규식에는 다음과 같은 특징이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-380">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="50409-381">파생 된 <xref:System.Text.RegularExpressions.Regex> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-381">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="50409-382">정의 된 정규화 된 이름이 할당 됩니다는 `fullnamespace` 및 `name` 해당 매개 변수 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-382">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="50409-383">(또는 매개 변수가 없는) 기본 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-383">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="50409-384">일반적으로 코드를 인스턴스화하고 컴파일된 정규식을 사용 하는 어셈블리 또는 어셈블리를 만드는 코드에서 별도 응용 프로그램에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-384">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="50409-385">때문에 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 특정 언어의 클래스 정의 키워드를 사용 하는 대신 메서드 호출에서.NET Framework 어셈블리를 생성 하는 메서드 (같은 `class` C# 또는 `Class`...`End Class`</span><span class="sxs-lookup"><span data-stu-id="50409-385">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="50409-386">Visual basic)에서는.NET Framework 특성 개발 언어 표준 특성 구문을 사용 하 여 어셈블리에 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-386">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="50409-387">`attributes` 매개 변수는 어셈블리에 적용 되는 특성을 정의 하기 위한 대체 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-387">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="50409-388">어셈블리에 적용 하려는 각 특성에 대해 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-388">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="50409-389">배열을 만들어 <xref:System.Type> 호출 하고자 하는 특성 생성자의 매개 변수 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-389">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="50409-390">검색 한 <xref:System.Type> 새 어셈블리에 적용할 특성 클래스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-390">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="50409-391">호출의 <xref:System.Type.GetConstructor%2A> 메서드 특성의 <xref:System.Type> 검색할 개체는 <xref:System.Reflection.ConstructorInfo> 호출 하고자 하는 특성 생성자를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-391">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="50409-392">전달 된 <xref:System.Type.GetConstructor%2A> 메서드 배열의 <xref:System.Type> 생성자의 매개 변수 형식을 나타내는 개체</span><span class="sxs-lookup"><span data-stu-id="50409-392">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types</span></span>  
  
4.  <span data-ttu-id="50409-393">만들기는 <xref:System.Object> 특성의 생성자에 전달할 매개 변수를 정의 하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-393">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="50409-394">인스턴스화하는 <xref:System.Reflection.Emit.CustomAttributeBuilder> 생성자에 전달 하 여 개체는 <xref:System.Reflection.ConstructorInfo> 3 단계에서 개체 검색 및 <xref:System.Object> 4 단계에서 만든 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-394">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="50409-395">그런 다음 이러한 배열을 전달 <xref:System.Reflection.Emit.CustomAttributeBuilder> 개체 대신는 `attributes` 매개 변수를는 [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly% 28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-395">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-396">
            <paramref name="assemblyname" /> 매개 변수의 <see cref="P:System.Reflection.AssemblyName.Name" /> 속성 값이 비어 있거나 null 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-396">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="50409-397">-또는-  <paramref name="regexinfos" />에 있는 개체 중 하나 이상의 정규식 패턴에 잘못된 구문이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-397">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-398">
            <paramref name="assemblyname" /> 또는 <paramref name="regexinfos" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-398">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="50409-399">
            <paramref name="resourceFile" /> 매개 변수가 잘못된 Win32 리소스 파일을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-399">The <paramref name="resourceFile" /> parameter designates an invalid Win32 resource file.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="50409-400">
            <paramref name="resourceFile" /> 매개 변수가 지정된 파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-400">The file designated by the <paramref name="resourceFile" /> parameter cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="50409-401">.NET Core에만 해당: 컴파일된 정규식의 어셈블리 만들기는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-401">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-402">
            <para>포함 된 시스템에서 개발 하는 경우 [! INCLUDE[net_v45](~/includes/net-v45-md.md)] 대상 설치 해당 포인트 릴리스 또는 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 사용 하는 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 포함 된 어셈블리를 만드는 메서드를 컴파일된 정규식입니다. 가 시스템에서 어셈블리에 있는 정규식 중 하나를 사용 하는 동안 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 예외가 throw 됩니다. 이 문제를 해결 하려면 하나를 수행 하면 다음 중:-있는 시스템에서 컴파일된 정규식이 포함 된 어셈블리를 빌드합니다 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 대신 이후 버전의 설치 됩니다.  -대신 호출의 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 사용 정적 또는 인스턴스를 어셈블리에서 컴파일된 정규식을 검색 하 고 <see cref="T:System.Text.RegularExpressions.Regex" /> 있는 메서드는 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 인스턴스화할 때 옵션는 <see cref="T:System.Text.RegularExpressions.Regex" /> 정규식 호출할 또는 개체 패턴 일치 하는 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-402">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="50409-403">변환할 텍스트가 포함된 입력 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-403">The input string that contains the text to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-404">문자(\\, \*, +, ?, |, {, [, (,), ^, $,., # 및 공백)의 최소 집합을 자체 이스케이프 코드로 대체하여 이스케이프합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-404">Escapes a minimal set of characters (\\, \*, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes.</span>
          </span>
          <span data-ttu-id="50409-405">이렇게 하면 정규식 엔진은 이러한 문자를 메타문자가 아니라 문자 그대로 해석합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-405">This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-406">메타문자가 이스케이프 서식으로 변환된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-406">A string of characters with metacharacters converted to their escaped form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-407"><xref:System.Text.RegularExpressions.Regex.Escape%2A> 정규식 엔진은 문자 리터럴으로 포함 될 수 있는 모든 메타 문자를 해석할 수 있도록 문자열로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-407"><xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals.</span></span> <span data-ttu-id="50409-408">예를 들어, 정규식을 직선 열고 닫는 대괄호 ([및]) 텍스트와에서 구분 되는 주석을 추출 하도록 디자인 된 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-408">For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text.</span></span> <span data-ttu-id="50409-409">다음 예제에서는 정규식에에서 "[(.\*?)]"는 문자 클래스로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-409">In the following example, the regular expression "[(.\*?)]" is interpreted as a character class.</span></span> <span data-ttu-id="50409-410">입력된 텍스트에 포함 된 주석과 일치 대신 정규식 각 열기 또는 닫는 괄호, 기간, 별표, 또는 매개 변수를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-410">Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 <span data-ttu-id="50409-411">그러나 왼쪽 괄호를 전달 하 여 이스케이프 된 경우는 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드를 정규식 일치는 입력된 문자열에 포함 된 주석에서 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-411">However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string.</span></span> <span data-ttu-id="50409-412">다음은 이에 대한 예입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-412">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 <span data-ttu-id="50409-413">정적 텍스트를 사용 하 여 정의 된 정규식을 메타 문자가 아닌 문자 그대로 해석 되어야 하는 문자는 백슬래시 기호 앞에 이스케이프 될 수 있습니다 (\\) 및 호출 된 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-413">In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span> <span data-ttu-id="50409-414">디자인 타임에 알 수 없는 문자를 사용 하 여 동적으로 정의 된 정규식에서 호출 된 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드는 정규식 엔진에서 해석 하는 개별 문자 리터럴로 대신 구하도록 보다 메타 문자가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-414">In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-415">정규식 패턴에서 숫자 기호 (#) 또는 리터럴 공백 문자를 포함 하는 경우에 이스케이프 되어야 입력된 텍스트는으로 구문 분석 하는 경우는 <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> 옵션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-415">If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option enabled.</span></span>  
  
 <span data-ttu-id="50409-416">반면는 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드는 직선 이스케이프 여는 대괄호 () 하 고 여는 중괄호 ({) 문자를 해당 이스케이프 하지 않습니다의 해당 문자를 닫는 (] 및}).</span><span class="sxs-lookup"><span data-stu-id="50409-416">While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }).</span></span> <span data-ttu-id="50409-417">대부분의 경우에서 이러한 이스케이프 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-417">In most cases, escaping these is not necessary.</span></span> <span data-ttu-id="50409-418">닫는 대괄호 또는 중괄호는 앞에 해당 여는 문자가, 정규식 엔진은 것를 문자 그대로 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-418">If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally.</span></span> <span data-ttu-id="50409-419">여는 대괄호 또는 중괄호 메타로 해석 되, 정규식 엔진은 첫 번째 해당 닫는 문자 메타으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-419">If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter.</span></span> <span data-ttu-id="50409-420">이것이 원하는 동작 하는 경우 닫는 대괄호 또는 중괄호를 이스케이프 해야 백슬래시 앞에 명시적으로 추가 (\\) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-420">If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\) character.</span></span> <span data-ttu-id="50409-421">예시의 경우 "예" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="50409-421">For an illustration, see the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-422">다음 예제에서는 텍스트에서 의견을 추출합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-422">The following example extracts comments from text.</span></span> <span data-ttu-id="50409-423">주석은 begin 주석 기호 및 사용자가 선택 되어 있는 종료 주석 기호로 구분 됩니다 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-423">It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user.</span></span> <span data-ttu-id="50409-424">에 전달 되므로 이기 때문에 주석 기호 문자 그대로 해석 하는 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 메서드를 메타 문자가 해석 없습니다 것을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-424">Because the comment symbols are to be interpreted literally, they are passed to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to ensure that they cannot be misinterpreted as metacharacters.</span></span> <span data-ttu-id="50409-425">또한이 예제는 명시적으로 사용자가 입력 한 종료 주석 기호 닫는 대괄호 (]) 또는 중괄호 (}) 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-425">In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket (]) or brace (}).</span></span> <span data-ttu-id="50409-426">그럴 경우 백슬래시 문자 (\\) 앞에 추가 되는 대괄호 또는 중괄호 문자 그대로 해석 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-426">If it is, a backslash character (\\) is prepended to the bracket or brace so that it is interpreted literally.</span></span> <span data-ttu-id="50409-427">또한 참고는 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 중괄호와 닫는 주석 기호 함께 설명 하는 대신만 메모를 표시 하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-427">Note that the example also uses the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-428">
            <paramref name="str" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-428">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend factory As RegexRunnerFactory " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexRunnerFactory ^ factory;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-429">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-429">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetGroupNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-430">정규식에 대한 캡처링 그룹 이름의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-430">Returns an array of capturing group names for the regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-431">그룹 이름의 문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-431">A string array of group names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-432">그룹 이름 컬렉션을 집합 식에서 캡처링 그룹의 이름 사용 하는 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-432">The collection of group names contains the set of strings used to name capturing groups in the expression.</span></span> <span data-ttu-id="50409-433">숫자 이름이 자동으로 할당 된 캡처링 그룹의 명시적으로 이름이 지정 되지 않은 경우에 ("0", "1", "2", "3", 및 등).</span><span class="sxs-lookup"><span data-stu-id="50409-433">Even if capturing groups are not explicitly named, they are automatically assigned numerical names ("0", "1", "2", "3", and so on).</span></span> <span data-ttu-id="50409-434">"0" 그룹 나타냅니다 정규식 패턴과 일치 하는 모든 텍스트를 지정 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-434">The "0" named group represents all text matched by the regular expression pattern.</span></span> <span data-ttu-id="50409-435">컬렉션에 명시적으로 명명 된 그룹 앞에 번호가 매겨진된 그룹 및 명명 된 그룹은 정규식 패턴에 정의 된 순서로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-435">Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="50409-436">사용할 수는 <xref:System.Array.Length%2A> 정규식에서 그룹의 수를 확인 하려면이 메서드에서 반환 된 배열에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-436">You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-437">다음 예제에서는 정의 범용 `ShowMatches` 정규식 그룹과 일치 하는 텍스트의 이름을 표시 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-437">The following example defines a general-purpose `ShowMatches` method that displays the names of regular expression groups and their matched text.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  
  
 <span data-ttu-id="50409-438">이 경우, 정규식 패턴 `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` 의 첫 번째 단어, 마지막 단어 및 끝 문장 부호를 식별 하 고 간단한 문장을 구문 분석을 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-438">In this case, the regular expression pattern `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark.</span></span> <span data-ttu-id="50409-439">다음 표에서 정규식 패턴이 해석 되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-439">The following table shows how the regular expression pattern is interpreted:</span></span>  
  
|<span data-ttu-id="50409-440">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-440">Pattern</span></span>|<span data-ttu-id="50409-441">설명</span><span class="sxs-lookup"><span data-stu-id="50409-441">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-442">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-442">Begin the match at a word boundary.</span></span>|  
|`(?<FirstWord>\w+)`|<span data-ttu-id="50409-443">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-443">Match one or more word characters.</span></span> <span data-ttu-id="50409-444">이는 `FirstWord` 명명 된 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-444">This is the `FirstWord` named group.</span></span>|  
|<span data-ttu-id="50409-445">\s?</span><span class="sxs-lookup"><span data-stu-id="50409-445">\s?</span></span>|<span data-ttu-id="50409-446">0회 이상 나오는 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-446">Match zero or one white-space characters.</span></span>|  
|<span data-ttu-id="50409-447">(\w+)</span><span class="sxs-lookup"><span data-stu-id="50409-447">(\w+)</span></span>|<span data-ttu-id="50409-448">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-448">Match one or more word characters.</span></span> <span data-ttu-id="50409-449">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-449">This is the second capturing group.</span></span>|  
|<span data-ttu-id="50409-450">\s</span><span class="sxs-lookup"><span data-stu-id="50409-450">\s</span></span>|<span data-ttu-id="50409-451">공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-451">Match a white-space character.</span></span>|  
|<span data-ttu-id="50409-452">((\w+)\s)\*</span><span class="sxs-lookup"><span data-stu-id="50409-452">((\w+)\s)\*</span></span>|<span data-ttu-id="50409-453">일치 항목 0 개 이상의 단어 문자 하나 이상의 공백 뒤의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-453">Match zero or more occurrences of one or more word characters followed by a white space.</span></span> <span data-ttu-id="50409-454">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-454">This is the first capturing group.</span></span>|  
|<span data-ttu-id="50409-455">(? \<LastWord > \w+)?</span><span class="sxs-lookup"><span data-stu-id="50409-455">(?\<LastWord>\w+)?</span></span>|<span data-ttu-id="50409-456">하나 이상의 단어 문자 0 회 이상 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-456">Match zero or one occurrence of one or more word characters.</span></span> <span data-ttu-id="50409-457">이는 `LastWord` 명명 된 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-457">This is the `LastWord` named group.</span></span>|  
|<span data-ttu-id="50409-458">(? \<문장 부호 > \p{Po})</span><span class="sxs-lookup"><span data-stu-id="50409-458">(?\<Punctuation>\p{Po})</span></span>|<span data-ttu-id="50409-459">문자를 유니코드 범주는 문장 부호, 기타 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-459">Match a character whose Unicode category is Punctuation, Other.</span></span> <span data-ttu-id="50409-460">이는 `Punctuation` 명명 된 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-460">This is the `Punctuation` named group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNumbers () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetGroupNumbers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-461">배열 내의 그룹 이름에 해당하는 캡처링 그룹 번호의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-461">Returns an array of capturing group numbers that correspond to group names in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-462">그룹 번호의 정수 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-462">An integer array of group numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-463">명명 되지 않은 및 명명 된 캡처링 그룹 수로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-463">Both unnamed and named capturing groups can be accessed by number.</span></span> <span data-ttu-id="50409-464">명명 되지 않은 그룹 왼쪽에서 오른쪽 1부터 매겨집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-464">Unnamed groups are numbered from left to right starting with 1.</span></span> <span data-ttu-id="50409-465">(인덱스 0 (영) 캡처링 그룹이 나타냅니다 일치를 하는 전체.)  명명 된 그룹은 다음 왼쪽에서 번호가 매겨진 1 더 큰 숫자를 오른쪽부터 수보다 명명 되지 않은 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-465">(The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.</span></span>  
  
 <span data-ttu-id="50409-466">문자열 이름으로 참조 하는 대신 해당 번호로 그룹 빠른 액세스를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-466">Referencing a group by its number instead of by string name can provide faster access.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-467">다음 예제에서는 정규식을 정의 `\b((?<word>\w+)\s*)+(?<end>[.?!])`, 문장 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-467">The following example defines a regular expression, `\b((?<word>\w+)\s*)+(?<end>[.?!])`, that matches a sentence.</span></span> <span data-ttu-id="50409-468">세 가지 캡처링 그룹을 포함 하는 정규식: 함께 하며 다음에 올 수 있는 공백 문자는 개별 단어를 캡처하는 명명 되지 않은 그룹 라는 그룹 `word` 을 캡처하는 개별 단어는 문장;에서 및 그룹 이라는 `end` 문장 끝나는 문장 부호를 캡처하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-468">The regular expression includes three capturing groups: an unnamed group that captures an individual word along with a space character that may follow it; a group named `word` that captures the individual words in the sentence; and a group named `end` that captures the punctuation that ends the sentence.</span></span> <span data-ttu-id="50409-469">호출 된 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> 모든 캡처의 번호를 가져올 메서드를 그룹, 한 다음 캡처된 해당 문자열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-469">The example calls the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> method to get the numbers of all capturing groups, and then displays their captured string.</span></span> <span data-ttu-id="50409-470">또한는 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> 메서드는 특정 번호가 매겨진된 그룹 명명 된 그룹에 해당 하는지 여부를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-470">In addition, the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method is used to indicate whether a particular numbered group corresponds to a named group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  
  
 <span data-ttu-id="50409-471">정규식 패턴은 다음 테이블과 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-471">The regular expression pattern is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-472">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-472">Pattern</span></span>|<span data-ttu-id="50409-473">설명</span><span class="sxs-lookup"><span data-stu-id="50409-473">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-474">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-474">Begin the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="50409-475">일치 하는 문자열 라는 그룹을 할당 하 고 하나 이상의 단어 문자를 찾습니다 `word`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-475">Match one or more word characters and assign the matched strings to a group named `word`.</span></span>|  
|`\s*`|<span data-ttu-id="50409-476">0개 이상의 공백 문자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-476">Match zero or more white-space characters.</span></span>|  
|`((?<word>\w+)\s*)`|<span data-ttu-id="50409-477">할당 된 `word` 된 캡처된 그룹 캡처된 첫 번째 캡처 그룹에 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-477">Assign the `word` captured group followed by any captured white-space characters to the first captured group.</span></span>|  
|`((?<word>\w+)\s*)+`|<span data-ttu-id="50409-478">하나 이상의 단어 문자 다음에 모든 공백 문자가 한 번 이상 패턴과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-478">Match the pattern of one or more word characters followed by any white-space characters one or more times.</span></span>|  
|`(?<end>[.?!])`|<span data-ttu-id="50409-479">마침표, 물음표 또는 느낌표를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-479">Match a period, question mark, or exclamation point.</span></span> <span data-ttu-id="50409-480">일치 하는 문자를 할당 된 `end` 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-480">Assign the matched character to the `end` capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNameFromNumber (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GroupNameFromNumber(int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="50409-481">해당 그룹 이름으로 변환할 그룹 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-481">The group number to convert to the corresponding group name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-482">지정된 그룹 번호에 해당하는 그룹 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-482">Gets the group name that corresponds to the specified group number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-483">지정된 그룹 번호에 연결되어 있는 그룹 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-483">A string that contains the group name associated with the specified group number.</span>
          </span>
          <span data-ttu-id="50409-484">
            <paramref name="i" />에 해당하는 그룹 이름이 없는 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-484">If there is no group name that corresponds to <paramref name="i" />, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-485">정규식 패턴에 명명 되거나 번호가 매겨진 캡처링 그룹 내의 패턴 일치를 사용 하는 하위 식을 나타내는 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-485">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="50409-486">번호가 매겨진된 그룹 구문에 의해 구분 됩니다 (*subexpression*) 정규식에서의 순서에 따라 숫자 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-486">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="50409-487">명명 된 그룹 구문에 의해 구분 됩니다 (?`<` *이름*`>`*subexpression*) 또는 (?' *이름*'*subexpression*) 여기서 *이름* 부분식을 식별 하는 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-487">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="50409-488">자세한 내용은 [그룹화 구문](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)을 참조하세요. <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> 메서드는 명명 된 그룹 및 서 수 위치로 정규식에서 번호가 매겨진된 그룹 모두를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-488">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="50409-489">서 수 위치 0에는 항상 전체 정규식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-489">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="50409-490">번호가 매겨진 모든 그룹의 정규식 패턴에서의 실제 위치에 관계 없이 명명 된 그룹 하기 전에 다음 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-490">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="50409-491">경우 `i` 수 명명된 된 그룹의 메서드는 그룹의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-491">If `i` is the number of a named group, the method returns the name of the group.</span></span> <span data-ttu-id="50409-492">경우 `i` 수 명명 되지 않은 그룹의 메서드는 숫자의 문자열 표현을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-492">If `i` is the number of an unnamed group, the method returns the string representation of the number.</span></span> <span data-ttu-id="50409-493">예를 들어 경우 `i` 는 1, "1" 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-493">For example, if `i` is 1, the method returns "1".</span></span> <span data-ttu-id="50409-494">경우 `i` 가 아닌 경우는 캡처링 그룹 메서드 반환 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-494">If `i` is not the number of a capturing group, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-495">패턴 일치를 사용 하는 항목이 있는 경우이 메서드에서 반환 되는 값 다음 사용할 수를 검색 하는 <xref:System.Text.RegularExpressions.Group> 에서 캡처된 그룹을 나타내는 개체는 <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-495">If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="50409-496"><xref:System.Text.RegularExpressions.GroupCollection> 개체에서 반환 된 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-496">The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-497">다음 예제에서는 미국 도시 이름, 상태 이름 및 우편 번호를 포함 하는 주소 줄 일치 하는 정규식 패턴을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-497">The following example defines a regular expression pattern that matches an address line containing a U.S. city name, state name, and zip code.</span></span> <span data-ttu-id="50409-498">이 예제에서는 사용은 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> 캡처링 그룹의 이름을 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-498">The example uses the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method to retrieve the names of capturing groups.</span></span> <span data-ttu-id="50409-499">다음이 이름을 사용 하 여 일치 하는 항목에 대 한 해당 캡처된 그룹을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-499">It then uses these names to retrieve the corresponding captured groups for matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  
  
 <span data-ttu-id="50409-500">정규식 패턴은 다음 식으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-500">The regular expression pattern is defined by the following expression:</span></span>  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 <span data-ttu-id="50409-501">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-501">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-502">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-502">Pattern</span></span>|<span data-ttu-id="50409-503">설명</span><span class="sxs-lookup"><span data-stu-id="50409-503">Description</span></span>|  
|-------------|-----------------|  
|`(?<city>[A-Za-z\s]+)`|<span data-ttu-id="50409-504">하나 이상의 영문자 또는 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-504">Match one or more alphabetic or white-space character.</span></span> <span data-ttu-id="50409-505">이 캡처된 그룹의 이름을 할당 `city`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-505">Assign this captured group the name `city`.</span></span>|  
|`,`|<span data-ttu-id="50409-506">쉼표 (,) 뒤에 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-506">Match a comma (,) followed by a white-space character.</span></span>|  
|`(?<state>[A-Za-z]{2})`|<span data-ttu-id="50409-507">두 개의 알파벳 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-507">Match two alphabetic characters.</span></span> <span data-ttu-id="50409-508">이 캡처된 그룹의 이름을 할당 `state`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-508">Assign this captured group the name `state`.</span></span> <span data-ttu-id="50409-509">이 그룹 뒤에 공백 문자가 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-509">This group should be followed by a white-space character.</span></span>|  
|`(?<zip>\d{5}(-\d{4})?)`|<span data-ttu-id="50409-510">5 자리 숫자를 4 자리 숫자가 나오는 하이픈 0 개 또는 1 번째와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-510">Match five numeric digits followed by either zero or one occurrence of a hyphen followed by four digits.</span></span> <span data-ttu-id="50409-511">이 캡처된 그룹의 이름을 할당 `zip`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-511">Assign this captured group the name `zip`.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNumberFromName (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GroupNumberFromName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="50409-512">해당 그룹 번호로 변환할 그룹 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-512">The group name to convert to the corresponding group number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-513">지정된 그룹 이름에 해당하는 그룹 번호를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-513">Returns the group number that corresponds to the specified group name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-514">지정된 그룹 이름에 해당하는 그룹 번호이거나 <paramref name="name" />이 유효한 그룹 이름이 아닌 경우 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-514">The group number that corresponds to the specified group name, or -1 if <paramref name="name" /> is not a valid group name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-515">정규식 패턴에 명명 되거나 번호가 매겨진 캡처링 그룹 내의 패턴 일치를 사용 하는 하위 식을 나타내는 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-515">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="50409-516">번호가 매겨진된 그룹 구문에 의해 구분 됩니다 (*subexpression*) 정규식에서의 순서에 따라 숫자 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-516">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="50409-517">명명 된 그룹 구문에 의해 구분 됩니다 (?`<` *이름*`>`*subexpression*) 또는 (?' *이름*'*subexpression*) 여기서 *이름* 부분식을 식별 하는 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-517">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="50409-518">자세한 내용은 [그룹화 구문](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)을 참조하세요. <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> 메서드는 명명 된 그룹 및 서 수 위치로 정규식에서 번호가 매겨진된 그룹 모두를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-518">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="50409-519">서 수 위치 0에는 항상 전체 정규식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-519">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="50409-520">번호가 매겨진 모든 그룹의 정규식 패턴에서의 실제 위치에 관계 없이 명명 된 그룹 하기 전에 다음 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-520">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="50409-521">경우 `name` 번호는 메서드가 반환 정규식 패턴에 있는 그룹 번호의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-521">If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number.</span></span> <span data-ttu-id="50409-522">경우 `name` 해당 하는 명명 된 캡처링 그룹은 정규식 패턴에 있는, 메서드는 해당 번호를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-522">If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number.</span></span> <span data-ttu-id="50409-523">비교 `name` 그룹 이름은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-523">The comparison of `name` with the group name is case-sensitive.</span></span> <span data-ttu-id="50409-524">경우 `name` 해당 하지 않는 캡처링 그룹의 이름 또는 메서드를 캡처 그룹의 숫자의 문자열 표현을-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-524">If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-525">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-525">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteMatchTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-526">패턴 일치 작업의 시간이 초과되지 않도록 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-526">Specifies that a pattern-matching operation should not time out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-527"><xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 클래스 생성자 및 다양 한 일치 하는 정적 메서드 사용은 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 패턴 일치를 찾으려고 시도 시간 제한이 없어야 함을 나타내려면 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-527">The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="50409-528">정규식 엔진의 제한 시간 값을 설정 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 정규식 패턴과 거의 일치 하는 텍스트를 처리할 때 응답 하지 않을에 과도 한 역 추적을 사용 하는 정규식이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-528">Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="50409-529">제한 시간을 비활성화 하면 과도 한 역 추적이 정규식을 사용 하 여 정규식 패턴과 거의 일치 하는 텍스트를 처리 하는 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-529">If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.</span></span>  
>   
>  <span data-ttu-id="50409-530">역 추적을 처리 하는 방법에 대 한 자세한 내용은 참조 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-530">For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="50409-531"><xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 상수 값으로 제공 될 수 있습니다는 `matchTimeout` 멤버의 인수:</span><span class="sxs-lookup"><span data-stu-id="50409-531">The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeReferences ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeReferences();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-532">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-532">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="50409-533">참조가 이미 초기화된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-533">References have already been initialized.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Friend internalMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="protected public: TimeSpan internalMatchTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-534">작업 시간이 초과되기 전에 패턴 일치 작업에서 경과될 수 있는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-534">The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-535">정규식이 입력 문자열에서 일치하는 항목을 찾을 것인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-535">Indicates whether the regular expression finds a match in the input string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-536">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-536">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-537">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-537">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in a specified input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-538">정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-538">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-539"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드는 문자열의 유효성을 검사 하거나 후속 조작에 대 한 해당 문자열을 검색 하지 않고 문자열이 특정 패턴을 준수 하는지 확인 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-539">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="50409-540">하나 이상의 문자열 정규식 패턴과 일치 하 고 후속 조작, 호출에 대 한 다음 검색 하 지 확인 하려는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A> 또는 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-540">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="50409-541"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-541">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-542">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-542">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-543">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-543">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-544">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 메서드를 문자열로 유효한 부품 번호 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-544">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="50409-545">정규식 부품 번호 세 개의 하이픈으로 구분 된 문자 집합으로 구성 된 특정 형식을에 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-545">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="50409-546">뒤에 두 개의 숫자 문자가 영숫자 문자로 이어지는 영숫자 문자 4 자 하는 첫 번째 집합을 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-546">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-547">3 자로 구성 된 두 번째 집합은 숫자 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-547">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="50409-548">4 자로 구성 된 세 번째 집합에는 세 자리 숫자로 영숫자 문자로 이어지는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-548">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  
  
 <span data-ttu-id="50409-549">정규식 패턴은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-549">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="50409-550">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-550">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-551">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-551">Pattern</span></span>|<span data-ttu-id="50409-552">설명</span><span class="sxs-lookup"><span data-stu-id="50409-552">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-553">줄의 시작 부분에서 일치 항목 찾기를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-553">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-554">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-554">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="50409-555">두 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-555">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-556">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-556">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="50409-557">하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-557">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="50409-558">정확히 세 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-558">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="50409-559">세 자리 숫자로, 하이픈과 찾아이 패턴의 두 일치 항목 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-559">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-560">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-560">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="50409-561">줄의 끝에서 검색을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-561">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-562">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-562">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-563">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-563">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-564">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-564">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String, startat As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-565">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-565">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-566">검색을 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-566">The character position at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-567">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식이 지정된 입력 문자열의 지정된 시작 위치에서부터 일치하는 항목을 찾을 것인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-567">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-568">정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-568">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-569"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드는 문자열의 유효성을 검사 하거나 후속 조작에 대 한 해당 문자열을 검색 하지 않고 문자열이 특정 패턴을 준수 하는지 확인 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-569">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="50409-570">하나 이상의 문자열 정규식 패턴과 일치 하 고 후속 조작, 호출에 대 한 다음 검색 하 지 확인 하려는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A> 또는 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-570">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="50409-571"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-571">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-572">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-572">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-573">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-573">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-574">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> 메서드를 문자열로 유효한 부품 번호 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-574">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="50409-575">문자열의 콜론 (:) 문자 뒤에 포함 된 부품 번호를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-575">It searches for a part number that follows a colon (:) character in a string.</span></span> <span data-ttu-id="50409-576"><xref:System.String.IndexOf%28System.Char%29> 메서드에 전달 되는 콜론 문자 위치를 결정 하기를 사용 하는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-576">The <xref:System.String.IndexOf%28System.Char%29> method is used to determine the position of the colon character, which is then passed to the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="50409-577">정규식 부품 번호 세 개의 하이픈으로 구분 된 문자 집합으로 구성 된 특정 형식을에 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-577">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="50409-578">뒤에 두 개의 숫자 문자가 영숫자 문자로 이어지는 영숫자 문자 4 자 하는 첫 번째 집합을 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-578">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-579">3 자로 구성 된 두 번째 집합은 숫자 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-579">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="50409-580">4 자로 구성 된 세 번째 집합에는 세 자리 숫자로 영숫자 문자로 이어지는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-580">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  
  
 <span data-ttu-id="50409-581">정규식 패턴은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-581">The regular expression pattern is:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="50409-582">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-582">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-583">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-583">Pattern</span></span>|<span data-ttu-id="50409-584">설명</span><span class="sxs-lookup"><span data-stu-id="50409-584">Description</span></span>|  
|-------------|-----------------|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-585">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-585">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="50409-586">두 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-586">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-587">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-587">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="50409-588">하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-588">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="50409-589">정확히 세 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-589">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="50409-590">세 자리 숫자로, 하이픈과 찾아이 패턴의 두 일치 항목 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-590">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-591">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-591">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="50409-592">줄의 끝에서 검색을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-592">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-593">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-593">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-594">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-594">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-595">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-595">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-596">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-596">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-597">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-597">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-598">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-598">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-599">지정된 정규식이 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-599">Indicates whether the specified regular expression finds a match in the specified input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-600">정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-600">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-601"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드는 문자열의 유효성을 검사 하거나 후속 조작에 대 한 해당 문자열을 검색 하지 않고 문자열이 특정 패턴을 준수 하는지 확인 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-601">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="50409-602">하나 이상의 문자열 정규식 패턴과 일치 하 고 후속 조작, 호출에 대 한 다음 검색 하 지 확인 하려는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A> 또는 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-602">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="50409-603">정적 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 로 지정 된 정규식 패턴으로 개체 `pattern` 호출는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 인스턴스 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-603">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="50409-604">이 정규식 패턴은 정규식 엔진에 의해 신속 하 게 검색을 위해 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-604">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="50409-605">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-605">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-606">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-606">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-607"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-607">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-608">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-608">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-609">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> 메서드를 문자열로 유효한 부품 번호 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-609">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="50409-610">정규식 부품 번호 세 개의 하이픈으로 구분 된 문자 집합으로 구성 된 특정 형식을에 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-610">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="50409-611">뒤에 두 개의 숫자 문자가 영숫자 문자로 이어지는 영숫자 문자 4 자 하는 첫 번째 집합을 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-611">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-612">3 자로 구성 된 두 번째 집합은 숫자 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-612">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="50409-613">4 자로 구성 된 세 번째 집합에는 세 자리 숫자로 영숫자 문자로 이어지는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-613">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  
  
 <span data-ttu-id="50409-614">정규식 패턴은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-614">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="50409-615">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-615">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-616">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-616">Pattern</span></span>|<span data-ttu-id="50409-617">설명</span><span class="sxs-lookup"><span data-stu-id="50409-617">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-618">줄의 시작 부분에서 일치 항목 찾기를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-618">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-619">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-619">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="50409-620">두 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-620">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-621">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-621">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="50409-622">하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-622">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="50409-623">정확히 세 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-623">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="50409-624">세 자리 숫자로, 하이픈과 찾아이 패턴의 두 일치 항목 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-624">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="50409-625">일치는 단일 영문자 (`a` 통해 `z` 또는 `A` 통해 `Z`) 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-625">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="50409-626">줄의 끝에서 검색을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-626">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-627">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-627">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-628">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-628">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-629">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-629">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-630">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-630">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-631">
            <para>이 메서드가 제한 시간 초과 후 메서드가 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 확인 하는 데 권장 되는 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-631">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-632">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-632">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-633">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-633">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-634">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-634">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-635">지정된 정규식이 지정된 일치 옵션을 사용하여 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-635">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-636">정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-636">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-637"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드는 문자열의 유효성을 검사 하거나 후속 조작에 대 한 해당 문자열을 검색 하지 않고 문자열이 특정 패턴을 준수 하는지 확인 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-637">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="50409-638">하나 이상의 문자열 정규식 패턴과 일치 하 고 후속 조작, 호출에 대 한 다음 검색 하 지 확인 하려는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A> 또는 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-638">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="50409-639">정적 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 로 지정 된 정규식 패턴으로 개체 `pattern` 및로 지정 된 정규식 옵션이 `options` 호출의 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 인스턴스 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-639">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="50409-640">이 정규식 패턴은 정규식 엔진에 의해 신속 하 게 검색을 위해 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-640">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="50409-641">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-641">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-642">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-642">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-643"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-643">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-644">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-644">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-645">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> 메서드를 문자열로 유효한 부품 번호 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-645">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="50409-646">정규식 부품 번호 세 개의 하이픈으로 구분 된 문자 집합으로 구성 된 특정 형식을에 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-646">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="50409-647">뒤에 두 개의 숫자 문자가 영숫자 문자로 이어지는 영숫자 문자 4 자 하는 첫 번째 집합을 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-647">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-648">3 자로 구성 된 두 번째 집합은 숫자 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-648">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="50409-649">4 자로 구성 된 세 번째 집합에는 세 자리 숫자로 영숫자 문자로 이어지는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-649">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  
  
 <span data-ttu-id="50409-650">정규식 패턴은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-650">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="50409-651">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-651">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-652">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-652">Pattern</span></span>|<span data-ttu-id="50409-653">설명</span><span class="sxs-lookup"><span data-stu-id="50409-653">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-654">문자열의 시작 부분에서 검색을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-654">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-655">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-655">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="50409-656">두 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-656">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-657">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-657">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="50409-658">하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-658">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="50409-659">정확히 세 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-659">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="50409-660">세 자리 숫자로, 하이픈과 찾아이 패턴의 두 개의 일치 항목...</span><span class="sxs-lookup"><span data-stu-id="50409-660">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern..</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-661">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-661">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="50409-662">문자열의 끝 부분에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-662">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="50409-663">호출는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 사용 하 여 메서드는 `options` 매개 변수 설정 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> 다음 정규식을 정의 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-663">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="50409-664">반면에 대 한 예제를 참조 하십시오.는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-664">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-665">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-665">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-666">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-666">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-667">
            <paramref name="options" />은 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-667">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-668">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-668">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-669">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-669">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-670">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 확인 하는 데 권장 되는 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-670">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-671">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-671">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-672">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-672">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-673">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-673">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-674">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-674">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-675">지정된 정규식이 지정된 일치 옵션 및 시간 제한 간격을 사용하여 지정된 입력 문자열에서 일치하는 항목을 찾을 것인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-675">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-676">정규식에서 일치하는 항목을 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-676">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-677"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 메서드는 문자열의 유효성을 검사 하거나 후속 조작에 대 한 해당 문자열을 검색 하지 않고 문자열이 특정 패턴을 준수 하는지 확인 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-677">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="50409-678">하나 이상의 문자열 정규식 패턴과 일치 하 고 후속 조작, 호출에 대 한 다음 검색 하 지 확인 하려는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A> 또는 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-678">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="50409-679">정적 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 로 지정 된 정규식 패턴으로 개체 `pattern` 및로 지정 된 정규식 옵션이 `options` 호출의 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 인스턴스 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-679">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="50409-680">이 정규식 패턴은 정규식 엔진에 의해 신속 하 게 검색을 위해 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-680">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="50409-681">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-681">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-682">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-682">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-683">`matchTimeout` 매개 변수 지정 긴 패턴 일치 하는 방법을 메서드 시간이 초과 되기 전에 일치를 찾으려고 시도 합니다. 입력을 처리 하는 경우 응답을 중지 하 게 표시 되지 않도록 과도 한 역 추적을 사용 하는 정규식 시간 제한 간격을 설정 하면 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-683">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-684">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-684">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-685">일치 항목이 없으면 해당 시간 간격에서 발견 되 면 경우에 메서드에서 throw 된 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-685">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-686">`matchTimeout` 메서드가 실행 되는 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-686">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-687">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드를 문자열로 유효한 부품 번호 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-687">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="50409-688">정규식 부품 번호 세 개의 하이픈으로 구분 된 문자 집합으로 구성 된 특정 형식을에 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-688">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="50409-689">뒤에 두 개의 숫자 문자가 영숫자 문자로 이어지는 영숫자 문자 4 자 하는 첫 번째 집합을 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-689">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-690">3 자로 구성 된 두 번째 집합은 숫자 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-690">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="50409-691">4 자로 구성 된 세 번째 집합에는 세 자리 숫자로 영숫자 문자로 이어지는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-691">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="50409-692">정규식 패턴과 일치 하는 최소를 검색 하는 입력된 문자열에서 500 밀리초의 시간 제한 간격을 설정 하는 메서드가 있으므로 참여 시켜야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-692">Matching the regular expression pattern should involve minimal searching through the input string, so the method sets a time-out interval of 500 milliseconds.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  
  
 <span data-ttu-id="50409-693">정규식 패턴은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-693">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="50409-694">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-694">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-695">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-695">Pattern</span></span>|<span data-ttu-id="50409-696">설명</span><span class="sxs-lookup"><span data-stu-id="50409-696">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-697">문자열의 시작 부분에서 검색을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-697">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-698">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-698">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="50409-699">두 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-699">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-700">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-700">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="50409-701">하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-701">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="50409-702">정확히 세 개의 숫자 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-702">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="50409-703">세 자리 숫자로, 하이픈과 찾아이 패턴의 두 일치 항목 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-703">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="50409-704">단일 문자와 일치 `A` 통해 `Z`, 문자 또는 숫자 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-704">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="50409-705">문자열의 끝 부분에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-705">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="50409-706">호출는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 사용 하 여 메서드는 `options` 매개 변수 설정 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> 다음 정규식을 정의 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-706">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="50409-707">반면에 대 한 예제를 참조 하십시오.는 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-707">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-708">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-708">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-709">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-709">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-710">
            <paramref name="options" />은 유효한 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-710">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
          <span data-ttu-id="50409-711">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-711">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-712">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-712">A time-out occurred.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-713">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-713">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-714">입력 문자열에서 정규식 패턴과 일치하는 부분 문자열을 검색하고 맨 처음 발견되는 항목을 단일 <see cref="T:System.Text.RegularExpressions.Match" /> 개체로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-714">Searches an input string for a substring that matches a regular expression pattern and returns the first occurrence as a single <see cref="T:System.Text.RegularExpressions.Match" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-715">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-715">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-716">지정된 입력 문자열에서 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 지정된 정규식의 처음 발견되는 항목을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-716">Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-717">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-717">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-718"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드는 입력된 문자열에서 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-718">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="50409-719">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-719">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-720">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-720">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-721">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-721">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-722">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-722">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-723">이 메서드가 반환에 첫 번째 하위 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-723">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-724">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-724">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50409-725">호출 하 여 단일 메서드 호출에서 모든 일치 항목을 검색할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-725">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-726"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-726">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-727">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-727">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-728">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-728">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-729">다음 예제에서는 정규식 패턴 일치 문자열에서 다음 일치 나열 그룹, 캡처 및 캡처 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-729">The following example finds regular expression pattern matches in a string, then lists the matched groups, captures, and capture positions.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 <span data-ttu-id="50409-730">정규식 패턴 `(\w+)\s+(car)` 함께 앞에 오는 단어 "car" 라는 단어와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-730">The regular expression pattern `(\w+)\s+(car)` matches occurrences of the word "car" along with the word that precedes it.</span></span> <span data-ttu-id="50409-731">다음 표에 나와 있는 것 처럼 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-731">It is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-732">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-732">Pattern</span></span>|<span data-ttu-id="50409-733">설명</span><span class="sxs-lookup"><span data-stu-id="50409-733">Description</span></span>|  
|-------------|-----------------|  
|`(\w+)`|<span data-ttu-id="50409-734">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-734">Match one or more word characters.</span></span> <span data-ttu-id="50409-735">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-735">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="50409-736">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-736">Match one or more white-space characters.</span></span>|  
|<span data-ttu-id="50409-737">(자동차)</span><span class="sxs-lookup"><span data-stu-id="50409-737">(car)</span></span>|<span data-ttu-id="50409-738">리터럴 문자열 "car"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-738">Match the literal string "car".</span></span> <span data-ttu-id="50409-739">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-739">This is the second capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-740">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-740">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-741">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-741">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-742">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-742">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, startat As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-743">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-743">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-744">검색을 시작할 문자 위치(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-744">The zero-based character position at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-745">문자열의 지정된 시작 위치에서 시작하여 입력 문자열에서 처음 발견되는 정규식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-745">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-746">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-746">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-747"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> 또는 후에 시작 하는 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 하는 메서드는 `startat` 문자 입력된 문자열에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-747">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string.</span></span> <span data-ttu-id="50409-748">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-748">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-749">정규식 패턴을는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> 메서드 검색 중 하나를 호출 하 여 정의 된는 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-749">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="50409-750">정규식 패턴을 만들 수 있는 요소에 대 한 자세한 내용은 참조 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-750">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-751">사용 하 여 필요에 따라 문자열의 시작 위치를 지정할 수는 `startat` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-751">You can optionally specify a starting position in the string by using the `startat` parameter.</span></span> <span data-ttu-id="50409-752">정규식 엔진은 왼쪽에서 오른쪽 (기본값) 구문 분석 하는 경우의 일치 및 검색은 이동, 패턴에 지정 된 문자에서 시작 `startat`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-752">When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`.</span></span> <span data-ttu-id="50409-753">오른쪽에서 왼쪽으로 정규식 엔진은 구문 분석할 때 (사용 하 여 정규식 패턴은 생성 하는 경우는 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> 옵션), 일치 및 검색 반대 방향으로 이동 하 고에서 문자로 시작 `startat` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-753">When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option), the match and scan move in the opposite direction and begin with the character at `startat` -1.</span></span> <span data-ttu-id="50409-754">시작 위치를 지정 하지 않으면 기본에서 검색이 시작 `startat` 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-754">If you do not specify a starting position, the search begins at the default `startat` position.</span></span> <span data-ttu-id="50409-755">정규식이 왼쪽에서 오른쪽, 기본 검색 하는 경우 `startat` 위치가의 왼쪽된 끝에 있는 `input`오른쪽에서으로 검색 하는 경우, 왼쪽, 기본 `startat` 위치가의 오른쪽 끝에 있는 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-755">If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.</span></span>  
  
 <span data-ttu-id="50409-756">문자열에 특정 문자 위치에서 시작 하 고 정규식 엔진은 일치 하는 항목에 대 한 문자열의 나머지를 검색 하지 않게 되도록 일치 하는 항목을 제한 하려는 경우 고정 정규식과는 `\G` (왼쪽-오른쪽에는 왼쪽에 패턴 또는 오른쪽에서 왼쪽 패턴에 대 한 오른쪽에).</span><span class="sxs-lookup"><span data-stu-id="50409-756">If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern).</span></span> <span data-ttu-id="50409-757">시작 해야 하므로이 일치 하는 경우 제한 `startat`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-757">This restricts the match so it must start exactly at `startat`.</span></span>  
  
 <span data-ttu-id="50409-758">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-758">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-759">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-759">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-760">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-760">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-761">이 메서드가 반환 후에 발견 된 첫 번째 부분 문자열의 `startat` 에서 문자 위치 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-761">This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-762">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-762">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50409-763">호출 하 여 단일 메서드 호출에서 모든 일치 항목을 검색할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-763">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-764"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-764">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-765">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대 한 제한 시간 값 설정 된 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-765">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-766">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-766">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-767">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-767">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-768">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-768">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-769">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-769">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-770">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-770">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-771">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-771">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-772">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-772">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-773">지정된 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-773">Searches the specified input string for the first occurrence of the specified regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-774">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-774">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-775"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 메서드는 입력된 문자열에서 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-775">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="50409-776">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-776">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-777">정적 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 지정 된 정규식 패턴으로 개체를 호출 하는 인스턴스 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-777">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span> <span data-ttu-id="50409-778">이 경우 정규식 엔진이 정규식 패턴을 캐시합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-778">In this case, the regular expression engine caches the regular expression pattern.</span></span>  
  
 <span data-ttu-id="50409-779">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-779">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-780">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-780">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-781">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-781">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-782">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-782">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-783">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-783">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-784">이 메서드가 반환에 첫 번째 하위 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-784">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-785">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-785">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="50409-786">호출 하 여 단일 메서드 호출에서 모든 일치 항목을 검색할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-786">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-787"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-787">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-788">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-788">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-789">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 하나 이상 포함 된 첫 번째 단어를 찾는 메서드 `z` 문자를 차례로 호출은 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드 추가 일치 항목을 찾을를 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-789">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method to find the first word that contains at least one `z` character, and then calls the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method to find any additional matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  
  
 <span data-ttu-id="50409-790">정규식 패턴 `\b\w*z+\w*\b`는 다음 테이블과 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-790">The regular expression pattern `\b\w*z+\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-791">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-791">Pattern</span></span>|<span data-ttu-id="50409-792">설명</span><span class="sxs-lookup"><span data-stu-id="50409-792">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-793">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-793">Begin the match at a word boundary.</span></span>|  
|`\w*`|<span data-ttu-id="50409-794">0 개 또는 하나 이상의 단어 문자가 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-794">Match zero, one, or more word characters.</span></span>|  
|`z+`|<span data-ttu-id="50409-795">하나 이상의 일치는 `z` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-795">Match one or more occurrences of the `z` character.</span></span>|  
|`\w*`|<span data-ttu-id="50409-796">0 개 또는 하나 이상의 단어 문자가 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-796">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="50409-797">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-797">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-798">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-798">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-799">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-799">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-800">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-800">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-801">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-801">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-802">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 검색 하기 위한 권장된 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-802">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, beginning As Integer, length As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int beginning, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-803">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-803">The string to search for a match.</span>
          </span>
        </param>
        <param name="beginning">
          <span data-ttu-id="50409-804">검색되는 가장 왼쪽 지점을 정의하는 입력 문자열의 0부터 시작하는 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-804">The zero-based character position in the input string that defines the leftmost position to be searched.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="50409-805">검색에 포함시킬 부분 문자열의 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-805">The number of characters in the substring to include in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-806">지정된 시작 위치에서 시작하고 지정된 수의 문자만 검색하여 입력 문자열에서 첫 번째 정규식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-806">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-807">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-807">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-808"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드 입력된 문자열의 일부에서 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-808">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string.</span></span> <span data-ttu-id="50409-809">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-809">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-810">정규식 패턴을는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드 검색 중 하나를 호출 하 여 정의 된는 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-810">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="50409-811">정규식 패턴을 만들 수 있는 요소에 대 한 자세한 내용은 참조 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-811">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-812"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드 검색의 부분 `input` 정의한는 `beginning` 및 `length` 정규식 패턴에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-812">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern.</span></span> <span data-ttu-id="50409-813">`beginning` 항상는 검색에 포함할 가장 왼쪽 문자의 인덱스를 정의 하 고 `length` 검색할 문자의 최대 수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-813">`beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search.</span></span> <span data-ttu-id="50409-814">함께 검색의 범위를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-814">Together, they define the range of the search.</span></span> <span data-ttu-id="50409-815">정규식 엔진은 검색 인덱스에 있는 문자가에서 검색이 왼쪽에서 오른쪽 (기본값) 계속 진행 하는 경우 `beginning` 인덱스에 있는 문자에 `beginning`  +  `length` – 1입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-815">If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1.</span></span> <span data-ttu-id="50409-816">사용 하 여 정규식 엔진은 인스턴스화할 경우는 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> 옵션을 왼쪽으로 정규식 엔진 검색 인덱스에 있는 문자를 오른쪽에서 검색이 진행 됩니다 `beginning`  +  `length` – 1에 인덱스에 문자 `beginning`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-816">If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`.</span></span> <span data-ttu-id="50409-817">이 메서드는이 범위 내에서 발견 된 첫 번째 일치 항목을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-817">This method returns the first match that it finds within this range.</span></span> <span data-ttu-id="50409-818">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-818">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-819">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-819">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-820">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-820">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-821">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-821">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-822"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-822">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-823">생성자를 호출 하는 경우에 제한 시간 값을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-823">If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-824">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-824">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-825">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-825">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-826">
            <paramref name="beginning" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-826">
              <paramref name="beginning" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
          <span data-ttu-id="50409-827">-또는-  <paramref name="length" />가 0보다 작거나 <paramref name="input" />의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-827">-or-  <paramref name="length" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
          <span data-ttu-id="50409-828">-또는-  <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" />은 <paramref name="input" /> 범위를 벗어나는 위치를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-828">-or-  <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" /> identifies a position that is outside the range of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-829">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-829">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-830">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-830">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-831">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-831">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-832">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-832">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-833">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-833">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-834">지정된 일치 옵션을 사용하여 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-834">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-835">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-835">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-836"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드는 입력된 문자열에서 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-836">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="50409-837">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-837">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-838">정적 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 개체는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 생성자와 인스턴스 호출 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-838">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="50409-839">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-839">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-840">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-840">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-841">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-841">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-842">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-842">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-843">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-843">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-844">이 메서드가 반환에 첫 번째 하위 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-844">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-845">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-845">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="50409-846">호출 하 여 단일 메서드 호출에서 모든 일치 항목을 검색할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-846">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-847"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 일치 하는 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-847">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-848">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-848">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-849">문자로 시작 하는 단어와 일치 하는 정규식을 정의 하는 다음 예제에서는 "a"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-849">The following example defines a regular expression that matches words beginning with the letter "a".</span></span> <span data-ttu-id="50409-850">사용 하 여는 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> 정규식 "a"와 소문자 대문자는로 시작 단어 둔다는 하려면 옵션을 "a"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-850">It uses the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> option to ensure that the regular expression locates words beginning with both an uppercase "a" and a lowercase "a".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  
  
 <span data-ttu-id="50409-851">정규식 패턴 `\ba\w*\b`는 다음 테이블과 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-851">The regular expression pattern `\ba\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-852">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-852">Pattern</span></span>|<span data-ttu-id="50409-853">설명</span><span class="sxs-lookup"><span data-stu-id="50409-853">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-854">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-854">Begin the match at a word boundary.</span></span>|  
|`a`|<span data-ttu-id="50409-855">문자 "a"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-855">Match the character "a".</span></span>|  
|`\w*`|<span data-ttu-id="50409-856">0 개 또는 하나 이상의 단어 문자가 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-856">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="50409-857">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-857">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-858">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-858">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-859">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-859">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-860">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-860">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-861">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-861">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-862">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-862">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-863">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 검색 하기 위한 권장된 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-863">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-864">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-864">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-865">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-865">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-866">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-866">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-867">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-867">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-868">지정된 일치 옵션 및 제한 시간 간격을 사용하여 입력 문자열에서 첫 번째 지정된 정규식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-868">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-869">일치에 대한 정보가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-869">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-870"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드는 입력된 문자열에서 정규식 패턴과 일치 하는 첫 번째 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-870">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="50409-871">정규식 패턴을 작성 하는 데 언어 요소에 대 한 정보를 참조 하십시오. [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-871">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-872">정적 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 생성 하는 것과 같습니다는 <xref:System.Text.RegularExpressions.Regex> 개체는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 생성자와 인스턴스 호출 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-872">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="50409-873">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-873">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-874">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-874">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-875">정규식 패턴의 반환 된 값을 확인 하 여 입력된 문자열에서 발견 되었는지 여부를 확인 하기 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-875">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="50409-876">일치 하는 항목이 없는 경우 반환 된 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에서 부분 문자열이 포함 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-876">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-877">일치 하는 항목이 있는 경우 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-877">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="50409-878">이 메서드가 반환에 첫 번째 하위 `input` 정규식 패턴과 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-878">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="50409-879">반복 해 서 반환 된를 호출 하 여 후속 일치 항목을 검색할 수 있습니다 <xref:System.Text.RegularExpressions.Match> 개체의 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-879">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="50409-880">호출 하 여 단일 메서드 호출에서 모든 일치 항목을 검색할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-880">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="50409-881">`matchTimeout` 매개 변수 지정 긴 패턴 일치 하는 방법을 메서드 시간이 초과 되기 전에 일치를 찾으려고 시도 합니다. 입력을 처리 하는 경우 응답을 중지 하 게 표시 되지 않도록 과도 한 역 추적을 사용 하는 정규식 시간 제한 간격을 설정 하면 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-881">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-882">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-882">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-883">일치 항목이 없으면 해당 시간 간격에서 발견 되 면 경우에 메서드에서 throw 된 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-883">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-884">`matchTimeout` 메서드가 실행 되는 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-884">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-885">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-885">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-886">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-886">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-887">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-887">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="50409-888">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-888">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-889">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-889">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-890">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-890">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-891">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-891">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-892">입력 문자열에 있는 정규식을 모두 검색하고 일치 항목을 모두 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-892">Searches an input string for all occurrences of a regular expression and returns all the matches.</span>
          </span>
        </summary>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-893">
            <para>일치 시도 호출 하 여 반복 되는 경우는 <see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> 메서드, 정규식 엔진이 제공 빈 일치 항목 특별 하 게 처리 합니다. 일반적으로 정규식 엔진은 정확 하 게 이전 일치 항목 종료 한 위치에 관계 없이 다음 일치 항목에 대 한 검색을 시작 합니다. 그러나 빈 일치, 정규식 엔진은 일치 하는 다음을 시도 하기 전에 한 글자씩 이동 합니다. 이러한 동작은 보장 정규식 엔진이 문자열을 통해 진행 됩니다. 그렇지 않으면 빈 일치 하는 모든 앞으로 이동 되지 않습니다, 때문에 다음 일치 항목 정확히 이전 일치 항목으로 같은 위치에서 시작 및 찾게 동일한 빈 문자열입니다.  다음 예제에서는 정규식 패턴에서에서 <c>는 \*</c> 문자의 0 개 이상의 항목을 검색 "abaabb" 문자열에 "a"입니다. 결과 예제에서 출력으로 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 개체에 포함 되어 6 <see cref="T:System.Text.RegularExpressions.Match" /> 개체입니다. 첫 번째 일치 시도가 찾은 첫 번째 "a"입니다. 정확 하 게 첫 번째 검사가 첫 번째 b; 앞에 끝에서 두 번째 검사를 시작 "a"의 0 항목을 찾아서 빈 문자열을 반환 합니다. 빈 문자열을 반환 하기 때문에 세 번째 일치는 정확 하 게 두 번째 일치 항목 찾기가 종료 된 위치, 시작 되지 않습니다. 대신, 첫 번째 "b" 후 나중에, 한 문자를 시작합니다. 세 번째 일치 하는 "a"의 두 일치 항목을 찾아 "aa"를 반환 합니다. 네 번째 일치 시도가 다음에 세 번째 검사에서 나옵니다, 앞의 두 번째 "b", 빈 문자열을 반환 합니다. 다섯 번째 일치 시도가 다시 진행 한 문자 "b" 세 번째 하기 전에 시작 하 고 빈 문자열을 반환 합니다. 여섯 번째 일치 하는 마지막 "b" 다음에 시작 하 고 빈 문자열을 다시 반환 합니다.  [! code-csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)] [! code-vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-893">
              <para>When a match attempt is repeated by calling the <see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> method, the regular expression engine gives empty matches special treatment. Usually, the regular expression engine begins the search for the next match exactly where the previous match left off. However, after an empty match, the regular expression engine advances by one character before trying the next match. This behavior guarantees that the regular expression engine will progress through the string. Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.  In the following example, the regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb". As the output from the example shows, the resulting <see cref="T:System.Text.RegularExpressions.MatchCollection" /> object contains six <see cref="T:System.Text.RegularExpressions.Match" /> objects. The first match attempt finds the first "a". The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string. The third match does not begin exactly where the second match ended, because the second match returned an empty string. Instead, it begins one character later, after the first "b". The third match finds two occurrences of "a" and returns "aa". The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string. The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string. The sixth match begins after the last "b" and returns an empty string again.  [!code-csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)] [!code-vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-894">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-894">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-895">지정된 입력 문자열에 있는 정규식을 모두 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-895">Searches the specified input string for all occurrences of a regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-896">검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-896">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="50409-897">일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-897">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-898"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> 메서드는 비슷합니다는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 단일 일치 항목 대신 입력된 문자열에서 모든 일치 항목에 대 한 정보를 반환 한다는 점을 제외 하 고 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-898">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="50409-899">다음 코드를 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-899">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 <span data-ttu-id="50409-900">컬렉션 일치만을 포함 하 고 첫 번째 비-일치에 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-900">The collection includes only matches and terminates at the first non-match.</span></span>  
  
 <span data-ttu-id="50409-901">정규식 패턴을는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> 메서드 검색 중 하나를 호출 하 여 정의 된는 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-901">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="50409-902">정규식 패턴을 만들 수 있는 요소에 대 한 자세한 내용은 참조 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-902">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-903"><xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 지연 평가 사용 하 여 반환 된 채우는 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-903">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="50409-904">이 컬렉션의 멤버와 같은 액세스 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> 경우 컬렉션을 즉시 채워야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-904">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="50409-905">지연 계산을 이용 하려면와 같은 구문을 사용 하 여 컬렉션을 반복 해야 하면 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="50409-905">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="50409-906">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="50409-906">in Visual Basic.</span></span>  
  
 <span data-ttu-id="50409-907">해당 지연 계산 때문에 호출 된 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> 메서드 throw 하지 않습니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-907">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-908">그러나에서 작업이 수행 될 때 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.MatchCollection> 경우이 메서드에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> 속성은 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> 하는 작업이 시간 제한 간격을 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-908">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-909">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> "es"로 끝나는 문장에서 단어를 식별 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-909">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method to identify any words in a sentence that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  
  
 <span data-ttu-id="50409-910">정규식 패턴 `\b\w+es\b`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-910">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-911">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-911">Pattern</span></span>|<span data-ttu-id="50409-912">설명</span><span class="sxs-lookup"><span data-stu-id="50409-912">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-913">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-913">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="50409-914">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-914">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="50409-915">리터럴 문자열 "es"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-915">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="50409-916">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-916">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-917">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-917">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String, startat As Integer) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-918">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-918">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-919">입력 문자열에서 검색을 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-919">The character position in the input string at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-920">문자열의 지정된 시작 위치에서 시작하여 지정된 입력 문자열에 있는 정규식을 모두 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-920">Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-921">검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-921">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="50409-922">일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-922">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-923"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> 메서드는 비슷합니다는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> 단일 일치 항목 대신 입력된 문자열에서 모든 일치 항목에 대 한 정보를 반환 한다는 점을 제외 하 고 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-923">The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="50409-924">다음 코드를 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-924">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 <span data-ttu-id="50409-925">정규식 패턴을는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> 메서드 검색 중 하나를 호출 하 여 정의 된는 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-925">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="50409-926">정규식 패턴을 만들 수 있는 요소에 대 한 자세한 내용은 참조 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-926">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-927"><xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 지연 평가 사용 하 여 반환 된 채우는 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-927">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="50409-928">이 컬렉션의 멤버와 같은 액세스 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> 경우 컬렉션을 즉시 채워야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-928">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="50409-929">지연 계산을 이용 하려면와 같은 구문을 사용 하 여 컬렉션을 반복 해야 하면 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="50409-929">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="50409-930">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="50409-930">in Visual Basic.</span></span>  
  
 <span data-ttu-id="50409-931">해당 지연 계산 때문에 호출 된 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> 메서드 throw 하지 않습니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-931">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-932">그러나 작업에서 수행 될 때 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.MatchCollection> 경우이 메서드에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> 속성은 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> 하는 작업이 제한 시간 간격을 초과 하 고...</span><span class="sxs-lookup"><span data-stu-id="50409-932">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval..</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-933">사용 하 여 다음 예제는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드를 "es"을 찾아 다음 호출 문장의 첫 번째 단어는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> "es"로 끝나는 다른 단어를 식별 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-933">The following example uses the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to find the first word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method to identify any additional words that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  
  
 <span data-ttu-id="50409-934">정규식 패턴 `\b\w+es\b`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-934">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-935">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-935">Pattern</span></span>|<span data-ttu-id="50409-936">설명</span><span class="sxs-lookup"><span data-stu-id="50409-936">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-937">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-937">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="50409-938">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-938">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="50409-939">리터럴 문자열 "es"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-939">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="50409-940">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-940">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-941">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-941">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-942">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-942">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-943">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-943">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-944">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-944">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-945">지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-945">Searches the specified input string for all occurrences of a specified regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-946">검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-946">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="50409-947">일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-947">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-948"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 메서드는 비슷합니다는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 단일 일치 항목 대신 입력된 문자열에서 모든 일치 항목에 대 한 정보를 반환 한다는 점을 제외 하 고 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-948">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="50409-949">다음 코드를 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-949">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 <span data-ttu-id="50409-950">정적 `Matches` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Matches`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-950">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="50409-951">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-951">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-952">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-952">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-953"><xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 지연 평가 사용 하 여 반환 된 채우는 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-953">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="50409-954">이 컬렉션의 멤버와 같은 액세스 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> 경우 컬렉션을 즉시 채워야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-954">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="50409-955">지연 계산을 이용 하려면와 같은 구문을 사용 하 여 컬렉션을 반복 해야 하면 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="50409-955">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="50409-956">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="50409-956">in Visual Basic.</span></span>  
  
 <span data-ttu-id="50409-957">해당 지연 계산 때문에 호출 된 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 메서드 throw 하지 않습니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-957">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-958">그러나 작업에서 수행 될 때 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.MatchCollection> 시간 제한 간격을 현재 응용 프로그램 도메인 및 일치 작업의 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 의해 정의 된 경우이 메서드에서 반환 된 개체 이 시간 제한 간격을 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-958">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-959">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 메서드 "es"로 끝나는 문장에서 모든 단어를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-959">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  
  
 <span data-ttu-id="50409-960">정규식 패턴 `\b\w+es\b`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-960">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-961">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-961">Pattern</span></span>|<span data-ttu-id="50409-962">설명</span><span class="sxs-lookup"><span data-stu-id="50409-962">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-963">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-963">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="50409-964">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-964">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="50409-965">리터럴 문자열 "es"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-965">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="50409-966">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-966">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-967">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-967">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-968">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-968">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-969">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 권장 되는 정적 방법 일치 여러 패턴을 검색 하는 <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 지정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-969">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you specify the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-970">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-970">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-971">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-971">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-972">일치 옵션을 지정하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-972">A bitwise combination of the enumeration values that specify options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-973">지정된 일치 옵션을 사용하여 지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-973">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-974">검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-974">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="50409-975">일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-975">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-976"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드는 비슷합니다는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 단일 일치 항목 대신 입력된 문자열에서 모든 일치 항목에 대 한 정보를 반환 한다는 점을 제외 하 고 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-976">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="50409-977">다음 코드를 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-977">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 <span data-ttu-id="50409-978">정적 `Matches` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Matches`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-978">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="50409-979">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-979">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-980">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-980">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-981"><xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 지연 평가 사용 하 여 반환 된 채우는 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-981">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="50409-982">이 컬렉션의 멤버와 같은 액세스 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> 경우 컬렉션을 즉시 채워야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-982">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="50409-983">지연 계산을 이용 하려면와 같은 구문을 사용 하 여 컬렉션을 반복 해야 하면 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="50409-983">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="50409-984">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="50409-984">in Visual Basic.</span></span>  
  
 <span data-ttu-id="50409-985">해당 지연 계산 때문에 호출 된 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 메서드 throw 하지 않습니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-985">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-986">그러나 작업에서 수행 될 때 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.MatchCollection> 시간 제한 간격을 현재 응용 프로그램 도메인 및 일치 작업의 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 의해 정의 된 경우이 메서드에서 반환 된 개체 이 시간 제한 간격을 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-986">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-987">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 문장의 "es"로 끝나고 다음 호출 하는 모든 단어를 식별 하는 메서드는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드는 입력 문자열 패턴의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-987">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="50409-988">출력에서 볼 수 있듯이 두 메서드는 다른 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-988">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  
  
 <span data-ttu-id="50409-989">정규식 패턴 `\b\w+es\b`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-989">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-990">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-990">Pattern</span></span>|<span data-ttu-id="50409-991">설명</span><span class="sxs-lookup"><span data-stu-id="50409-991">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-992">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-992">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="50409-993">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-993">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="50409-994">리터럴 문자열 "es"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-994">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="50409-995">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-995">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-996">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-996">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-997">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-997">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-998">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-998">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-999">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 권장 되는 정적 방법 일치 여러 패턴을 검색 하는 <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-999">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1000">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1000">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1001">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1001">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1002">일치 옵션을 지정하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1002">A bitwise combination of the enumeration values that specify options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-1003">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1003">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1004">지정된 일치 옵션 및 제한 시간 간격을 사용하여 지정된 입력 문자열에서 지정된 정규식을 모두 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1004">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1005">검색에서 찾은 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1005">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="50409-1006">일치 항목이 없으면 메서드가 빈 컬렉션 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1006">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1007"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드는 비슷합니다는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 단일 일치 항목 대신 입력된 문자열에서 모든 일치 항목에 대 한 정보를 반환 한다는 점을 제외 하 고 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1007">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="50409-1008">다음 코드를 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1008">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 <span data-ttu-id="50409-1009">정적 `Matches` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Matches`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1009">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="50409-1010">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1010">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1011">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1011">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-1012"><xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 지연 평가 사용 하 여 반환 된 채우는 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1012">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="50409-1013">이 컬렉션의 멤버와 같은 액세스 <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> 경우 컬렉션을 즉시 채워야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1013">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="50409-1014">지연 계산을 이용 하려면와 같은 구문을 사용 하 여 컬렉션을 반복 해야 하면 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="50409-1014">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="50409-1015">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="50409-1015">in Visual Basic.</span></span>  
  
 <span data-ttu-id="50409-1016">해당 지연 계산 때문에 호출 된 <xref:System.Text.RegularExpressions.Regex.Matches%2A> 메서드 throw 하지 않습니다는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1016">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-1017">그러나 작업에서 수행 될 때 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.MatchCollection> 일치 작업에서 지정 된이 시간 제한 간격을 초과 하는 경우이 메서드에서 반환 된 개체는`matchTimeout` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1017">However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1018">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드 "es"로 끝나는 문장의 모든 단어가 일치 하는 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1018">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-sensitive comparison that matches any word in a sentence that ends in "es".</span></span> <span data-ttu-id="50409-1019">그런 다음 호출 하는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드는 입력 문자열 패턴의 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1019">It then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="50409-1020">두 경우 모두, 시간 제한 간격을 1 초로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1020">In both cases, the time-out interval is set to one second.</span></span> <span data-ttu-id="50409-1021">출력에서 볼 수 있듯이 두 메서드는 다른 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1021">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  
  
 <span data-ttu-id="50409-1022">정규식 패턴 `\b\w+es\b`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1022">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-1023">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-1023">Pattern</span></span>|<span data-ttu-id="50409-1024">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1024">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="50409-1025">단어 경계에서 일치 항목 찾기를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1025">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="50409-1026">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1026">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="50409-1027">리터럴 문자열 "es"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1027">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="50409-1028">단어 경계에서 일치 항목 찾기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1028">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1029">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1029">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1030">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1030">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1031">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1031">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="50409-1032">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1032">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1033">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1033">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1034">현재 인스턴스의 시간 제한 간격을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1034">Gets the time-out interval of the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-1035">
            <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />이 throw되기 전에 패턴 일치 작업에서 경과할 수 있는 최대 시간 간격이며, 제한 시간이 비활성화된 경우는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1035">The maximum time interval that can elapse in a pattern-matching operation before a <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> is thrown, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> if time-outs are disabled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1036"><xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> 속성 정의 대 한 대략적인 최대 시간 간격을 <xref:System.Text.RegularExpressions.Regex> 작업 시간이 초과 하기 전에 단일 일치 작업을 실행 하는 인스턴스. 정규식 엔진은 throw 한 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 시간 제한 간격이 경과한 후 다음 타이밍 검사 중 발생 한 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1036">The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed.</span></span> <span data-ttu-id="50409-1037">따라서 정규식 엔진을에서 과도 한 역 추적 필요로 하는 입력된 문자열을 처리할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1037">This prevents the regular expression engine from processing input strings that require excessive backtracking.</span></span> <span data-ttu-id="50409-1038">자세한 내용은 참조 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md) 및 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1038">For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 <span data-ttu-id="50409-1039">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1039">This property is read-only.</span></span> <span data-ttu-id="50409-1040">개인에 대 한 해당 값을 명시적으로 설정할 수 있습니다 <xref:System.Text.RegularExpressions.Regex> 호출 하 여 개체는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자; 하 고 모든 값을 설정 하려면 <xref:System.Text.RegularExpressions.Regex> 호출 하 여 일치 하는 응용 프로그램 도메인에서 작업의 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 메서드 제공 하는 <xref:System.TimeSpan> 다음 예제와 같이 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1040">You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method and providing a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  
  
 <span data-ttu-id="50409-1041">시간 제한 간격, 기본값을 명시적으로 설정 하지 않으면 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> 사용 되는, 및 일치 하는 작업은 시간이 제한 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1041">If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> is used, and matching operations do not time out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1042">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에 전달된 옵션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1042">Gets the options that were passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-1043">
            <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 생성자에게 전달된 옵션을 나타내는 하나 이상의 <see cref="T:System.Text.RegularExpressions.Regex" /> 열거형 멤버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1043">One or more members of the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration that represent options that were passed to the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1044">값은 <xref:System.Text.RegularExpressions.Regex.Options%2A> 속성의 하나 이상의 멤버로 구성 된 <xref:System.Text.RegularExpressions.RegexOptions> 열거형.</span><span class="sxs-lookup"><span data-stu-id="50409-1044">The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration.</span></span> <span data-ttu-id="50409-1045">에 정의 된 옵션 없이 <xref:System.Text.RegularExpressions.Regex> 클래스 생성자의 값이 <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1045">If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="50409-1046">사용할 수 있는 옵션에 대 한 자세한 설명은 [정규식 옵션](~/docs/standard/base-types/regular-expression-options.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1046">The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.</span></span>  
  
 <span data-ttu-id="50409-1047"><xref:System.Text.RegularExpressions.Regex.Options%2A> 속성 자체 패턴을 정규식에서 정의 된 인라인 옵션을 반영 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1047">Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="50409-1048">
            <para>
              <see cref="T:System.Text.RegularExpressions.Regex" /> 만든 정규식의 기본 클래스는 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드. 이러한 컴파일된 정규식의 기본 클래스 구현을 사용 하 여는 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성입니다. 파생된 클래스에서 호출 된 경우는 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 전달 된 옵션을 반환 된 <paramref name="options" /> 의 매개 변수는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 정규식 정의에 사용 된 클래스 생성자입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1048">
              <para>
                <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the base class implementation of the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property. If called from a derived class, the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property returns the options that were passed to the <paramref name="options" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected internal string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberSignature Language="VB.NET" Value="Protected Friend pattern As String " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::String ^ pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1049">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1049">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1050">지정된 입력 문자열에서 정규식 패턴과 일치하는 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1050">In a specified input string, replaces strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1051">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1051">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1052">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1052">The replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1053">지정된 입력 문자열에서 정규식 패턴과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1053">In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1054">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1054">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1055">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1055">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1056">일치 하는 항목에 대 한 검색의 시작 부분에서 시작 된 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1056">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="50409-1057">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1057">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="50409-1058">`replacement` 매개 변수에서 각 일치 되는 문자열을 지정 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1058">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="50409-1059">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1059">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1060">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1060">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1061">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1061">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1062">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1062">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1063">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1063">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1064"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1064">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1065">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1065">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1066">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1066">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1067">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1067">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1068">다음 예제에서는 정규식을 정의 `\s+`, 하나 이상의 공백 문자를 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1068">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="50409-1069">대체 문자열 "", 공백 문자 하나로 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1069">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  
  
 <span data-ttu-id="50409-1070">다음 예제에서는 정규식을 정의 `(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`, 및 바꾸기 패턴에서 `$2`, 숫자 값에서 선행 또는 후행 통화 기호를 제거 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1070">The following example defines a regular expression, `(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`, and a replacement pattern, `$2`, that removes either a leading or a trailing currency symbol from a numeric value.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  
  
 <span data-ttu-id="50409-1071">정규식은 다음 표와 같이 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1071">The regular expression is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-1072">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-1072">Pattern</span></span>|<span data-ttu-id="50409-1073">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1073">Description</span></span>|  
|-------------|-----------------|  
|`\p{Sc}`|<span data-ttu-id="50409-1074">통화 기호를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1074">Match a currency symbol.</span></span> <span data-ttu-id="50409-1075">`{Sc}` 유니코드 기호와 통화 범주의 구성원 인 모든 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1075">`{Sc}` denotes any character that is a member of the Unicode Symbol, Currency category.</span></span>|  
|`\s?`|<span data-ttu-id="50409-1076">0번 이상 나오는 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1076">Match zero or one white-space character.</span></span>|  
|`(\p{Sc}\s?)?`|<span data-ttu-id="50409-1077">통화 기호 뒤에 0 번 이상 나오는 공백 문자 조합 없거나 1 개 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1077">Match zero or one occurrence of the combination of a currency symbol followed by zero or one white-space character.</span></span> <span data-ttu-id="50409-1078">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1078">This is the first capturing group.</span></span>|  
|`\d+`|<span data-ttu-id="50409-1079">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1079">Match one or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="50409-1080">마침표 (소수 구분 기호 문자도 사용 됨)의 0 번 이상 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1080">Match zero or one occurrence of a period (used as a decimal separator character).</span></span>|  
|`((?<=\.)\d+)?`|<span data-ttu-id="50409-1081">마침표 이전 문자 이면 하나 이상의 10 진수 숫자가 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1081">If a period is the previous character, match one or more decimal digits.</span></span> <span data-ttu-id="50409-1082">이 패턴에는 0 개 또는 1 번 일치할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1082">This pattern can be matched either zero or one time.</span></span>|  
|`(\d+\.?((?<=\.)\d+)?)`|<span data-ttu-id="50409-1083">하나 이상의 10 진수 선택적 마침표와 추가 10 진수가 패턴과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1083">Match the pattern of one or more decimal digits followed by an optional period and additional decimal digits.</span></span> <span data-ttu-id="50409-1084">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1084">This is the second capturing group.</span></span> <span data-ttu-id="50409-1085">에 대 한 호출에서 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> 메서드가 캡처된 그룹의 값과 일치 하는 전체를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1085">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> method replaces the entire match with the value of this captured group.</span></span>|  
|`(?(1)&#124;\s?\p{Sc})?`|<span data-ttu-id="50409-1086">첫 번째 캡처된 그룹이 있는 경우에 빈 문자열과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1086">If the first captured group exists, match an empty string.</span></span> <span data-ttu-id="50409-1087">그렇지 않으면 다음 통화 기호는 공백 문자 0 회 이상 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1087">Otherwise, match zero or one white-space character followed by a currency symbol.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1088">
            <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1088">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1089">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1089">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1090">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1090">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1091">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1091">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1092">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1092">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1093">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1093">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1094">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1094">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1095">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1095">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1096"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 하는 경우 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1096">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1097">대체 문자열은 정규식 대체 패턴에서 쉽게 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1097">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1098">대체 문자열 일부 처리 작업에 일치 하는 문자열에서에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1098">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1099">대체 문자열 조건부 처리의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1099">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1100">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> 메서드와 각각 전달 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1100">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1101">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1101">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="50409-1102">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1102">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1103">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1103">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1104">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1104">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1105"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1105">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1106">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1106">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1107">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1107">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1108">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1108">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1109">다음 코드 예제에서는 원래 문자열을 표시 하 고 원래 문자열의 각 단어와 일치, 변환 된 문자열을 표시 한 다음 대문자로 각 일치 항목의 첫 번째 문자를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1109">The following code example displays an original string, matches each word in the original string, converts the first character of each match to uppercase, then displays the converted string.</span></span>  
  
 [!code-csharp[Regex.Replace-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]
 [!code-vb[Regex.Replace-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1110">
            <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1110">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1111">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1111">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1112">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1112">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1113">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1113">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1114">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1114">The replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1115">대체하는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1115">The maximum number of times the replacement can occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1116">지정된 입력 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1116">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1117">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1117">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1118">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1118">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1119">일치 하는 항목에 대 한 검색의 시작 부분에서 시작 된 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1119">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="50409-1120">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1120">The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="50409-1121">경우 `count` 가 음수 이면 문자열의 끝까지 바꾸기가 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1121">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="50409-1122">경우 `count` 일치 항목 개수를 초과 하면, 일치 하는 모든 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1122">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="50409-1123">`replacement` 는를 첫 번째 바꿀 문자열을 지정 하는 매개 변수 `count` 에 일치 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1123">The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`.</span></span> <span data-ttu-id="50409-1124">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1124">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1125">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1125">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1126">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1126">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1127">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1127">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1128">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1128">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1129"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1129">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1130">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1130">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1131">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1131">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1132">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1132">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1133">다음 예제에서는 단일 문자 중복 문자의 처음 5 개 항목을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1133">The following example replaces the first five occurrences of duplicated characters with a single character.</span></span> <span data-ttu-id="50409-1134">정규식 패턴 `(\w)\1` 연속 발견 되는 단일 문자 맨 처음 발견 되는 첫 번째 캡처링 그룹에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1134">The regular expression pattern `(\w)\1` matches consecutive occurrences of a single character and assigns the first occurrence to the first capturing group.</span></span> <span data-ttu-id="50409-1135">바꾸기 패턴 `$1` 처음 캡처한 그룹으로 일치 하는 전체를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1135">The replacement pattern `$1` replaces the entire match with the first captured group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1136">
            <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1136">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1137">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1137">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1138">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1138">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1139">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1139">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1140">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1140">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1141">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1141">The replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1142">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1142">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1143">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1143">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1144">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1144">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1145">정적 `Replace` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Replace`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1145">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="50409-1146">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1146">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1147">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1147">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="50409-1148">일치 하는 항목에 대 한 검색의 시작 부분에서 시작 된 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1148">The search for matches starts at the beginning of the `input` string.</span></span>  
  
 <span data-ttu-id="50409-1149">`replacement` 매개 변수에서 각 일치 되는 문자열을 지정 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1149">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="50409-1150">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1150">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1151">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1151">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1152">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1152">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1153">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1153">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1154">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1154">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1155"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1155">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1156">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1156">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="50409-1157">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1157">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1158">다음 예제에서는 정규식을 정의 `\s+`, 하나 이상의 공백 문자를 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1158">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="50409-1159">대체 문자열 "", 공백 문자 하나로 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1159">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  
  
 <span data-ttu-id="50409-1160">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> 메서드를 로컬 파일 경로 UNC 경로 로컬 컴퓨터 및 드라이브 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1160">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="50409-1161">정규식 사용 하 여는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 로컬 컴퓨터의 이름을 포함 하는 속성 및 <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> 메서드 논리 드라이브의 이름을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1161">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="50409-1162">이 예제를 성공적으로 실행 하려면 로컬 컴퓨터 이름을 가진 리터럴 문자열 "MyMachine" 바꿔야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1162">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  
  
 <span data-ttu-id="50409-1163">정규식 패턴은 다음 식으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1163">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 <span data-ttu-id="50409-1164">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1164">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-1165">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-1165">Pattern</span></span>|<span data-ttu-id="50409-1166">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1166">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="50409-1167">두 명의 일치 항목이 연속 된 백슬래시 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1167">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="50409-1168">백슬래시 문자는 이스케이프 문자로 해석 되며, 때문에 각 백슬래시는 두 개의 백슬래시를 이스케이프 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1168">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`(?i:" + Environment.MachineName + ")`|<span data-ttu-id="50409-1169">반환 되는 문자열의 소문자를 구분는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1169">Perform a case-insensitive match of the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="50409-1170">일치는 기간 (`.`) 하나 이상의 단어 문자 다음에 오는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1170">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="50409-1171">이 일치 항목 0 개 이상 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1171">This match can occur zero or more times.</span></span> <span data-ttu-id="50409-1172">일치 하는 하위 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1172">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="50409-1173">백슬래시 일치 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1173">Match a backslash (`\`) character.</span></span>|  
|`((?i:[" + driveNames + "]))`|<span data-ttu-id="50409-1174">개별 드라이브 문자로 구성 된 문자 클래스는 대/소문자 구분 일치를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1174">Perform a case-insensitive match of the character class that consists of the individual drive lettters.</span></span> <span data-ttu-id="50409-1175">이 항목은 처음 캡처된 하위 식입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1175">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="50409-1176">일치 리터럴 달러 기호 (`$`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1176">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="50409-1177">바꾸기 패턴 `$1` 처음 캡처된 하위 식에 일치 하는 전체를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1177">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="50409-1178">즉, 드라이브 문자를 가진 UNC 드라이브 및 컴퓨터 이름을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1178">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1179">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1179">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1180">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1180">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1181">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1181">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1182">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1182">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1183">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 교체 하도록 권장된 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1183">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1184">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1184">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1185">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1185">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1186">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1186">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1187">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1187">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1188">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1188">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1189">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1189">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1190"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 하는 경우 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1190">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1191">대체 문자열은 정규식 대체 패턴에서 쉽게 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1191">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1192">대체 문자열 일부 처리 작업에 일치 하는 문자열에서에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1192">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1193">대체 문자열 조건부 처리의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1193">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1194">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드와 각각 전달 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1194">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1195">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1195">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1196">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1196">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-1197">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1197">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1198">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1198">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1199">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1199">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1200"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1200">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1201">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1201">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="50409-1202">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1202">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1203">다음 예제에서는 정규식을 사용 하 여 문자열에서 개별 단어를 추출 하 고 다음 사용 하 여는 <xref:System.Text.RegularExpressions.MatchEvaluator> 라는 메서드를 호출 하는 대리자 `WordScramble` 단어의 개별 문자를 스크램블입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1203">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="50409-1204">이 작업을 수행 하는 `WordScramble` 메서드는 일치에 문자를 포함 하는 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1204">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="50409-1205">또한 임의의 부동 소수점 숫자를 채우는 한 병렬 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1205">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="50409-1206">호출 하 여 배열 정렬 되는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> 메서드와 정렬 된 배열에 대 한 인수로 제공 됩니다는 <xref:System.String> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1206">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="50409-1207">새로 만든된이 문자열은 다음 반환 된 `WordScramble` 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1207">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="50409-1208">정규식 패턴 `\w+` ; 하나 이상의 단어 문자 일치 정규식 엔진은 계속 공백 문자 같은 한 단어가 아닌 문자에 도달할 때까지 문자 일치 항목으로 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1208">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1209">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1209">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1210">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1210">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1211">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1211">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1212">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1212">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1213">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 평가 및 패턴 일치를 대체 하기 위한 권장된 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1213">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for evaluating and replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1214">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1214">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1215">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1215">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1216">바꾸기를 하는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1216">The maximum number of times the replacement will occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1217">지정된 입력 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1217">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1218">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1218">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1219">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1219">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1220"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 하는 경우 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1220">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1221">대체 문자열은 정규식 대체 패턴에서 쉽게 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1221">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1222">대체 문자열 일부 처리 작업에 일치 하는 문자열에서에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1222">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1223">대체 문자열 조건부 처리의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1223">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1224">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> 메서드와 첫 번째 전달 `count` <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1224">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1225">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1225">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="50409-1226">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1226">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1227">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1227">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1228">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1228">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1229"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1229">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1230">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1230">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1231">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1231">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1232">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1232">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1233">다음 예에서는 의도적으로 잘못 입력 하는 목록에 있는 단어의 절반에 정규식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1233">The following example uses a regular expression to deliberately misspell half of the words in a list.</span></span> <span data-ttu-id="50409-1234">정규식을 사용 하 여 `\w*(ie|ei)\w*` "ie" 또는 "ei" 문자를 포함 하는 단어를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1234">It uses the regular expression `\w*(ie|ei)\w*` to match words that include the characters "ie" or "ei".</span></span> <span data-ttu-id="50409-1235">절반에 일치 하는 단어의 첫 번째 전달에서 `ReverseLetter` 메서드를 사용 하는 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> "i"와 일치 하는 문자열의 "e" 되돌리려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1235">It passes the first half of the matching words to the `ReverseLetter` method, which, in turn, uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to reverse "i" and "e" in the matched string.</span></span> <span data-ttu-id="50409-1236">나머지 단어 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1236">The remaining words remain unchanged.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  
  
 <span data-ttu-id="50409-1237">`\w*(ie|ei)\w*` 정규식은 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1237">The regular expression `\w*(ie|ei)\w*` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-1238">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-1238">Pattern</span></span>|<span data-ttu-id="50409-1239">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1239">Description</span></span>|  
|-------------|-----------------|  
|`\w*`|<span data-ttu-id="50409-1240">0개 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1240">Match zero or more word characters.</span></span>|  
|`(ie&#124;ei)`|<span data-ttu-id="50409-1241">"Ie" 또는 "ei"와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1241">Match either "ie" or "ei".</span></span>|  
|`\w*`|<span data-ttu-id="50409-1242">0개 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1242">Match zero or more word characters.</span></span>|  
  
 <span data-ttu-id="50409-1243">정규식 패턴 `([ie])([ie])` 에 `ReverseLetter` 메서드 이중 "ie" 또는 "ei"의 첫 번째 "i" 또는 "e"와 일치 하 고 첫 번째 캡처링 그룹에는 문자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1243">The regular expression pattern `([ie])([ie])` in the `ReverseLetter` method matches the first "i" or "e" in the diphthong "ie" or "ei" and assigns the letter to the first capturing group.</span></span> <span data-ttu-id="50409-1244">두 번째 "i" 또는 "e"와 일치 하 고 두 번째 캡처링 그룹에는 문자를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1244">It matches the second "i" or "e" and assigns the letter to the second capturing group.</span></span> <span data-ttu-id="50409-1245">두 개의 문자를 호출 하 여 다음 반대가 됩니다는 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> 바꾸기 패턴을 사용 하 여 메서드 `$2$1`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1245">The two characters are then reversed by calling the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method with the replacement pattern `$2$1`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1246">
            <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1246">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1247">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1247">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1248">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1248">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1249">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1249">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1250">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1250">The replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1251">바꾸기를 하는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1251">Maximum number of times the replacement can occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-1252">입력 문자열에서 검색을 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1252">The character position in the input string where the search begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1253">지정된 입력 부분 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1253">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1254">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1254">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1255">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1255">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1256">일치 하는 항목 검색 시작는 `input` 문자열에 지정 된 위치에서는 `startat` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1256">The search for matches starts in the `input` string at the position specified by the `startat` parameter.</span></span> <span data-ttu-id="50409-1257">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1257">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="50409-1258">경우 `count` 가 음수 이면 문자열의 끝까지 바꾸기가 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1258">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="50409-1259">경우 `count` 일치 항목 개수를 초과 하면, 일치 하는 모든 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1259">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="50409-1260">`replacement` 매개 변수에서 각 일치 되는 문자열을 지정 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1260">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="50409-1261">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1261">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1262">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1262">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1263">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1263">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1264">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1264">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1265">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1265">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1266"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1266">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1267">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1267">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1268">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1268">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1269">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1269">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1270">다음 예제에서는 문자열의 첫 번째 줄을 제외한 모든 double-spaces 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1270">The following example double-spaces all but the first line of a string.</span></span> <span data-ttu-id="50409-1271">정규식 패턴을 정의 `^.*$`, 텍스트, 호출의 줄에 일치 하는 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 메서드를 사용 하 고 문자열의 첫 번째 줄과 일치는 `Match.Index` 및 `Match.Count` 두 번째의 시작 위치를 결정 하는 속성 선입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1271">It defines a regular expression pattern, `^.*$`, that matches a line of text, calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to match the first line of the string, and uses the `Match.Index` and `Match.Count` properties to determine the starting position of the second line.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  
  
 <span data-ttu-id="50409-1272">정규식 패턴 `^.*$`는 다음 테이블과 같이 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1272">The regular expression pattern `^.*$` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="50409-1273">무늬</span><span class="sxs-lookup"><span data-stu-id="50409-1273">Pattern</span></span>|<span data-ttu-id="50409-1274">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1274">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="50409-1275">줄의 시작을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1275">Match the start of a line.</span></span> <span data-ttu-id="50409-1276">(사항에 유의 <xref:System.Text.RegularExpressions.Regex> 개체가 사용 하 여 인스턴스화는 <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> 옵션;이 문자 클래스는 입력된 문자열의 시작 부분 것만 일치 하는 그렇지 않은 경우.)</span><span class="sxs-lookup"><span data-stu-id="50409-1276">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
|`.*`|<span data-ttu-id="50409-1277">임의의 문자 0 회 이상 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1277">Match any character zero or more times.</span></span>|  
|`$`|<span data-ttu-id="50409-1278">줄의 끝 부분을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1278">Match the end of a line.</span></span> <span data-ttu-id="50409-1279">(사항에 유의 <xref:System.Text.RegularExpressions.Regex> 개체가 사용 하 여 인스턴스화는 <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> 옵션;이 문자 클래스는 입력된 문자열의 시작 부분 것만 일치 하는 그렇지 않은 경우.)</span><span class="sxs-lookup"><span data-stu-id="50409-1279">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
  
 <span data-ttu-id="50409-1280">대체 문자열 (`vbCrLf + "$&"` Visual Basic의 `"\n$&"` C#) 일치 하는 문자열 앞에 새 줄을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1280">The replacement string (`vbCrLf + "$&"` in Visual Basic, `"\n$&"` in C#) adds a new line before the matched string.</span></span> <span data-ttu-id="50409-1281">`\n` C# 예제로 해석 됩니다는 줄 바꿈 문자는 C# 컴파일러에 의해; 정규식 문자 이스케이프를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1281">Note that `\n` in the C# example is interpreted as the newline character by the C# compiler; it does not represent a regular expression character escape.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1282">
            <paramref name="input" /> 또는 <paramref name="replacement" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1282">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1283">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1283">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1284">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1284">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1285">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1285">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1286">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1286">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1287">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1287">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1288">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1288">The replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1289">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1289">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1290">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1290">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
          <span data-ttu-id="50409-1291">지정한 옵션에 따라 일치 작업이 수정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1291">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1292">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1292">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1293">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1293">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1294">정적 `Replace` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Replace`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1294">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="50409-1295">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1295">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1296">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1296">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="50409-1297">지정 하는 경우 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> 에 대 한는 `options` 매개 변수를 일치 항목 검색 입력된 문자열의 끝에서 시작 하 고 왼쪽 이동, 그렇지 않으면 검색 입력된 문자열의 시작 부분에서 시작 하 고 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1297">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="50409-1298">`replacement` 매개 변수에서 각 일치 되는 문자열을 지정 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1298">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="50409-1299">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1299">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1300">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1300">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1301">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1301">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1302">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1302">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1303">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1303">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1304"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1304">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1305">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1305">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="50409-1306">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1306">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1307">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드를 로컬 파일 경로 UNC 경로 로컬 컴퓨터 및 드라이브 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1307">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="50409-1308">정규식 사용 하 여는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 로컬 컴퓨터의 이름을 포함 하는 속성 및 <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> 메서드 논리 드라이브의 이름을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1308">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="50409-1309">모든 정규식 문자열 비교 대/소문자를 구분 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1309">All regular expression string comparisons are case-insensitive.</span></span> <span data-ttu-id="50409-1310">이 예제를 성공적으로 실행 하려면 로컬 컴퓨터 이름을 가진 리터럴 문자열 "MyMachine" 바꿔야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1310">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  
  
 <span data-ttu-id="50409-1311">정규식 패턴은 다음 식으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1311">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="50409-1312">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1312">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-1313">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-1313">Pattern</span></span>|<span data-ttu-id="50409-1314">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1314">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="50409-1315">두 명의 일치 항목이 연속 된 백슬래시 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1315">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="50409-1316">백슬래시 문자는 이스케이프 문자로 해석 되며, 때문에 각 백슬래시는 두 개의 백슬래시를 이스케이프 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1316">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="50409-1317">반환 되는 문자열과 일치는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1317">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="50409-1318">일치는 기간 (`.`) 하나 이상의 단어 문자 다음에 오는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1318">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="50409-1319">이 일치 항목 0 개 이상 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1319">This match can occur zero or more times.</span></span> <span data-ttu-id="50409-1320">일치 하는 하위 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1320">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="50409-1321">백슬래시 일치 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1321">Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="50409-1322">개별 드라이브 문자 구성 된 문자 클래스와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1322">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="50409-1323">이 항목은 처음 캡처된 하위 식입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1323">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="50409-1324">일치 리터럴 달러 기호 (`$`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1324">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="50409-1325">바꾸기 패턴 `$1` 처음 캡처된 하위 식에 일치 하는 전체를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1325">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="50409-1326">즉, 드라이브 문자를 가진 UNC 드라이브 및 컴퓨터 이름을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1326">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1327">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1327">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1328">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1328">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1329">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1329">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1330">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1330">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1331">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1331">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1332">
            <para>이 메서드가 제한 시간 초과 후 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 패턴 일치를 교체 하도록 권장된 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1332">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1333">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1333">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1334">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1334">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1335">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1335">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1336">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1336">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1337">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1337">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
          <span data-ttu-id="50409-1338">지정한 옵션에 따라 일치 작업이 수정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1338">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1339">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1339">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1340">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1340">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1341"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 되는 경우에 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1341">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match in if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1342">대체 문자열은 정규식 대체 패턴에서 쉽게 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1342">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1343">대체 문자열 일부 처리 작업에 일치 하는 문자열에서에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1343">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1344">대체 문자열 조건부 처리의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1344">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1345">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드와 각각 전달 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1345">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1346">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1346">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1347">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1347">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-1348">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1348">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1349">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1349">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1350">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1350">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1351">지정 하는 경우 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> 에 대 한는 `options` 매개 변수를 일치 항목 검색 입력된 문자열의 끝에서 시작 하 고 왼쪽 이동, 그렇지 않으면 검색 입력된 문자열의 시작 부분에서 시작 하 고 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1351">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="50409-1352"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1352">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1353">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1353">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="50409-1354">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1354">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1355">다음 예제에서는 정규식을 사용 하 여 문자열에서 개별 단어를 추출 하 고 다음 사용 하 여는 <xref:System.Text.RegularExpressions.MatchEvaluator> 라는 메서드를 호출 하는 대리자 `WordScramble` 단어의 개별 문자를 스크램블입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1355">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="50409-1356">이 작업을 수행 하는 `WordScramble` 메서드는 일치에 문자를 포함 하는 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1356">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="50409-1357">또한 임의의 부동 소수점 숫자를 채우는 한 병렬 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1357">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="50409-1358">호출 하 여 배열 정렬 되는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> 메서드와 정렬 된 배열에 대 한 인수로 제공 됩니다는 <xref:System.String> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1358">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="50409-1359">새로 만든된이 문자열은 다음 반환 된 `WordScramble` 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1359">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="50409-1360">정규식 패턴 `\w+` ; 하나 이상의 단어 문자 일치 정규식 엔진은 계속 공백 문자 같은 한 단어가 아닌 문자에 도달할 때까지 문자 일치 항목으로 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1360">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="50409-1361">에 대 한 호출에서 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드를 포함는 <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> 옵션 있도록 정규식 패턴에서 주석을 `\w+  # Matches all the characters in a word.` 정규식 엔진에 의해 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1361">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1362">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1362">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1363">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1363">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1364">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1364">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1365">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1365">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1366">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1366">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1367">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1367">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1368">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1368">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1369">바꾸기를 하는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1369">The maximum number of times the replacement will occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-1370">입력 문자열에서 검색을 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1370">The character position in the input string where the search begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1371">지정된 입력 부분 문자열에서 정규식 패턴과 일치하는 지정된 최대 개수의 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1371">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1372">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1372">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1373">정규식 패턴이 현재 인스턴스에서 일치하지 않는 경우 메서드는 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1373">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1374"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 하는 경우 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1374">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1375">대체 문자열은 정규식 대체 패턴에서 쉽게 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1375">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1376">대체 문자열 일부 처리 작업에 일치 하는 문자열에서에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1376">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1377">대체 문자열 조건부 처리의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1377">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1378">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 메서드와 첫 번째 전달 `count` <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1378">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1379">정규식은 현재에 대 한 생성자에 의해 정의 된 패턴 <xref:System.Text.RegularExpressions.Regex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1379">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="50409-1380">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1380">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1381">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1381">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1382">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1382">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1383"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 바꾸기 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1383">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1384">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1384">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1385">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1385">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="50409-1386">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1386">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1387">
            <paramref name="input" /> 또는 <paramref name="evaluator" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1387">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1388">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1388">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1389">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1389">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1390">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1390">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1391">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1391">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1392">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1392">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="50409-1393">대체 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1393">The replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1394">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1394">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-1395">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1395">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1396">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 문자열을 지정된 대체 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1396">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
          <span data-ttu-id="50409-1397">추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1397">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1398">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1398">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1399">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1399">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1400">정적 `Replace` 메서드는 구성에 해당 하는 <xref:System.Text.RegularExpressions.Regex> 인스턴스 메서드를 호출 하는 지정 된 정규식 패턴을 가진 개체 `Replace`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1400">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="50409-1401">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1401">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1402">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1402">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="50409-1403">지정 하는 경우 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> 에 대 한는 `options` 매개 변수를 일치 항목 검색 입력된 문자열의 끝에서 시작 하 고 왼쪽 이동, 그렇지 않으면 검색 입력된 문자열의 시작 부분에서 시작 하 고 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1403">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="50409-1404">`replacement` 매개 변수에서 각 일치 되는 문자열을 지정 `input`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1404">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="50409-1405">`replacement` 리터럴 텍스트의 조합을 포함할 수 있습니다 및 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1405">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1406">예를 들어 바꾸기 패턴 `a*${test}b` 문자열을 삽입 "는 *"과 일치 하는 부분 문자열 뒤의 `test` 다음 있는 경우 캡처 그룹, "b" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1406">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="50409-1407">\* 문자는 메타 바꾸기 패턴으로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1407">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1408">대체는 바꾸기 패턴에서 인식 되는 유일한 정규식 언어 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1408">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="50409-1409">다른 모든 정규식 언어 요소를 포함 하 여 [이스케이프 문자](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), 정규식 패턴에 대해서만에 사용할 수 및 바꾸기 패턴에서 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1409">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="50409-1410">`matchTimeout` 매개 변수 지정 긴 패턴 일치 하는 방법을 메서드 시간이 초과 되기 전에 일치를 찾으려고 시도 합니다. 입력을 처리 하는 경우 응답을 중지 하 게 표시 되지 않도록 과도 한 역 추적을 사용 하는 정규식 시간 제한 간격을 설정 하면 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1410">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-1411">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1411">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1412">일치 항목이 없으면 해당 시간 간격에서 발견 되 면 경우에 메서드에서 throw 된 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1412">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-1413">`matchTimeout` 메서드가 실행 되는 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1413">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="50409-1414">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1414">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1415">다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 메서드를 로컬 파일 경로 UNC 경로 로컬 컴퓨터 및 드라이브 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1415">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="50409-1416">정규식 사용 하 여는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 로컬 컴퓨터의 이름을 포함 하는 속성 및 <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> 메서드 논리 드라이브의 이름을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1416">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="50409-1417">모든 정규식 문자열 비교는 대/소문자를 구분 하 고 일치 하는 0.5 초에서 찾을 수 없는 경우 모든 단일 바꾸기 작업 시간이 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1417">All regular expression string comparisons are case-insensitive, and any single replacement operation times out if a match cannot be found in 0.5 second.</span></span> <span data-ttu-id="50409-1418">이 예제를 성공적으로 실행 하려면 로컬 컴퓨터 이름을 가진 리터럴 문자열 "MyMachine" 바꿔야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1418">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  
  
 <span data-ttu-id="50409-1419">정규식 패턴은 다음 식으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1419">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="50409-1420">다음 테이블은 정규식 패턴이 해석되는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1420">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="50409-1421">패턴</span><span class="sxs-lookup"><span data-stu-id="50409-1421">Pattern</span></span>|<span data-ttu-id="50409-1422">설명</span><span class="sxs-lookup"><span data-stu-id="50409-1422">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="50409-1423">두 명의 일치 항목이 연속 된 백슬래시 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1423">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="50409-1424">백슬래시 문자는 이스케이프 문자로 해석 되며, 때문에 각 백슬래시는 두 개의 백슬래시를 이스케이프 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1424">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="50409-1425">반환 되는 문자열과 일치는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1425">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="50409-1426">일치는 기간 (`.`) 하나 이상의 단어 문자 다음에 오는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1426">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="50409-1427">이 일치 항목 0 개 이상 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1427">This match can occur zero or more times.</span></span> <span data-ttu-id="50409-1428">일치 하는 하위 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1428">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="50409-1429">백슬래시 일치 (`\`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1429">Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="50409-1430">개별 드라이브 문자 구성 된 문자 클래스와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1430">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="50409-1431">이 항목은 처음 캡처된 하위 식입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1431">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="50409-1432">일치 리터럴 달러 기호 (`$`) 문자.</span><span class="sxs-lookup"><span data-stu-id="50409-1432">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="50409-1433">바꾸기 패턴 `$1` 처음 캡처된 하위 식에 일치 하는 전체를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1433">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="50409-1434">즉, 드라이브 문자를 가진 UNC 드라이브 및 컴퓨터 이름을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1434">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1435">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1435">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1436">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="replacement" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1436">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1437">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1437">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="50409-1438">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1438">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1439">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1439">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1440">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1440">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1441">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1441">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1442">일치 항목을 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1442">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1443">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1443">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="50409-1444">각 항목의 일치 여부를 조사하고 원래 일치 문자열 또는 대체 문자열을 반환하는 사용자 지정 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1444">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1445">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1445">A bitwise combination of enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-1446">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1446">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1447">지정된 입력 문자열에서 지정된 정규식과 일치하는 모든 부분 문자열을 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 대리자가 반환한 문자열로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1447">In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
          <span data-ttu-id="50409-1448">추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1448">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1449">입력 문자열과 동일한 새 문자열입니다. 단, 대체 문자열은 일치하는 각 문자열을 대체합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1449">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="50409-1450">현재 인스턴스에서 <paramref name="pattern" />이 일치하지 않으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1450">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1451"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드는 다음 조건 중 하나에 해당 하는 경우 정규식 일치 항목을 대체 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1451">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="50409-1452">대체 문자열에 정규식 대체 패턴에서 쉽게 지정할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="50409-1452">If the replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="50409-1453">대체 문자열에서 발생 하는 경우 일부 처리 일치 하는 문자열에서 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1453">If the replacement string results from some processing performed on the matched string.</span></span>  
  
-   <span data-ttu-id="50409-1454">대체 문자열 조건부 처리에서 발생 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="50409-1454">If the replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="50409-1455">호출 하는 메서드는는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> 메서드와 각각 전달 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 컬렉션에는 `evaluator` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1455">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="50409-1456">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1456">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1457">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1457">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="50409-1458">`evaluator` 매개 변수는 사용자가 정의한 사용자 지정 메서드에 대 한 대리자 하 고 일치 하는 문자열을 검사 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1458">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="50409-1459">사용자 지정 메서드는 다음 서명이 일치 하도록 있어야는 <xref:System.Text.RegularExpressions.MatchEvaluator> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1459">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="50409-1460">사용자 지정 메서드는 일치 하는 입력을 대체 하는 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1460">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="50409-1461">지정 하는 경우 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> 에 대 한는 `options` 매개 변수를 일치 항목 검색 입력된 문자열의 끝에서 시작 하 고 왼쪽 이동, 그렇지 않으면 검색 입력된 문자열의 시작 부분에서 시작 하 고 오른쪽으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1461">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="50409-1462">`matchTimeout` 매개 변수 지정 긴 패턴 일치 하는 방법을 메서드 시간이 초과 되기 전에 일치를 찾으려고 시도 합니다. 정규식에 나타나지 않도록 과도 한 역 추적을 사용 하는 시간 제한 간격을 설정 하면 "입력을 처리할 때 응답 하지 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1462">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to "stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-1463">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1463">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1464">일치 항목이 없으면 해당 시간 간격에서 발견 되 면 경우에 메서드에서 throw 된 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1464">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-1465">`matchTimeout` 메서드가 실행 되는 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1465">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="50409-1466">메서드가 반환 하므로 `input` 일치 하는 경우 변경 되지 않고 사용할 수 있습니다는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 입력된 문자열 대체 하는지 여부도 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1466">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50409-1467">다음 예제에서는 정규식을 사용 하 여 문자열에서 개별 단어를 추출 하 고 다음 사용 하 여는 <xref:System.Text.RegularExpressions.MatchEvaluator> 라는 메서드를 호출 하는 대리자 `WordScramble` 단어의 개별 문자를 스크램블입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1467">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="50409-1468">이 작업을 수행 하는 `WordScramble` 메서드는 일치에 문자를 포함 하는 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1468">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="50409-1469">또한 임의의 부동 소수점 숫자를 채우는 한 병렬 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1469">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="50409-1470">호출 하 여 배열 정렬 되는 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> 메서드와 정렬 된 배열에 대 한 인수로 제공 됩니다는 <xref:System.String> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1470">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="50409-1471">새로 만든된이 문자열은 다음 반환 된 `WordScramble` 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1471">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="50409-1472">정규식 패턴 `\w+` ; 하나 이상의 단어 문자 일치 정규식 엔진은 계속 공백 문자 같은 한 단어가 아닌 문자에 도달할 때까지 문자 일치 항목으로 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1472">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="50409-1473">에 대 한 호출에서 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> 메서드를 포함는 <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> 옵션 있도록 정규식 패턴에서 주석을 `\w+  # Matches all the characters in a word.` 정규식 엔진에 의해 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1473">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1474">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1474">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1475">
            <paramref name="input" />, <paramref name="pattern" /> 또는 <paramref name="evaluator" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1475">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1476">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1476">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="50409-1477">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1477">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1478">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1478">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1479">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1479">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1480">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1480">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1481">정규식을 사용하여 오른쪽에서 왼쪽으로 검색하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1481">Gets a value that indicates whether the regular expression searches from right to left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="50409-1482">정규식을 사용하여 오른쪽에서 왼쪽으로 검색하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1482">
              <see langword="true" /> if the regular expression searches from right to left; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1483"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> `true` 경우는 <xref:System.Text.RegularExpressions.Regex> 와 인스턴스를 만들었습니다.는 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1483"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend roptions As RegexOptions " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexOptions roptions;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1484">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1484">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="50409-1485">정규식 일치에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1485">Splits an input string into an array of substrings at the positions defined by a regular expression match.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1486">분할할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1486">The string to split.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1487">
            <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식 패턴에 의해 정의된 위치에서 입력 문자열을 부분 문자열의 배열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1487">Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1488">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1488">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1489"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1489">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1490">문자열은 최대한 많이 분할 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1490">The string is split as many times as possible.</span></span> <span data-ttu-id="50409-1491">구분 기호 없음이 없으면 반환 값은 하나의 값이 인 요소는 원래 입력된 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1491">If no delimiter is found, the return value contains one element whose value is the original input string.</span></span>  
  
 <span data-ttu-id="50409-1492">여러 명의 일치 항목을 서로 인접 한 경우 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1492">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1493">예를 들어 단일 하이픈에서 문자열을 분할 하면 반환 된 배열의 다음 코드와 같이 인접 한 두 개의 하이픈은 찾을 수 위치에 빈 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1493">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  
  
 <span data-ttu-id="50409-1494">시작 부분이 나 입력된 문자열의 끝에 일치 하는 빈 문자열의 시작 이나 반환 된 배열의 끝에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1494">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="50409-1495">다음 예제에서는 정규식 패턴을 사용 하 여 `\d+` 숫자 문자에는 입력된 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1495">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="50409-1496">반환 된 배열의 첫 번째 및 마지막 요소의 값이 문자열이 시작 되 고 숫자 문자 일치 끝나는, 때문에 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1496">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  
  
 <span data-ttu-id="50409-1497">캡처링 괄호에 사용 되는 경우는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 식, 캡처된 모든 텍스트는 결과 문자열 배열에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1497">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="50409-1498">예를 들어 "plum 기준" 하이픈에서 캡처 괄호 안에 배치 하는 문자열을 분할 하면 반환 되는 배열 하이픈을 포함 하는 문자열 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1498">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  
  
 <span data-ttu-id="50409-1499">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1499">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1500">.NET Framework 1.0 및 1.1 캡처 괄호, 첫 번째 집합에 일치 하는 항목이 없는 경우 추가 캡처링 괄호에서 캡처된 텍스트가 포함 되지 않습니다 반환된 된 배열에.</span><span class="sxs-lookup"><span data-stu-id="50409-1500">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="50409-1501">.NET Framework 2.0 부터는 모든 캡처된 텍스트에도 추가 됩니다 반환된 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1501">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="50409-1502">예를 들어 다음 코드 캡처 괄호의 두 집합을 사용 하 여 날짜 문자열에서 날짜 구분 기호를 포함 하 여 날짜의 요소를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1502">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="50409-1503">캡처 괄호의 첫 번째 집합 하이픈을 캡처하고 두 번째 집합 슬래시를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1503">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="50409-1504">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우 슬래시 문자; 제외 컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1504">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="50409-1505">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1505">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="50409-1506">예:</span><span class="sxs-lookup"><span data-stu-id="50409-1506">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  
  
 <span data-ttu-id="50409-1507">참고가 반환 되는 배열 시작과 배열의 끝에 빈 문자열을도 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1507">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="50409-1508"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> split 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1508">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1509">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1509">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1510">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1510">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1511">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1511">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1512">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1512">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1513">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1513">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1514">분할될 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1514">The string to be split.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1515">분할할 수 있는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1515">The maximum number of times the split can occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1516">입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 부분 문자열의 배열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1516">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1517">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1517">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1518"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%2A?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1518">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1519">`count` 문자열의 최대 수를 지정 하는 매개 변수는 `input` 문자열을 분할 될 수 있습니다; 마지막 문자열 문자열 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1519">The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="50409-1520">A `count` 최대한 많이 분할의 기본 동작을 제공 하는 값이 0입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1520">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span>  
  
 <span data-ttu-id="50409-1521">여러 명의 일치 항목이 서로 인접 한 경우 또는 시작 이나 끝 일치 하는 경우 `input`, 발견 된 일치 레코드 수는 2 이상 및 보다 작은 `count`, 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1521">If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1522">즉, 일치 하는 인접 한 항목 또는 시작 이나 입력된 문자열의 끝 부분에서 일치 항목에서 발생 하는 빈 문자열 판단할 때 고려 됩니다 수에 부분 문자열 equals와 일치 하는지 여부 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1522">That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="50409-1523">다음 예제에서는 정규식에서에서 `/d+` 세 부분 문자열을 최대 하나 이상의 10 진수 숫자가 포함 된 입력된 문자열을 분할 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1523">In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings.</span></span> <span data-ttu-id="50409-1524">첫 번째 배열 요소를 포함 하는 정규식 패턴과 일치 하는 입력된 문자열의 시작 하기 때문에 <xref:System.String.Empty?displayProperty=nameWithType>, 영문자 입력된 문자열에서 첫 번째 집합을 포함 하는 두 번째 및 세 번째 문자열의 나머지를 포함 합니다. 세 번째 일치 항목 다음에 오는 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1524">Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=nameWithType>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  
  
 <span data-ttu-id="50409-1525">정규식의 캡처링 괄호를 사용 하면 캡처된 텍스트가 모두 분할 문자열의 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1525">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="50409-1526">그러나 캡처된 텍스트가 들어 있는 배열 요소 고려 되지 않습니다 확인 된 일치 레코드 수에 도달 하는지 여부를 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1526">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="50409-1527">예를 들어 다음 코드와 7 개 요소 배열의 네 부분 문자열 결과의 최대값에 "apple-장의-plum-배-바나나" 문자열을 분할을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1527">For example, splitting the string "apple-apricot-plum-pear-banana" into a maximum of four substrings results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  
  
 <span data-ttu-id="50409-1528">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1528">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1529">.NET Framework 1.0 및 1.1에서 캡처된 텍스트 캡처 괄호의 첫 번째 집합에서 반환된 된 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1529">In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array.</span></span> <span data-ttu-id="50409-1530">.NET Framework 2.0 부터는 모든 캡처된 텍스트가 반환된 된 배열에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1530">Starting with the .NET Framework 2.0, all captured text is added to the returned array.</span></span> <span data-ttu-id="50409-1531">그러나 요소 반환된 된 배열에 캡처된 텍스트가 들어 있는 고려 되지 않습니다 결정할 때의 수에 부분 문자열 equals와 일치 하는지 여부 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1531">However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="50409-1532">예를 들어 다음 코드에서는 정규식을 사용 하 여 캡처 괄호의 두 집합 날짜 문자열에서 날짜의 요소를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1532">For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string.</span></span> <span data-ttu-id="50409-1533">캡처 괄호의 첫 번째 집합 하이픈을 캡처하고 두 번째 집합 슬래시를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1533">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="50409-1534">에 대 한 호출에서 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> 메서드 다음 반환된 된 배열에는 최대 두 개의 요소를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1534">The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array.</span></span> <span data-ttu-id="50409-1535">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우 메서드는 두 요소 문자열 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1535">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array.</span></span> <span data-ttu-id="50409-1536">컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우 메서드는 세 요소로 문자열 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1536">If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  
  
 <span data-ttu-id="50409-1537">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1537">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="50409-1538">다음 예제에서는 입력된 문자열에 있는 요소 수 만큼를 "문자" 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1538">The following example splits the string "characters" into as many elements as there are in the input string.</span></span> <span data-ttu-id="50409-1539">Null 문자열은 입력된 문자열의 시작 부분와 일치 하므로 null 문자열이 반환 되는 배열의 시작 부분에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1539">Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array.</span></span> <span data-ttu-id="50409-1540">이렇게 하면 10 번째 요소는 입력된 문자열의 끝에 두 개의 문자로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1540">This causes the tenth element to consist of the two characters at the end of the input string.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  
  
 <span data-ttu-id="50409-1541"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> split 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1541">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1542">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1542">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1543">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1543">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1544">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1544">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1545">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1545">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1546">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1546">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1547">분할할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1547">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1548">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1548">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1549">정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1549">Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1550">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1550">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1551"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%2A?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1551">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1552">`input` 가능한 횟수 만큼 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1552">The `input` string is split as many times as possible.</span></span> <span data-ttu-id="50409-1553">경우 `pattern` 사전에 `input` 문자열, 반환 값은 원래 값을 가진 요소가 하나 포함 되어 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1553">If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="50409-1554">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1554">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1555">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1555">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50409-1556">컴파일된 정적에 대 한 호출에 사용 된 정규식 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드 자동으로 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1556">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="50409-1557">컴파일된 정규식의 수명을 직접 관리 하려면 인스턴스를 사용 하 여 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1557">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="50409-1558">여러 명의 일치 항목을 서로 인접 한 경우 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1558">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1559">예를 들어 단일 하이픈에서 문자열을 분할 하면 반환 된 배열의 다음 코드와 같이 인접 한 두 개의 하이픈은 찾을 수 위치에 빈 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1559">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  
  
 <span data-ttu-id="50409-1560">시작 부분이 나 입력된 문자열의 끝에 일치 하는 빈 문자열의 시작 이나 반환 된 배열의 끝에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1560">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="50409-1561">다음 예제에서는 정규식 패턴을 사용 하 여 `\d+` 숫자 문자에는 입력된 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1561">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="50409-1562">반환 된 배열의 첫 번째 및 마지막 요소의 값이 문자열이 시작 되 고 숫자 문자 일치 끝나는, 때문에 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1562">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  
  
 <span data-ttu-id="50409-1563">캡처링 괄호에 사용 되는 경우는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 식, 캡처된 모든 텍스트는 결과 문자열 배열에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1563">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="50409-1564">예를 들어 "plum 기준" 하이픈에서 캡처 괄호 안에 배치 하는 문자열을 분할 하면 반환 되는 배열 하이픈을 포함 하는 문자열 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1564">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="50409-1565">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1565">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1566">.NET Framework 1.0 및 1.1 캡처 괄호, 첫 번째 집합에 일치 하는 항목이 없는 경우 추가 캡처링 괄호에서 캡처된 텍스트가 포함 되지 않습니다 반환된 된 배열에.</span><span class="sxs-lookup"><span data-stu-id="50409-1566">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="50409-1567">.NET Framework 2.0 부터는 모든 캡처된 텍스트에도 추가 됩니다 반환된 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1567">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="50409-1568">예를 들어 다음 코드 캡처 괄호의 두 집합을 사용 하 여 날짜 문자열에서 날짜 구분 기호를 포함 하 여 날짜의 요소를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1568">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="50409-1569">캡처 괄호의 첫 번째 집합 하이픈을 캡처하고 두 번째 집합 슬래시를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1569">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="50409-1570">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우 슬래시 문자; 제외 컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1570">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="50409-1571">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%2A> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1571">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="50409-1572">예:</span><span class="sxs-lookup"><span data-stu-id="50409-1572">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  
  
 <span data-ttu-id="50409-1573">참고가 반환 되는 배열 시작과 배열의 끝에 빈 문자열을도 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1573">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="50409-1574"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> split 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1574">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1575">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1575">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1576">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1576">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1577">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1577">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1578">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1578">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1579">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1579">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1580">
            <para>이 메서드가 제한 시간 초과 후 메서드가 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 텍스트 패턴 일치를 분할 하는 데 권장 되는 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1580">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer, startat As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1581">분할될 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1581">The string to be split.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="50409-1582">분할할 수 있는 최대 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1582">The maximum number of times the split can occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="50409-1583">입력 문자열에서 검색을 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1583">The character position in the input string where the search will begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1584">입력 문자열을 <see cref="T:System.Text.RegularExpressions.Regex" /> 생성자에서 지정된 정규식에 의해 정의된 위치에서 지정된 최대 수만큼 부분 문자열의 배열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1584">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
          <span data-ttu-id="50409-1585">입력 문자열에서 지정된 문자 위치부터 정규식 패턴을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1585">The search for the regular expression pattern starts at a specified character position in the input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1586">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1586">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1587"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%2A?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1587">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1588">`count` 문자열의 최대 수를 지정 하는 매개 변수는 `input` 문자열을 분할 마지막 문자열 문자열 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1588">The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="50409-1589">A `count` 최대한 많이 분할의 기본 동작을 제공 하는 값이 0입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1589">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span> <span data-ttu-id="50409-1590">`startat` 매개 변수는 첫 번째 구분 기호에 대 한 검색을 시작할 지점 정의 (이 수에 사용할 선행 공백은 건너뛰도록).</span><span class="sxs-lookup"><span data-stu-id="50409-1590">The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).</span></span>  
  
 <span data-ttu-id="50409-1591">일치 하는 경우는 `count`+ 1 위치를 표시, 메서드가 포함 된 요소가 하나인 배열을 반환는 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1591">If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string.</span></span> <span data-ttu-id="50409-1592">하나 이상의 일치 항목 발견 되 면 반환 된 배열의 첫 번째 요소는 한 문자는 일치 항목 앞까지 첫 번째 문자부터 문자열의 첫 번째 부분을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1592">If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.</span></span>  
  
 <span data-ttu-id="50409-1593">여러 명의 일치 항목이 서로 인접 한 있으며 발견 된 일치 레코드 수는 최소한 2 보다 작은 `count`, 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1593">If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1594">마찬가지로,에 일치 하는 경우 `startat`을 만드는데 문자열의 첫 번째 문자, 반환 된 배열의 첫 번째 요소는 빈 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1594">Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string.</span></span> <span data-ttu-id="50409-1595">즉, 일치 하는 인접 한 항목에서 발생 하는 빈 문자열 판단할 때 고려 됩니다 수에 부분 문자열 equals와 일치 하는지 여부 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1595">That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="50409-1596">다음 예제에서는 정규식에서에서 `\d+` 를 사용 하는 문자열에 숫자 문자의 첫 번째 부분 문자열의 시작 위치를 찾을 문자열을 분할의 최대는 차례로 세 번 해당 위치에서 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1596">In the following example, the regular expression `\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position.</span></span> <span data-ttu-id="50409-1597">빈 문자열, 5 자로 이루어진 영 문자열 및 문자열의 나머지 부분에서는 반환 된 문자열 배열 구성 정규식 패턴이 입력된 문자열의 시작 일치 하기 때문에</span><span class="sxs-lookup"><span data-stu-id="50409-1597">Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  
  
 <span data-ttu-id="50409-1598">정규식의 캡처링 괄호를 사용 하면 캡처된 텍스트가 모두 분할 문자열의 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1598">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="50409-1599">그러나 캡처된 텍스트가 들어 있는 배열 요소 고려 되지 않습니다 확인 된 일치 레코드 수에 도달 하는지 여부를 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1599">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="50409-1600">예를 들어 문자열을 분할 ' "apple-apricot-plum-pear-pomegranate-pineapple-peach" 4 개의 최대 7 개 요소 배열에서 문자열 결과에 15 문자에서 시작 하는 다음 코드 에서처럼 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1600">For example, splitting the string '"apple-apricot-plum-pear-pomegranate-pineapple-peach" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  
  
 <span data-ttu-id="50409-1601">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1601">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1602">.NET Framework 1.0 및 1.1 캡처 괄호, 첫 번째 집합에 일치 하는 항목이 없는 경우 추가 캡처링 괄호에서 캡처된 텍스트가 포함 되지 않습니다 반환된 된 배열에.</span><span class="sxs-lookup"><span data-stu-id="50409-1602">In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="50409-1603">.NET Framework 2.0 부터는 모든 캡처된 텍스트에도 추가 됩니다 반환된 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1603">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="50409-1604">예를 들어 다음 코드를 사용 하 여 캡처 괄호의 두 집합 문자열에서 개별 단어를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1604">For example, the following code uses two sets of capturing parentheses to extract the individual words in a string.</span></span> <span data-ttu-id="50409-1605">캡처 괄호의 첫 번째 집합에서 하이픈을 캡처하고 두 번째 집합 세로 막대를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1605">The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar.</span></span> <span data-ttu-id="50409-1606">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우이 메서드를 제외 세로 막대 지정할 때; 컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1606">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="50409-1607">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%2A> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1607">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="50409-1608">다음 예제에서는 입력된 문자열에는 문자로 시작 하는 대로 많은 요소에 "문자" 문자열을 분할 "a"입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1608">The following example splits the string "characters" into as many elements as the input string contains, starting with the character "a".</span></span> <span data-ttu-id="50409-1609">Null 문자열은 입력된 문자열의 끝와 일치 하므로 null 문자열이 반환 된 배열의 끝에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1609">Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  
  
 <span data-ttu-id="50409-1610"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> split 작업의 실행 시간으로 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다는 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1610">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="50409-1611">생성자를 호출 하는 경우에 시간 제한 간격을 설정 하지 않으면 작업이 있는 응용 프로그램 도메인에 대해 설정 된 제한 시간 값을 초과 하는 경우 예외가 throw 되는 <xref:System.Text.RegularExpressions.Regex> 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1611">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="50409-1612">제한 시간 없음을에 정의 된 경우는 <xref:System.Text.RegularExpressions.Regex> 생성자 호출 응용 프로그램 도메인의 속성에서 제한 시간 값이 또는 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 발생 하지 않습니다</span><span class="sxs-lookup"><span data-stu-id="50409-1612">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1613">
            <paramref name="input" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1613">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1614">
            <paramref name="startat" />이 0보다 작거나 <paramref name="input" />의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1614">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1615">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1615">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1616">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1616">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1617">분할할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1617">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1618">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1618">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1619">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1619">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1620">지정된 정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1620">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span>
          </span>
          <span data-ttu-id="50409-1621">지정한 옵션에 따라 일치 작업이 수정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1621">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1622">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1622">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1623"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1623">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1624">문자열은 최대한 많이 분할 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1624">The string is split as many times as possible.</span></span> <span data-ttu-id="50409-1625">구분 기호를 찾을 수 없으면 반환 값은 원래 값을 갖는 하나의 요소를 포함 하는 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1625">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="50409-1626">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1626">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1627">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1627">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50409-1628">컴파일된 정적에 대 한 호출에 사용 된 정규식 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드 자동으로 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1628">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="50409-1629">컴파일된 정규식의 수명을 직접 관리 하려면 인스턴스를 사용 하 여 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1629">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="50409-1630">여러 명의 일치 항목을 서로 인접 한 경우 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1630">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1631">예를 들어 단일 하이픈에서 문자열을 분할 하면 반환 된 배열의 인접 한 하이픈을 두 개 발견 되는 위치에 빈 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1631">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="50409-1632">시작 부분이 나 입력된 문자열의 끝에 일치 하는 빈 문자열의 시작 이나 반환 된 배열의 끝에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1632">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="50409-1633">다음 예제에서는 정규식 패턴을 사용 하 여 `[a-z]+` 를 대문자 또는 소문자 알파벳 문자에는 입력된 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1633">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="50409-1634">반환 된 배열의 첫 번째 및 마지막 요소의 값이 문자열이 시작 되 고 알파벳 문자 일치 끝나는, 때문에 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1634">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  
  
 <span data-ttu-id="50409-1635">캡처링 괄호에 사용 되는 경우는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 식, 캡처된 모든 텍스트는 결과 문자열 배열에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1635">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="50409-1636">예를 들어 "plum 기준" 하이픈에서 캡처 괄호 안에 배치 하는 문자열을 분할 하면 반환 되는 배열 하이픈을 포함 하는 문자열 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1636">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="50409-1637">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1637">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1638">.NET Framework 1.0 및 1.1 캡처 괄호, 첫 번째 집합에 일치 하는 항목이 없는 경우 추가 캡처링 괄호에서 캡처된 텍스트가 포함 되지 않습니다 반환된 된 배열에.</span><span class="sxs-lookup"><span data-stu-id="50409-1638">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="50409-1639">.NET Framework 2.0 부터는 모든 캡처된 텍스트에도 추가 됩니다 반환된 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1639">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="50409-1640">예를 들어 다음 코드 캡처 괄호의 두 집합을 사용 하 여 날짜 문자열에서 날짜 구분 기호를 포함 하 여 날짜의 요소를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1640">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="50409-1641">캡처 괄호의 첫 번째 집합 하이픈을 캡처하고 두 번째 집합 슬래시를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1641">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="50409-1642">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우 슬래시 문자; 제외 컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1642">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="50409-1643">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%2A> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1643">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="50409-1644"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> split 작업의 실행 시간 메서드가 호출 되는 응용 프로그램 도메인에 대해 지정 된 시간 제한 간격을 초과 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1644">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="50409-1645">시간 제한이 없으며 응용 프로그램 도메인의 속성에 정의 된 또는 제한 시간 값이 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1645">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1646">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1646">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1647">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1647">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1648">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1648">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1649">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1649">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1650">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1650">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1651">
            <para>이 메서드가 제한 시간 초과 후 메서드가 호출 되는 응용 프로그램 도메인의 기본 제한 시간 값을 해당 간격입니다. 응용 프로그램 도메인에 값에 대 한 시간 제한 값이 정의 되지 않은 경우 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 메서드 시간 초과 방지 하는 데 사용 됩니다. 텍스트 패턴 일치를 분할 하는 데 권장 되는 정적 메서드는 <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, 시간 제한 간격을 설정할 수 있습니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1651">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="50409-1652">분할할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1652">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="50409-1653">일치 항목을 찾을 정규식 패턴입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1653">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="50409-1654">일치 옵션을 제공하는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1654">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="50409-1655">시간 제한 간격이거나, 메서드에 시간 제한이 없어야 함을 나타내는 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1655">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1656">지정된 정규식 패턴에 의해 정의된 위치에서 부분 문자열로 이루어진 배열로 입력 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1656">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span>
          </span>
          <span data-ttu-id="50409-1657">추가 매개 변수는 일치하는 항목이 없는 경우 제한 시간 간격과 일치 작업을 수정하는 옵션을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1657">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1658">문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1658">A string array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1659"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> 메서드와 비슷하지만 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 구분 기호 문자 집합이 아닌 정규식에 의해 결정에서 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1659">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="50409-1660">문자열은 최대한 많이 분할 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1660">The string is split as many times as possible.</span></span> <span data-ttu-id="50409-1661">구분 기호를 찾을 수 없으면 반환 값은 원래 값을 갖는 하나의 요소를 포함 하는 `input` 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1661">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="50409-1662">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1662">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1663">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1663">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="50409-1664">컴파일된 정적에 대 한 호출에 사용 된 정규식 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드 자동으로 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1664">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="50409-1665">컴파일된 정규식의 수명을 직접 관리 하려면 인스턴스를 사용 하 여 <xref:System.Text.RegularExpressions.Regex.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="50409-1665">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="50409-1666">여러 명의 일치 항목을 서로 인접 한 경우 빈 문자열 배열에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1666">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="50409-1667">예를 들어 단일 하이픈에서 문자열을 분할 하면 반환 된 배열의 인접 한 하이픈을 두 개 발견 되는 위치에 빈 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1667">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="50409-1668">시작 부분이 나 입력된 문자열의 끝에 일치 하는 빈 문자열의 시작 이나 반환 된 배열의 끝에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1668">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="50409-1669">다음 예제에서는 정규식 패턴을 사용 하 여 `[a-z]+` 를 대문자 또는 소문자 알파벳 문자에는 입력된 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1669">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="50409-1670">반환 된 배열의 첫 번째 및 마지막 요소의 값이 문자열이 시작 되 고 알파벳 문자 일치 끝나는, 때문에 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1670">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  
  
 <span data-ttu-id="50409-1671">캡처링 괄호에 사용 되는 경우는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 식, 캡처된 모든 텍스트는 결과 문자열 배열에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1671">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="50409-1672">예를 들어 "plum 기준" 하이픈에서 캡처 괄호 안에 배치 하는 문자열을 분할 하면 반환 되는 배열 하이픈을 포함 하는 문자열 요소를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1672">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="50409-1673">그러나 정규식 패턴에 여러 세트 캡처 괄호의 경우이 메서드의 동작은.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1673">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="50409-1674">.NET Framework 1.0 및 1.1 캡처 괄호, 첫 번째 집합에 일치 하는 항목이 없는 경우 추가 캡처링 괄호에서 캡처된 텍스트가 포함 되지 않습니다 반환된 된 배열에.</span><span class="sxs-lookup"><span data-stu-id="50409-1674">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="50409-1675">.NET Framework 2.0 부터는 모든 캡처된 텍스트에도 추가 됩니다 반환된 된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1675">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="50409-1676">예를 들어 다음 코드 캡처 괄호의 두 집합을 사용 하 여 날짜 문자열에서 날짜 구분 기호를 포함 하 여 날짜의 요소를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1676">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="50409-1677">캡처 괄호의 첫 번째 집합 하이픈을 캡처하고 두 번째 집합 슬래시를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1677">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="50409-1678">예제 코드를 컴파일 및.NET Framework 1.0 또는 1.1에서 실행 하는 경우 슬래시 문자; 제외 컴파일된 되 고.NET Framework 2.0 또는 이상 버전에서 실행 되며, 경우에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1678">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="50409-1679">정규식에는 빈 문자열이 면과 일치할 수 있으면 <xref:System.Text.RegularExpressions.Regex.Split%2A> 모든 위치에서 빈 문자열 구분 기호를 찾을 수 없으므로 문자열 단일 문자 문자열의 배열으로 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1679">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="50409-1680">`matchTimeout` 매개 변수 지정 긴 패턴 일치 하는 방법을 메서드 시간이 초과 되기 전에 일치를 찾으려고 시도 합니다. 입력을 처리 하는 경우 응답을 중지 하 게 표시 되지 않도록 과도 한 역 추적을 사용 하는 정규식 시간 제한 간격을 설정 하면 유사 항목 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1680">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="50409-1681">자세한 내용은 참조 [정규식에 대 한 유용한](~/docs/standard/base-types/best-practices.md) 및 [역 추적](~/docs/standard/base-types/backtracking-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1681">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="50409-1682">일치 항목이 없으면 해당 시간 간격에서 발견 되 면 경우에 메서드에서 throw 된 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1682">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="50409-1683">`matchTimeout` 메서드가 실행 되는 응용 프로그램 도메인에 대해 정의 된 모든 기본 제한 시간 값을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1683">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1684">정규식 구문 분석 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1684">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1685">
            <paramref name="input" /> 또는 <paramref name="pattern" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1685">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="50409-1686">
            <paramref name="options" />가 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 값의 유효한 비트 조합이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1686">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="50409-1687">-또는-  <paramref name="matchTimeout" />이 음수, 0 또는 약 24일보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1687">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="50409-1688">시간이 초과되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1688">A time-out occurred.</span>
          </span>
          <span data-ttu-id="50409-1689">시간 제한에 대한 자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1689">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="50409-1690">
            <para>설정 하는 것이 좋습니다는 <paramref name="matchTimeout" /> 매개 변수를 2 초 등의 적절 한 값입니다. 제한 시간을 사용 하지 않도록 지정 하 여 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, 정규식 엔진에는 약간 더 나은 성능을 제공 합니다. 하지만 다음과 같은 경우에만 제한 시간을 비활성화 해야:-이 정규식에 의해 처리 된 입력 신뢰할 수 있고 알려진 원본에서 파생 또는 정적 텍스트로 구성 됩니다. 이 동적으로 사용자가 입력 한 텍스트를 제외 합니다.  -정규식 패턴을 효율적으로 처리 하는 확인을 철저히 테스트 하는 경우 일치 하는 일치 하지 않는 하 고 가까운 일치 합니다.  -정규식 패턴과 거의 일치 하는 처리 하는 경우 과도 한 역 추적을 일으키는 것으로 알려진 언어 요소가 없는 포함 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1690">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">
          <span data-ttu-id="50409-1691">serialization 정보로 채울 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1691">The object to populate with serialization information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="50409-1692">serialize된 데이터를 저장 및 검색할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1692">The place to store and retrieve serialized data.</span>
          </span>
          <span data-ttu-id="50409-1693">이 매개 변수는 나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1693">This parameter is reserved for future use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1694">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 deserialize하는 데 필요한 데이터로 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체를 채웁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1694">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.RegularExpressions.Regex" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-1695">
            <see langword="Regex" /> 생성자로 전달된 정규식 패턴을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1695">Returns the regular expression pattern that was passed into the <see langword="Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1696">
            <see langword="Regex" /> 생성자로 전달된 <paramref name="pattern" /> 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1696">The <paramref name="pattern" /> parameter that was passed into the <see langword="Regex" /> constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1697">`pattern` 기호로 일치 시킬 문자열을 설명 하는 정규식 언어 요소의 매개 변수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1697">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="50409-1698">정규식에 대 한 자세한 내용은 참조 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md) 및 [일반 식 언어-빠른 참조](~/docs/standard/base-types/regular-expression-language-quick-reference.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1698">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="50409-1699">
            <para>
              <see cref="T:System.Text.RegularExpressions.Regex" /> 만든 정규식의 기본 클래스는 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드. 이러한 정규식 사용 하 여 컴파일된는 <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> 기본 클래스의 구현입니다. 파생된 클래스에서 호출 된 경우는 <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> 에 전달 된 문자열을 반환 하는 메서드는 <paramref name="pattern" /> 의 매개 변수는 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 정규식 정의에 사용 된 클래스 생성자입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1699">
              <para>
                <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> implementation of the base class. If called from a derived class, the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> method returns the string that was passed to the <paramref name="pattern" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unescape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Unescape(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="50409-1700">변환할 텍스트가 포함된 입력 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1700">The input string containing the text to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1701">입력 문자열에서 이스케이프된 문자를 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1701">Converts any escaped characters in the input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1702">이스케이프된 문자가 이스케이프되지 않은 형식으로 변환된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1702">A string of characters with any escaped characters converted to their unescaped form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50409-1703"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> 메서드는 다음 두 개의 변환 중 하나를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1703">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:</span></span>  
  
-   <span data-ttu-id="50409-1704">변환을 수행한 취소는 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 이스케이프 문자를 제거 하 여 메서드 ("\\") 메서드에 의해 이스케이프 된 각 문자를 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1704">It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character ("\\") from each character escaped by the method.</span></span> <span data-ttu-id="50409-1705">여기에 \\, \*, +,?, &#124;, {, [, (,), ^, $., #, 및 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1705">These include the \\, \*, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters.</span></span> <span data-ttu-id="50409-1706">또한는 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> 메서드 닫는 대괄호 (]) 태그와 닫는 중괄호 (}) 문자가 이스케이프 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1706">In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50409-1707"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> 되돌릴 수 없습니다. 이스케이프 문자열 완벽 하 게 문자 이스케이프 되었는지 정확 하 게 추론할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1707"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,</span></span>  
  
-   <span data-ttu-id="50409-1708">자체로 표현 인쇄할 수 없는 문자를 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1708">It replaces the representation of unprintable characters with the characters themselves.</span></span> <span data-ttu-id="50409-1709">예를 들어 \x07으로 \a를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1709">For example, it replaces \a with \x07.</span></span> <span data-ttu-id="50409-1710">대체 문자 표현 되며 \a, \b, \e, \n, \r, \f, \t, \v 있습니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1710">The character representations it replaces are \a, \b, \e, \n, \r, \f, \t, and \v.</span></span>  
  
 <span data-ttu-id="50409-1711">경우는 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> 변환할 수 없는 다른 이스케이프 시퀀스가 발생 \w 또는 \s 처럼 throw는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="50409-1711">If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \w or \s, it throws an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="50409-1712">
            <paramref name="str" />에는 인식할 수 없는 이스케이프 시퀀스가 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1712">
              <paramref name="str" /> includes an unrecognized escape sequence.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="50409-1713">
            <paramref name="str" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1713">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionC () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionC();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-1714">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1714">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1715">
            <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 옵션이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1715">
              <see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionR () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionR();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="50409-1716">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 메서드에서 생성되는 <see cref="T:System.Text.RegularExpressions.Regex" /> 개체에서 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1716">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="50409-1717">
            <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 속성에 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 옵션이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1717">
              <see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Sub ValidateMatchTimeout (matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static void ValidateMatchTimeout(TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="matchTimeout">
          <span data-ttu-id="50409-1718">확인할 시간 제한 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1718">The time-out interval to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="50409-1719">시간 제한 간격이 허용 범위 내에 있는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="50409-1719">Checks whether a time-out interval is within an acceptable range.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>