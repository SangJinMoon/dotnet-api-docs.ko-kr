<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="88745e6fd7ac5403f750a8bd7fe3115e386d3db4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="48506-101">단일 일치 항목의 캡처된 그룹 집합을 반환합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="48506-101">Returns the set of captured groups in a single match.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-102"><xref:System.Text.RegularExpressions.GroupCollection> 클래스는 하나 이상의 구성 된 0부터 시작 하는 컬렉션 클래스 <xref:System.Text.RegularExpressions.Group> 개체에 대 한 정보를 제공 하는 캡처된 그룹이 정규식 일치 항목의 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="48506-103">컬렉션이 변경할 수 없습니다 (읽기 전용) 및 공용 생성자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="48506-104">A <xref:System.Text.RegularExpressions.GroupCollection> 개체에서 반환 된 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="48506-105">컬렉션에 하나 이상의 <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="48506-106">컬렉션의 첫 번째 요소를 포함 하는 성공한 일치 하는 경우는 <xref:System.Text.RegularExpressions.Group> 일치 하는 전체에 해당 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="48506-107">정규식 캡처링 그룹을 포함 하는 경우 각 후속 요소 그룹 캡처된 그룹을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="48506-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="48506-108">일치 하는 번호가 매겨진된 (명명 되지 않은) 캡처링 그룹은 명명 된 캡처링 그룹에서 일치 하기 전에 숫자 순서로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="48506-109">컬렉션에는 단일 일치가 성공적으로 수행 하는 경우 <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> 개체 <xref:System.Text.RegularExpressions.Group.Success%2A> 속성은 `false` 및 해당 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성과 같은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="48506-110">자세한 내용은의 "그룹화 구문 및 정규식 개체" 섹션을 참조 하십시오.는 [그룹화 구문](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) 문서.</span><span class="sxs-lookup"><span data-stu-id="48506-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="48506-111">언어에 의해 제공 된 열거자를 사용 해야 컬렉션의 멤버를 반복 하려면 (예: `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="48506-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="48506-112">Visual basic)에서 반환 되는 열거자를 검색 하는 대신는 <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="48506-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="48506-113">또한 개별 번호가 매겨진된 캡처된 그룹에서 액세스할 수 있습니다는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> 속성 (C# 인덱서) 하 고 개별 명명 된 캡처된 그룹에서 액세스할 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="48506-114">참고를 호출 하 여 숫자 및 모든 캡처링 그룹의 이름을 포함 하는 배열을 검색할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 및 <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="48506-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="48506-115">둘 다가 인스턴스 메서드를 이며를 인스턴스화하고 필요는 <xref:System.Text.RegularExpressions.Regex> 정규식 일치 여부를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="48506-116">다음 예제에서는 캡처링 그룹으로는 정규식을 사용 하 여 상표 및 등록된 상표 텍스트에 사용 하는 방법에 대 한 정보를 추출 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="48506-117">정규식 패턴은 `\b(\w+?)([\u00AE\u2122])`를 다음 표와 같이 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="48506-118">무늬</span><span class="sxs-lookup"><span data-stu-id="48506-118">Pattern</span></span>|<span data-ttu-id="48506-119">설명</span><span class="sxs-lookup"><span data-stu-id="48506-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="48506-120">단어 경계를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="48506-121">하나 이상의 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-121">Look for one or more word characters.</span></span> <span data-ttu-id="48506-122">함께 이러한 상표 이름을 형성 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="48506-123">(이 정규식 상표 한 단어 구성 되어 있다고 가정 하는 참고 합니다.) 이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="48506-124">하나를 찾습니다는® 또는™ 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="48506-125">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="48506-126">각 일치 항목에 대 한는 <xref:System.Text.RegularExpressions.GroupCollection> 세 개 포함 <xref:System.Text.RegularExpressions.Group> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="48506-127">첫 번째 개체는 전체 정규식과 일치 하는 문자열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="48506-128">캡처된 첫 번째 그룹을 나타내는 두 번째 개체에는 제품 이름을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="48506-129">두 번째 캡처된 그룹을 나타내는 세 번째 개체 포함 상표 또는 등록 상표 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="48506-130">컬렉션을 복사할 대상 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-130">The array the collection is to be copied into.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="48506-131">대상 배열에서 복사를 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-131">The position in the destination array where the copying is to begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="48506-132">지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-132">Copies all the elements of the collection to the given array beginning at the given index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-133">지정된 된 인덱스에서 시작 하 여 배열에 전체 컬렉션을 복사 하 고, 때문에 대상 배열의 컬렉션 이상이 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-133">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="48506-134">이 멤버에 없으면는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-134">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="48506-135">대상으로 하는 응용 프로그램을 개발 하려는 경우는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]를 사용 하 여는 <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-135">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="48506-136">다음 예제에서는 문장에서 각 단어를 추출 하 고 캡처 그룹에 캡처합니다는 <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> 메서드는 다음에 일치 하는 문자열의 요소를 복사 하는 데 사용 됩니다 <xref:System.Text.RegularExpressions.GroupCollection> 모든 일치 항목에서 캡처를 포함 하는 배열에 개체를 그룹화 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-136">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="48506-137">그러면 캡처된 개별 단어는 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-137">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="48506-138">정규식은 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-138">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="48506-139">무늬</span><span class="sxs-lookup"><span data-stu-id="48506-139">Pattern</span></span>|<span data-ttu-id="48506-140">설명</span><span class="sxs-lookup"><span data-stu-id="48506-140">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="48506-141">단어 경계를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-141">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="48506-142">하나 이상의 공백이 아닌 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-142">Match one or more non-white space characters.</span></span> <span data-ttu-id="48506-143">첫 번째 캡처링 그룹에 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-143">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="48506-144">단어 경계를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-144">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="48506-145">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-145">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="48506-146">
            <paramref name="arrayIndex" />가 <paramref name="array" />의 범위 밖인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-146">
              <paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="48506-147">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-147">-or-</span>
          </span>
          <span data-ttu-id="48506-148">
            <paramref name="arrayIndex" />에 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" />를 더한 값이 <paramref name="array" />의 범위 밖인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-148">
              <paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="48506-149">컬렉션의 그룹 수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-149">Returns the number of groups in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-150">컬렉션의 그룹 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-150">The number of groups in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-151"><xref:System.Text.RegularExpressions.GroupCollection> 개체의 구성원을 하나 이상 있습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-151">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="48506-152">일치 하는 성공 하면는 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성에서 반환 된 <xref:System.Text.RegularExpressions.GroupCollection> 단일 멤버를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-152">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="48506-153">컬렉션을 반복하는 열거자를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-153">Provides an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="48506-154">
            <see cref="T:System.Text.RegularExpressions.Group" />의 모든 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 개체를 포함하는 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-154">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-155">호출 하는 대신는 <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> 을 반복할 수 있는 열거자를 검색 하는 메서드는 <xref:System.Text.RegularExpressions.Group> 그룹 반복 구문을 사용 해야 컬렉션의 개체 (같은 `foreach` C# 및 `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="48506-155">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="48506-156">Visual Basic)에서는 선택한 프로그래밍 언어에서 제공 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-156">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="48506-157">컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-157">Gets a value that indicates whether the collection is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-158">모든 경우에 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-158">
              <see langword="true" /> in all cases.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="48506-159">
            <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-159">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-160">모든 경우에 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-160">
              <see langword="false" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="48506-161">이 멤버에 없으면는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-161">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="48506-162">대상으로 하는 응용 프로그램을 개발 하려는 경우는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]를 사용 하 여는 <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-162">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="48506-163">정수나 문자열 인덱스에 따라 컬렉션의 단일 멤버에 액세스할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-163">Enables access to a single member of the collection by integer or string index.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum">
          <span data-ttu-id="48506-164">검색할 컬렉션 멤버의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-164">The zero-based index of the collection member to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="48506-165">정수 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-165">Enables access to a member of the collection by integer index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-166">
            <paramref name="groupnum" />으로 지정한 컬렉션의 멤버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-166">The member of the collection specified by <paramref name="groupnum" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-167"><xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> 속성은 인덱스 (C#) 또는의 기본 속성 (Visual Basic)에서는 <xref:System.Text.RegularExpressions.GroupCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-167">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="48506-168">사용 하 여 컬렉션의 멤버를 열거할 수 있습니다는 `foreach` C# 문 또는 `For Each` Visual Basic의 문.</span><span class="sxs-lookup"><span data-stu-id="48506-168">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="48506-169">이 속성을 사용 하 여 캡처된 그룹의 개별 인덱스 번호로 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-169">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="48506-170">인스턴스를 호출 하 여 정규식의 캡처링 그룹을 모든 숫자를 포함 하는 배열을 검색 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="48506-170">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="48506-171">인스턴스를 호출 하 여 해당 번호를 명명 된 캡처링 그룹을 매핑할 수도 있습니다 <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="48506-171">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="48506-172">값을 검색 하 여 컬렉션의 항목 수를 확인할 수 있습니다는 <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-172">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="48506-173">에 대 한 유효한 값은 `groupnum` 컬렉션의 항목 개수 보다 1 작은 값을 0에서 매개 변수 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-173">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="48506-174"><xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성은 항상 구성원을 하나 이상에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-174">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="48506-175">정규식 엔진은 단일 특정 입력된 문자열에서 일치 항목을 찾을 수 없는 경우 <xref:System.Text.RegularExpressions.Group> 컬렉션의 개체에 해당 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 속성이로 설정 `false` 및 해당 `Group.Value` 속성이로 설정 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-175">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="48506-176">경우 `groupnum` 인덱스가 컬렉션의 멤버 이거나 `groupnum` 일치 되지 입력된 문자열에서 메서드를 반환 하는 캡처링 그룹의 인덱스는 <xref:System.Text.RegularExpressions.Group> 개체 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 속성은 `false` 및 해당 `Group.Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-176">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="48506-177">다음 예제에서는 두 개의 번호가 매겨진된 그룹으로 구성 된 정규식을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-177">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="48506-178">첫 번째 그룹은 하나 이상의 연속 된 숫자를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-178">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="48506-179">두 번째 그룹은 단일 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-179">The second group matches a single character.</span></span> <span data-ttu-id="48506-180">정규식 엔진은 첫 번째 그룹의 0 번 이상 발생 하기 때문에 항상 찾을 수 없는 일치 하는 정규식 일치가 성공적으로 수행 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-180">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="48506-181">다음 예제는 결과 때는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> 속성 일치 하지 않는 그룹, 일치 하는 그룹 및 정규식에서 정의 되지 않은 그룹을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-181">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="48506-182">이 예제에서는 정규식 패턴을 정의 `(\d+)*(\w)\2`을 다음 표와 같이 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-182">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="48506-183">무늬</span><span class="sxs-lookup"><span data-stu-id="48506-183">Pattern</span></span>|<span data-ttu-id="48506-184">설명</span><span class="sxs-lookup"><span data-stu-id="48506-184">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="48506-185">10 진수의 하나 이상의 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-185">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="48506-186">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-186">This is the first capturing group.</span></span> <span data-ttu-id="48506-187">이 패턴을 0 개 또는 1 개 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-187">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="48506-188">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-188">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="48506-189">두 번째 캡처링 그룹에 의해 캡처된 문자열을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-189">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname">
          <span data-ttu-id="48506-190">캡처링 그룹의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-190">The name of a capturing group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="48506-191">문자열 인덱스에 따라 컬렉션의 멤버에 대한 액세스를 가능하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-191">Enables access to a member of the collection by string index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-192">
            <paramref name="groupname" />으로 지정한 컬렉션의 멤버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-192">The member of the collection specified by <paramref name="groupname" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48506-193">`groupName` 정의 된 캡처링 그룹의 이름일 수 있습니다는 `(?<` *이름* `>)` 요소는 정규식 또는 그룹화에서 정의 된 캡처링 그룹의 숫자의 문자열 표현을 구문입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-193">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="48506-194">정규식의 그룹에 대 한 자세한 내용은 참조 [그룹화 구문](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-194">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="48506-195">모든 캡처된 그룹의 이름을 검색할 수 있습니다는 <xref:System.Text.RegularExpressions.Regex> 호출 하 여 개체는 <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="48506-195">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="48506-196">호출 하 여 그룹의 이름으로는 정규식에서 캡처의 번호를 매핑할 수도 있습니다는 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="48506-196">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="48506-197">배열에서 개별 이름을에 전달 될 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> 캡처된 문자열을 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-197">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="48506-198">경우 `groupname` 컬렉션에서 캡처링 그룹의 이름이 올바르지 경우 `groupname` 일치 되지 입력된 문자열에서 메서드를 반환 하는 캡처링 그룹의 이름인는 <xref:System.Text.RegularExpressions.Group> 개체 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 속성은 `false` 및 해당 `Group.Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-198">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="48506-199">다음 예제에서는 두 개의 명명 된 그룹으로 구성 된 정규식을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-199">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="48506-200">첫 번째 그룹 `numbers`, 하나 이상의 연속 된 숫자를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-200">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="48506-201">두 번째 그룹 `letter`, 단일 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-201">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="48506-202">정규식 엔진에 정의 된 패턴의 0 번 이상 발생 하기 때문에 `numbers` 그룹은 `numbers` 일치가 성공적으로 수행 하는 경우에 그룹은 항상 존재 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-202">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="48506-203">다음 예제는 결과 때는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> 속성 일치 하지 않는 그룹, 일치 하는 그룹 및 정규식에서 정의 되지 않은 그룹을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-203">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="48506-204">이 예제에서는 정규식 패턴을 정의 `(?<numbers>\d+)*(?<letter>\w)\k<letter>`을 다음 표와 같이 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="48506-204">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="48506-205">무늬</span><span class="sxs-lookup"><span data-stu-id="48506-205">Pattern</span></span>|<span data-ttu-id="48506-206">설명</span><span class="sxs-lookup"><span data-stu-id="48506-206">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="48506-207">10 진수의 하나 이상의 발생을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-207">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="48506-208">이 `numbers` 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-208">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="48506-209">이 패턴을 0 개 또는 1 개 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-209">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="48506-210">단일 단어 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="48506-210">Match a single word character.</span></span> <span data-ttu-id="48506-211">이 `letter` 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-211">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="48506-212">에 의해 캡처된 문자열 일치는 `letter` 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="48506-212">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="48506-213">
            <see cref="T:System.Text.RegularExpressions.GroupCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-213">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="48506-214">동기화할 <see cref="T:System.Text.RegularExpressions.Match" /> 개체의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="48506-214">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="48506-215">이 멤버에 없으면는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-215">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="48506-216">대상으로 하는 응용 프로그램을 개발 하려는 경우는 [!INCLUDE[net_portable](~/includes/net-portable-md.md)]를 사용 하 여는 <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="48506-216">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>