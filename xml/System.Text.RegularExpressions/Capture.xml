<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd094fcd16b7f605955b6f1e9e71ca2a9b2584a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408311" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>성공한 단일 하위 식 캡처의 결과를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Text.RegularExpressions.Capture> 개체는 변경할 수 없습니다 및 public 생성자가 없습니다. 인스턴스를 통해 반환 되는 <xref:System.Text.RegularExpressions.CaptureCollection> 에서 반환 되는 개체는 `Match.Captures` 및 <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> 속성 합니다. 그러나는 `Match.Captures` 으로 동일한 일치 하는 방법에 대 한 정보를 제공 하는 속성은 <xref:System.Text.RegularExpressions.Match> 개체입니다.  
  
 적용 되지 않은 경우는 캡처링 그룹에는 <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> 속성에서 반환 된 <xref:System.Text.RegularExpressions.CaptureCollection> 단일 <xref:System.Text.RegularExpressions.Capture> 개체와 동일한 캡처에 대 한 정보를 제공 하는 <xref:System.Text.RegularExpressions.Group> 개체. 캡처링 그룹에 수량자를 적용 않으면는 `Group.Index`, `Group.Length`, 및 `Group.Value` 속성 캡처된 마지막 그룹에 대 한 정보를 제공 하지만 <xref:System.Text.RegularExpressions.Capture> 개체에 <xref:System.Text.RegularExpressions.CaptureCollection> 모두에 대 한 정보를 제공 합니다. 하위 식을 캡처합니다. 예제에서는 그림을 제공합니다.  
  
   
  
## Examples  
 다음 예제에서는 마침표를 제외 하 고 문장 부호 없는 들어 있는 문장 일치 하는 정규식 정의 (".").  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 정규식 패턴 `((\w+)[\s.])+`는 다음 테이블과 같이 정의됩니다. Note이 정규식은 수량자 (+)는 전체 정규식에 적용 됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`(\w+)`|하나 이상의 단어 문자를 찾습니다. 이 그룹은 두 번째 캡처링 그룹입니다.|  
|`[\s.])`|공백 문자 또는 마침표 (".").|  
|`((\w+)[\s.])`|하나 이상의 단어 문자 뒤에 공백 문자 또는 마침표를 찾습니다 ("."). 이 그룹은 첫 번째 캡처링 그룹입니다.|  
|`((\w+)[\s.])+`|일치 항목을 하나 이상의 단어 문자 또는 문자 뒤에 공백 문자 또는 마침표 (".").|  
  
 이 예제에서는 입력된 문자열 두 문장 이루어져 있습니다. 출력에서 볼 수 있듯이 첫 번째 문장 하나만 단어로 구성 하므로 <xref:System.Text.RegularExpressions.CaptureCollection> 개체에는 단일 <xref:System.Text.RegularExpressions.Capture> 와 동일한 캡처를 나타내는 개체의 <xref:System.Text.RegularExpressions.Group> 개체입니다. 두 번째 문장을 여러 단어로 구성 하므로 <xref:System.Text.RegularExpressions.Group> 개체 마지막 일치 하는 하위 식에 대 한 정보만 포함 합니다. 나타내는 첫 번째 캡처 그룹 1에 마침표가 있는 문장의 마지막 단어를 포함 합니다. 나타내는 두 번째 캡처 그룹 2는 문장에 있는 마지막 단어를 포함 합니다. 그러나는 <xref:System.Text.RegularExpressions.Capture> 해당 그룹의 개체 <xref:System.Text.RegularExpressions.CaptureCollection> 개체 하위 식을 일치 하는 문자열을 캡처합니다. <xref:System.Text.RegularExpressions.Capture> 캡처의 첫 번째 캡처링 그룹의 컬렉션에 있는 개체에는 각 캡처된 단어와 공백 문자 또는 기간에 대 한 정보가 포함 되어 있습니다. <xref:System.Text.RegularExpressions.Capture> 캡처의 두 번째 캡처링 그룹의 컬렉션에 있는 개체에는 캡처된 각 단어에 대 한 정보가 포함 되어 있습니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>원래 문자열에서 캡처된 부분 문자열의 첫째 문자를 찾은 위치입니다.</summary>
        <value>원래 문자열에서 캡처된 부분 문자열을 찾은 0부터 시작하는 시작 위치입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>캡처된 부분 문자열의 길이를 가져옵니다.</summary>
        <value>캡처된 부분 문자열의 길이입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 속성을 호출하여 입력 문자열로부터 캡처된 하위 문자열을 검색합니다.</summary>
        <returns>일치 항목으로 캡처한 부분 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` 실제로 내부 호출 하 여 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 문자열에서 캡처된 부분 문자열을 가져옵니다.</summary>
        <value>일치 항목으로 캡처한 부분 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 또는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드가 실패 값 반환 된 일치 항목을 찾지 `Match.Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 정규식 엔진이 캡처링 그룹과 일치 수 없는 경우. 반환 된 값 `Group.Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 그림에 대 한 두 번째 예제를 참조 하십시오.  
  
   
  
## Examples  
 다음 예제에서는 마침표를 제외 하 고 문장 부호 없는 들어 있는 문장 일치 하는 정규식 정의 ("."). `Match.Value` 속성 각 일치 항목에 대 한 일치 하는 문장에 구성 된 결과 문자열을 표시 합니다. `Group.Value` 속성 각 캡처링 그룹에 대 한 결과 문자열을 표시 하며 해당 캡처링 그룹에 의해 캡처된 마지막 문자열 구성 됩니다. <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> 속성 각 캡처에 대 한 결과 문자열을 표시 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 정규식 패턴 `((\w+)[\s.])+`는 다음 테이블과 같이 정의됩니다. Note이 정규식은 수량자 (+)는 전체 정규식에 적용 됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`(\w+)`|하나 이상의 단어 문자를 찾습니다. 이 그룹은 두 번째 캡처링 그룹입니다.|  
|`[\s.])`|공백 문자 또는 마침표 (".").|  
|`((\w+)[\s.])`|하나 이상의 단어 문자 뒤에 공백 문자 또는 마침표를 찾습니다 ("."). 이 그룹은 첫 번째 캡처링 그룹입니다.|  
|`((\w+)[\s.])+`|일치 항목을 하나 이상의 단어 문자 또는 문자 뒤에 공백 문자 또는 마침표 (".").|  
  
 이 예제에서는 입력된 문자열 두 문장 이루어져 있습니다. 출력에서 볼 수 있듯이 첫 번째 문장 하나만 단어로 구성 하므로 <xref:System.Text.RegularExpressions.CaptureCollection> 개체에는 단일 <xref:System.Text.RegularExpressions.Capture> 와 동일한 캡처를 나타내는 개체의 <xref:System.Text.RegularExpressions.Group> 개체입니다. 두 번째 문장을 여러 단어로 구성 하므로 <xref:System.Text.RegularExpressions.Group> 개체 마지막 일치 하는 하위 식에 대 한 정보만 포함 합니다. 나타내는 첫 번째 캡처 그룹 1에 마침표가 있는 문장의 마지막 단어를 포함 합니다. 나타내는 두 번째 캡처 그룹 2는 문장에 있는 마지막 단어를 포함 합니다. 그러나는 <xref:System.Text.RegularExpressions.Capture> 해당 그룹의 개체 <xref:System.Text.RegularExpressions.CaptureCollection> 개체 하위 식을 일치 하는 문자열을 캡처합니다. <xref:System.Text.RegularExpressions.Capture> 캡처의 첫 번째 캡처링 그룹의 컬렉션에 있는 개체에는 각 캡처된 단어와 공백 문자 또는 기간에 대 한 정보가 포함 되어 있습니다. <xref:System.Text.RegularExpressions.Capture> 캡처의 두 번째 캡처링 그룹의 컬렉션에 있는 개체에는 캡처된 각 단어에 대 한 정보가 포함 되어 있습니다.  
  
 다음 예제에서는 정규식 패턴을 사용 하 여 `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`, 마침표로 구분 하는 두 부분으로 구성 된 제품 수와 일치 해야 합니다. 알파벳 문자 뒤에 선택적인 번호입니다. 두 부분으로 구성 됩니다. 첫 번째 입력된 문자열 패턴을 반환 된 값과 일치 하지 않으므로 <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> 개체의 `Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 마찬가지로, 정규식 패턴 수 없는 경우 캡처 그룹, 해당 값에 맞게 <xref:System.Text.RegularExpressions.Group> 개체의 `Value` 속성은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 정규식 패턴은 다음 표와 같이 정의 됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`^`|문자열의 시작 부분에서 검색을 시작합니다.|  
|`([a-z]+)`|하나 이상의 문자를 찾습니다는 오름차순입니다. 정규식 엔진에 전달 되기 때문에 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> 옵션을이 비교는 대/소문자 구분 합니다. 이 그룹은 첫 번째 캡처링 그룹입니다.|  
|`(\d+)?`|하나 이상의 10 진수의 0 번 이상 발생을 찾습니다. 이 그룹은 두 번째 캡처링 그룹입니다.|  
|`\.`|리터럴 마침표 문자를 찾습니다.|  
|`([a-z]+`|하나 이상의 문자를 찾습니다는 오름차순입니다. 비교는 대/소문자 구분 합니다.|  
|`(\d)*`|0번 이상 나오는 10진수를 찾습니다. 일치 하는 단일 숫자 네 번째 캡처링 그룹입니다.|  
|`([a-z]+(\d)*)`|하나 이상의 알파벳 문자를 찾습니다는 0 개 또는 하나 이상의 10 진수 뒤 오름차순입니다. 이 그룹은 네 번째 캡처링 그룹입니다.|  
|`$`|문자열의 끝에서 일치 항목 찾기를 결론을 내립니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>