<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MatchCollection.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e87525df368996e12afb05786542f35ef70697a6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e87525df368996e12afb05786542f35ef70697a6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.</source>
          <target state="translated">정규식 패턴을 입력 문자열에 반복적으로 적용하여 찾은 성공적인 일치 집합을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The collection is immutable (read-only) and has no public constructor.</source>
          <target state="translated">컬렉션이 변경할 수 없습니다 (읽기 전용) 및 공용 생성자가 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The collection contains zero or more <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> objects.</source>
          <target state="translated">컬렉션에 0 개 이상의 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>If the match is successful, the collection is populated with one <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> object for each match found in the input string.</source>
          <target state="translated">성공한 일치 하는 경우 컬렉션 하나로 채워집니다 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> 입력된 문자열에서 찾은 각 일치 항목에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>If the match is unsuccessful, the collection contains no <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> objects, and its <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property equals zero.</source>
          <target state="translated">일치가 성공적으로 수행 하는 경우 컬렉션 ' 아니요 ' <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> 개체 및 해당 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성은 0입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object:</source>
          <target state="translated">정규식 엔진을 빌드하기 위한 다음 두 가지 기술 중 하나 사용 된 특정 입력된 문자열을 정규식 패턴을 적용할 때는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Direct evaluation.</source>
          <target state="translated">직접 계산 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated all at once, with all matches resulting from a particular call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체에 대 한 특정 호출에서 발생 하는 모든 일치 항목으로 한 번에 모두 채워집니다는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>This technique is used when the collection's <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
          <target state="translated">이 방법을 사용 하는 경우는 컬렉션의 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>It typically is the more expensive method of populating the collection and entails a greater performance hit.</source>
          <target state="translated">일반적으로 컬렉션을 채우는 비용이 많이 드는 방법 이며 큰 성능 저하가 수반 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Lazy evaluation.</source>
          <target state="translated">지연 계산 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated as needed on a match-by-match basis.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체는 일치 항목으로 별로 필요에 따라 채워집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>It is equivalent to the regular expression engine calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method repeatedly and adding each match to the collection.</source>
          <target state="translated">정규식 엔진 호출 하는 것과 같습니다는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> 메서드 반복 해 서 각 일치 항목을 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>This technique is used when the collection is accessed through its <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, or when it is accessed using the <ph id="ph2">`foreach`</ph> statement (in C#) or the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement (in Visual Basic).</source>
          <target state="translated">컬렉션을 통해 액세스 될 때이 기술을 사용 되는 해당 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 메서드를 사용 하 여 액세스할 때 또는 <ph id="ph2">`foreach`</ph> 문 (C#) 또는 <ph id="ph3">`For Each`</ph>... <ph id="ph4">`Next`</ph> 문 (Visual Basic의 경우).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id="ph1">`foreach`</ph> in C# and <ph id="ph2">`For Each`</ph>…<ph id="ph3">`Next`</ph></source>
          <target state="translated">언어에 의해 제공 된 열거자를 사용 해야 컬렉션의 멤버를 반복 하려면 (예: <ph id="ph1">`foreach`</ph> C# 및 <ph id="ph2">`For Each`</ph>...<ph id="ph3">`Next`</ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">Visual basic)에서 반환 되는 열거자를 검색 하는 대신는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> class to interrogate a set of <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> instances.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 집합이 질의 하는 클래스 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>The array the collection is to be copied into.</source>
          <target state="translated">컬렉션을 복사할 대상 배열입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>The position in the array where copying is to begin.</source>
          <target state="translated">배열 내에서 복사를 시작할 위치입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Copies all the elements of the collection to the given array starting at the given index.</source>
          <target state="translated">지정된 인덱스에서 시작하여 지정된 배열에 컬렉션의 요소를 모두 복사합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.</source>
          <target state="translated">지정된 된 인덱스에서 시작 하 여 배열에는 컬렉션을 복사 하는 때문에 대상 배열의 전체 컬렉션 이상이 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">이 멤버에 없으면는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">대상으로 하는 응용 프로그램을 개발 하려는 경우는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType&gt;</ph> 메서드 대신 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체는 일반적으로 채워집니다 지연 평가 사용 하 여 throw 할 수 있습니다 완전히 채워진 전에 컬렉션을 복사 하는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
          <target state="translated">일치 작업에 대 한 제한 시간 값이 적용 되 고 해당 시간 제한 간격을 초과 하는 단일 일치 항목을 찾으려고 시도 하는 경우에이 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a multi-dimensional array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 다차원 배열일 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is outside the bounds of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 범위 밖인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> plus <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph> is outside the bounds of <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph>에 <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph>를 더한 값이 <ph id="ph3">&lt;paramref name="array" /&gt;</ph>의 범위 밖인 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>A time-out occurred.</source>
          <target state="translated">시간이 초과되었습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Gets the number of matches.</source>
          <target state="translated">일치하는 항목의 개수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The number of matches.</source>
          <target state="translated">일치하는 항목의 개수입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Accessing individual members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object by retrieving the value of the collection's <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to populate the collection using direct evaluation.</source>
          <target state="translated">개별 멤버에 액세스 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체를 컬렉션의 값을 검색 하 여 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성 하면 정규식 엔진을 직접 평가 사용 하 여 컬렉션을 채웁니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>ln contrast, calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or using the <ph id="ph2">`foreach`</ph> statement in C# and the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
          <target state="translated">ln 대비, 호출 된 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 메서드 (또는 사용 하 여는 <ph id="ph2">`foreach`</ph> C# 문 및 <ph id="ph3">`For Each`</ph>... <ph id="ph4">`Next`</ph> Visual Basic의 문) 하면 있는 그대로 컬렉션 필요한 지연 평가 사용 하 여으로 정규식 엔진을 채웁니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.</source>
          <target state="translated">직접 계산 보다 지연 계산은 컬렉션을 생성 하는 비용이 훨씬 많이 방법을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체는 일반적으로 throw 할 수 있습니다 완전히 채워진 전에 컬렉션에 있는 요소의 수를 확인 하는 지연 평가 사용 하 여 채워집니다는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
          <target state="translated">일치 작업에 대 한 제한 시간 값이 적용 되 고 해당 시간 제한 간격을 초과 하는 단일 일치 항목을 찾으려고 시도 하는 경우에이 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property to determine whether the call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method found any matches.</source>
          <target state="translated">사용 하 여 다음 예제는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성을 확인 여부에 대 한 호출은 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 메서드 일치 항목을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>If not, it indicates that no matches were found.</source>
          <target state="translated">그렇지 않으면 일치 하는 항목이 발견 된 나타냅니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Otherwise, it enumerates the matches and displays their value and the position in the input string at which they were found.</source>
          <target state="translated">그렇지 않으면 일치 하는 항목을 열거 하 고 발견 된 된 입력된 문자열의 위치와 해당 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The regular expression pattern <ph id="ph1">`\d+`</ph> matches one or more decimal characters in an input string.</source>
          <target state="translated">정규식 패턴 <ph id="ph1">`\d+`</ph> 입력된 문자열에서 하나 이상의 10 진수 문자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>A time-out occurred.</source>
          <target state="translated">시간이 초과되었습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Provides an enumerator that iterates through the collection.</source>
          <target state="translated">컬렉션을 반복하는 열거자를 제공합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>An object that contains all <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> objects within the <ph id="ph2">&lt;see cref="T:System.Text.RegularExpressions.MatchCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph>의 모든 <ph id="ph2">&lt;see cref="T:System.Text.RegularExpressions.MatchCollection" /&gt;</ph> 개체를 포함하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Instead of  calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id="ph3">`foreach`</ph> in C# and <ph id="ph4">`For Each`</ph>…<ph id="ph5">`Next`</ph></source>
          <target state="translated">호출 하는 대신는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 을 반복할 수 있는 열거자를 검색 하는 메서드는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 그룹 반복 구문을 사용 해야 컬렉션의 개체 (같은 <ph id="ph3">`foreach`</ph> C# 및 <ph id="ph4">`For Each`</ph>...<ph id="ph5">`Next`</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>in Visual Basic) provided by your programming language.</source>
          <target state="translated">Visual Basic)에서는 선택한 프로그래밍 언어에서 제공 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Iterating the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or the <ph id="ph3">`foreach`</ph> statement in C# and the <ph id="ph4">`For Each`</ph>...<ph id="ph5">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
          <target state="translated">멤버를 반복 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 를 사용 하 여 개체는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 메서드 (또는 <ph id="ph3">`foreach`</ph> C# 문 및 <ph id="ph4">`For Each`</ph>... <ph id="ph5">`Next`</ph> Visual Basic의 문) 하면 있는 그대로 컬렉션 필요한 지연 평가 사용 하 여으로 정규식 엔진을 채웁니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This is analogous to repeatedly calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method, and then adding the resulting match to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated">이것은 반복적으로 호출 유사는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> 메서드를 한 다음 결과 일치 항목을 추가 하는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
          <target state="translated">반면, 정규식 엔진을 사용 하 여 직접 계산 컬렉션을 한 번에 모두 때는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This can be a much more expensive method of building the collection than lazy evaluation.</source>
          <target state="translated">이 비용이 훨씬 많이 방법 보다 지연 계산은 컬렉션을 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체는 일반적으로 채워집니다 지연 평가 사용 하 여 throw 될 수 있습니다 컬렉션의 다음 멤버로 이동 하는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.</source>
          <target state="translated">일치 작업에 대 한 제한 시간 값이 적용 되 고 해당 시간 제한 간격을 초과 하는 다음 일치 항목을 찾으려고 시도 하는 경우에이 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>A time-out occurred.</source>
          <target state="translated">시간이 초과되었습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
          <source>Gets a value that indicates whether the collection is read only.</source>
          <target state="translated">컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">모든 경우에 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>Gets a value indicating whether access to the collection is synchronized (thread-safe).</source>
          <target state="translated">해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">모든 경우에 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">이 멤버에 없으면는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">대상으로 하는 응용 프로그램을 개발 하려는 경우는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType&gt;</ph> 속성 대신 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Index into the <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> 컬렉션의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Gets an individual member of the collection.</source>
          <target state="translated">컬렉션의 개별 멤버를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The captured substring at position <ph id="ph1">&lt;paramref name="i" /&gt;</ph> in the collection.</source>
          <target state="translated">컬렉션의 위치 <ph id="ph1">&lt;paramref name="i" /&gt;</ph>에서 캡처된 부분 문자열입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>In C#, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is an indexer; it is not explicitly referenced in code, but instead allows the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to be accessed as if it were an array.</source>
          <target state="translated">C#에서 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> 속성 인덱서입니다; 코드에서 명시적으로 참조 되지 않은 대신 허용 되지만 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 컬렉션에 액세스 하 여 마치 배열 처럼 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Typically, individual items in the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object are accessed by their index only after the total number of items in the collection has been determined from the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property.</source>
          <target state="translated">일반적으로 개별 항목에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 컬렉션에 있는 항목의 총 수에서 결정 한 후에 해당 인덱스로 액세스 개체는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>However, accessing the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to use direct evaluation to build the collection all at once.</source>
          <target state="translated">그러나에 액세스 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> 속성 사용할 경우 정규식 엔진이 직접 평가 사용 하 여 컬렉션을 한 번에 작성 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>This is typically more expensive than iterating the collection using the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, the C# <ph id="ph2">`foreach`</ph> statement, or the Visual Basic <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement.</source>
          <target state="translated">이것은 일반적으로 보다 더 사용 하 여 컬렉션을 반복 하는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> 메서드, C# <ph id="ph2">`foreach`</ph> 문 또는 Visual Basic <ph id="ph3">`For Each`</ph>... <ph id="ph4">`Next`</ph> 문.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 개체는 일반적으로 채워집니다 지연 평가 사용 하 여 throw 될 수 있습니다 특정 일치 항목으로 이동 하는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.</source>
          <target state="translated">일치 작업에 대 한 제한 시간 값이 적용 되 고 해당 시간 제한 간격을 초과 하는 구체적으로 일치를 찾으려고 시도 하는 경우에이 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The following example parses the first sentence of Nathaniel Hawthorne's <bpt id="p1">*</bpt>House of the Seven Gables<ept id="p1">*</ept> and returns a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that contains all words that begin with either an uppercase or lowercase "h".</source>
          <target state="translated">다음 예제에서는 첫 번째 문장 Nathaniel Hawthorne의 구문 분석 하 <bpt id="p1">*</bpt>7 Gables의 집<ept id="p1">*</ept> 반환는 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 중 하나는 대 / 소문자 구분 "h" 시작 하는 모든 단어를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is then used to retrieve each word and display it to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> 속성은 각 단어를 검색 하 고 콘솔에 표시 한 다음 사용 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The example produces the following output:</source>
          <target state="translated">예제의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="i" /&gt;</ph> is less than 0 or greater than or equal to <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="i" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph>보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>A time-out occurred.</source>
          <target state="translated">시간이 초과되었습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the collection.</source>
          <target state="translated">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>An object that can be used to synchronize access to the collection.</source>
          <target state="translated">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>This property always returns the object itself.</source>
          <target state="translated">이 속성은 항상 개체 자체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">이 멤버에 없으면는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">대상으로 하는 응용 프로그램을 개발 하려는 경우는 <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType&gt;</ph> 속성 대신 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>