<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ed1076fe607e7f0ae9754336d1174087b2de57" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36672920" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />의 하위 경로를 반복할 수 있도록 하고, 각 하위 경로에 포함된 모양의 종류를 테스트합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">이 도우미 클래스가 초기화되는 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 개체를 사용하여 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData :  *  * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">반환될 때 해당 경로에 있는 지점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열을 포함합니다.</param>
        <param name="types">반환될 때 해당 경로에 있는 지점의 종류를 나타내는 바이트의 배열을 포함합니다.</param>
        <param name="startIndex">배열의 시작 인덱스를 지정합니다.</param>
        <param name="endIndex">배열의 끝 인덱스를 지정합니다.</param>
        <summary>연결된 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />의 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 속성 및 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 속성 배열을 지정된 두 배열에 복사합니다.</summary>
        <returns>복사된 지점 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `startIndex` 및 `endIndex` 매개 변수를 지정된 된 범위의 경로 데이터를 복사 합니다.  
  
   
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그래픽 경로를 만듭니다.  
  
-   여러 기본 요소 및 일부 표식으로 채웁니다.  
  
-   화면 왼쪽에서 경로 데이터를 나열합니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 다시 수행 하 고 있습니다.  
  
-   경로 데이터 인덱스를 두 번째 마커를 증가 시킵니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> 메서드 시작 및 끝 사이 포함 된 경로 데이터를 복사 하는 지점에 인덱스 및 형식 배열입니다.  
  
-   화면 오른쪽에 복사 된 데이터를 나열합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>경로의 지점 수를 가져옵니다.</summary>
        <value>경로의 지점 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 개체에서 사용하는 리소스를 모두 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 `Dispose` 이 사용 하는 리소스 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 다른 용도에 다시 할당 될 수 있는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate :  *  -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">반환될 때 해당 경로에 있는 지점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열을 포함합니다.</param>
        <param name="types">반환될 때 해당 경로에 있는 지점의 종류를 나타내는 바이트의 배열을 포함합니다.</param>
        <summary>연결된 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />의 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 속성 및 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 속성 배열을 지정된 두 배열에 복사합니다.</summary>
        <returns>복사된 지점 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그래픽 경로를 만듭니다.  
  
-   여러 기본 요소 및 일부 표식으로 채웁니다.  
  
-   화면 왼쪽에서 경로 데이터를 나열합니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 다시 수행 하 고 있습니다.  
  
-   경로 데이터 인덱스를 두 번째 마커를 증가 시킵니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> 경로 데이터를 복사 하는 메서드는 `points` 및 `types` 배열입니다.  
  
-   화면 오른쪽에 복사 된 데이터를 나열합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />와 연결된 경로에 곡선이 포함되어 있는지 여부를 나타냅니다.</summary>
        <returns>현재 하위 경로에 곡선이 들어 있으면 이 메서드가 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경로에 모든 곡선의 베 지 어 스플라인 시퀀스로 저장 됩니다. 예를 들어 타원을 경로 추가 하는 경우 왼쪽 위 모서리, 너비 및 지정 타원의 경계 사각형의 높이. 숫자 (왼쪽 위 모서리, 너비 및 높이); 경로에 저장 되지 않습니다. 대신; 타원을 4 개의 베 지 어 스플라인 시퀀스로 변환 됩니다. 경로 저장소 끝점 및 해당 베 지 어 스플라인의 제어점입니다.  
  
 경로 선 또는 되는 베 지 어 스플라인을에 속해 있으며 각 데이터 요소의 배열을 저장 합니다. 경우 배열에 있는 요소 중 일부에 속할 베 지 어 스플라인을 다음 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> 반환 `true`합니다. 선택한 경우 모든 데이터 요소 배열에 속해 선 다음 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> 반환 `false`합니다.  
  
 특정 메서드를 평면화 할 경로 이므로 경로에 모든 곡선으로 변환 됩니다. 경로 일반화 한 후 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> 은 항상 반환 `false`합니다. 호출의 <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, 또는 <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> 의 메서드는 <xref:System.Drawing.Drawing2D.GraphicsPath> 클래스 경로 평면화 합니다.  
  
   
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPath> 개체 `myPath`합니다.  
  
-   세 개의 선, 사각형 및 타원을 추가합니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 개체에 대 한 `myPath`합니다.  
  
-   같은지를 테스트 하는 현재 경로 `myPath` 곡선을 포함 합니다.  
  
-   메시지 상자에는 테스트의 결과 보여 줍니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>반복기를 경로에 있는 다음 마커로 이동합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">지점이 복사될 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 개체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 개체에는 해당 개체와 관련된 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 개체가 있습니다. <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> 메서드는 연결된 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />를 경로에 있는 다음 마커까지 증가시키고, 현재 마커와 다음 마커(또는 경로 끝) 사이에 있는 모든 지점을 매개 변수에 전달되는 두 번째 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 개체에 복사합니다.</summary>
        <returns>이 마커와 다음 마커 사이의 지점 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> 메서드를 경로에 표식을 설정 합니다. 마커가 하위 경로 그룹을 만드는 데 사용 됩니다. 하나 이상의 하위 경로가 두 마커 사이일 수 있습니다.  
  
   
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPath> 개체를 만듭니다.  
  
-   세 줄, 사각형, 타원, 및 두 마커를 추가합니다.  
  
-   화면 왼쪽에 모든 경로 지점의 값을 나열합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 개체를 만듭니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPath> 개체 `myPathSection`, 복사한 요소를 받을 수 있습니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 메서드를 첫 번째 마커를 반복 하 고 해당 표식 및 옆에 있는 사이 포함 된 모든 요소를 복사 `myPathSection`합니다.  
  
-   복사할 요소의 수를 반환 `markerPoints`합니다.  
  
-   표식 수 (첫 번째 표식)와 화면 오른쪽에 포함 된 점의 수를 나열 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker :  *  -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] 이 매개 변수에 제공된 정수 참조는 하위 경로를 시작하는 지점의 인덱스를 받습니다.</param>
        <param name="endIndex">[out] 이 매개 변수에 제공된 정수 참조는 <c>startIndex</c>가 가리키는 하위 경로를 끝내는 지점의 인덱스를 받습니다.</param>
        <summary>
          <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />를 경로에 있는 다음 마커까지 증가시키고, [out] 매개 변수를 사용하여 시작 및 중지 인덱스를 반환합니다.</summary>
        <returns>이 마커와 다음 마커 사이의 지점 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> 메서드를 경로에 표식을 설정 합니다. 마커가 하위 경로 그룹을 만드는 데 사용 됩니다. 하나 이상의 하위 경로가 두 마커 사이일 수 있습니다.  
  
   
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPath> 개체를 만듭니다.  
  
-   세 개의 선, 사각형 및 타원 ¾ 표식 사용 하 여 각 막대 사이 추가합니다.  
  
-   화면에 점의 배열에 대 한 값을 그립니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 개체를 만듭니다.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 메서드를 호출합니다.  
  
-   에 대 한 반복 호출에서 반환 된 값을 사용 하 여 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 시작 그리고 화면에 각 표식에 대 한 지점으로 중지 합니다.  
  
-   화면에 점의 총 개수에 대 한 값을 그립니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType :  *  *  -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte&amp;" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] 그룹 내 모든 점이 공유하는 점 종류를 받습니다. 가능한 종류는 <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 열거형에서 검색할 수 있습니다.</param>
        <param name="startIndex">[out] 점 그룹의 시작 인덱스를 받습니다.</param>
        <param name="endIndex">[out] 점 그룹의 끝 인덱스를 받습니다.</param>
        <summary>형식이 모두 같은 데이터 지점의 다음 그룹에 대한 시작 인덱스와 끝 인덱스를 가져옵니다.</summary>
        <returns>이 메서드는 그룹에 있는 데이터 지점 수를 반환합니다. 경로에 그룹이 더 이상 없으면 이 메서드는 0을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPath> 개체를 만듭니다.  
  
-   세 개의 선, 사각형 및 타원을 추가합니다.  
  
-   화면 왼쪽에 모든 요소 값을 나열 합니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 다시 수행 하 고 있습니다.  
  
-   에 `for` 사용 하 여 지점 하 고, 루프는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> 및 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> 메서드.  
  
-   반복 호출에서 반환 된 값을 사용 하 여 하위 경로 번호,에 있는 점의 개수 및 화면 왼쪽에서 오른쪽으로 경로 지점의 유형을 나열 합니다.  
  
-   화면에 점의 총 개수에 대 한 값을 표시합니다.  
  
 `ListPathPoints` 대부분을 구분 하는 도우미 함수 (모두는 아님)는 그래픽 경로 코드에서 표시 코드입니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>하위 경로를 지정된 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />에 있는 다음 하위 경로로 이동합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">이 반복기에 대해 가져온 그림(하위 경로)의 데이터 지점과 일치하도록 해당 데이터 지점을 설정하는 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />입니다.</param>
        <param name="isClosed">[out] 현재 하위 경로가 닫혀 있는지 여부를 나타냅니다. 그림이 닫혀 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />의 연결된 경로에서 다음 그림(하위 경로)을 가져옵니다.</summary>
        <returns>가져온 그림(하위 경로)에 있는 데이터 지점 수입니다. 가져올 그림이 더 이상 없으면 0이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPath> 개체를 만듭니다.  
  
-   세 줄, 사각형, 타원, 및 두 마커를 추가합니다.  
  
-   화면 왼쪽에 모든 경로 지점의 값을 나열합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 개체를 만듭니다.  
  
-   만듭니다는 <xref:System.Drawing.Drawing2D.GraphicsPath> 개체 `myPathSection`, 복사한 요소를 받을 수 있습니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 메서드를 세 번째 하위 경로 (그림)을 반복 하 고 포함 된 모든 요소를 하위 경로에 복사는 `myPathSection` 경로 및 포인트 수를 복사 하는 반환 `subpathPoints`합니다.  
  
-   화면 오른쪽에 포함 된 요소의 수와 하위 경로 수를 나열 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath :  *  *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] 다음 하위 경로의 시작 인덱스를 받습니다.</param>
        <param name="endIndex">[out] 다음 하위 경로의 끝 인덱스를 받습니다.</param>
        <param name="isClosed">[out] 하위 경로가 닫혀 있는지 여부를 나타냅니다.</param>
        <summary>
          <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />를 경로에 있는 다음 하위 경로로 이동합니다. 다음 하위 경로의 시작 인덱스와 끝 인덱스는 [out] 매개 변수에 들어 있습니다.</summary>
        <returns>
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 개체의 하위 경로 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPath> 개체를 만듭니다.  
  
-   세 개의 선, 사각형 및 타원을 추가합니다.  
  
-   화면에 점의 배열에 대 한 값을 그립니다.  
  
-   
          <xref:System.Drawing.Drawing2D.GraphicsPathIterator> 개체를 만듭니다.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 메서드를 호출합니다.  
  
-   에 대 한 반복 호출에서 반환 된 값을 사용 하 여 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 시작 그리고 각 하위 경로를 화면에 대 한 값을 중지 합니다.  
  
-   화면에 하위 경로의 총 수에 대 한 값을 그립니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />를 연결된 경로의 시작까지 다시 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처음 호출할 때는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 반복기의 메서드를 가져와서 해당 반복기 연결 경로의 첫 번째 그림 (하위 경로). 두 번째 그림 및에 두 번째로 가져옵니다. 호출 하는 경우는 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> 메서드, 시퀀스를 시작, 즉, 호출한 후 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, 다음에 호출할 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 경로 있는 첫 번째 그림을 가져옵니다. <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 및 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> 메서드는 비슷하게 동작 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>경로의 하위 경로 수를 가져옵니다.</summary>
        <value>경로의 하위 경로 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>