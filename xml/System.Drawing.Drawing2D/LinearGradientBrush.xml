<Type Name="LinearGradientBrush" FullName="System.Drawing.Drawing2D.LinearGradientBrush">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34ef7af9aaab2223e69cf15a9ad1de33406eb517" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410497" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LinearGradientBrush : System.Drawing.Brush" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LinearGradientBrush extends System.Drawing.Brush" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.LinearGradientBrush" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LinearGradientBrush&#xA;Inherits Brush" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinearGradientBrush sealed : System::Drawing::Brush" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Brush</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>선형 그라데이션을 사용하여 <see cref="T:System.Drawing.Brush" />를 캡슐화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 두 가지 색 그라데이션을 여러 가지 색 사용자 지정 그라데이션은 모두 캡슐화합니다.  
  
 모든 선형 그라데이션 사각형의 너비 또는 두 개의 지정 된 선을 따라 정의 됩니다.  
  
 기본적으로 두 가지 색 선형 그라데이션은 과정에서 지정 된 끝 색으로 시작 색에서는 균일 한 가로 선형 blend입니다. 혼합 패턴 사용한 사용자 지정의 <xref:System.Drawing.Drawing2D.Blend> 클래스는 <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A> 메서드 또는 <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A> 메서드. 그라데이션 방향을 지정 하 여 사용자 지정의 <xref:System.Drawing.Drawing2D.LinearGradientMode> 열거형 또는 생성자에서 각도입니다.  
  
 사용 하 여는 <xref:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors%2A> 속성을 여러 가지 색 그라데이션을 만듭니다.  
  
 <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> 속성 그라데이션의 적용할 로컬 기하학적 변환을 지정 합니다.  
  
   
  
## Examples  
 다음 예제에서는 가로 <xref:System.Drawing.Drawing2D.LinearGradientBrush>; 색상 구성 선형적으로 변경 가로 좌표는 0에서 가로 좌표 200로 이동 합니다. 예를 들어 첫 번째 좌표가 0과 200 사이의 중간 지점 0에서 255 사이의 중간에 있는 파란색 구성 요소를 갖습니다. 이 예제는 Windows Forms 사용 하도록 설계 됩니다. 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요는 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인 <xref:System.Windows.Forms.PaintEventHandler>합니다.  
  
 [!code-csharp[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 점과 색을 사용하여 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Point point1, System.Drawing.Point point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point point1, valuetype System.Drawing.Point point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Point point1, System::Drawing::Point point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.Point" />
        <Parameter Name="point2" Type="System.Drawing.Point" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1">선형 그라데이션의 시작점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="point2">선형 그라데이션의 끝점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="color1">선형 그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">선형 그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <summary>지정된 점과 색을 사용하여 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.PointF point1, System.Drawing.PointF point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.PointF point1, valuetype System.Drawing.PointF point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As PointF, point2 As PointF, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::PointF point1, System::Drawing::PointF point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.PointF" />
        <Parameter Name="point2" Type="System.Drawing.PointF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1">선형 그라데이션의 시작점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="point2">선형 그라데이션의 끝점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="color1">선형 그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">선형 그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <summary>지정된 점과 색을 사용하여 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="linearGradientMode">그라데이션의 방향을 지정하는 <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> 열거형입니다. 방향은 그라데이션의 시작점과 끝점을 결정합니다. 예를 들어, <see langword="LinearGradientMode.ForwardDiagonal" />은 시작점을 사각형의 왼쪽 위 모퉁이로, 끝점을 사각형의 오른쪽 아래 모퉁이로 지정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향을 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="angle">그라데이션의 방향 선 각도로, X 축에서 시계 방향의 각도로 측정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향 각도를 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 지점 방향 줄과 수직인 줄은 동일한 색입니다.  
  
 시작 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 시작 줄의 모든 점에 시작 색입니다. 끝 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 줄 끝에 모든 지점은 끝 색입니다.  
  
 각도 방향 줄의 시작 및 종료 줄입니다 통과 하는 모퉁이가 결정 합니다. 예를 들어 각도 0에서 90도 사이,에 시작 줄 왼쪽 위 모퉁이 통해 전달 하 고 줄 끝 오른쪽 아래 모서리를 통해 전달 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="linearGradientMode">그라데이션의 방향을 지정하는 <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> 열거형입니다. 방향은 그라데이션의 시작점과 끝점을 결정합니다. 예를 들어, <see langword="LinearGradientMode.ForwardDiagonal" />은 시작점을 사각형의 왼쪽 위 모퉁이로, 끝점을 사각형의 오른쪽 아래 모퉁이로 지정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향 모드를 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="angle">그라데이션의 방향 선 각도로, X 축에서 시계 방향의 각도로 측정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향 각도를 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 지점 방향 줄과 수직인 줄은 동일한 색입니다.  
  
 시작 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 시작 줄의 모든 점에 시작 색입니다. 끝 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 줄 끝에 모든 지점은 끝 색입니다.  
  
 각도 방향 줄의 시작 및 종료 줄입니다 통과 하는 모퉁이가 결정 합니다. 예를 들어 각도 0에서 90도 사이,에 시작 줄 왼쪽 위 모퉁이 통해 전달 하 고 줄 끝 오른쪽 아래 모서리를 통해 전달 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="angle">그라데이션의 방향 선 각도로, X 축에서 시계 방향의 각도로 측정합니다.</param>
        <param name="isAngleScaleable">각도가 이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />와 연결된 변환의 영향을 받도록 지정하려면 <see langword="true" />로 설정하고, 그렇지 않으면 <see langword="false" />로 설정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향 각도를 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 지점 방향 줄과 수직인 줄은 동일한 색입니다.  
  
 시작 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 시작 줄의 모든 점에 시작 색입니다. 끝 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 줄 끝에 모든 지점은 끝 색입니다.  
  
 각도 방향 줄의 시작 및 종료 줄입니다 통과 하는 모퉁이가 결정 합니다. 예를 들어 각도 0에서 90도 사이,에 시작 줄 왼쪽 위 모퉁이 통해 전달 하 고 줄 끝 오른쪽 아래 모서리를 통해 전달 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">선형 그라데이션의 경계를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="color1">그라데이션의 시작 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="color2">그라데이션의 끝 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <param name="angle">그라데이션의 방향 선 각도로, X 축에서 시계 방향의 각도로 측정합니다.</param>
        <param name="isAngleScaleable">각도가 이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />와 연결된 변환의 영향을 받도록 지정하려면 <see langword="true" />로 설정하고, 그렇지 않으면 <see langword="false" />로 설정합니다.</param>
        <summary>사각형, 시작 및 끝 색, 방향 각도를 기반으로 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 지점 방향 줄과 수직인 줄은 동일한 색입니다.  
  
 시작 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 시작 줄의 모든 점에 시작 색입니다. 끝 줄 수직 방향 줄 고 사각형의 모서리 중 하나를 통해 전달 합니다. 줄 끝에 모든 지점은 끝 색입니다.  
  
 각도 방향 줄의 시작 및 종료 줄입니다 통과 하는 모퉁이가 결정 합니다. 예를 들어 각도 0에서 90도 사이,에 시작 줄 왼쪽 위 모퉁이 통해 전달 하 고 줄 끝 오른쪽 아래 모서리를 통해 전달 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blend">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Blend Blend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Blend Blend" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Blend" />
      <MemberSignature Language="VB.NET" Value="Public Property Blend As Blend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Blend ^ Blend { System::Drawing::Drawing2D::Blend ^ get(); void set(System::Drawing::Drawing2D::Blend ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Blend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>그라데이션에 대한 사용자 지정 대칭을 정의하는 위치와 비율을 지정하는 <see cref="T:System.Drawing.Drawing2D.Blend" />를 가져오거나 설정합니다.</summary>
        <value>그라데이션에 대한 사용자 지정 대칭을 나타내는 <see cref="T:System.Drawing.Drawing2D.Blend" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.Blend> blend 비율과 위치의 해당 배열이 포함 되어 있습니다. 혼합 비율 시작 색 및 끝의 해당 위치에서 사용 하는 색의 비율을 지정 합니다. 위치는 그라데이션 선 따라 거리에 대 한 백분율로 지정 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />의 정확한 복사본을 만듭니다.</summary>
        <returns>이 메서드가 개체로 만들어 캐스팅하는 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에는 타원을 그립니다.  
  
-   복제는 <xref:System.Drawing.Drawing2D.LinearGradientBrush> (`clonedLGBrush`).  
  
-   복제 된 브러시를 사용 하 여 첫 번째 타원 바로 아래 화면으로는 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaCorrection">
      <MemberSignature Language="C#" Value="public bool GammaCorrection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GammaCorrection" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection" />
      <MemberSignature Language="VB.NET" Value="Public Property GammaCorrection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GammaCorrection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />에 감마 보정을 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />에 감마 보정을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.ColorBlend InterpolationColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationColors As ColorBlend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::ColorBlend ^ InterpolationColors { System::Drawing::Drawing2D::ColorBlend ^ get(); void set(System::Drawing::Drawing2D::ColorBlend ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.ColorBlend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>다중 색 선형 그라데이션을 정의하는 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />를 가져오거나 설정합니다.</summary>
        <value>다중 색 선형 그라데이션을 정의하는 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.ColorBlend> 색과 위치의 해당 배열이 포함 되어 있습니다. 위치는 0에서 1 사이의 그라데이션 선 따라는 해당 색이 있는 거리의 백분율을 지정 하는 값입니다.  
  
 이 속성을 설정 그라데이션 선 따라 각 위치에 하나의 색이 있는 여러 가지 색 그라데이션을 만듭니다. 이 대 한 모든 이전 색, 위치 및 대칭 설정을 무효화이 속성을 설정할 <xref:System.Drawing.Drawing2D.LinearGradientBrush>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinearColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Color[] LinearColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color[] LinearColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.LinearColors" />
      <MemberSignature Language="VB.NET" Value="Public Property LinearColors As Color()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Drawing::Color&gt; ^ LinearColors { cli::array &lt;System::Drawing::Color&gt; ^ get(); void set(cli::array &lt;System::Drawing::Color&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>그라데이션의 시작 색과 끝 색을 가져오거나 설정합니다.</summary>
        <value>그라데이션의 시작 색과 끝 색을 나타내는 두 <see cref="T:System.Drawing.Color" /> 구조체의 배열입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 앞에 추가하여 지정된 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />를 이 <see cref="T:System.Drawing.Drawing2D.Matrix" />의 로컬 기하학적 변환을 나타내는 <see cref="T:System.Drawing.Drawing2D.Matrix" />에 곱합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">기하학적 변환을 곱할 <see cref="T:System.Drawing.Drawing2D.Matrix" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 앞에 추가하여 지정된 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />를 이 <see cref="T:System.Drawing.Drawing2D.Matrix" />의 로컬 기하학적 변환을 나타내는 <see cref="T:System.Drawing.Drawing2D.Matrix" />에 곱합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 예제를 보려면 <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">기하학적 변환을 곱할 <see cref="T:System.Drawing.Drawing2D.Matrix" />입니다.</param>
        <param name="order">두 매트릭스를 곱할 순서를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />입니다.</param>
        <summary>지정된 순서에 따라 지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 이 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />의 로컬 기하학적 변환을 나타내는 <see cref="T:System.Drawing.Drawing2D.Matrix" />에 곱합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에는 타원을 그립니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> 메서드를 변환의 <xref:System.Drawing.Drawing2D.LinearGradientBrush>합니다.  
  
-   변환된 된 브러시를 사용 하 여 첫 번째 타원 바로 아래 화면으로는 타원을 그립니다.  
  
 가로 방향의 아래쪽 타원 늘어남을 새 셰이프를 일치 하도록 하는 그라데이션의 늘어남을 살펴보세요.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF Rectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF Rectangle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Rectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rectangle As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF Rectangle { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>그라데이션의 시작점과 끝점을 정의하는 사각형 영역을 가져옵니다.</summary>
        <value>그라데이션의 시작점과 끝점을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 선형 그라데이션의 시작 위치를 지정 하는 사각형의 왼쪽 및 오른쪽의 사각형의 끝점을 지정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" /> 속성을 동일하게 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에는 타원을 그립니다.  
  
-   호출 된 <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> 변환 하는 메서드는 <xref:System.Drawing.Drawing2D.LinearGradientBrush>합니다.  
  
-   변환된 된 브러시를 사용 하 여 첫 번째 타원 바로 아래 화면으로는 타원을 그립니다.  
  
-   변환을 다시 설정 합니다.  
  
-   처음 두 아래 화면 세 번째 타원을 그립니다.  
  
 가장 낮은 타원 그려짐을 확인과 동일한 크기의 첫 번째, 하며, 때문에 대 한 호출으로는 <xref:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform%2A> 메서드를 그라데이션에 맞게 축소 되었습니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 각도만큼 로컬 기하학적 변환을 회전합니다. 이 메서드는 변환에 회전을 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">회전 각도입니다.</param>
        <summary>지정된 각도만큼 로컬 기하학적 변환을 회전합니다. 이 메서드는 변환에 회전을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 예제를 보려면 <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">회전 각도입니다.</param>
        <param name="order">회전 매트릭스를 앞에 추가할 것인지 아니면 뒤에 추가할 것인지를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />입니다.</param>
        <summary>특정 순서대로 지정된 각도만큼 로컬 기하학적 변환을 회전합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 코드  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에는 타원을 그립니다.  
  
-   회전 하는 <xref:System.Drawing.Drawing2D.LinearGradientBrush> 호출 하 여 45도 <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A> 메서드.  
  
-   화면 회전 된 브러시를 사용 하 여 첫 번째 타원 바로 아래에 타원을 그립니다.  
  
 그라데이션 아래쪽 타원의 맨 위 타원의 x 축으로 45도 각도에 표시 됩니다. 또한에 대 한 호출에서 <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> 그라데이션 채우기 아래쪽 타원의 왼쪽된 가장자리의 왼쪽된 가장자리를 정당화 하기 메서드를 사용 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 배율만큼 로컬 기하학적 변환의 배율을 조정합니다. 이 메서드는 변환 앞에 배율 조정 매트릭스를 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">X축 방향으로 변환의 배율을 조정할 값입니다.</param>
        <param name="sy">Y-축 방향으로 변환의 배율을 조정할 값입니다.</param>
        <summary>지정된 배율만큼 로컬 기하학적 변환의 배율을 조정합니다. 이 메서드는 변환 앞에 배율 조정 매트릭스를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 예제를 보려면 <xref:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">X축 방향으로 변환의 배율을 조정할 값입니다.</param>
        <param name="sy">Y-축 방향으로 변환의 배율을 조정할 값입니다.</param>
        <param name="order">크기 조정 매트릭스를 앞에 추가할 것인지 아니면 뒤에 추가할 것인지를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />입니다.</param>
        <summary>특정 순서로 지정된 배율만큼 로컬 기하학적 변환의 배율을 조정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에는 타원을 그립니다.  
  
-   눈금의 <xref:System.Drawing.Drawing2D.LinearGradientBrush> x 축에 두 배입니다.  
  
-   화면 크기 조정 된 브러시를 사용 하 여 첫 번째 타원 바로 아래에 타원을 그립니다.  
  
 그라데이션 아래쪽 타원의 두 배 늘어남을 확인 합니다. 또한에 대 한 호출에서 <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> 그라데이션 채우기 타원의 왼쪽된 가장자리의 왼쪽된 가장자리를 정당화 하기 메서드를 사용 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBlendTriangularShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>가운데에 특정 색이 있으며, 양쪽 끝에서 단일 색으로 선형 대칭을 이루는 선형 그라데이션을 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">그라데이션이 끝 색으로만 구성된 지점인 그라데이션 가운데를 지정하는 0에서 100 사이의 값입니다.</param>
        <summary>가운데에 특정 색이 있으며, 양쪽 끝에서 단일 색으로 선형 대칭을 이루는 선형 그라데이션을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 `focus`는 하는 구성 된 위치 에서만 끝 색입니다. `focus` 매개 변수 위치 그라데이션 선 따라 거리의 비율로 나타냅니다. 그라데이션은 어느 쪽을 선형으로 시작 색입니다.  
  
   
  
## Examples  
 예제를 보려면 <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus, float scale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">그라데이션이 끝 색으로만 구성된 지점인 그라데이션 가운데를 지정하는 0에서 100 사이의 값입니다.</param>
        <param name="scale">시작 색에서 <c>포커스</c>(끝 색)까지 색이 대칭을 이루는 속도를 지정하는 0에서 1 사이의 값입니다.</param>
        <summary>가운데에 특정 색이 있으며, 양쪽 끝에서 단일 색으로 선형 대칭을 이루는 선형 그라데이션을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 `focus`는 하는 구성 된 위치 에서만 끝 색입니다. `focus` 매개 변수 위치 그라데이션 선 따라 거리의 비율로 나타냅니다. 그라데이션은 어느 쪽을 선형으로 시작 색입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에 선형, 왼쪽에서 오른쪽 전환 하는 색을 타원을 그립니다.  
  
-   변환 된 <xref:System.Drawing.Drawing2D.LinearGradientBrush> 센터의 최고점이 삼각형 모양으로 합니다.  
  
-   변환된 된 브러시를 사용 하 여 화면에 두 번째 타원을 그립니다.  
  
 아래쪽 타원의 그라데이션 파랑 빨강으로 다시 파랑이 전환 있는지 확인 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSigmaBellShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>종 모양의 곡선을 기반으로 그라데이션 대칭을 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">시작 색과 끝 색이 똑같이 혼합되어 있는 지점인 그라데이션 가운데를 지정하는 0에서 1 사이의 값입니다.</param>
        <summary>종 모양의 곡선을 기반으로 그라데이션 대칭을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 `focus`는 하는 구성 된 위치 에서만 끝 색입니다. `focus` 매개 변수 위치 그라데이션 선 따라 거리의 비율로 나타냅니다. 그라데이션은 어느 쪽을 벨 곡선 도형을 (정규 분포)에 따라 시작 색입니다.  
  
   
  
## Examples  
 예제를 참조 하세요. <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A>`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus, float scale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">그라데이션이 끝 색으로만 구성된 지점인 그라데이션 가운데를 지정하는 0에서 100 사이의 값입니다.</param>
        <param name="scale">
          <c>포커스</c>에서 색이 대칭을 이루는 속도를 지정하는 0에서 1 사이의 값입니다.</param>
        <summary>종 모양의 곡선을 기반으로 그라데이션 대칭을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 `focus`는 하는 구성 된 위치 에서만 끝 색입니다. `focus` 매개 변수 위치 그라데이션 선 따라 거리의 비율로 나타냅니다. 그라데이션은 어느 쪽을 벨 곡선 도형을 (정규 분포)에 따라 시작 색입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에 선형, 왼쪽에서 오른쪽 전환 하는 색을 타원을 그립니다.  
  
-   변환 된 <xref:System.Drawing.Drawing2D.LinearGradientBrush> 중심의 최고점이 종 모양의 곡선이 있어야 합니다.  
  
-   종 모양 브러시를 사용 하 여 화면에 두 번째 타원을 그립니다.  
  
 아래쪽 타원의 그라데이션 파랑 빨강으로 다시 파랑이 전환 있는지 확인 합니다.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.Matrix" />의 로컬 기하학적 변환을 정의하는 복사본 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />를 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Drawing.Drawing2D.Matrix" />로 그린 채우기에만 적용되는 기하학적 변환을 정의하는 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />의 복사본입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기하학적 변환은 변환, 크기 조정, 회전 하거나 그라데이션 채우기 데 사용할 수 있습니다. 반환 하는 매트릭스 및 여는 <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> 속성 브러시의 기하학적 변환의 복사본은, 더 이상 필요 행렬은 삭제 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 크기만큼 로컬 기하학적 변환을 이동합니다. 이 메서드는 변환 앞에 이동을 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">x-축으로의 이동 값입니다.</param>
        <param name="dy">y-축으로의 이동 값입니다.</param>
        <summary>지정된 크기만큼 로컬 기하학적 변환을 이동합니다. 이 메서드는 변환 앞에 이동을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 예제를 보려면 <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">x-축으로의 이동 값입니다.</param>
        <param name="dy">y-축으로의 이동 값입니다.</param>
        <param name="order">이동을 적용할 순서(앞에 추가 또는 뒤에 추가)입니다.</param>
        <summary>특정 순서로 지정된 크기만큼 로컬 기하학적 변환을 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요한 <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Form.OnPaint%2A> 이벤트 개체입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 <xref:System.Drawing.Drawing2D.LinearGradientBrush>를 만듭니다.  
  
-   이 브러시를 사용 하 여 화면에 선형, 왼쪽에서 오른쪽 전환 하는 색에 사각형을 그립니다.  
  
-   회전 하는 <xref:System.Drawing.Drawing2D.LinearGradientBrush> 으로 90도 고 그라데이션의 배율을 조정 합니다.  
  
-   화면 회전 및 크기 조정 된 그라데이션 사용 하 여 사각형을 그립니다.  
  
-   선형 그라데이션 위쪽에서 아래쪽으로 실행 되도록 사각형을 변환 합니다.  
  
-   화면으로 이동 된 사각형을 그립니다.  
  
 세 개의 사각형이 된다고 표시 중 맨 위를 보여 주는 왼쪽에서 오른쪽 그라데이션, 회전 및 크기 조정 된 그라데이션 및 최종, 번역 된 그라데이션 맨 아래를 보여 주는 중간 하나.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.WrapMode WrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.WrapMode WrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.WrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapMode As WrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::WrapMode WrapMode { System::Drawing::Drawing2D::WrapMode get(); void set(System::Drawing::Drawing2D::WrapMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.WrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Drawing2D.WrapMode" />의 랩 모드를 나타내는 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> 열거형을 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Drawing.Drawing2D.WrapMode" />로 그린 채우기를 바둑판식으로 배열하는 방법을 지정하는 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>