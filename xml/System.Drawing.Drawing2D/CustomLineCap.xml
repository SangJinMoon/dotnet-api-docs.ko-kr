<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomLineCap.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f5c75a608ce54c941da40e7941b926a057ce5265.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5c75a608ce54c941da40e7941b926a057ce5265</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>Encapsulates a custom user-defined line cap.</source>
          <target state="translated">사용자 정의 선 끝 모양을 끝 모양슐화합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> objects.</source>
          <target state="translated">선 끝 시작과 끝의 선 또는 GDI +으로 그린 곡선 아래에서 사용 됩니다 <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>GDI+ supports several predefined cap styles, and also allows users to define their own cap styles.</source>
          <target state="translated">GDI + 몇 가지 미리 정의 된 단면 스타일을 지원 하며 또한 자신의 단면 스타일을 정의 하는 사용자 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>This class is used to create custom cap styles.</source>
          <target state="translated">이 클래스는 사용자 지정 단면 스타일을 만드는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 클래스 사용 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>To run this example paste, the code into a Windows Form.</source>
          <target state="translated">이 예를 실행 하려면이 붙여넣기를 Windows Form에 코드입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>Handle the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event and call <ph id="ph2">`DrawCaps`</ph> from the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event-handling method, passing <ph id="ph4">`e`</ph> as <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.</source>
          <target state="translated">폼의 처리 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트 및 호출 <ph id="ph2">`DrawCaps`</ph> 폼의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 전달 하는 이벤트 처리 메서드를 <ph id="ph4">`e`</ph> 으로 <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Drawing.Drawing2D.CustomLineCap">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> class with the specified outline and fill.</source>
          <target state="translated">지정된 윤곽선 및 채우기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the fill for the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 채우기를 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the outline of the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 윤곽선을 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> class with the specified outline and fill.</source>
          <target state="translated">지정된 윤곽선 및 채우기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> uses a fill mode of "winding" regardless of the fill mode specified for the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 작업에 대해 지정 된 채우기 모드에 관계 없이 "굴곡"의 채우기 모드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>The <ph id="ph1">`fillPath`</ph> and <ph id="ph2">`strokePath`</ph> parameters cannot be used at the same time.</source>
          <target state="translated"><ph id="ph1">`fillPath`</ph> 및 <ph id="ph2">`strokePath`</ph> 매개 변수를 동시에 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>One parameter must be passed a null value.</source>
          <target state="translated">매개 변수 하나에 null 값을 전달 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>If neither parameter is passed a null value, <ph id="ph1">`fillPath`</ph> will be ignored.</source>
          <target state="translated">두 매개 변수는 null 값이 전달 되 면 <ph id="ph1">`fillPath`</ph> 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>If <ph id="ph1">`strokePath`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> should intercept the negative y-axis.</source>
          <target state="translated">경우 <ph id="ph1">`strokePath`</ph> 은 <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> 음수 y를 차단 해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">다음 예제에서는 사용 하 여 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>To run this example, paste the code into a Windows Form.</source>
          <target state="translated">이 예제를 실행 하려면 Windows Form에 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
          <source>Handle the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event and call <ph id="ph2">`DrawCaps`</ph> from the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event-handling method, passing <ph id="ph4">`e`</ph> as <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.</source>
          <target state="translated">폼의 처리 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트 및 호출 <ph id="ph2">`DrawCaps`</ph> 폼의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 전달 하는 이벤트 처리 메서드를 <ph id="ph4">`e`</ph> 으로 <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the fill for the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 채우기를 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the outline of the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 윤곽선을 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>The line cap from which to create the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양을 만들 선 끝 모양입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> class from the specified existing <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration with the specified outline and fill.</source>
          <target state="translated">지정된 윤곽선 및 채우기를 사용하여 지정된 기존 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형에서 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> uses a fill mode of "winding" regardless of the fill mode specified for the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 작업에 대해 지정 된 채우기 모드에 관계 없이 "굴곡"의 채우기 모드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>The <ph id="ph1">`fillPath`</ph> and <ph id="ph2">`strokePath`</ph> parameters cannot be used at the same time.</source>
          <target state="translated"><ph id="ph1">`fillPath`</ph> 및 <ph id="ph2">`strokePath`</ph> 매개 변수를 동시에 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>One parameter must be passed a null value.</source>
          <target state="translated">매개 변수 하나에 null 값을 전달 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>If neither parameter is passed a null value, <ph id="ph1">`fillPath`</ph> will be ignored.</source>
          <target state="translated">두 매개 변수는 null 값이 전달 되 면 <ph id="ph1">`fillPath`</ph> 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)">
          <source>If <ph id="ph1">`strokePath`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> should intercept the negative y-axis.</source>
          <target state="translated">경우 <ph id="ph1">`strokePath`</ph> 은 <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> 음수 y를 차단 해야 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the fill for the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 채우기를 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> object that defines the outline of the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양의 윤곽선을 정의하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.GraphicsPath" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>The line cap from which to create the custom cap.</source>
          <target state="translated">사용자 지정 끝 모양을 만들 선 끝 모양입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>The distance between the cap and the line.</source>
          <target state="translated">끝 모양과 선 사이의 거리입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> class from the specified existing <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration with the specified outline, fill, and inset.</source>
          <target state="translated">지정된 윤곽선, 채우기 및 음각을 사용하여 지정된 기존 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형에서 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> uses a fill mode of "winding" regardless of the fill mode specified for the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 작업에 대해 지정 된 채우기 모드에 관계 없이 "굴곡"의 채우기 모드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>The <ph id="ph1">`fillPath`</ph> and <ph id="ph2">`strokePath`</ph> parameters cannot be used at the same time.</source>
          <target state="translated"><ph id="ph1">`fillPath`</ph> 및 <ph id="ph2">`strokePath`</ph> 매개 변수를 동시에 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>One parameter must be passed a null value.</source>
          <target state="translated">매개 변수 하나에 null 값을 전달 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>If neither parameter is passed a null value, <ph id="ph1">`fillPath`</ph> will be ignored.</source>
          <target state="translated">두 매개 변수는 null 값이 전달 되 면 <ph id="ph1">`fillPath`</ph> 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)">
          <source>If <ph id="ph1">`strokePath`</ph> is <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> should intercept the negative y-axis.</source>
          <target state="translated">경우 <ph id="ph1">`strokePath`</ph> 은 <ph id="ph2">`null`</ph>, <ph id="ph3">`fillPath`</ph> 음수 y를 차단 해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Drawing.Drawing2D.CustomLineCap.BaseCap">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration on which this <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> is based.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph>의 기반이 되는 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.BaseCap">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration on which this <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> is based.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph>의 기반이 되는 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Drawing.Drawing2D.CustomLineCap.BaseInset">
          <source>Gets or sets the distance between the cap and the line.</source>
          <target state="translated">끝 모양과 선 사이의 거리를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.BaseInset">
          <source>The distance between the beginning of the cap and the end of the line.</source>
          <target state="translated">끝 모양의 시작과 선 끝 사이의 거리입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>Creates an exact copy of this <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>의 정확한 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> this method creates, cast as an object.</source>
          <target state="translated">이 메서드가 개체로 만들어 캐스팅하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>The following example is designed for use with Windows Forms, and it requires <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph><ph id="ph2">`e`</ph>, an <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event object.</source>
          <target state="translated">다음 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> <ph id="ph2">`e`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트 개체입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>The code performs the following actions:</source>
          <target state="translated">이 코드에서는 다음 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>Creates a custom line cap by using the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> object.</source>
          <target state="translated">사용 하 여 사용자 지정 선 단면 만듭니다는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>Creates a <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> object, <ph id="ph2">`firstCap`</ph>,using the <ph id="ph3">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> object just created.</source>
          <target state="translated">만듭니다는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 개체 <ph id="ph2">`firstCap`</ph>를 사용 하 여는 <ph id="ph3">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 방금 만든 개체입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>Creates a clone of <ph id="ph1">`firstCap`</ph> by using the <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.Clone%2A&gt;</ph> method.</source>
          <target state="translated">복제본을 만듭니다 <ph id="ph1">`firstCap`</ph> 를 사용 하 여는 <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.Clone%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Clone">
          <source>Sets up the <ph id="ph1">&lt;xref:System.Drawing.Pen.CustomStartCap%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Pen.CustomEndCap%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Pen&gt;</ph> object, and uses that pen to draw a line and the custom caps to the screen.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Drawing.Pen.CustomStartCap%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Drawing.Pen.CustomEndCap%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Drawing.Pen&gt;</ph> 개체 및 해당 펜 화면에 선 및 사용자 지정에서 캡을 그릴을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Dispose">
          <source>Releases all resources used by this <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 개체에서 사용하는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> allows the resources used by this <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> object to be reallocated for other purposes.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 이 사용 하는 리소스 <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 다른 용도에 다시 할당 될 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.Finalize">
          <source>Allows an <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> to attempt to free resources and perform other cleanup operations before the <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> is reclaimed by garbage collection.</source>
          <target state="translated">가비지 수집기에서 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>를 회수하기 전에 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph>가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration used at the beginning of a line within this cap.</source>
          <target state="translated">이 끝 모양 내의 선 시작 부분에 사용되는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration used at the end of a line within this cap.</source>
          <target state="translated">이 끝 모양 내의 선 끝 부분에 사용되는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>Gets the caps used to start and end lines that make up this custom cap.</source>
          <target state="translated">이 사용자 지정 끝 모양을 구성하는 선의 시작과 끝에 사용되는 끝 모양을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>To run this example, paste the code into a Windows Form.</source>
          <target state="translated">이 예제를 실행 하려면 Windows Form에 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)">
          <source>Handle the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event and call <ph id="ph2">`DrawCaps`</ph> from the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event-handling method, passing <ph id="ph4">`e`</ph> as <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.</source>
          <target state="translated">폼의 처리 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트 및 호출 <ph id="ph2">`DrawCaps`</ph> 폼의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 전달 하는 이벤트 처리 메서드를 <ph id="ph4">`e`</ph> 으로 <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration used at the beginning of a line within this cap.</source>
          <target state="translated">이 끝 모양 내의 선 시작 부분에 사용되는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> enumeration used at the end of a line within this cap.</source>
          <target state="translated">이 끝 모양 내의 선 끝 부분에 사용되는 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>Sets the caps used to start and end lines that make up this custom cap.</source>
          <target state="translated">이 사용자 지정 끝 모양을 구성하는 선의 시작과 끝에 사용되는 끝 모양을 설정합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>To run this example, paste the code into a Windows Form.</source>
          <target state="translated">이 예제를 실행 하려면 Windows Form에 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)">
          <source>Handle the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event and call <ph id="ph2">`DrawCaps`</ph> from the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event-handling method, passing <ph id="ph4">`e`</ph> as <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>.</source>
          <target state="translated">폼의 처리 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트 및 호출 <ph id="ph2">`DrawCaps`</ph> 폼의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 전달 하는 이벤트 처리 메서드를 <ph id="ph4">`e`</ph> 으로 <ph id="ph5">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Drawing.Drawing2D.CustomLineCap.StrokeJoin">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineJoin" /&gt;</ph> enumeration that determines how lines that compose this <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> object are joined.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineJoin" /&gt;</ph> 개체를 구성하는 선의 조인 방식을 결정하는 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.StrokeJoin">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineJoin" /&gt;</ph> enumeration this <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> object uses to join lines.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.LineJoin" /&gt;</ph> 개체가 선을 조인할 때 사용하는 <ph id="ph2">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.StrokeJoin">
          <source>This property specifies a <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.LineJoin&gt;</ph> enumeration that is used to join lines and curves that make up the stroked path of this <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> object.</source>
          <target state="translated">이 속성은 지정 된 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.LineJoin&gt;</ph> 조인 선 및 곡선이 그리면된 경로 구성 하는 데 사용 되는 열거형 <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.CustomLineCap&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
          <source>Gets or sets the amount by which to scale this <ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> Class object with respect to the width of the <ph id="ph2">&lt;see cref="T:System.Drawing.Pen" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.Drawing2D.CustomLineCap" /&gt;</ph> 개체의 너비에 비례해서 이 <ph id="ph2">&lt;see cref="T:System.Drawing.Pen" /&gt;</ph> 클래스 개체에 지정할 배율을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
          <source>The amount by which to scale the cap.</source>
          <target state="translated">끝 모양에 지정할 배율입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
          <source>This property specifies the multiple of the pen width by which to multiply the size of the custom cap.</source>
          <target state="translated">이 속성에는 사용자 지정 단면의 크기를 곱하는 펜 굵기의 배수 중에서 지정 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
          <source>For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high.</source>
          <target state="translated">예를 들어이 속성은 1, 사용자 지정 단면 너비는 10, 사용자 지정 단면 높이 5, 및 3의 너비가 펜으로 선이 그려집니다, 하는 경우 cap은 그려지는 30 단위 너비와 15 높이 각각.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Drawing.Drawing2D.CustomLineCap.WidthScale">
          <source>Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high.</source>
          <target state="translated">이 속성을 3로 설정가 그려지는 90 단위 너비 및 높이 각각 45 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>