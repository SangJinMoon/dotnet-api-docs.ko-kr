<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46d665d28c91b354d4c501a375838f3bddf95a2f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37689149" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderBase abstract" />
  <TypeSignature Language="F#" Value="type ProviderBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="79a37-101">확장 가능한 공급자 모델에 대한 기본 구현을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="79a37-101">Provides a base implementation for the extensible provider model.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79a37-102">공급자 모델 전체 또는 일부의 여러 ASP.NET 등의 기능, 멤버 자격, 프로필 및 보호 되는 구성 기능을 캡슐화 할 것입니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-102">The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration.</span></span> <span data-ttu-id="79a37-103">개발자를 여러 구현을 캡슐화 된 기능을 제공 하는 지원 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-103">It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality.</span></span> <span data-ttu-id="79a37-104">또한 개발자는 공급자 모델을 사용 하 여 새 기능을 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-104">In addition, developers can write new features using the provider model.</span></span> <span data-ttu-id="79a37-105">이 효과적으로 기능 코드를 복제 하거나 구현 메서드를 변경 해야 하는 경우 응용 프로그램 계층을 다시 코딩 하지 않고 여러 구현의 기능을 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-105">This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.</span></span>  
  
 <span data-ttu-id="79a37-106"><xref:System.Configuration.Provider.ProviderBase> 만 몇 가지 기본 메서드 및 모든 공급자에 공통 된 속성을 포함 하는 단순 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-106">The <xref:System.Configuration.Provider.ProviderBase> class is simple, containing only a few basic methods and properties that are common to all providers.</span></span> <span data-ttu-id="79a37-107">기능 관련 공급자 (같은 <xref:System.Web.Security.MembershipProvider>)에서 상속 <xref:System.Configuration.Provider.ProviderBase> 하 고 필요한 메서드 및 해당 기능에 대 한 구현 별 공급자를 지원 해야 하는 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-107">Feature-specific providers (such as <xref:System.Web.Security.MembershipProvider>) inherit from <xref:System.Configuration.Provider.ProviderBase> and establish the necessary methods and properties that the implementation-specific providers for that feature must support.</span></span> <span data-ttu-id="79a37-108">구현 별 공급자 (같은 <xref:System.Web.Security.SqlMembershipProvider>)에서 상속 하는 기능 관련 공급자 (이 예제의 경우 <xref:System.Web.Security.MembershipProvider>).</span><span class="sxs-lookup"><span data-stu-id="79a37-108">Implementation-specific providers (such as <xref:System.Web.Security.SqlMembershipProvider>) inherit in turn from a feature-specific provider (in this case, <xref:System.Web.Security.MembershipProvider>).</span></span>  
  
 <span data-ttu-id="79a37-109">공급자 모델의 가장 중요 한 측면 (예를 들어 여부 데이터가 유지 되는 텍스트 파일 또는 데이터베이스에서) 구현을 응용 프로그램 코드에서 추상화 되는 경우</span><span class="sxs-lookup"><span data-stu-id="79a37-109">The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code.</span></span> <span data-ttu-id="79a37-110">구성 파일에 지정 된 기능에 대 한 구현 별 공급자의 형식 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-110">The type of the implementation-specific provider for the given feature is designated in a configuration file.</span></span> <span data-ttu-id="79a37-111">기능 수준 공급자 다음 형식의 구성 파일에서 읽고 기능 코드에 대 한 팩터리 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-111">The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code.</span></span> <span data-ttu-id="79a37-112">응용 프로그램 개발자는 응용 프로그램 코드에서 기능 클래스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-112">The application developer can then use the feature classes in the application code.</span></span> <span data-ttu-id="79a37-113">구현 형식 수 스와핑할 수는 구성 파일에서 다른 구현 방법론에 맞게 코드를 다시 작성할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-113">The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.</span></span>  
  
 <span data-ttu-id="79a37-114">ASP.NET에 포함 된 공급자는 프로필 또는 멤버 자격 등의 기능에 대 한 데이터 지 속성 구현은 대부분 추상화 합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-114">The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership.</span></span> <span data-ttu-id="79a37-115">그러나이 모델은 다른 유형의 추상화 하 고 여러 가지 방법으로 구현할 수 있는 기능에 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-115">However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79a37-116">사용 하는 방법의 예는 <xref:System.Configuration.Provider.ProviderBase> 클래스를 참조 하십시오 [프로필 공급자 구현 예제](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906)합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-116">For an example of how to use the <xref:System.Configuration.Provider.ProviderBase> class, see [Profile Provider Implementation Example](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ProviderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="79a37-117">
            <see cref="T:System.Configuration.Provider.ProviderBase" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-117">Initializes a new instance of the <see cref="T:System.Configuration.Provider.ProviderBase" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Configuration.Provider.ProviderBase.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="79a37-118">관리 도구나 다른 UI(사용자 인터페이스)에 표시하기에 적합한 간단하고 이해하기 쉬운 설명을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-118">Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79a37-119">관리 도구나 다른 UI에 표시하기에 적합한 간단하고 이해하기 쉬운 설명입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-119">A brief, friendly description suitable for display in administrative tools or other UIs.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79a37-120">구성된 공급자 설명의 값을 제공 하지 않는 경우는 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 속성이 기본값으로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-120">If a configured provider does not supply a description, the value of the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is returned as a default.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit&#xA;override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="providerBase.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="79a37-121">공급자의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-121">The friendly name of the provider.</span>
          </span>
        </param>
        <param name="config">
          <span data-ttu-id="79a37-122">이 공급자에 대한 구성에서 지정된 공급자별 특성을 나타내는 이름/값 쌍의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-122">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="79a37-123">구성 작성기를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-123">Initializes the configuration builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79a37-124">기본 클래스 구현을 내부적으로 추적 횟수 공급자의 `Initialize` 메서드가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-124">The base class implementation internally tracks the number of times the provider's `Initialize` method has been called.</span></span> <span data-ttu-id="79a37-125">공급자를 두 번 이상 초기화 되 면는 `InvalidOperationException` 공급자 이미 초기화 되어 있다고 알리는 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-125">If a provider is initialized more than once, an `InvalidOperationException` is thrown stating that the provider is already initialized.</span></span>  
  
 <span data-ttu-id="79a37-126">대부분의 공급자 호출 기능 때문에 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> 공급자별 초기화를 수행 하기 전에이 메서드는 두 번 초기화를 방지 하기 위한 중앙 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-126">Because most feature providers call <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> prior to performing provider-specific initialization, this method is a central location for preventing double initialization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="79a37-127">사용 하는 방법의 예 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>를 참조 하세요 [프로필 공급자 구현 예제](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906)합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-127">For an example of how to use <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>, see [Profile Provider Implementation Example](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="79a37-128">공급자 이름은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-128">The name of the provider is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="79a37-129">공급자 이름의 길이가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-129">The name of the provider has a length of zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="79a37-130">공급자가 이미 초기화된 후 공급자에서 <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />를 호출하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-130">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Configuration.Provider.ProviderBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="79a37-131">구성 중 공급자를 참조하는 데 사용되는 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-131">Gets the friendly name used to refer to the provider during configuration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="79a37-132">구성 중 공급자를 참조하는 데 사용되는 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="79a37-132">The friendly name used to refer to the provider during configuration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="79a37-133">이 문자열에 대 한 권장된 패턴은: [*공급자 작성자*] [*구현 유형을*] [*기능*] 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-133">The recommended pattern for this string is: [*Provider Creator*][*Implementation Type*][*Feature*]Provider.</span></span> <span data-ttu-id="79a37-134">하지만 합니다 <xref:System.Configuration.Provider.ProviderBase.Description%2A> 속성에는 또한에 간단한 설명을 제공 합니다 <xref:System.Configuration.Provider.ProviderBase.Name%2A> 속성은 공급자에 대 한 식별자로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="79a37-134">Although the <xref:System.Configuration.Provider.ProviderBase.Description%2A> property also provides a friendly description, the <xref:System.Configuration.Provider.ProviderBase.Name%2A> property is used as an identifier for the provider.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>