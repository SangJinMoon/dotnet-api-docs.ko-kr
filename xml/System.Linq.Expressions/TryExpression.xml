<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TryExpression.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53d968a5c18a7be92507a73dcb7fb86af50829e15.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d968a5c18a7be92507a73dcb7fb86af50829e15</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.TryExpression">
          <source>Represents a try/catch/finally/fault block.</source>
          <target state="translated">try/catch/finally/fault 블록을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The body block is protected by the try block.</source>
          <target state="translated">본문 블록은 try 블록에 의해 보호 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The handlers consist of a set of <ph id="ph1">&lt;xref:System.Linq.Expressions.CatchBlock&gt;</ph> expressions that can be either catch statements or filters.</source>
          <target state="translated">처리기 집합으로 구성 됩니다. <ph id="ph1">&lt;xref:System.Linq.Expressions.CatchBlock&gt;</ph> 일 수 있는 식 문 또는 필터를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The fault block runs if an exception is thrown.</source>
          <target state="translated">Fault 블록에서 예외가 throw 되 면 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The finally block runs regardless of how control exits the body.</source>
          <target state="translated">finally 블록을 제어 본문을 종료 하는 방법에 관계 없이 실행 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>Only one of fault or finally blocks can be supplied.</source>
          <target state="translated">Fault 또는 finally 블록 중 하나에만 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The return type of the try block must match the return type of any associated catch statements.</source>
          <target state="translated">Try 블록의 반환 형식에는 관련된 catch 문의의 반환 형식을 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.TryExpression">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> object that contains a catch statement by using the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.TryCatch%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 만드는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Linq.Expressions.TryExpression&gt;</ph> catch 문을 사용 하 여 포함 된 개체는 <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.TryCatch%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.Body">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the body of the try block.</source>
          <target state="translated">try 블록의 본문을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.Body">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the body of the try block.</source>
          <target state="translated">try 블록의 본문을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.Fault">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the fault block.</source>
          <target state="translated">fault 블록을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.Fault">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the fault block.</source>
          <target state="translated">fault 블록을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.Finally">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the finally block.</source>
          <target state="translated">finally 블록을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.Finally">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representing the finally block.</source>
          <target state="translated">finally 블록을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.Handlers">
          <source>Gets the collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> expressions associated with the try block.</source>
          <target state="translated">try 블록에 연결된 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> 식의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.Handlers">
          <source>The collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> expressions associated with the try block.</source>
          <target state="translated">try 블록에 연결된 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph> 식의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>의 노드 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">이 식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.TryExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>이 나타내는 식의 정적 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.TryExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">식의 정적 형식을 나타내는 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Body" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Body" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Handlers" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Handlers" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Finally" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Finally" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Fault" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.TryExpression.Fault" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">모든 자식이 같으면 이 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>