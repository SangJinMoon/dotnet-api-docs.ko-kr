<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExpressionVisitor.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51f99a221de282290997c80aa097ba0950265cc8c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f99a221de282290997c80aa097ba0950265cc8c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ExpressionVisitor">
          <source>Represents a visitor or rewriter for expression trees.</source>
          <target state="translated">식 트리의 방문자 또는 재작성기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ExpressionVisitor">
          <source>This class is designed to be inherited to create more specialized classes whose functionality requires traversing, examining or copying an expression tree.</source>
          <target state="translated">이 클래스는 이동 하 고, 검사 또는 식 트리를 복사 합니다. 해당 기능을 사용 하려면 더 특수 한 클래스를 만들기 위해 상속 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionVisitor" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionVisitor" /&gt;</ph>의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ExpressionVisitor">
          <source>Dispatches the expression or the list of expressions to one of the more specialized visit methods in this class.</source>
          <target state="translated">이 클래스의 보다 특수한 visit 메서드 중 하나에 식 또는 식의 목록을 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
          <source>The expressions to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
          <source>Dispatches the list of expressions to one of the more specialized visit methods in this class.</source>
          <target state="translated">이 클래스의 보다 특수한 visit 메서드 중 하나에 식의 목록을 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
          <source>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</source>
          <target state="translated">요소 중 하나가 수정되었으면 수정된 식 목록이고, 그렇지 않으면 원래 식 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
          <source>Dispatches the expression to one of the more specialized visit methods in this class.</source>
          <target state="translated">이 클래스의 보다 특수한 visit 메서드 중 하나에 식을 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
          <source>The type of the nodes.</source>
          <target state="translated">노드의 형식입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
          <source>The nodes to visit.</source>
          <target state="translated">열어 볼 노드입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
          <source>A delegate that visits a single element, optionally replacing it with a new element.</source>
          <target state="translated">단일 요소를 열어 보는 대리자이며 선택적으로 해당 요소를 새 요소로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
          <source>Visits all nodes in the collection using a specified element visitor.</source>
          <target state="translated">지정된 요소 방문자를 사용하여 컬렉션의 모든 노드를 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
          <source>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</source>
          <target state="translated">요소가 하나라도 수정되었으면 수정된 노드 목록이고, 그렇지 않으면 원래 노드 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ExpressionVisitor">
          <source>Visits an expression, casting the result back to the original expression type.</source>
          <target state="translated">식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>The type of the expressions.</source>
          <target state="translated">식의 형식입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>The expressions to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>The name of the calling method; used to report to report a better error message.</source>
          <target state="translated">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>Visits all expressions in the collection, casting the results back to the original expression type.</source>
          <target state="translated">컬렉션에서 모든 식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.</source>
          <target state="translated">식이 수정되었으면 수정된 식 컬렉션이고, 그렇지 않으면 원래 식 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
          <source>The visit method for one of the expressions returned a different type.</source>
          <target state="translated">다른 형식을 반환한 식 중 하나에 대한 방문 메서드입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>The type of the expression.</source>
          <target state="translated">식의 형식입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>The name of the calling method; used to report to report a better error message.</source>
          <target state="translated">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>Visits an expression, casting the result back to the original expression type.</source>
          <target state="translated">식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
          <source>The visit method for this node returned a different type.</source>
          <target state="translated">이 노드에 대한 방문 메서드가 다른 형식을 반환한 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BinaryExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.BlockExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.CatchBlock" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConditionalExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
          <source>Visits the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ConstantExpression" /&gt;</ph>을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
          <source>Visits the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DebugInfoExpression" /&gt;</ph>을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
          <source>Visits the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DefaultExpression" /&gt;</ph>을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.DynamicExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ElementInit" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>Visits the children of the extension expression.</source>
          <target state="translated">확장 식의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>This can be overridden to visit or rewrite specific extension nodes.</source>
          <target state="translated">이를 방문 하거나 특정 확장 노드를 다시 작성 해야 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>If it is not overridden, this method will call <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.VisitChildren%2A&gt;</ph>, which gives the node a chance to walk its children.</source>
          <target state="translated">재정의 하지 않은 경우이 메서드를 호출 합니다 <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.VisitChildren%2A&gt;</ph>, 노드 자식을 워크 하는 기회를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
          <source>By default, <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.VisitChildren%2A&gt;</ph> will try to reduce the node.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.VisitChildren%2A&gt;</ph> 노드를 줄이기 위해 시도 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.GotoExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.IndexExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.InvocationExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
          <source>Visits the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LabelTarget" /&gt;</ph>을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
          <source>The type of the delegate.</source>
          <target state="translated">대리자의 형식입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ListInitExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.LoopExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberAssignment" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberBinding" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberInitExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberListBinding" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MemberMemberBinding" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.NewArrayExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
          <source>Visits the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ParameterExpression" /&gt;</ph>을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.SwitchCase" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TryExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
          <source>The expression to visit.</source>
          <target state="translated">열어 볼 식입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
          <source>Visits the children of the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.UnaryExpression" /&gt;</ph>의 자식 항목을 열어 봅니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
          <source>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</source>
          <target state="translated">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>