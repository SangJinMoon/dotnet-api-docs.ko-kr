<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate"><span data-ttu-id="52a28-101"><see cref="T:System.Linq.Expressions.Expression`1" />에서 나타내는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span></span></typeparam>
    <summary><span data-ttu-id="52a28-102">강력한 형식의 람다 식을 식 트리 형태의 데이터 구조로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span></span> <span data-ttu-id="52a28-103">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a28-104">변수, 필드 또는 매개 변수를 람다 식을 할당 되 면 <xref:System.Linq.Expressions.Expression%601>, 컴파일러에서 식 트리를 작성 하기 위한 지침입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="52a28-105">입력에 람다 식 변환 `Expression<D>` (`Expression(Of D)` Visual basic에서) 형식의 대리자 람다 식에서 변환 하는 경우 존재 `D` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="52a28-106">그러나 변환이 실패할 수 있습니다, 예를 들어 람다 식의 본문은 블록.</span><span class="sxs-lookup"><span data-stu-id="52a28-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="52a28-107">이 대리자와 식 트리 유사 하 게 동작 오버 로드 확인을 고려 하 여 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="52a28-108">식 트리는 람다 식의 메모리 내 데이터 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="52a28-109">식 트리는 투명 하 고 명시적 람다 식의 구조를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="52a28-110">다른 데이터 구조와 함께 경우와 마찬가지로, 식 트리의 데이터와 상호 작용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="52a28-111">데이터 구조로 식을 처리 하는 기능에는 Api를 검사, 변형, 고 사용자 지정 방식으로 처리할 수 있는 형식에 사용자 코드를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="52a28-112">예를 들어는 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] Transact SQL 문으로 데이터베이스를 여 평가 될 수 있는 식 트리를 변환할 데이터 액세스 구현에서는이 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="52a28-113">에 정의 된 많은 표준 쿼리 연산자는 <xref:System.Linq.Queryable> 클래스 형식의 하나 이상의 매개 변수가 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="52a28-114"><xref:System.Linq.Expressions.Expression.NodeType%2A> 의 <xref:System.Linq.Expressions.Expression%601> 은 <xref:System.Linq.Expressions.ExpressionType.Lambda>합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="52a28-115">사용 하 여는 <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> 또는 <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> 만드는 메서드를 프로그램 <xref:System.Linq.Expressions.Expression%601> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a28-116">다음 코드 예제에서는 람다 식을 대리자의 형태로 실행 코드와의 식 트리 형태의 데이터를 모두 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="52a28-117">사용 하 여 다시 실행 코드로, 식 트리를 설정 하는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.Expression%601.Compile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a28-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52a28-118">식 트리로 기술된 람다 식을 실행 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-118">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="52a28-119"><see cref="T:System.Linq.Expressions.Expression`1" />로 기술된 컴파일된 람다 식을 나타내는 <paramref name="TDelegate" /> 형식의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-119">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52a28-120"><xref:System.Linq.Expressions.Expression%601.Compile%2A> 메서드 생성 형식의 대리자 `TDelegate` 런타임에 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-120">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="52a28-121">설명의 맥락에서 해당 대리자를 실행 하는 경우에는 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-121">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="52a28-122"><xref:System.Linq.Expressions.Expression%601.Compile%2A> 메서드를 사용 하 여 식 트리의 값을 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-122">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="52a28-123">사용 하 여 본문 식을 포함 하는 람다 식을 먼저 만듭니다는 <xref:System.Linq.Expressions.Expression.Lambda%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52a28-123">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="52a28-124">그런 다음 호출 <xref:System.Linq.Expressions.Expression%601.Compile%2A> 을 대리자를 얻고 식의 값을 얻는 대리자를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-124">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52a28-125">다음 코드 예제에서는 어떻게 <xref:System.Linq.Expressions.Expression%601.Compile%2A> 식 트리를 실행 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-125">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation">
          <span data-ttu-id="52a28-126">식이 해석된 형식으로 컴파일되어야 함을 나타내려면 <see langword="true" />이고(사용 가능 시), 그러지 않은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-126"><see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="52a28-127">식 트리로 설명되는 람다 식을 해석되거나 컴파일된 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-127">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="52a28-128"><see cref="T:System.Linq.Expressions.Expression`1" />에서 설명하는 컴파일된 람다 식을 나타내는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-128">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator"><span data-ttu-id="52a28-129">컴파일러에서 시퀀스 위치를 표시하고 지역 변수에 주석을 추가하는 데 사용하는 디버깅 정보 생성기입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-129">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span></span></param>
        <summary><span data-ttu-id="52a28-130">람다 식을 나타내는 대리자를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-130">Produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="52a28-131">컴파일된 람다 버전을 포함하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-131">A delegate containing the compiled version of the lambda.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="52a28-132">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-132">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span></span></param>
        <param name="parameters"><span data-ttu-id="52a28-133">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-133">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="52a28-134">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-134">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="52a28-135">모든 자식이 같으면 이 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-135">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="52a28-136">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="52a28-136">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>