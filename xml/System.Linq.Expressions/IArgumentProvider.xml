<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IArgumentProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bb1b0a12225c49cd06302a4822210d08cda2957f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb1b0a12225c49cd06302a4822210d08cda2957f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</source>
          <target state="translated">여러 트리 노드의 인수(DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression 및 InexExpression)에 액세스하기 위한 내부 인터페이스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>You should not use this API.</source>
          <target state="translated">이 API는 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is only public due to DLL refactoring and exists only for internal performance optimizations.</source>
          <target state="translated">이 API는 DLL 리팩터링으로 인해 공용으로만 사용되며 내부 성능 최적화를 위해서만 존재합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>This enables two optimizations which reduce the size of expression trees.</source>
          <target state="translated">이 API를 사용하여 두 개의 최적화를 수행하여 식 트리의 크기를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The first enables the tree nodes to hold onto an IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of a ReadOnlyCollection.</source>
          <target state="translated">첫 번째 최적화를 통해 트리 노드가 ReadOnlyCollection이 아니라 IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>를 유지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> saves the cost of allocating the ReadOnlyCollection for each node.</source>
          <target state="translated">IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>는 각 노드에 대해 ReadOnlyCollection을 할당하는 비용을 절약합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</source>
          <target state="translated">둘째 최적화를 통해서는 특정 수의 인수(예: Block2, Block3, Block4)를 유지하는 특수화된 서브클래스를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</source>
          <target state="translated">따라서 이러한 노드를 사용하면 ReadOnlyCollection과 해당 요소를 저장하기 위한 배열을 모두 할당할 필요가 없으므로 노드당 32바이트를 절약합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</source>
          <target state="translated">식 트리 노드가 계속 ReadOnlyCollections의 원래 LINQ 속성을 노출합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</source>
          <target state="translated">노드에서는 배열 또는 일반적으로 배열에 저장될 요소를 모두 저장하는 데 필드를 다시 사용하여 이 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the array case, the collection is typed to IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">배열의 경우 컬렉션은 ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>가 아니라 IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph>로 형식화됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed it is an array.</source>
          <target state="translated">노드가 처음 생성될 때 노드는 배열입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the compiler accesses the members it uses this interface.</source>
          <target state="translated">컴파일러가 멤버에 액세스할 때 이 인터페이스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Accessing array elements promotes the array to a ReadOnlyCollection.</source>
          <target state="translated">배열 요소에 액세스하면 배열이 ReadOnlyCollection으로 승격됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the object case we store the first argument in a field typed to object.</source>
          <target state="translated">개체의 경우 필드 형식의 첫 번째 인수를 개체에 저장합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed, the field holds the Expression.</source>
          <target state="translated">노드를 처음 생성할 때 필드에 Expression이 보유됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</source>
          <target state="translated">컴파일러에서 이 인터페이스를 통해 인수에 액세스하며, 첫 번째 인수의 접근자가 Expression.ReturnObject를 사용하여 Expression 또는 ReadOnlyCollection 경우를 처리하는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</source>
          <target state="translated">사용자가 ReadOnlyCollection에 액세스하면 개체 필드가 직접 ReadOnlyCollection을 보존하도록 개체 필드가 업데이트됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is important that the Expressions consistently return the same ReadOnlyCollection.</source>
          <target state="translated">Expressions에서 동일한 ReadOnlyCollection을 일관되게 반환하는 것이 중요합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Otherwise, the re-writer tree walker will break.</source>
          <target state="translated">그러지 않으면 재기록기 트리 워커가 중단됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</source>
          <target state="translated">LINQ v1의 새로운 변경 사항으로 동일한 Expression 노드에서 다른 ReadOnlyCollections를 반환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Currently users can rely on object identity to tell if the node has changed.</source>
          <target state="translated">현재 사용자가 개체 ID를 통해 노드가 변경되었는지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</source>
          <target state="translated">오버로드된 필드에 ReadOnlyCollection을 저장하면 메모리 사용이 감소되고 공용 API의 호환성이 유지됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">인수 수를 식 트리 노드에 반환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>You should not use this type.</source>
          <target state="translated">이 형식은 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>The number of arguments to the expression tree node as <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">식 트리 노드에 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>로 반환되는 인수 수입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>You should not use this type.</source>
          <target state="translated">이 형식은 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds as <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">인덱스에서 인수를 반환하며, 인덱스가 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>으로 범위를 벗어나는 경우 발생합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>