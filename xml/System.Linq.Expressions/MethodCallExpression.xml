<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MethodCallExpression.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51ffb35fc88c2bbd8193da35b41ae7314b87f66a6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ffb35fc88c2bbd8193da35b41ae7314b87f66a6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.MethodCallExpression">
          <source>Represents a call to either static or an instance method.</source>
          <target state="translated">정적 메서드 또는 인스턴스 메서드에 대한 호출을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.MethodCallExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%2A&gt;</ph> factory method to create a <ph id="ph4">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.ArrayIndex%2A&gt;</ph> 를 만드는 팩터리 메서드입니다는 <ph id="ph4">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.MethodCallExpression">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> object is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Call&gt;</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> 개체가 <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Call&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.MethodCallExpression">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> object that represents indexing into a two-dimensional array.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> 2 차원 배열에 대 한 인덱싱을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">이 노드를 열어 볼 방문자입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph>은 <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>을 호출합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">이 노드를 열어 본 결과입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">에 대 한이 기본 구현은 <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> 노드 호출 <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">파생된 방문자 클래스에 더 구체적인 메서드를 호출 하려면이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">하지만 호출 하 여 알 수 없는 방문자 계속 지원 해야 <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.Arguments">
          <source>Gets a collection of expressions that represent arguments of the called method.</source>
          <target state="translated">호출된 메서드의 인수를 나타내는 식 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.Arguments">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects which represent the arguments to the called method.</source>
          <target state="translated">호출된 메서드에 대한 인수를 나타내는 <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> 개체의 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.Method">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the method to be called.</source>
          <target state="translated">호출되는 메서드에 대한 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.Method">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the called method.</source>
          <target state="translated">호출된 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>의 노드 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">이 식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.Object">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the instance for instance method calls or null for static method calls.</source>
          <target state="translated">인스턴스 메서드 호출의 인스턴스 또는 정적 메서드 호출의 null을 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.Object">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the receiving object of the method.</source>
          <target state="translated">메서드를 받는 개체를 나타내는 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.Object">
          <source>If a <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> object's <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> property represents a <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> in Visual Basic) method, the <ph id="ph5">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> property is <ph id="ph6">`null`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> 개체의 <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> 속성이 나타내는 <ph id="ph3">`static`</ph> (<ph id="ph4">`Shared`</ph> Visual basic에서) 메서드는 <ph id="ph5">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> 속성은 <ph id="ph6">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">인수 수를 식 트리 노드에 반환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>You should not use this member.</source>
          <target state="translated">이 멤버를 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>The number of arguments to the expression tree node as  <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">식 트리 노드에로 대 한 인수 수가 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>You should not use this member.</source>
          <target state="translated">이 멤버를 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.MethodCallExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>이 나타내는 식의 정적 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.MethodCallExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">식의 정적 형식을 나타내는 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> property of the result.</source>
          <target state="translated">결과의 <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">모든 자식이 같으면 이 식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>