<Type Name="BinaryExpression" FullName="System.Linq.Expressions.BinaryExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d50c9ad7ef1c5cafd5dc63627fc713caea78b17c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.BinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryExpression : System::Linq::Expressions::Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/BinaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5a8fd-101">이항 연산자가 있는 식을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5a8fd-101">Represents an expression that has a binary operator.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-102">다음 표에서 만드는 데 사용할 수 있는 팩터리 메서드를 요약 한 <xref:System.Linq.Expressions.BinaryExpression> 나타내는, 특정 노드 형식을 가진를 <xref:System.Linq.Expressions.Expression.NodeType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-102">The following tables summarize the factory methods that can be used to create a <xref:System.Linq.Expressions.BinaryExpression> that has a specific node type, represented by the <xref:System.Linq.Expressions.Expression.NodeType%2A> property.</span></span> <span data-ttu-id="5a8fd-103">각 테이블 작업 또는 비트 산술 등의 특정 클래스에 대 한 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-103">Each table contains information for a specific class of operations such as arithmetic or bitwise.</span></span>  
  
## <a name="binary-arithmetic-operations"></a><span data-ttu-id="5a8fd-104">이진 산술 연산</span><span class="sxs-lookup"><span data-stu-id="5a8fd-104">Binary Arithmetic Operations</span></span>  
  
|<span data-ttu-id="5a8fd-105">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-105">Node Type</span></span>|<span data-ttu-id="5a8fd-106">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-106">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Add>|<xref:System.Linq.Expressions.Expression.Add%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.AddChecked>|<xref:System.Linq.Expressions.Expression.AddChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Divide>|<xref:System.Linq.Expressions.Expression.Divide%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Modulo>|<xref:System.Linq.Expressions.Expression.Modulo%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Multiply>|<xref:System.Linq.Expressions.Expression.Multiply%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.MultiplyChecked>|<xref:System.Linq.Expressions.Expression.MultiplyChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Power>|<xref:System.Linq.Expressions.Expression.Power%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Subtract>|<xref:System.Linq.Expressions.Expression.Subtract%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.SubtractChecked>|<xref:System.Linq.Expressions.Expression.SubtractChecked%2A>|  
  
## <a name="bitwise-operations"></a><span data-ttu-id="5a8fd-107">비트 연산</span><span class="sxs-lookup"><span data-stu-id="5a8fd-107">Bitwise Operations</span></span>  
  
|<span data-ttu-id="5a8fd-108">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-108">Node Type</span></span>|<span data-ttu-id="5a8fd-109">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-109">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.And>|<xref:System.Linq.Expressions.Expression.And%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Or>|<xref:System.Linq.Expressions.Expression.Or%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.ExclusiveOr>|<xref:System.Linq.Expressions.Expression.ExclusiveOr%2A>|  
  
## <a name="shift-operations"></a><span data-ttu-id="5a8fd-110">시프트 연산</span><span class="sxs-lookup"><span data-stu-id="5a8fd-110">Shift Operations</span></span>  
  
|<span data-ttu-id="5a8fd-111">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-111">Node Type</span></span>|<span data-ttu-id="5a8fd-112">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-112">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.LeftShift>|<xref:System.Linq.Expressions.Expression.LeftShift%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.RightShift>|<xref:System.Linq.Expressions.Expression.RightShift%2A>|  
  
## <a name="conditional-boolean-operations"></a><span data-ttu-id="5a8fd-113">조건부 부울 작업</span><span class="sxs-lookup"><span data-stu-id="5a8fd-113">Conditional Boolean Operations</span></span>  
  
|<span data-ttu-id="5a8fd-114">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-114">Node Type</span></span>|<span data-ttu-id="5a8fd-115">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-115">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.AndAlso>|<xref:System.Linq.Expressions.Expression.AndAlso%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.OrElse>|<xref:System.Linq.Expressions.Expression.OrElse%2A>|  
  
## <a name="comparison-operations"></a><span data-ttu-id="5a8fd-116">비교 연산</span><span class="sxs-lookup"><span data-stu-id="5a8fd-116">Comparison Operations</span></span>  
  
|<span data-ttu-id="5a8fd-117">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-117">Node Type</span></span>|<span data-ttu-id="5a8fd-118">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-118">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Equal>|<xref:System.Linq.Expressions.Expression.Equal%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.NotEqual>|<xref:System.Linq.Expressions.Expression.NotEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual>|<xref:System.Linq.Expressions.Expression.GreaterThanOrEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThan>|<xref:System.Linq.Expressions.Expression.GreaterThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThan>|<xref:System.Linq.Expressions.Expression.LessThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThanOrEqual>|<xref:System.Linq.Expressions.Expression.LessThanOrEqual%2A>|  
  
## <a name="coalescing-operations"></a><span data-ttu-id="5a8fd-119">결합 작업</span><span class="sxs-lookup"><span data-stu-id="5a8fd-119">Coalescing Operations</span></span>  
  
|<span data-ttu-id="5a8fd-120">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-120">Node Type</span></span>|<span data-ttu-id="5a8fd-121">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-121">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Coalesce>|<xref:System.Linq.Expressions.Expression.Coalesce%2A>|  
  
## <a name="array-indexing-operations"></a><span data-ttu-id="5a8fd-122">배열 인덱싱 작업</span><span class="sxs-lookup"><span data-stu-id="5a8fd-122">Array Indexing Operations</span></span>  
  
|<span data-ttu-id="5a8fd-123">노드 형식</span><span class="sxs-lookup"><span data-stu-id="5a8fd-123">Node Type</span></span>|<span data-ttu-id="5a8fd-124">팩터리 메서드</span><span class="sxs-lookup"><span data-stu-id="5a8fd-124">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.ArrayIndex>|<xref:System.Linq.Expressions.Expression.ArrayIndex%2A>|  
  
 <span data-ttu-id="5a8fd-125">또한는 <xref:System.Linq.Expressions.Expression.MakeBinary%2A> 메서드를 만들려면 사용할 수도 있습니다는 <xref:System.Linq.Expressions.BinaryExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-125">In addition, the <xref:System.Linq.Expressions.Expression.MakeBinary%2A> methods can also be used to create a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="5a8fd-126">이러한 팩터리 메서드를 만드는 데 사용할 수는 <xref:System.Linq.Expressions.BinaryExpression> 이진 작업을 나타내는 노드 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-126">These factory methods can be used to create a <xref:System.Linq.Expressions.BinaryExpression> of any node type that represents a binary operation.</span></span> <span data-ttu-id="5a8fd-127">유형의 이러한 메서드의 매개 변수 <xref:System.Linq.Expressions.Expression.NodeType%2A> 원하는 노드 유형을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-127">The parameter of these methods that is of type <xref:System.Linq.Expressions.Expression.NodeType%2A> specifies the desired node type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a8fd-128">다음 예제에서는 한 <xref:System.Linq.Expressions.BinaryExpression> 에서 다른 빼기 한 숫자를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-128">The following example creates a <xref:System.Linq.Expressions.BinaryExpression> object that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="5a8fd-129">이 노드를 열어 볼 방문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-129">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5a8fd-130">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-130">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="5a8fd-131">예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-131">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5a8fd-132">이 노드를 열어 본 결과입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-132">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-133">에 대 한이 기본 구현은 <xref:System.Linq.Expressions.ExpressionType.Extension> 노드 호출 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-133">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="5a8fd-134">파생된 방문자 클래스에 더 구체적인 메서드를 호출 하려면이 메서드를 재정의 <xref:System.Linq.Expressions.ExpressionVisitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-134">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="5a8fd-135">하지만 호출 하 여 알 수 없는 방문자 계속 지원 해야 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-135">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-136">식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-136">Gets a value that indicates whether the expression tree node can be reduced.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-137">식 트리 노드를 줄일 수 있으면 true이고, 그렇지 않으면 false입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-137">True if the expression tree node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conversion">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression Conversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression Conversion" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conversion As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LambdaExpression ^ Conversion { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-138">결합 또는 복합 할당 연산에 사용되는 형식 변환 함수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-138">Gets the type conversion function that is used by a coalescing or compound assignment operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-139">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-139">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-140"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성은 `null` 에 대 한 <xref:System.Linq.Expressions.BinaryExpression> 인 <xref:System.Linq.Expressions.Expression.NodeType%2A> 속성은 <xref:System.Linq.Expressions.ExpressionType.Coalesce>합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-140">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null` for any <xref:System.Linq.Expressions.BinaryExpression> whose <xref:System.Linq.Expressions.Expression.NodeType%2A> property is not <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-141">식 트리 노드가 연산자에 대한 *리프트된* 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-141">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-142">노드가 리프트된 호출을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-142">
              <see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-143">연산자에서는 피연산자가 null을 허용 하지 않지만 null을 허용 하는 피연산자에 전달 되므로 경우에 대 한 연산자 호출 리프트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-143">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftedToNull">
      <MemberSignature Language="C#" Value="public bool IsLiftedToNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftedToNull" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiftedToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiftedToNull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-144">식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 *리프트된* 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-144">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator whose return type is lifted to a nullable type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-145">연산자의 반환 형식이 nullable 형식으로 리프트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-145">
              <see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-146">연산자에서는 피연산자가 null을 허용 하지 않지만 null을 허용 하는 피연산자에 전달 되므로 경우에 대 한 연산자 호출 리프트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-146">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span> <span data-ttu-id="5a8fd-147">하는 경우의 값 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 은 `true`, 연산자 nullable 형식 반환 nullable 피연산자로 평가 되 면 `null`, 연산자를 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-147">If the value of <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> is `true`, the operator returns a nullable type, and if a nullable operand evaluates to `null`, the operator returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Left" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Left { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-148">이항 연산의 왼쪽 피연산자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-148">Gets the left operand of the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-149">이항 연산의 왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-149">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-150">이항 연산에 대한 구현 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-150">Gets the implementing method for the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-151">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-151">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-152">경우는 <xref:System.Linq.Expressions.BinaryExpression> 미리 정의 된 연산자를 사용 하는 작업을 나타내는 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-152">If a <xref:System.Linq.Expressions.BinaryExpression> represents an operation that uses a predefined operator, the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-153">이항 식 노드를 더 단순한 식으로 줄입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-153">Reduces the binary expression node to a simpler expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5a8fd-154">축소된 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-154">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a8fd-155">CanReduce가 true를 반환하면 유효한 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-155">If CanReduce returns true, this should return a valid expression.</span></span>  
  
 <span data-ttu-id="5a8fd-156">이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5a8fd-156">This method can return another node which itself must be reduced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Right" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Right { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5a8fd-157">이항 연산의 오른쪽 피연산자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-157">Gets the right operand of the binary operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5a8fd-158">이항 연산의 오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-158">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.BinaryExpression Update (System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.BinaryExpression Update(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.LambdaExpression conversion, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (left As Expression, conversion As LambdaExpression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::BinaryExpression ^ Update(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::LambdaExpression ^ conversion, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="5a8fd-159">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-159">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="5a8fd-160">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-160">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="5a8fd-161">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-161">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5a8fd-162">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-162">Creates a new expression that is like this one, but using the supplied children.</span>
          </span>
          <span data-ttu-id="5a8fd-163">모든 자식이 같으면 이 식을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-163">If all of the children are the same, it will return this expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5a8fd-164">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5a8fd-164">This expression if no children are changed or an expression with the updated children.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>