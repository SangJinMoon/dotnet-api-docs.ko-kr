<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CollectionAdapters.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cda5b936b22052f7b99b2c7e5bd552235a459181.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cda5b936b22052f7b99b2c7e5bd552235a459181</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>Enables collections to be passed between an add-in and its host application.</source>
          <target state="translated">추가 기능과 해당 호스트 응용 프로그램 간에 컬렉션을 전달할 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>This class provides methods that enable an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection to be converted to a <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
          <target state="translated">이 클래스는 메서드를 제공는 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션으로 변환 될 수는 <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection is passed across the isolation boundary and converted back to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection that the add-in or the host application can use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션을 다시 변환 및 격리 경계를 넘어 전달는 <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 추가 나 호스트 응용 프로그램에서 사용할 수 있는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>Objects in collections must be remotable.</source>
          <target state="translated">컬렉션의 개체에는 원격 가능 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>For more information about the object types that you can pass, see <bpt id="p1">[</bpt>Contracts, Views, and Adapters<ept id="p1">](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.</source>
          <target state="translated">전달할 수 있는 개체 유형에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>계약, 뷰 및 어댑터<ept id="p1">](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The type of objects that are contained in the list.</source>
          <target state="translated">목록에 들어 있는 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> must be serializable.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 직렬화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The collection from the other side of the pipeline.</source>
          <target state="translated">파이프라인의 다른 쪽에 있는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> 컬렉션을 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The converted collection.</source>
          <target state="translated">변환된 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
          <target state="translated">호스트 응용 프로그램 또는 추가 기능에 반환 된 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection will have a lifetime token for the remote <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션 원격에 대 한 수명 토큰에 포함 됩니다 <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).</source>
          <target state="translated">이 메서드 오버 로드를 사용 해야 경우에만의 콘텐츠는 <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 는 추가 기능에 호스트 (보다는 보기에 맞게 조정 해야 하는 형식을)에 직접 전달 될 수 있는 직렬화 가능 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The following example implements a host-side adapter pipeline segment as described <bpt id="p1">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id="p1">](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>. The example adapts the custom <ph id="ph1">`ProcessBooks`</ph> method by taking the <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection passed from the add-in and converting it to an <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection, which the host application can then use.</source>
          <target state="translated">다음 예제에서는 설명 된 대로 호스트 측 어댑터 파이프라인 세그먼트를 구현 <bpt id="p1">[</bpt>연습: 호스트 간에 컬렉션 전달 및 추가 기능<ept id="p1">](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>합니다. 이 예제에서는 사용자 지정 <ph id="ph1">`ProcessBooks`</ph> 을 수행 하 여 메서드는 <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션에서 추가 기능에서 전달 하 고으로 변환 하 고는 <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션으로, 호스트 응용 프로그램을 유도할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> across the isolation boundary.</source>
          <target state="translated">형식의 개체를 전달 하기 위한 계약을 정의 하는 형식을 <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> 격리 경계를 넘어 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the view of the objects in the list.</source>
          <target state="translated">목록에 있는 개체의 뷰를 정의하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The collection to pass to the other side of the pipeline.</source>
          <target state="translated">파이프라인의 다른 쪽으로 전달할 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
          <target state="translated">계약에 정의된 형식의 데이터를 뷰에 필요한 형식에 맞게 조정하는 변환기입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
          <target state="translated">뷰에 정의된 형식의 데이터를 계약에 필요한 형식에 맞게 조정하는 변환기입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection by using converter adapters.</source>
          <target state="translated">변환기 어댑터를 사용하여 지정된 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> 컬렉션을 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The converted collection.</source>
          <target state="translated">변환된 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly).</source>
          <target state="translated">에 대 한이 메서드 오버 로드를 사용 하 여 <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 전에 추가 기능에서 호스트 (대신 또는 직접 전달 될 수 있는 간단한 serializable 형식)에 전달 될 수 있도록 수정 해야 하는 형식을 포함 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
          <target state="translated">호스트 응용 프로그램 또는 추가 기능에 반환 된 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>It will have a lifetime token for the remote <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>.</source>
          <target state="translated">원격에 대 한 수명 토큰은 <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The type of objects that are contained in the list.</source>
          <target state="translated">목록에 들어 있는 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> must be serializable.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> 직렬화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The collection to convert.</source>
          <target state="translated">변환할 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> 컬렉션을 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The converted collection.</source>
          <target state="translated">변환된 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between the add-in and its host application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션에서 추가 기능 및 호스트 된 응용 프로그램 간에 격리 경계를 넘어 마샬링할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).</source>
          <target state="translated">이 메서드 오버 로드를 사용 해야 경우에만의 콘텐츠는 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션은는 계약 (하지 않고 계약에 맞게 조정 해야 하는 형식을)에 직접 전달 될 수 있는 직렬화 가능 형식입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The following example implements the class that defines an add-in side adapter pipeline segment.</source>
          <target state="translated">다음 예제에서는 추가 기능 측 어댑터 파이프라인 세그먼트를 정의 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>It adapts the custom <ph id="ph1">`ProcessBooks`</ph> method by taking the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection passed from the add-in view segment and converting it to an <ph id="ph3">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection that can be marshaled across the isolation boundary to the host.</source>
          <target state="translated">사용자 지정 적응 <ph id="ph1">`ProcessBooks`</ph> 을 수행 하 여 메서드는 <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 컬렉션 뷰 추가 기능에서 세그먼트에서 전달 하 고으로 변환 하 고는 <ph id="ph3">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 호스트에 격리 경계를 넘어 마샬링할 수 있는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the view of the objects in the list.</source>
          <target state="translated">목록에 있는 개체의 뷰를 정의하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> across the isolation boundary.</source>
          <target state="translated">형식의 개체를 전달 하기 위한 계약을 정의 하는 형식을 <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> 격리 경계를 넘어 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The collection to convert.</source>
          <target state="translated">변환할 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
          <target state="translated">뷰에 정의된 형식의 데이터를 계약에 필요한 형식에 맞게 조정하는 변환기입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
          <target state="translated">계약에 정의된 형식의 데이터를 뷰에 필요한 형식에 맞게 조정하는 변환기입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection by using converter adapters.</source>
          <target state="translated">변환기 어댑터를 사용하여 지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> 컬렉션을 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The converted collection.</source>
          <target state="translated">변환된 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly).</source>
          <target state="translated">에 대 한이 메서드 오버 로드를 사용 하 여 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 는 계약 (하지 않고 직접 전달 될 수 있는 간단한 serializable 형식)에 전달 될 수 전에 계약에 맞게 조정 해야 하는 형식을 포함 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between an add-in and its host application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> 컬렉션으로 추가 기능 및 호스트 된 응용 프로그램 간에 격리 경계를 넘어 마샬링할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>