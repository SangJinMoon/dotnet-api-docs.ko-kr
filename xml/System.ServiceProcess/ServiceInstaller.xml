<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ServiceInstaller.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac554444d60339c94eeb4aa99633da0325355739b16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54444d60339c94eeb4aa99633da0325355739b16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Installs a class that extends <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> to implement a service.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>를 확장하는 클래스를 설치하여 서비스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>This class is called by the install utility when installing a service application.</source>
          <target state="translated">이 클래스는 서비스 응용 프로그램을 설치할 때 설치 유틸리티에서 호출됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> does work specific to the service with which it is associated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 와 연관 된 서비스에만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services registry key.</source>
          <target state="translated">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services 레지스트리 키 내 하위 키에 서비스와 연결 된 레지스트리 값을 쓸 설치 유틸리티에 의해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The service is identified by its ServiceName within this subkey.</source>
          <target state="translated">서비스는이 하위 키는 내에서 해당 ServiceName로 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The subkey also includes the name of the executable or .dll to which the service belongs.</source>
          <target state="translated">하위 키에는 서비스 속해 있는.dll 또는 실행 파일의 이름을 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성을 클래스의 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
          <target state="translated">프로젝트 내에서 하나를 만들 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 개와 서비스 응용 프로그램 마다 인스턴스 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 응용 프로그램의 각 서비스에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
          <target state="translated">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 인스턴스와 인스턴스를 추가할는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method, be sure to perform the same additions to the collection in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method.</source>
          <target state="translated">설치 관리자 인스턴스;을 추가 하기 위한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 하는 경우는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 메서드를 컬렉션에 동일한 추가 수행 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
          <target state="translated">파생 된 모든 클래스에 대 한는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스의 상태는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에서 동일 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.When the install utility is called, it looks for the <ph id="ph4">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute.</source>
          <target state="translated">그러나 컬렉션을 유지 관리를 방지할 수 있습니다는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 사용자 지정 설치 관리자 클래스 생성자의 컬렉션입니다. 설치 유틸리티를 호출할 때 찾습니다는 <ph id="ph4">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>If the attribute is <ph id="ph1">`true`</ph>, the utility installs all the services that were added to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection that were associated with your project installer.</source>
          <target state="translated">특성이 있으면 <ph id="ph1">`true`</ph>, 유틸리티에 추가 된 서비스를 모두 설치는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 프로젝트 설치 관리자와 연관 된 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> is <ph id="ph2">`false`</ph> or does not exist, the install utility ignores the project installer.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 은 <ph id="ph2">`false`</ph> 않습니다 또는 존재 하지, 설치 유틸리티 프로젝트 설치 관리자를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> associated with your project installation class installs information common to all <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances in the project.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 관련 설치 클래스 설치 프로젝트 정보는 모든에 공통 된 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 프로젝트의 인스턴스.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</source>
          <target state="translated">이 서비스에 아무 것도 설치 프로젝트의 다른 서비스에서 구분 하는 경우 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It is crucial that the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> be identical to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> of the class you derived from <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">매우 중요 하는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 와 동일할 수는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 에서 파생 된 클래스의 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Normally, the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property for the service is set within the Main() function of the service application's executable.</source>
          <target state="translated">값에 일반적으로 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 서비스 응용 프로그램의 실행 파일의 main () 함수 내에서 서비스에 대 한 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The Service Control Manager uses the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property to locate the service within this executable.</source>
          <target state="translated">서비스 제어 관리자를 사용 하 여는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 속성을이 실행 파일 내에서 서비스를 찾습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>You can modify other properties on the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> either before or after adding it to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection of your project installer.</source>
          <target state="translated">다른 속성을 수정할 수 있습니다는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 하기 전 또는 후에 추가 하는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 프로젝트 설치 관리자의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>For example, a service's <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> may be set to start the service automatically at reboot or require a user to start the service manually.</source>
          <target state="translated">예를 들어 서비스의 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> 재부팅 시 자동으로 서비스를 시작 하거나 사용자가 서비스를 수동으로 시작로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
          <target state="translated">일반적으로 메서드를 호출 하지 것입니다 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> ; 코드 내에서 일반적으로에서 호출 설치 유틸리티입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType&gt;</ph> methods during the installation process.</source>
          <target state="translated">설치 유틸리티를 자동으로 호출 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType&gt;</ph> 설치 과정에서 메서드.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt;</ph> (or <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType&gt;</ph>) on all previously installed components.</source>
          <target state="translated">백업를 필요에 따라 호출 하 여 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt;</ph> (또는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType&gt;</ph>) 이전에 설치 된 모든 구성 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The installation utility calls <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> to remove the object.</source>
          <target state="translated">설치 유틸리티 호출 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 개체를 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>An application's install routine maintains information automatically about the components already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>This state information is continuously updated as the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance, and each <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
          <target state="translated">이 상태 정보는 지속적으로 업데이트는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 인스턴스를 만들고 각 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 유틸리티 인스턴스를 설치 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It is usually unnecessary for your code to modify state information explicitly.</source>
          <target state="translated">일반적으로 명시적으로 상태 정보를 수정 하는 코드에 대 한 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>When the installation is performed, it automatically creates an <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to install the event log source associated with the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class.</source>
          <target state="translated">자동으로 만듭니다 설치를 수행 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> 와 관련 된 이벤트 로그 소스를 설치 하는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property for this source is set by the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor to the computer's Application log.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> 이 원본에 대 한 속성에서 설정 되는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> 컴퓨터의 응용 프로그램 로그에는 생성자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> (which should be identical to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> of the service), the <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> is automatically set to the same value.</source>
          <target state="translated">설정 하는 경우는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> (동일 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 서비스), <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> 동일한 값으로 자동으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>In an installation failure, the source's installation is rolled-back along with previously installed services.</source>
          <target state="translated">설치 오류가 원본의 설치가 이전에 설치 된 서비스와 함께 롤백된을 되었습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method tries to stop the service if it is running.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드 실행 되는 경우 서비스를 중지 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Whether this succeeds or not, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> undoes the changes made by <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph>.</source>
          <target state="translated">여부에 상관 없이, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 에서 변경한 내용을 실행 취소 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>If a new source was created for event logging, the source is deleted.</source>
          <target state="translated">이벤트 로깅에 대 한 새 원본을 만들어진 경우 원본이 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>The following example creates a project installer, called <ph id="ph1">`MyProjectInstaller`</ph>, which inherits from <ph id="ph2">&lt;xref:System.Configuration.Install.Installer&gt;</ph>.</source>
          <target state="translated">다음 예에서는 라는 프로젝트 설치 관리자를 만듭니다 <ph id="ph1">`MyProjectInstaller`</ph>에서 상속한 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>It is assumed there is a service executable that contains two services, "Hello-World Service 1" and "Hello-World Service 2".</source>
          <target state="translated">두 서비스에 "Hello World 서비스 1"을 포함 하는 서비스 실행 파일은 가정 및 "2" Hello World 서비스입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Within the constructor for <ph id="ph1">`MyProjectInstaller`</ph> (which would be called by the install utility), <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> objects are created for each of these services, and a <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> is created for the executable.</source>
          <target state="translated">에 대 한 생성자 내에서 <ph id="ph1">`MyProjectInstaller`</ph> (있는 의해 호출 되는 설치 유틸리티), <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 개체는 이러한 각 서비스에 대 한 만들어집니다 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 실행 파일에 대해 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>For the install utility to recognize <ph id="ph1">`MyProjectInstaller`</ph> as a valid installer, the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute is set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">설치 유틸리티를 인식 하도록 <ph id="ph1">`MyProjectInstaller`</ph> 를 유효한 설치 관리자로 <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성이로 설정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Optional properties are set on the process installer and the service installers before the installers are added to the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
          <target state="translated">설치 관리자에 추가 되기 전에 프로세스 설치 관리자 및 서비스 설치 관리자에서 선택적 속성이 설정 되어는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>When the install utility accesses <ph id="ph1">`MyProjectInstaller`</ph>, the objects added to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection through a call to <ph id="ph3">&lt;xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType&gt;</ph> will be installed in turn.</source>
          <target state="translated">설치 유틸리티 액세스할 때 <ph id="ph1">`MyProjectInstaller`</ph>에 추가 된 개체는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에 대 한 호출을 통해 <ph id="ph3">&lt;xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType&gt;</ph> 차례로 설치 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.</source>
          <target state="translated">과정에서 설치 관리자 유지 되므로 각 되돌릴 수 있습니다 차례로 설치 오류가 발생 하는 경우 설치 된 어떤 개체를 나타내는 상태 정보를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>Normally, you would not create an instance of your project installer class explicitly.</source>
          <target state="translated">일반적으로 프로젝트 설치 관리자 클래스의 인스턴스를 명시적으로 만들지 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceProcess.ServiceInstaller">
          <source>You would create it and add the <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.</source>
          <target state="translated">만들 추가 하는 <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성 구문의을 이지만 설치 유틸리티 실제로 호출 하 여 인스턴스화합니다 따라서 클래스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceInstaller" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceInstaller" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성을 클래스의 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
          <target state="translated">프로젝트 내에서 하나를 만들 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 개와 서비스 응용 프로그램 마다 인스턴스 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 응용 프로그램의 각 서비스에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
          <target state="translated">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 인스턴스와 인스턴스를 추가할는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor automatically generates an event log source whose <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property is set to the computer's Application log, and an <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> 이벤트 로그를 자동으로 생성 하는 생성자 소스 <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> 속성은 컴퓨터의 응용 프로그램 로그에는 및 <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>, which should be identical to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> of the service, the <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> property of the event log is automatically set to the same value.</source>
          <target state="translated">설정 하는 경우는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>, 동일 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> , 서비스는 <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> 이벤트 로그의 속성은 동일한 값으로 자동 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>The source is deleted automatically in the case of an installation failure.</source>
          <target state="translated">원본 설치 오류가 발생할 경우 자동으로 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> property to <ph id="ph3">`ServiceStartMode.Manual`</ph> to specify that a user start the service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> 생성자는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> 속성을 <ph id="ph3">`ServiceStartMode.Manual`</ph> 사용자는 서비스를 시작 하도록 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.#ctor">
          <source>You can reset the property to <ph id="ph1">`ServiceStartMode.Automatic`</ph> to specify that the service start when the computer reboots.</source>
          <target state="translated">속성을 다시 설정할 수 있습니다 <ph id="ph1">`ServiceStartMode.Automatic`</ph> 컴퓨터 재부팅 시 서비스가 시작을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> from which to copy.</source>
          <target state="translated">복사할 원본 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>Copies properties from an instance of <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> to this installer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph> 인스턴스의 속성을 이 설치 관리자에 복사합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>This method will rarely be called within your code.</source>
          <target state="translated">이 메서드는 코드 내에서 거의 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> is usually called only by designers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> 일반적으로 디자이너에 의해서만 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> saves the service name of the <ph id="ph2">`component`</ph> parameter to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> 서비스 이름을 저장 하는 <ph id="ph2">`component`</ph> 매개 변수는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 의 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>(Because the parameter must be an instance of a class that derives from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>, <ph id="ph2">`component`</ph> is guaranteed to have a <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property.)</source>
          <target state="translated">(매개 변수에서 파생 되는 클래스의 인스턴스 수 있어야 하므로 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>, <ph id="ph2">`component`</ph> 있는 것이 확실 한 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.)</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>If you are using the Visual Studio designer, this method is called at design time when the user clicks <ph id="ph1">`Add Installer`</ph> on a component that specified this class as its installer.</source>
          <target state="translated">Visual Studio 디자이너를 사용 하는 경우이 메서드는 사용자가 클릭할 때 디자인 타임에 <ph id="ph1">`Add Installer`</ph> 설치 관리자로이 클래스를 지정 하는 구성 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>The installer takes all information it can from the live component and stores it for use at install time.</source>
          <target state="translated">라이브 구성 요소에서 있고 설치 중에 사용 하기 위해 저장 하는 모든 정보를 사용 하는 설치 관리자입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
          <source>The component you are associating with this installer does not inherit from <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>.</source>
          <target state="translated">이 설치 관리자와 연결되는 구성 요소가 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceBase" /&gt;</ph>에서 상속하지 않는 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</source>
          <target state="translated">자동으로 시작된 다른 서비스가 실행되는 동안 서비스 시작을 지연할지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to delay automatic start of the service; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">서비스의 자동 시작을 지연하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A&gt;</ph> property can be applied to any service, but it is ignored unless the service's start mode is <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A&gt;</ph> 속성 모든 서비스에 적용 될 수 있지만 서비스의 시작 모드가 아닌 경우 무시 됩니다 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>The setting takes effect the next time the system is restarted.</source>
          <target state="translated">설정은 시스템이 시작 하는 다음에 적용이 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>The Service Control Manager does not guarantee a specific start time for the service.</source>
          <target state="translated">서비스 제어 관리자는 서비스에 대 한 특정 시작 시간을 보장 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>A delayed automatic start service cannot be a member of a load ordering group, but it can depend on another automatic start service.</source>
          <target state="translated">지연 된 자동 시작 서비스는 로드 순서 그룹의 구성원 일 수는 없지만 다른 자동 시작 서비스에 종속 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>If an application calls a delayed automatic start service before it is loaded, the call fails.</source>
          <target state="translated">로드 하기 전에 지연 된 자동 시작 서비스를 호출 하는 응용 프로그램, 호출이 실패 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart">
          <source>On operating systems that do not support delayed automatic start, setting this property has no effect.</source>
          <target state="translated">지연 된 자동 시작을 지원 하지 않는 운영 체제에서이 속성을 설정에 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>Gets or sets the description for the service.</source>
          <target state="translated">서비스에 대한 설명을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>The description of the service.</source>
          <target state="translated">서비스에 대한 설명입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>The default is an empty string ("").</source>
          <target state="translated">기본값은 빈 문자열("")입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Description%2A&gt;</ph> property to describe the purpose of the installed service to the user.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Description%2A&gt;</ph> 속성을 사용자에 게 설치 된 서비스의 목적을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>The user can view the service description in applications that display details for installed services.</source>
          <target state="translated">사용자 설치 된 서비스에 대 한 세부 정보를 표시 하는 응용 프로그램의 서비스 설명을 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>For example, using Windows XP, you can view the service description with the Service Control command-line utility (Sc.exe) or you can view the service description within the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> node of the <bpt id="p2">**</bpt>Computer Management<ept id="p2">**</ept> console.</source>
          <target state="translated">Windows XP를 사용 하면 서비스 제어 명령줄 유틸리티 (Sc.exe) 인 서비스 설명을 볼 수 있습니다 또는 내에서 서비스 설명을 볼 수 있습니다 예를 들어는 <bpt id="p1">**</bpt>서비스<ept id="p1">**</ept> 의 노드는 <bpt id="p2">**</bpt>컴퓨터 관리 <ept id="p2">**</ept> 콘솔.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>The following code example sets the installation properties for a new Windows service application.</source>
          <target state="translated">다음 코드 예제에서는 새 Windows 서비스 응용 프로그램에 대 한 설치 속성을 설정합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>The example sets the service name, along with the display name and description.</source>
          <target state="translated">이 예제에서는 서비스 이름과 표시 이름 및 설명을 설정합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.Description">
          <source>After assigning the installation properties for the service, the example adds the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
          <target state="translated">이 예제에서는 서비스에 대 한 설치 속성을 할당 한 후 추가 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>Indicates the friendly name that identifies the service to the user.</source>
          <target state="translated">사용자가 서비스를 식별하는 데 사용되는 이름을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>The name associated with the service, used frequently for interactive tools.</source>
          <target state="translated">서비스와 관련된 이름이며 대화형 도구에 주로 사용됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> 예를 들어 사용자가 읽을 수 있는 서비스에 대 한 설명이 포함 된 이름을 제공 하기 위해 서비스 제어 관리자에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> is a registry value, but is never used as a registry key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> 레지스트리 값은 있지만 레지스트리 키로 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>Therefore, restrictions on the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property value do not apply.</source>
          <target state="translated">따라서에 대 한 제한 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 속성 값이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> is used as the HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services registry key, so it is restricted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 수 있도록 제한 되어 있으므로 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 레지스트리 키로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.DisplayName">
          <source>The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property.</source>
          <target state="translated">표시 이름이 있으므로 경우와 이름의 제한이 선택에는 서비스를 식별 하 설치 유틸리티에서 사용 되지 않습니다 됩니다는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that contains the context information associated with the installation.</source>
          <target state="translated">설치와 연관된 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>Installs the service by writing service application information to the registry.</source>
          <target state="translated">서비스 응용 프로그램 정보를 레지스트리에 기록하여 서비스를 설치합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>This method is meant to be used by installation tools, which process the appropriate methods automatically.</source>
          <target state="translated">이 메서드는 적절한 메서드를 자동으로 처리하는 설치 도구에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
          <target state="translated">일반적으로 메서드를 호출 하지 것입니다 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> ; 코드 내에서 일반적으로에서 호출 설치 유틸리티입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method during installation.</source>
          <target state="translated">설치 유틸리티를 자동으로 호출 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 설치 하는 동안 메서드.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> on the object that generated the exception.</source>
          <target state="translated">백업를 필요에 따라 호출 하 여 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> 예외를 생성 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>An application's install routine maintains information automatically about the components that were already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이미 설치 된, 프로젝트 설치 관리자를 사용 하 여 구성 요소에 대해 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> as the <ph id="ph2">`stateSaver`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
          <target state="translated">이 상태 정보로 전달 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 로 <ph id="ph2">`stateSaver`</ph> 매개 변수를 계속 업데이트 됩니다는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 인스턴스와 각 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 유틸리티 인스턴스를 설치 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
          <target state="translated">일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> associated with your project installation class installs information common to all <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances in the project.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 관련 설치 클래스 설치 프로젝트 정보는 모든에 공통 된 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 프로젝트의 인스턴스.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</source>
          <target state="translated">이 서비스에 아무 것도 설치 프로젝트의 다른 서비스에서 구분 하는 경우 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> 특성을 클래스의 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
          <target state="translated">프로젝트 내에서 하나를 만들 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 개와 서비스 응용 프로그램 마다 인스턴스 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 응용 프로그램의 각 서비스에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
          <target state="translated">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 인스턴스와 인스턴스를 추가할는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method, be sure to perform the same additions to the collection in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method.</source>
          <target state="translated">설치 관리자 인스턴스;을 추가 하기 위한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 하는 경우는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 메서드를 컬렉션에 동일한 추가 수행 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
          <target state="translated">파생 된 모든 클래스에 대 한는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스의 상태는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에서 동일 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.</source>
          <target state="translated">그러나 컬렉션을 유지 관리를 방지할 수 있습니다는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 사용자 지정 설치 관리자 클래스 생성자의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The installation does not contain a <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceProcessInstaller" /&gt;</ph> for the executable.</source>
          <target state="translated">설치에 실행 파일에 대한 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceProcessInstaller" /&gt;</ph>가 포함되어 있지 않은 경우</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The file name for the assembly is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or an empty string.</source>
          <target state="translated">어셈블리의 파일 이름이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이거나 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The service name is invalid.</source>
          <target state="translated">서비스 이름이 잘못된 경우</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The Service Control Manager could not be opened.</source>
          <target state="translated">서비스 컨트롤 관리자를 열지 못한 경우</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The display name for the service is more than 255 characters in length.</source>
          <target state="translated">서비스에 대한 표시 이름이 255자보다 긴 경우</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>The system could not generate a handle to the service.</source>
          <target state="translated">시스템에서 서비스에 대한 핸들을 생성하지 못한 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
          <source>A service with that name is already installed.</source>
          <target state="translated">해당 이름의 서비스가 이미 설치된 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Configuration.Install.ComponentInstaller" /&gt;</ph> to which you are comparing the current installer.</source>
          <target state="translated">현재 설치 관리자와 비교하고 있는 <ph id="ph1">&lt;see cref="T:System.Configuration.Install.ComponentInstaller" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
          <source>Indicates whether two installers would install the same service.</source>
          <target state="translated">두 개의 설치 관리자가 동일한 서비스를 설치하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if calling <ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /&gt;</ph> on both of these installers would result in installing the same service; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 설치 관리자 모두에 대해 <ph id="ph2">&lt;see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /&gt;</ph>을 호출할 경우 동일한 서비스가 설치되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A&gt;</ph> indicates, for example, whether two installers would install the same service under the same user account.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A&gt;</ph> 나타내며, 예를 들어 두 명의 설치 관리자가 동일한 사용자 계정에서 동일한 서비스를 설치 하는지 여부를</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that contains the context information associated with the installation.</source>
          <target state="translated">설치와 연관된 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>Rolls back service application information written to the registry by the installation procedure.</source>
          <target state="translated">설치 프로시저에서 레지스트리에 쓴 서비스 응용 프로그램 정보를 롤백합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>This method is meant to be used by installation tools, which process the appropriate methods automatically.</source>
          <target state="translated">이 메서드는 적절한 메서드를 자동으로 처리하는 설치 도구에서 사용됩니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
          <target state="translated">일반적으로 메서드를 호출 하지 것입니다 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> ; 코드 내에서 일반적으로에서 호출 설치 유틸리티입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method during the installation process.</source>
          <target state="translated">설치 유틸리티를 자동으로 호출 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 설치 과정에서 메서드.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> on the object that generated the exception.</source>
          <target state="translated">백업를 필요에 따라 호출 하 여 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> 예외를 생성 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>An application's install routine maintains information automatically about the components already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
          <target state="translated">이 상태 정보로 전달 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> 로 <ph id="ph2">`savedState`</ph> 매개 변수를 계속 업데이트 됩니다는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 인스턴스와 각 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 유틸리티 인스턴스를 설치 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
          <target state="translated">일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>Indicates the name used by the system to identify this service.</source>
          <target state="translated">시스템에서 이 서비스를 식별하는 데 사용되는 이름을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>This property must be identical to the <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph> of the service you want to install.</source>
          <target state="translated">이 속성은 설치하려는 서비스의 <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /&gt;</ph>과 동일해야 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>The name of the service to be installed.</source>
          <target state="translated">설치되는 서비스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>This value must be set before the install utility attempts to install the service.</source>
          <target state="translated">이 값은 설치 유틸리티에서 서비스를 설치하기 전에 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>It is crucial that the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> be identical to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> of the class you derived from <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
          <target state="translated">매우 중요 하는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 와 동일할 수는 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 에서 파생 된 클래스의 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>Normally, the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property for the service is set within the Main() function of the service application's executable.</source>
          <target state="translated">값에 일반적으로 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 서비스 응용 프로그램의 실행 파일의 main () 함수 내에서 서비스에 대 한 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>The Service Control Manager uses the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> property to locate the service within this executable.</source>
          <target state="translated">서비스 제어 관리자를 사용 하 여는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType&gt;</ph> 속성을이 실행 파일 내에서 서비스를 찾습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the service installer, the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> of the associated event log is set to the same value.</source>
          <target state="translated">설정 하는 경우는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 서비스 설치 관리자의는 <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> 관련된 이벤트 로그의 동일한 값으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.</source>
          <target state="translated">따라서 서비스를를 자동으로 컴퓨터에 응용 프로그램 로그 서비스 명령 (예: 시작 및 중지) 호출을 로깅할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown.</source>
          <target state="translated">같은 이름으로 원본 컴퓨터에 있지만 응용 프로그램 로그가 아닌 로그에 이미 있는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.</source>
          <target state="translated">소스 존재 하 고 응용 프로그램 로그와 연결 된 경우 해당 소스는 서비스에 명령을 호출을 보고 하는 데 사용 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> cannot be <ph id="ph2">`null`</ph> or have zero length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> 안 <ph id="ph2">`null`</ph> 길이 0 또는 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>Its maximum size is 256 characters.</source>
          <target state="translated">최대 크기는 256 자입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>It also cannot contain forward or backward slashes, '/' or '<ph id="ph1">\\</ph>', or characters from the ASCII character set with value less than decimal value 32.</source>
          <target state="translated">앞으로 또는 뒤로 슬래시가 포함할 수 없습니다 '/' 또는 '<ph id="ph1">\\</ph>', 또는 문자는 ascii에서 문자 10 진수 값 32 보다 작은 값을 가진 집합입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.ServiceName">
          <source>The <ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /&gt;</ph> property is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /&gt;</ph> 속성이 잘못된 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>Indicates the services that must be running for this service to run.</source>
          <target state="translated">이 서비스를 실행하는 데 필요한 서비스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>An array of services that must be running before the service associated with this installer can run.</source>
          <target state="translated">이 설치 관리자와 관련된 서비스를 실행하기 전에 실행해야 하는 서비스의 배열입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>A service can require other services to be running before it can start.</source>
          <target state="translated">서비스를 시작 하기 전에 실행 되 고 다른 서비스에 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>The information from this property is written to a key in the registry.</source>
          <target state="translated">이 속성의 정보는 레지스트리에서 키에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>When the user (or the system, in the case of automatic startup) tries to run the service, the Service Control Manager (SCM) verifies that each of the services in the array has already been started.</source>
          <target state="translated">사용자 (또는 자동 시작 시 시스템) 서비스를 실행 하려고 합니다 (SCM (서비스 제어 관리자)는 각 배열에 있는 서비스를 이미 시작한 것을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>If any service in the array is not running then, the SCM tries to start them.</source>
          <target state="translated">모든 서비스 배열의 다음를 실행 하지 않는 경우 SCM 컴퓨터를 시작 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>This includes services with <ph id="ph1">`Manual`</ph><ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>.</source>
          <target state="translated">에 <ph id="ph1">`Manual`</ph> <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>If any service upon which this service depends fails to start, this service will not start.</source>
          <target state="translated">이 서비스가 종속 된 모든 서비스를 시작 하지 못하면이 서비스가 시작 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>An exception is not thrown if the system is not started because there is no exception handling at the system level to detect this.</source>
          <target state="translated">이 문제를 감지할 시스템 수준에서 처리 예외가 있기 때문에 시스템 시작 되지 않은 경우에 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>Decide how to handle service start failures and implement this in your code.</source>
          <target state="translated">서비스 시작 실패를 처리 하 고 코드에서이 구현 하는 방법을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>Typically, a dialog appears to the user at startup if a service fails to start.</source>
          <target state="translated">일반적으로 서비스를 시작 하지 못한 경우에 시작 시 사용자에 게는 대화 상자가 나타납니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>If the service does not start, an entry is written to the Application event log.</source>
          <target state="translated">서비스가 시작 되지 않으면 응용 프로그램 이벤트 로그 항목이 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
          <source>The services upon which this service depends do not need to be in the same executable.</source>
          <target state="translated">이 서비스가 종속 된 서비스는 동일한 실행 파일에 포함 되도록 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>Indicates how and when this service is started.</source>
          <target state="translated">이 서비스를 시작하는 방법 및 시기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceStartMode" /&gt;</ph> that represents the way the service is started.</source>
          <target state="translated">서비스의 시작 방법을 나타내는 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceStartMode" /&gt;</ph>이며,</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>The default is <ph id="ph1">&lt;see langword="Manual" /&gt;</ph>, which specifies that the service will not automatically start after reboot.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="Manual" /&gt;</ph>입니다. 수동 모드에서는 다시 부팅한 후에 서비스가 자동으로 시작되지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> to specify either that the service be started automatically after reboot or that a user must manually start the service.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> 서비스가 다시 부팅 후 자동으로 시작할 수 또는 사용자 서비스를 수동으로 시작 해야 중 하나를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>A service can also be disabled, specifying that it cannot be started, either manually or programmatically, until it is enabled.</source>
          <target state="translated">서비스도 비활성화 될 수를 시작할 수 없습니다, 수동으로 또는 프로그래밍 방식으로 사용 될 때까지 지정 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>You cannot change <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> property values after installation.</source>
          <target state="translated">변경할 수 없습니다 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 설치 후 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>To change the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>, you either have to uninstall and reinstall your service, or manually change the setting using the Service Control Manager.</source>
          <target state="translated">변경 하는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>, 중 하나를 제거 하 고 사용자가 서비스를 다시 설치 하거나 수동으로 서비스 제어 관리자를 사용 하 여 설정을 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.ServiceProcess.ServiceInstaller.StartType">
          <source>The start mode is not a value of the <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceStartMode" /&gt;</ph> enumeration.</source>
          <target state="translated">시작 모드는 <ph id="ph1">&lt;see cref="T:System.ServiceProcess.ServiceStartMode" /&gt;</ph> 열거형의 값이 아닙니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that contains the context information associated with the installation.</source>
          <target state="translated">설치와 연관된 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>Uninstalls the service by removing information about it from the registry.</source>
          <target state="translated">레지스트리에서 서비스에 대한 정보를 제거하여 해당 서비스를 제거합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>Uninstall first attempts to stop the service before uninstalling it.</source>
          <target state="translated">제거 하기 전에 서비스를 중지 하는 첫 번째 시도 제거 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>If the service cannot be stopped, no exception is caught, and the method continues with the removal of the service.</source>
          <target state="translated">서비스를 중지할 수 없으면 예외는 발생 하지, 및 메서드는 서비스의 제거가 계속 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
          <target state="translated">일반적으로 메서드를 호출 하지 것입니다 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> ; 코드 내에서 일반적으로에서 호출 설치 유틸리티입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>InstallUtil is used to uninstall services as well as install them; uninstalling takes a switch in the command line call.</source>
          <target state="translated">InstallUtil 하는 데 서비스를 제거할 수 있을 뿐만 아니라를 설치 합니다. 제거 명령줄 호출에서 스위치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>An application's uninstall routine maintains information automatically about the components being uninstalled, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">응용 프로그램 제거 루틴의 구성 요소에 대 한 자동으로 정보를 유지 관리 프로젝트 설치 관리자를 사용 하 여 제거 하 고 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
          <target state="translated">이 상태 정보로 전달 된 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 로 <ph id="ph2">`savedState`</ph> 매개 변수를 계속 업데이트 됩니다는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> 인스턴스와 각 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> 유틸리티 인스턴스를 설치 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
          <target state="translated">일반적으로 코드의 명시적으로이 상태 정보를 수정할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
          <target state="translated">파생 된 모든 클래스에 대 한는 <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> 클래스의 상태는 <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 컬렉션에서 동일 해야는 <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.</source>
          <target state="translated">그러나 컬렉션을 유지 관리를 방지할 수 있습니다는 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> 사용자 지정 설치 관리자 클래스 생성자의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>There is no rollback mechanism for uninstalling, so if one service fails to uninstall, this does not affect the other services (usually within the same installation project) being uninstalled.</source>
          <target state="translated">메커니즘은 없습니다 롤백 제거에 대 한 하나의 서비스를 제거 하지 못하면이 영향을 주지 않도록 다른 서비스 (일반적으로 내 동일한 설치 프로젝트의 경우)을 제거 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>The Service Control Manager could not be opened.</source>
          <target state="translated">서비스 컨트롤 관리자를 열지 못한 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
          <source>The system could not get a handle to the service.</source>
          <target state="translated">시스템에서 서비스에 대한 핸들을 가져오지 못한 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>