<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14a7817974ce9d1165d554af807dcafa580677b8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37611983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3eb67-101">Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3eb67-101">Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service.</span>
      </span>
      <span data-ttu-id="3eb67-102">This class is called by the install utility when installing a service application.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3eb67-102">This class is called by the install utility when installing a service application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-103"><xref:System.ServiceProcess.ServiceInstaller> 와 연관 된 서비스에 특정 된 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-103">The <xref:System.ServiceProcess.ServiceInstaller> does work specific to the service with which it is associated.</span></span> <span data-ttu-id="3eb67-104">다음 레지스트리 키 내에서 하위 서비스와 관련 된 레지스트리 값을 쓸 설치 유틸리티에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-104">It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services registry key.</span></span> <span data-ttu-id="3eb67-105">서비스는이 하위 키는 내에서 해당 ServiceName로 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-105">The service is identified by its ServiceName within this subkey.</span></span> <span data-ttu-id="3eb67-106">하위 키에는 실행 파일 또는.dll 서비스가 속한 이름도 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-106">The subkey also includes the name of the executable or .dll to which the service belongs.</span></span>  
  
 <span data-ttu-id="3eb67-107">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-107">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="3eb67-108">프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 응용 프로그램을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 응용 프로그램에서 각 서비스에 대 한 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-108">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="3eb67-109">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="3eb67-109">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3eb67-110">설치 관리자 인스턴스를 추가 하는 것에 대 한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 할 경우는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 메서드를 컬렉션에 동일한 추가 수행 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-110">It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.</span></span>  
  
 <span data-ttu-id="3eb67-111">파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-111">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="3eb67-112">그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다. 설치 유틸리티를 호출 하는 때를 찾습니다는 <xref:System.ComponentModel.RunInstallerAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-112">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute.</span></span> <span data-ttu-id="3eb67-113">특성이 있으면 `true`, 유틸리티에 추가 된 서비스를 모두 설치 된 <xref:System.Configuration.Install.Installer.Installers%2A> 프로젝트 설치 관리자를 사용 하 여 연결 된 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-113">If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer.</span></span> <span data-ttu-id="3eb67-114">하는 경우 <xref:System.ComponentModel.RunInstallerAttribute> 는 `false` 또는 존재 하지는 설치 유틸리티 프로젝트 설치 관리자를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-114">If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.</span></span>  
  
 <span data-ttu-id="3eb67-115">합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 관련 된 설치 클래스 설치 프로젝트 정보 모두에 공통적으로 적용 <xref:System.ServiceProcess.ServiceInstaller> 프로젝트의 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-115">The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all <xref:System.ServiceProcess.ServiceInstaller> instances in the project.</span></span> <span data-ttu-id="3eb67-116">이 서비스는 설치 프로젝트의 다른 서비스에서 구분 하는 모든 항목에 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-116">If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3eb67-117">것이 중요 하는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 와 동일할 수는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 에서 파생 된 클래스의 <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="3eb67-117">It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the class you derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="3eb67-118">일반적으로 값을 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스 응용 프로그램의 실행 파일의 main () 함수 내에서 서비스 속성 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-118">Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property for the service is set within the Main() function of the service application's executable.</span></span> <span data-ttu-id="3eb67-119">서비스 제어 관리자를 사용 하 여 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 이 실행 파일 내에서 서비스를 찾을 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-119">The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property to locate the service within this executable.</span></span>  
  
 <span data-ttu-id="3eb67-120">다른 속성을 수정할 수 있습니다는 <xref:System.ServiceProcess.ServiceInstaller> 전후에 추가 하는 <xref:System.Configuration.Install.Installer.Installers%2A> 프로젝트 설치 관리자의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-120">You can modify other properties on the <xref:System.ServiceProcess.ServiceInstaller> either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer.</span></span> <span data-ttu-id="3eb67-121">예를 들어, 서비스의 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 재부팅 시 자동으로 서비스를 시작 하거나 서비스를 수동으로 시작 되도록 사용자로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-121">For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.</span></span>  
  
 <span data-ttu-id="3eb67-122">메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-122">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="3eb67-123">설치 유틸리티를 자동으로 호출 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> 및 <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> 설치 프로세스 중 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-123">The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> methods during the installation process.</span></span> <span data-ttu-id="3eb67-124">원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (또는 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>)에서 이전에 설치 된 모든 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-124">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) on all previously installed components.</span></span>  
  
 <span data-ttu-id="3eb67-125">설치 유틸리티 호출 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 개체를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-125">The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.</span></span>  
  
 <span data-ttu-id="3eb67-126">프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-126">An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3eb67-127">이 상태 정보는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스를 만들고 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된.</span><span class="sxs-lookup"><span data-stu-id="3eb67-127">This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="3eb67-128">상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 일반적으로 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-128">It is usually unnecessary for your code to modify state information explicitly.</span></span>  
  
 <span data-ttu-id="3eb67-129">자동으로 만듭니다 설치를 수행 하는 경우는 <xref:System.Diagnostics.EventLogInstaller> 와 연결 된 이벤트 로그 소스를 설치 하는 <xref:System.ServiceProcess.ServiceBase> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-129">When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class.</span></span> <span data-ttu-id="3eb67-130">합니다 <xref:System.Diagnostics.EventLog.Log%2A> 에서이 원본에 대 한 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 컴퓨터의 응용 프로그램 로그에는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-130">The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log.</span></span> <span data-ttu-id="3eb67-131">설정한 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller> (동일 해야 합니다 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스의), <xref:System.Diagnostics.EventLog.Source%2A> 동일한 값으로 자동으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-131">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller> (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value.</span></span> <span data-ttu-id="3eb67-132">설치 오류가 소스의 설치에서는 이전에 설치 된 서비스와 함께 롤백된입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-132">In an installation failure, the source's installation is rolled-back along with previously installed services.</span></span>  
  
 <span data-ttu-id="3eb67-133"><xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드를 실행 하는 경우 서비스를 중지 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-133">The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running.</span></span> <span data-ttu-id="3eb67-134">여부에 상관 없이 여부 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 에서 변경한 내용을 실행 취소 <xref:System.ServiceProcess.ServiceInstaller.Install%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-134">Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>.</span></span> <span data-ttu-id="3eb67-135">이벤트 로깅에 대 한 새 소스를 만든 경우 원본이 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-135">If a new source was created for event logging, the source is deleted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3eb67-136">다음 예에서는 이라는 프로젝트 설치 관리자를 만듭니다 `MyProjectInstaller`에서 상속 하는 <xref:System.Configuration.Install.Installer>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-136">The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>.</span></span> <span data-ttu-id="3eb67-137">두 가지 서비스를 "Hello World 서비스 1"을 포함 하는 서비스 실행 파일을 가정 하 고 "Hello World 서비스 2".</span><span class="sxs-lookup"><span data-stu-id="3eb67-137">It is assumed there is a service executable that contains two services, "Hello-World Service 1" and "Hello-World Service 2".</span></span> <span data-ttu-id="3eb67-138">생성자 내에서 `MyProjectInstaller` (있는 의해 호출 되는 설치 유틸리티)를 <xref:System.ServiceProcess.ServiceInstaller> 개체는 이러한 각 서비스에 한 및 만들어집니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 실행 파일에 대해 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-138">Within the constructor for `MyProjectInstaller` (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable.</span></span> <span data-ttu-id="3eb67-139">설치 유틸리티를 인식 하도록 `MyProjectInstaller` 잘못 된 설치 프로그램으로는 <xref:System.ComponentModel.RunInstallerAttribute> 특성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-139">For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.</span></span>  
  
 <span data-ttu-id="3eb67-140">선택적 속성은 설치 관리자를 추가 하기 전에 프로세스가 설치 관리자 및 서비스 설치 관리자에서 설정 된 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-140">Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span> <span data-ttu-id="3eb67-141">설치 유틸리티에 액세스 하는 경우 `MyProjectInstaller`에 추가 된 개체를 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에 대 한 호출을 통해 <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> 차례로 설치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-141">When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> will be installed in turn.</span></span> <span data-ttu-id="3eb67-142">설치 관리자 프로세스 중 각 백업할 수 있습니다. 차례로 설치 오류가 발생 하므로 개체를 설치한를 나타내는 상태 정보를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-142">During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.</span></span>  
  
 <span data-ttu-id="3eb67-143">일반적으로 프로젝트 설치 관리자 클래스의 인스턴스를 명시적으로 만들지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-143">Normally, you would not create an instance of your project installer class explicitly.</span></span> <span data-ttu-id="3eb67-144">만들 하 고 추가 <xref:System.ComponentModel.RunInstallerAttribute> 특성 구문의을 설치 유틸리티를 실제로 호출 하 여 인스턴스화합니다 따라서 클래스 이지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-144">You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.</span></span>  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-145">Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-145">Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-146">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-146">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="3eb67-147">프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 응용 프로그램을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 응용 프로그램에서 각 서비스에 대 한 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-147">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="3eb67-148">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="3eb67-148">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
 <span data-ttu-id="3eb67-149">합니다 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 이벤트 로그를 자동으로 생성 하는 생성자 인 원본 <xref:System.Diagnostics.EventLog.Log%2A> 속성은 컴퓨터의 응용 프로그램 로그 및 <xref:System.Diagnostics.EventLogInstaller>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-149">The <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor automatically generates an event log source whose <xref:System.Diagnostics.EventLog.Log%2A> property is set to the computer's Application log, and an <xref:System.Diagnostics.EventLogInstaller>.</span></span> <span data-ttu-id="3eb67-150">설정한 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller>, 동일 해야 합니다 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스를 <xref:System.Diagnostics.EventLog.Source%2A> 이벤트 로그의 속성은 동일한 값으로 자동 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-150">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller>, which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the service, the <xref:System.Diagnostics.EventLog.Source%2A> property of the event log is automatically set to the same value.</span></span> <span data-ttu-id="3eb67-151">원본 설치 하지 못한 경우 자동으로 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-151">The source is deleted automatically in the case of an installation failure.</span></span>  
  
 <span data-ttu-id="3eb67-152"><xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 생성자 집합 합니다 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 속성을 `ServiceStartMode.Manual` 사용자는 서비스를 시작 하도록 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-152">The <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor sets the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> property to `ServiceStartMode.Manual` to specify that a user start the service.</span></span> <span data-ttu-id="3eb67-153">속성을 다시 설정할 수 있습니다 `ServiceStartMode.Automatic` 컴퓨터 다시 부팅 될 때 서비스 시작을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-153">You can reset the property to `ServiceStartMode.Automatic` to specify that the service start when the computer reboots.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="3eb67-154">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-154">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3eb67-155">Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" /> to this installer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-155">Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" /> to this installer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-156">이 메서드는 코드 내에서 거의 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-156">This method will rarely be called within your code.</span></span> <span data-ttu-id="3eb67-157"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 일반적으로 디자이너에 의해서만 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-157"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> is usually called only by designers.</span></span>  
  
 <span data-ttu-id="3eb67-158"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 서비스 이름을 저장 하는 `component` 매개 변수를 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-158"><xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> saves the service name of the `component` parameter to the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the <xref:System.ServiceProcess.ServiceInstaller> instance.</span></span> <span data-ttu-id="3eb67-159">(매개 변수에서 파생 된 클래스의 인스턴스 수 있어야 하므로 <xref:System.ServiceProcess.ServiceBase>, `component` 하도록 보장 되는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 속성입니다.)</span><span class="sxs-lookup"><span data-stu-id="3eb67-159">(Because the parameter must be an instance of a class that derives from <xref:System.ServiceProcess.ServiceBase>, `component` is guaranteed to have a <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3eb67-160">Visual Studio 디자이너를 사용 하는 경우이 메서드는 사용자가 클릭 하면 디자인 타임에 `Add Installer` 해당 설치 프로그램으로이 클래스를 지정 하는 구성 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-160">If you are using the Visual Studio designer, this method is called at design time when the user clicks `Add Installer` on a component that specified this class as its installer.</span></span> <span data-ttu-id="3eb67-161">설치 관리자는 라이브 구성 요소에서를 저장 한 다음 설치 시 사용 하 여 모든 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-161">The installer takes all information it can from the live component and stores it for use at install time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3eb67-162">The component you are associating with this installer does not inherit from <see cref="T:System.ServiceProcess.ServiceBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-162">The component you are associating with this installer does not inherit from <see cref="T:System.ServiceProcess.ServiceBase" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-163">Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-163">Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-164">
            <see langword="true" /> 자동 지연 서비스 시작 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-164">
              <see langword="true" /> to delay automatic start of the service; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3eb67-165">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-165">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-166">합니다 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> 속성을 서비스에 적용할 수 있지만 서비스의 시작 모드가 아닌 경우 무시 됩니다 <xref:System.ServiceProcess.ServiceStartMode.Automatic>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-166">The <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> property can be applied to any service, but it is ignored unless the service's start mode is <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="3eb67-167">다음에 시스템이 시작 하는 설정을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-167">The setting takes effect the next time the system is restarted.</span></span> <span data-ttu-id="3eb67-168">서비스 제어 관리자에서 서비스에 대 한 특정 시작 시간을 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-168">The Service Control Manager does not guarantee a specific start time for the service.</span></span>  
  
 <span data-ttu-id="3eb67-169">지연 된 자동 시작 서비스는 로드 순서 그룹의 구성원 일 수는 없지만 다른 자동 시작 서비스에 따라 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-169">A delayed automatic start service cannot be a member of a load ordering group, but it can depend on another automatic start service.</span></span> <span data-ttu-id="3eb67-170">로드 하기 전에 지연 된 자동 시작 서비스를 호출 하는 응용 프로그램, 호출이 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-170">If an application calls a delayed automatic start service before it is loaded, the call fails.</span></span>  
  
 <span data-ttu-id="3eb67-171">지연 된 자동 시작을 지원 하지 않는 운영 체제에서는이 속성은 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-171">On operating systems that do not support delayed automatic start, setting this property has no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-172">Gets or sets the description for the service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-172">Gets or sets the description for the service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-173">서비스에 대한 설명입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-173">The description of the service.</span>
          </span>
          <span data-ttu-id="3eb67-174">기본값은 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-174">The default is an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-175">사용 된 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> 속성을 사용자에 게 설치 된 서비스의 목적을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-175">Use the <xref:System.ServiceProcess.ServiceInstaller.Description%2A> property to describe the purpose of the installed service to the user.</span></span> <span data-ttu-id="3eb67-176">사용자 설치 된 서비스에 대 한 세부 정보를 표시 하는 응용 프로그램에서 서비스 설명을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-176">The user can view the service description in applications that display details for installed services.</span></span>  
  
 <span data-ttu-id="3eb67-177">Windows XP를 사용 하는 서비스 제어 명령줄 유틸리티 (Sc.exe)를 사용 하 여 서비스 설명을 볼 수 있습니다 또는 내에서 서비스 설명을 볼 수 있습니다 예를 들어 합니다 **Services** 의 노드는 **컴퓨터 관리 ** 콘솔.</span><span class="sxs-lookup"><span data-stu-id="3eb67-177">For example, using Windows XP, you can view the service description with the Service Control command-line utility (Sc.exe) or you can view the service description within the **Services** node of the **Computer Management** console.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3eb67-178">다음 코드 예제에서는 새 Windows 서비스 응용 프로그램에 대 한 설치 속성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-178">The following code example sets the installation properties for a new Windows service application.</span></span> <span data-ttu-id="3eb67-179">이 예제에서는 서비스 이름, 표시 이름 및 설명 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-179">The example sets the service name, along with the display name and description.</span></span> <span data-ttu-id="3eb67-180">이 예제에서는 서비스에 대 한 설치 속성에 할당 한 후 추가 합니다 <xref:System.ServiceProcess.ServiceInstaller> 개체는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="3eb67-180">After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-181">Indicates the friendly name that identifies the service to the user.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-181">Indicates the friendly name that identifies the service to the user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-182">대화형 도구에 대 한 자주 사용 되는 서비스와 관련 된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-182">The name associated with the service, used frequently for interactive tools.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-183"><xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> 예를 들어, 서비스에 대 한 설명이 포함 된 사용자를 읽을 수 있는 이름을 제공 하기 위해 서비스 제어 관리자에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-183">The <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service.</span></span> <span data-ttu-id="3eb67-184"><xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> 레지스트리 값을 되었지만 레지스트리 키로 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-184">The <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> is a registry value, but is never used as a registry key.</span></span> <span data-ttu-id="3eb67-185">따라서 제한 된 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 속성 값이 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-185">Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply.</span></span> <span data-ttu-id="3eb67-186"><xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 제한 되므로 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 레지스트리 키로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-186"><xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services registry key, so it is restricted.</span></span>  
  
 <span data-ttu-id="3eb67-187">표시 이름에 없기 때문에 이름, 선택에 제한이 되므로 서비스를 식별 하기 설치 유틸리티에서 사용 되지 않습니다는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-187">The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <span data-ttu-id="3eb67-188">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-188">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3eb67-189">Installs the service by writing service application information to the registry.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-189">Installs the service by writing service application information to the registry.</span>
          </span>
          <span data-ttu-id="3eb67-190">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-190">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-191">메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-191">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="3eb67-192">설치 유틸리티를 자동으로 호출 된 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 설치 하는 동안 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-192">The install utility automatically calls the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method during installation.</span></span> <span data-ttu-id="3eb67-193">원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 에서 예외를 생성 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-193">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> on the object that generated the exception.</span></span>  
  
 <span data-ttu-id="3eb67-194">이미 설치 되어 있는, 프로젝트 설치 관리자를 사용 하 여 구성 요소가 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-194">An application's install routine maintains information automatically about the components that were already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3eb67-195">이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 으로 `stateSaver` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된.</span><span class="sxs-lookup"><span data-stu-id="3eb67-195">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="3eb67-196">일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-196">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 <span data-ttu-id="3eb67-197">합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 관련 된 설치 클래스 설치 프로젝트 정보 모두에 공통적으로 적용 <xref:System.ServiceProcess.ServiceInstaller> 프로젝트의 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-197">The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all <xref:System.ServiceProcess.ServiceInstaller> instances in the project.</span></span> <span data-ttu-id="3eb67-198">이 서비스는 설치 프로젝트의 다른 서비스에서 구분 하는 모든 항목에 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-198">If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</span></span>  
  
 <span data-ttu-id="3eb67-199">서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-199">To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`.</span></span> <span data-ttu-id="3eb67-200">프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 응용 프로그램을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 응용 프로그램에서 각 서비스에 대 한 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3eb67-200">Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one <xref:System.ServiceProcess.ServiceInstaller> instance for each service in the application.</span></span> <span data-ttu-id="3eb67-201">프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="3eb67-201">Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and <xref:System.ServiceProcess.ServiceInstaller> instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3eb67-202">설치 관리자 인스턴스를 추가 하는 것에 대 한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 할 경우는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 메서드를 컬렉션에 동일한 추가 수행 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-202">It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.</span></span>  
  
 <span data-ttu-id="3eb67-203">파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-203">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="3eb67-204">그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-204">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3eb67-205">The installation does not contain a <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> for the executable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-205">The installation does not contain a <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> for the executable.</span>
          </span>
          <span data-ttu-id="3eb67-206">-or-  The file name for the assembly is <see langword="null" /> or an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-206">-or-  The file name for the assembly is <see langword="null" /> or an empty string.</span>
          </span>
          <span data-ttu-id="3eb67-207">-or-  The service name is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-207">-or-  The service name is invalid.</span>
          </span>
          <span data-ttu-id="3eb67-208">-or-  The Service Control Manager could not be opened.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-208">-or-  The Service Control Manager could not be opened.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3eb67-209">The display name for the service is more than 255 characters in length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-209">The display name for the service is more than 255 characters in length.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="3eb67-210">The system could not generate a handle to the service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-210">The system could not generate a handle to the service.</span>
          </span>
          <span data-ttu-id="3eb67-211">-or-  A service with that name is already installed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-211">-or-  A service with that name is already installed.</span>
          </span>
        </exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">
          <span data-ttu-id="3eb67-212">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-212">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3eb67-213">Indicates whether two installers would install the same service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-213">Indicates whether two installers would install the same service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3eb67-214">
            <see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result in installing the same service; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-214">
              <see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result in installing the same service; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-215"><xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> 나타내며, 예를 들어 두 명의 설치 관리자가 동일한 사용자 계정에서 동일한 서비스를 설치 하는지 여부를</span><span class="sxs-lookup"><span data-stu-id="3eb67-215"><xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> indicates, for example, whether two installers would install the same service under the same user account.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <span data-ttu-id="3eb67-216">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-216">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3eb67-217">Rolls back service application information written to the registry by the installation procedure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-217">Rolls back service application information written to the registry by the installation procedure.</span>
          </span>
          <span data-ttu-id="3eb67-218">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-218">This method is meant to be used by installation tools, which process the appropriate methods automatically.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-219">메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-219">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="3eb67-220">설치 유틸리티를 자동으로 호출 된 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 설치 프로세스 중 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-220">The install utility automatically calls the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method during the installation process.</span></span> <span data-ttu-id="3eb67-221">원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 에서 예외를 생성 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-221">It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> on the object that generated the exception.</span></span>  
  
 <span data-ttu-id="3eb67-222">프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 응용 프로그램의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-222">An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3eb67-223">이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 으로 `savedState` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된.</span><span class="sxs-lookup"><span data-stu-id="3eb67-223">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="3eb67-224">일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-224">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-225">Indicates the name used by the system to identify this service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-225">Indicates the name used by the system to identify this service.</span>
          </span>
          <span data-ttu-id="3eb67-226">This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> of the service you want to install.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-226">This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> of the service you want to install.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-227">설치할 서비스의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-227">The name of the service to be installed.</span>
          </span>
          <span data-ttu-id="3eb67-228">이 값은 서비스를 설치 하려면 설치 유틸리티 시도 하기 전에 설정 되어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-228">This value must be set before the install utility attempts to install the service.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-229">것이 중요 하는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 와 동일할 수는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 에서 파생 된 클래스의 <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="3eb67-229">It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> of the class you derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="3eb67-230">일반적으로 값을 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스 응용 프로그램의 실행 파일의 main () 함수 내에서 서비스 속성 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-230">Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> property for the service is set within the Main() function of the service application's executable.</span></span> <span data-ttu-id="3eb67-231">서비스 제어 관리자를 사용 하 여 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 이 실행 파일 내에서 서비스를 찾을 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-231">The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property to locate the service within this executable.</span></span>  
  
 <span data-ttu-id="3eb67-232">설정 하는 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 서비스 설치 관리자의는 <xref:System.Diagnostics.EventLog.Source%2A> 관련된 이벤트 로그의 동일한 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-232">When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value.</span></span> <span data-ttu-id="3eb67-233">따라서 서비스를 자동으로 컴퓨터의 응용 프로그램 로그에 서비스 (예: 시작 및 중지) 명령 호출을 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-233">This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3eb67-234">같은 이름으로 원본 컴퓨터의 하지만 응용 프로그램 로그가 아닌 로그에 이미 있는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-234">If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown.</span></span> <span data-ttu-id="3eb67-235">존재 하 고 응용 프로그램 로그를 사용 하 여 연결 하는 소스를 해당 원본 서비스에 대 한 명령 호출을 보고 하는 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-235">If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="3eb67-236">합니다 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 일 수 없습니다 `null` 없거나 길이가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-236">The <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> cannot be `null` or have zero length.</span></span> <span data-ttu-id="3eb67-237">최대 크기는 256 자입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-237">Its maximum size is 256 characters.</span></span> <span data-ttu-id="3eb67-238">또한 슬래시 또는 백슬래시를 포함할 수 없습니다 '/' 또는 '\\', 또는 문자는 ascii에서 문자 10 진수 값 32 보다 작은 값을 사용 하 여 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-238">It also cannot contain forward or backward slashes, '/' or '\\', or characters from the ASCII character set with value less than decimal value 32.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3eb67-239">The <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> property is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-239">The <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> property is invalid.</span>
          </span>
        </exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-240">Indicates the services that must be running for this service to run.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-240">Indicates the services that must be running for this service to run.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-241">이 설치 관리자를 사용 하 여 연결 된 서비스를 실행 하려면 먼저 실행 해야 하는 서비스의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-241">An array of services that must be running before the service associated with this installer can run.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-242">서비스를 시작 하기 전에 실행 되 고 다른 서비스를 요구할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-242">A service can require other services to be running before it can start.</span></span> <span data-ttu-id="3eb67-243">이 속성의 정보는 레지스트리에서 키에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-243">The information from this property is written to a key in the registry.</span></span> <span data-ttu-id="3eb67-244">사용자 (또는 시스템에 자동으로 시작 하는 경우)가 서비스를 실행 하려는 경우, 서비스 제어 관리자 (SCM)는 각 배열에 있는 서비스 이미 시작 된 것을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-244">When the user (or the system, in the case of automatic startup) tries to run the service, the Service Control Manager (SCM) verifies that each of the services in the array has already been started.</span></span>  
  
 <span data-ttu-id="3eb67-245">모든 서비스 배열의 다음를 실행 하지 않는 경우 SCM 시작 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-245">If any service in the array is not running then, the SCM tries to start them.</span></span> <span data-ttu-id="3eb67-246">여기에 사용 하 여 서비스 `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-246">This includes services with `Manual`<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</span></span>  
  
 <span data-ttu-id="3eb67-247">이 서비스가 종속 된 모든 서비스를 시작 하지 못하면이 서비스가 시작 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-247">If any service upon which this service depends fails to start, this service will not start.</span></span> <span data-ttu-id="3eb67-248">이 문제를 감지할 시스템 수준에서 처리 하는 예외가 없으면 때문에 시스템 시작 되지 않으면 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-248">An exception is not thrown if the system is not started because there is no exception handling at the system level to detect this.</span></span> <span data-ttu-id="3eb67-249">서비스 시작 실패를 처리 하 고 코드에서이 구현 하는 방법을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-249">Decide how to handle service start failures and implement this in your code.</span></span> <span data-ttu-id="3eb67-250">일반적으로 서비스를 시작 하지 못한 경우에 시작 시 사용자에 게 대화 상자가 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-250">Typically, a dialog appears to the user at startup if a service fails to start.</span></span>  
  
 <span data-ttu-id="3eb67-251">서비스가 시작 되지 않으면 항목이 응용 프로그램 이벤트 로그에 쓰여집니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-251">If the service does not start, an entry is written to the Application event log.</span></span>  
  
 <span data-ttu-id="3eb67-252">이 서비스가 종속 된 서비스는 동일한 실행 파일에 포함 되도록 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-252">The services upon which this service depends do not need to be in the same executable.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3eb67-253">Indicates how and when this service is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-253">Indicates how and when this service is started.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3eb67-254">
            <see cref="T:System.ServiceProcess.ServiceStartMode" /> 서비스를 시작 하는 방법을 나타내는입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-254">A <see cref="T:System.ServiceProcess.ServiceStartMode" /> that represents the way the service is started.</span>
          </span>
          <span data-ttu-id="3eb67-255">기본값은 <see langword="Manual" />, 서비스가 다시 부팅 후 자동으로 시작 되지 것입니다 지정 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-255">The default is <see langword="Manual" />, which specifies that the service will not automatically start after reboot.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-256">설정 된 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 지정 서비스를 자동으로 다시 부팅 한 후 시작할 수 있는지 또는 사용자를 수동으로 시작 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-256">Set the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> to specify either that the service be started automatically after reboot or that a user must manually start the service.</span></span> <span data-ttu-id="3eb67-257">서비스도 비활성화 될 수는 시작할 수 없습니다, 수동으로 또는 프로그래밍 방식으로 사용 될 때까지 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-257">A service can also be disabled, specifying that it cannot be started, either manually or programmatically, until it is enabled.</span></span>  
  
 <span data-ttu-id="3eb67-258">변경할 수 없습니다 <xref:System.ServiceProcess.ServiceInstaller> 설치가 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-258">You cannot change <xref:System.ServiceProcess.ServiceInstaller> property values after installation.</span></span> <span data-ttu-id="3eb67-259">변경 하는 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, 중 하나를 제거 하 고 서비스를 다시 설치 하거나 서비스 제어 관리자를 사용 하 여 설정을 수동으로 변경 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-259">To change the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, you either have to uninstall and reinstall your service, or manually change the setting using the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="3eb67-260">The start mode is not a value of the <see cref="T:System.ServiceProcess.ServiceStartMode" /> enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-260">The start mode is not a value of the <see cref="T:System.ServiceProcess.ServiceStartMode" /> enumeration.</span>
          </span>
        </exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <span data-ttu-id="3eb67-261">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-261">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3eb67-262">Uninstalls the service by removing information about it from the registry.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-262">Uninstalls the service by removing information about it from the registry.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3eb67-263">제거 하기 전에 서비스를 중지 하려면 첫 번째 시도 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-263">Uninstall first attempts to stop the service before uninstalling it.</span></span> <span data-ttu-id="3eb67-264">서비스를 중지할 수 없으면, 예외가 포착 되 하 고 메서드가 서비스 제거를 사용 하 여 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-264">If the service cannot be stopped, no exception is caught, and the method continues with the removal of the service.</span></span>  
  
 <span data-ttu-id="3eb67-265">메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-265">Normally, you will not call the methods on <xref:System.ServiceProcess.ServiceInstaller> within your code; they are generally called only by the install utility.</span></span> <span data-ttu-id="3eb67-266">서비스를 제거할 수 있을 뿐만 아니라 설치할지; InstallUtil는 제거 명령줄 호출에서 스위치를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-266">InstallUtil is used to uninstall services as well as install them; uninstalling takes a switch in the command line call.</span></span>  
  
 <span data-ttu-id="3eb67-267">루틴을 제거 하는 응용 프로그램의 구성 요소에 대 한 자동으로 정보를 유지 관리, 프로젝트 설치 관리자를 사용 하 여 제거 하 고 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-267">An application's uninstall routine maintains information automatically about the components being uninstalled, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3eb67-268">이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 으로 `savedState` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된.</span><span class="sxs-lookup"><span data-stu-id="3eb67-268">This state information, passed into <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance and each <xref:System.ServiceProcess.ServiceInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="3eb67-269">일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-269">It is usually unnecessary for your code to modify this state information explicitly.</span></span>  
  
 <span data-ttu-id="3eb67-270">파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3eb67-270">For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods.</span></span> <span data-ttu-id="3eb67-271">그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-271">However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.</span></span>  
  
 <span data-ttu-id="3eb67-272">하나의 서비스를 제거 하지 못하면이 영향을 주지 않습니다 내의 다른 서비스 (일반적으로 동일한 설치 프로젝트를) 제거 하 고 있으므로 제거에 대 한 롤백 메커니즘이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3eb67-272">There is no rollback mechanism for uninstalling, so if one service fails to uninstall, this does not affect the other services (usually within the same installation project) being uninstalled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="3eb67-273">The Service Control Manager could not be opened.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-273">The Service Control Manager could not be opened.</span>
          </span>
          <span data-ttu-id="3eb67-274">-or-  The system could not get a handle to the service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3eb67-274">-or-  The system could not get a handle to the service.</span>
          </span>
        </exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>