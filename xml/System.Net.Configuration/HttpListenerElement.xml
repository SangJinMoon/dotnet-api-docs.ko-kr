<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="94bfbb3f47cf1799104ef23bdabc47744b65aec7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460047" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>구성 파일의 HttpListener 요소를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스에 해당 하는 \<httpListener > 요소 (네트워크 설정) 구성 요소입니다. 이 클래스는 구성 파일에 저장할 수 있는 정보에 대 한 프로그래밍 방식의 액세스를 제공 합니다.  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 속성 이면 <xref:System.Net.HttpListener> 모든 퍼센트 인코딩 값이 변환 되 고 다른 정규화 단계가 수행 되는 변환된 URI 대신 원시 언 이스케이프 된 URI를 사용 합니다.  
  
 때는 <xref:System.Net.HttpListener> 인스턴스 통해 요청을 받을 `http.sys` 에서 제공 하 고 URI 문자열의 인스턴스를 만들고 서비스를 `http.sys`,으로 노출 된 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> 속성입니다.  
  
 `http.sys` 서비스는 두 요청 URI 문자열을 노출 합니다.  
  
-   원시 URI  
  
-   변환 된 URI  
  
 Uri의 원시는 <xref:System.Uri?displayProperty=nameWithType> HTTP 요청의 요청 줄에 제공 합니다.  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 제공 된 URI의 원시 `http.sys` 위에서 설명한 요청은 "/ 경로 /"에 대 한 합니다. 이 네트워크를 통해 전송 된 HTTP 동사를 다음 문자열을 나타냅니다.  
  
 `http.sys` 을 전달 해야 하는 원본 서버에서 요청을 확인 하려면 호스트 헤더 및 서비스는 HTTP 요청에서에서 제공 하는 URI를 사용 하 여 요청에 제공 된 정보에서 변환된 된 URI를 만듭니다. 이 등록 된 URI 접두사를 사용 하 여 요청에서 정보를 비교 하 여 수행 됩니다. HTTP 서버 SDK 설명서 참조로 변환 된이 URI는 [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) 구조입니다.  
  
 등록 된 URI 접두사를 사용 하 여 요청을 비교할 수 있도록 요청에 일부 정규화를 수행 해야 합니다. 위의 샘플 변환 된 URI에 대 한 것 같습니다.  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` 결합 하 여 서비스는 <xref:System.Uri.Host%2A?displayProperty=nameWithType> 속성 값과 변환된 된 URI를 만드는 요청 줄에 있는 문자열입니다. 또한 `http.sys` 및 <xref:System.Uri?displayProperty=nameWithType> 클래스도 다음을 수행 합니다.  
  
-   이스케이프 해제 인코딩된 모든 백분율 값입니다.  
  
-   비 ASCII 문자를 utf-16 문자 표현으로 퍼센트 인코딩 변환 합니다. Note u t F-8과 ANSI/DBCS 문자가 유니코드 문자 (유니코드 %uXXXX 형식을 사용 하 여 인코딩)도 지원 됩니다.  
  
-   경로 압축 같은 다른 정규화 단계를 실행합니다.  
  
 퍼센트 인코딩 값에 사용 되는 인코딩에 대 한 정보가 요청 없으므로 퍼센트 인코딩 값을 구문 분석 하 여 올바른 인코딩을 확인할 못할 수 있습니다.  
  
 따라서 `http.sys` 프로세스를 수정 하기 위한 두 개의 레지스트리 키를 제공 합니다.  
  
|레지스트리 키|기본값|설명|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|0 이면 `http.sys` u t F-8로 인코딩된 Url만 허용 합니다.<br /><br /> 0이 아닌 경우 `http.sys` 도 요청에서 ANSI로 인코딩된 또는 DBCS 인코딩된 Url을 허용 합니다.|  
|FavorUTF8|1|0이 아닌 경우 `http.sys` 디코딩할 URL u t F-8로 먼저 해당 변환이 실패 하 고 EnableNonUTF8 0이 아닌 경우 하려고 항상 차례로 Http.sys을 ANSI 또는 DBCS 디코딩할 하려고 합니다.<br /><br /> 0 (및 EnableNonUTF8 0이 아닌) `http.sys` 경우 해당 ANSI 또는 DBCS; 디코딩하 려 성공 하지 못하면, 시도 u t F-8로 변환 합니다.|  
  
 때 <xref:System.Net.HttpListener> 한 요청을 받으면에서 변환 된 URI를 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A> 속성입니다.  
  
 Uri에서 문자 및 숫자 이외의 문자를 지원할 필요가 있습니다. 예로 고객에 대 한 고객 정보를 검색 하는 데 사용 되는 다음 URI는 번호 "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri (%2F)에서 % 인코딩된 슬래시를 note 합니다. 이 작업은 슬래시 문자 데이터 및 하지는 경로 구분 기호를 나타내므로 경우에 필요 합니다.  
  
 Uri 생성자에 문자열을 전달 하면 다음과 같은 uri를 일으킵니다.  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 경로를 세그먼트로 분할 하면 다음과 같은 요소가 만들어집니다.  
  
 `Customer('1`  
  
 `3812')`  
  
 요청을 보낸 사람 의도 아닙니다.  
  
 경우는 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 속성이 false로 설정 되어 다음 경우는 <xref:System.Net.HttpListener> 한 요청을 받으면 원시 URI에서 변환 된 URI 대신 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A> 속성입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.Configuration.HttpListenerElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> 개체에 사용된 기본 시간 초과 요소를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />를 반환합니다.  
  
 <see cref="T:System.Net.HttpListener" /> 개체에 사용된 시간 초과 요소입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" />가 변환된 URI 대신 이스케이프되지 않은 원시 URI를 사용할지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Net.HttpListener" />가 변환된 URI 대신 이스케이프되지 않은 원시 URI를 사용할지 여부를 나타내는 부울 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 속성 이면 <xref:System.Net.HttpListener> 모든 퍼센트 인코딩 값이 변환 되 고 다른 정규화 단계가 수행 되는 변환된 URI 대신 원시 언 이스케이프 된 URI를 사용 합니다.  
  
 때는 <xref:System.Net.HttpListener> 인스턴스 통해 요청을 받을 `http.sys` 에서 제공 하 고 URI 문자열의 인스턴스를 만들고 서비스를 `http.sys`,으로 노출 된 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> 속성입니다.  
  
 `http.sys` 서비스는 두 요청 URI 문자열을 노출 합니다.  
  
-   원시 URI  
  
-   변환 된 URI  
  
 Uri의 원시는 <xref:System.Uri?displayProperty=nameWithType> HTTP 요청의 요청 줄에 제공 합니다.  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 제공 된 URI의 원시 `http.sys` 위에서 설명한 요청은 "/ 경로 /"에 대 한 합니다. 이 네트워크를 통해 전송 된 HTTP 동사를 다음 문자열을 나타냅니다.  
  
 `http.sys` 을 전달 해야 하는 원본 서버에서 요청을 확인 하려면 호스트 헤더 및 서비스는 HTTP 요청에서에서 제공 하는 URI를 사용 하 여 요청에 제공 된 정보에서 변환된 된 URI를 만듭니다. 이 등록 된 URI 접두사를 사용 하 여 요청에서 정보를 비교 하 여 수행 됩니다. HTTP 서버 SDK 설명서 참조로 변환 된이 URI는 [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) 구조입니다.  
  
 등록 된 URI 접두사를 사용 하 여 요청을 비교할 수 있도록 요청에 일부 정규화를 수행 해야 합니다. 위의 샘플 변환 된 URI에 대 한 것 같습니다.  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` 결합 하 여 서비스는 <xref:System.Uri.Host%2A?displayProperty=nameWithType> 속성 값과 변환된 된 URI를 만드는 요청 줄에 있는 문자열입니다. 또한 `http.sys` 및 <xref:System.Uri?displayProperty=nameWithType> 클래스도 다음을 수행 합니다.  
  
-   이스케이프 해제 인코딩된 모든 백분율 값입니다.  
  
-   비 ASCII 문자를 utf-16 문자 표현으로 퍼센트 인코딩 변환 합니다. Note u t F-8과 ANSI/DBCS 문자가 유니코드 문자 (유니코드 %uXXXX 형식을 사용 하 여 인코딩)도 지원 됩니다.  
  
-   경로 압축 같은 다른 정규화 단계를 실행합니다.  
  
 퍼센트 인코딩 값에 사용 되는 인코딩에 대 한 정보가 요청 없으므로 퍼센트 인코딩 값을 구문 분석 하 여 올바른 인코딩을 확인할 못할 수 있습니다.  
  
 따라서 `http.sys` 프로세스를 수정 하기 위한 두 개의 레지스트리 키를 제공 합니다.  
  
|레지스트리 키|기본값|설명|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|0 이면 `http.sys` u t F-8로 인코딩된 Url만 허용 합니다.<br /><br /> 0이 아닌 경우 `http.sys` 도 요청에서 ANSI로 인코딩된 또는 DBCS 인코딩된 Url을 허용 합니다.|  
|FavorUTF8|1|0이 아닌 경우 `http.sys` 디코딩할 URL u t F-8로 먼저 해당 변환이 실패 하 고 EnableNonUTF8 0이 아닌 경우 하려고 항상 차례로 Http.sys을 ANSI 또는 DBCS 디코딩할 하려고 합니다.<br /><br /> 0 (및 EnableNonUTF8 0이 아닌) `http.sys` 경우 해당 ANSI 또는 DBCS; 디코딩하 려 성공 하지 못하면, 시도 u t F-8로 변환 합니다.|  
  
 때 <xref:System.Net.HttpListener> 한 요청을 받으면에서 변환 된 URI를 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A> 속성입니다.  
  
 Uri에서 문자 및 숫자 이외의 문자를 지원할 필요가 있습니다. 예로 고객에 대 한 고객 정보를 검색 하는 데 사용 되는 다음 URI는 번호 "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri (%2F)에서 % 인코딩된 슬래시를 note 합니다. 이 작업은 슬래시 문자 데이터 및 하지는 경로 구분 기호를 나타내므로 경우에 필요 합니다.  
  
 Uri 생성자에 문자열을 전달 하면 다음과 같은 uri를 일으킵니다.  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 경로를 세그먼트로 분할 하면 다음과 같은 요소가 만들어집니다.  
  
 `Customer('1`  
  
 `3812')`  
  
 요청을 보낸 사람 의도 아닙니다.  
  
 경우는 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 속성이 false로 설정 되어 다음 경우는 <xref:System.Net.HttpListener> 한 요청을 받으면 원시 URI에서 변환 된 URI 대신 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>