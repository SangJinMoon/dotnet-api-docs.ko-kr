<Type Name="UnicodeDecodingConformance" FullName="System.Net.Configuration.UnicodeDecodingConformance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e92041a28863de61f9f0c3189167906310c8907c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51894170" /></Metadata><TypeSignature Language="C#" Value="public enum UnicodeDecodingConformance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UnicodeDecodingConformance extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.UnicodeDecodingConformance" />
  <TypeSignature Language="VB.NET" Value="Public Enum UnicodeDecodingConformance" />
  <TypeSignature Language="C++ CLI" Value="public enum class UnicodeDecodingConformance" />
  <TypeSignature Language="F#" Value="type UnicodeDecodingConformance = " />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="325c6-101"><see cref="Overload:System.Net.WebUtility.HtmlDecode" /> 메서드에서 유니코드 문자를 해석하는 방식을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-101">Controls how Unicode characters are interpreted by the <see cref="Overload:System.Net.WebUtility.HtmlDecode" /> methods.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="325c6-102">유니코드 문자 해야 하는 방법에 대 한 자세한 내용은 참조에 html에서 인코딩된 [태그와 CSS의 이스케이프 문자를 사용 하 여](https://go.microsoft.com/fwlink/?LinkId=256607)입니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-102">For more information on how Unicode characters are supposed to be encoded in HTML, see [Using character escapes in markup and CSS](https://go.microsoft.com/fwlink/?LinkId=256607).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Net.WebUtility.HtmlDecode" />
  </Docs>
  <Members>
    <Member MemberName="Auto">
      <MemberSignature Language="C#" Value="Auto" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Configuration.UnicodeDecodingConformance Auto = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Configuration.UnicodeDecodingConformance.Auto" />
      <MemberSignature Language="VB.NET" Value="Auto" />
      <MemberSignature Language="C++ CLI" Value="Auto" />
      <MemberSignature Language="F#" Value="Auto = 0" Usage="System.Net.Configuration.UnicodeDecodingConformance.Auto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.UnicodeDecodingConformance</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="325c6-103">자동 동작을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-103">Use automatic behavior.</span></span> <span data-ttu-id="325c6-104">디코딩 동작은 현재 애플리케이션의 대상 프레임워크에 따라 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-104">The decoding behavior is determined by current application's target Framework.</span></span> <span data-ttu-id="325c6-105">[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 이상에서는 유니코드 디코딩이 엄격합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-105">For [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later, the Unicode encoding decoding is strict.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Compat">
      <MemberSignature Language="C#" Value="Compat" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Configuration.UnicodeDecodingConformance Compat = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" />
      <MemberSignature Language="VB.NET" Value="Compat" />
      <MemberSignature Language="C++ CLI" Value="Compat" />
      <MemberSignature Language="F#" Value="Compat = 2" Usage="System.Net.Configuration.UnicodeDecodingConformance.Compat" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.UnicodeDecodingConformance</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="325c6-106">호환되는 동작을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-106">Use compatible behavior.</span></span> <span data-ttu-id="325c6-107">들어오는 데이터를 디코딩하기 전에 유효성을 확인하지 않도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-107">Specifies that incoming data is not checked for validity before being decoded.</span></span> <span data-ttu-id="325c6-108">예를 들어 입력 문자열 "&amp;amp;#xD84C;"는 쌍으로 되어 있지 않은 서로게이트인 U+D84C로 디코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-108">For example, an input string of "&amp;amp;#xD84C;" would decode as U+D84C, which is an unpaired surrogate.</span></span> <span data-ttu-id="325c6-109">또한 디코더가 HTML로 인코딩된 서로게이트를 표시하지 않는다면 디코더가 SMP에서 코드 포인트를 인식하지 못하므로 입력 문자열 "&amp;#144308;"에 대한 출력 문자열은 "&amp;#144308;"입니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-109">Additionally, the decoder does not understand code points in the SMP unless they're represented as HTML-encoded surrogates, so the inputstring "&amp;#144308;" would result in the output string "&amp;#144308;".</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Loose">
      <MemberSignature Language="C#" Value="Loose" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Configuration.UnicodeDecodingConformance Loose = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Configuration.UnicodeDecodingConformance.Loose" />
      <MemberSignature Language="VB.NET" Value="Loose" />
      <MemberSignature Language="C++ CLI" Value="Loose" />
      <MemberSignature Language="F#" Value="Loose = 3" Usage="System.Net.Configuration.UnicodeDecodingConformance.Loose" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.UnicodeDecodingConformance</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="325c6-110">느슨한 동작을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-110">Use loose behavior.</span></span> <span data-ttu-id="325c6-111">유효성 확인이 없다는 점에서 <see cref="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" />과 유사하지만, 디코더도 코드 포인트를 이해합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-111">Similar to <see cref="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" /> in that there are no validity checks, but the decoder also understands code points.</span></span> <span data-ttu-id="325c6-112">입력 문자열 "&amp;#144308;"이 문자 U+233B4로 바르게 디코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-112">The input string "&amp;#144308;" would decode into the character U+233B4 correctly.</span></span> <span data-ttu-id="325c6-113">이 스위치는 디코더가 공급자가 인코딩된 문자열을 생성하는 데 어떤 형식을 사용하는지 모를 경우 최대 상호 운용성을 제공하기 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-113">This switch is meant to provide maximum interoperability when the decoder doesn't know which format the provider is using to generate the encoded string.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Strict">
      <MemberSignature Language="C#" Value="Strict" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Configuration.UnicodeDecodingConformance Strict = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Configuration.UnicodeDecodingConformance.Strict" />
      <MemberSignature Language="VB.NET" Value="Strict" />
      <MemberSignature Language="C++ CLI" Value="Strict" />
      <MemberSignature Language="F#" Value="Strict = 1" Usage="System.Net.Configuration.UnicodeDecodingConformance.Strict" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.UnicodeDecodingConformance</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="325c6-114">엄격한 동작을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-114">Use strict behavior.</span></span> <span data-ttu-id="325c6-115">들어오는 인코딩된 데이터를 디코딩하기 전에 유효성을 확인하도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-115">Specifies that the incoming encoded data is checked for validity before being decoded.</span></span> <span data-ttu-id="325c6-116">예를 들어 입력 문자열 "&amp;#144308;"이 U+233B4로 디코딩되지만 입력 문자열 "&amp;#xD84C;&amp;#xDFB4;"는 적절하게 디코딩되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-116">For example, an input string of "&amp;#144308;" would decode as U+233B4, but an input string of "&amp;#xD84C;&amp;#xDFB4;" would fail to decode properly.</span></span> <span data-ttu-id="325c6-117">문자열의 이미 디코딩된 데이터는 유효성을 검사하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-117">Already-decoded data in the string is not checked for validity.</span></span> <span data-ttu-id="325c6-118">예를 들어, 짝이 없기는 하지만 디코딩하는 동안 이미 디코딩된 서로게이트는 건너뛰므로 "\ud800"의 입력 문자열은 "\ud800"의 출력 문자열을 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="325c6-118">For example, an input string of "\ud800" will result in an output string of "\ud800", as the already-decoded surrogate is skipped during decoding, even though it is unpaired.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>