<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9369e819b3a45edbbcd9fde740198d1375196d3f" />
    <Meta Name="ms.sourcegitcommit" Value="850a55c780d5a95b534467969add0232fd3a6125" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/07/2018" />
    <Meta Name="ms.locfileid" Value="34828896" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="2e9b9-101">스택에 있는 요소의 형식을 지정합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-101">Specifies the type of elements in the stack.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="2e9b9-102">지정한 동일 형식의 인스턴스로 이루어진 가변 크기 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-103"><xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="2e9b9-104">스택 및 큐는 유용 정보에 대 한 임시 저장소를 사용 해야 하는 경우 즉 때 하려는 경우도 요소 값을 검색 한 후 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="2e9b9-105">사용 하 여 <xref:System.Collections.Generic.Queue%601> 순서는 컬렉션에 저장 된 정보에 액세스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="2e9b9-106">사용 하 여 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 반대 순서로 정보에 액세스 해야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="2e9b9-107">사용 하 여는 <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> 및 <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> 동시에 여러 스레드에서 컬렉션에 액세스 해야 하는 경우 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="2e9b9-108">일반적인 용도 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 다른 프로시저를 호출 하는 동안 변수 상태를 유지 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="2e9b9-109">세 가지 주요 작업을 수행할 수는 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 와 해당 요소:</span><span class="sxs-lookup"><span data-stu-id="2e9b9-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="2e9b9-110"><xref:System.Collections.Generic.Stack%601.Push%2A> 맨 위에 있는 요소를 삽입는 <xref:System.Collections.Stack>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="2e9b9-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> 맨 위에서 요소를 제거는 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="2e9b9-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> 위쪽에 있는 요소를 반환 합니다는 <xref:System.Collections.Generic.Stack%601> 하지만 제거 하지 않습니다는 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-113">용량을 <xref:System.Collections.Generic.Stack%601> 요소의 수가는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="2e9b9-114">요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="2e9b9-115">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-116">경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 스택, 용량 보다 적습니다 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="2e9b9-117">용량을 증가 하 여 새 요소로 적용 해야 하는 경우 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="2e9b9-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> o (1) 연산이입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="2e9b9-119"><xref:System.Collections.Generic.Stack%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-120">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="2e9b9-121">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-122">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-123"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-124"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-126">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-127">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-129"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="2e9b9-130">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="2e9b9-131">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-131">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="2e9b9-132">A <see cref="T:System.Collections.Generic.Stack`1" /> 수 여러 판독기 동시에 지원할으로 컬렉션은 수정 되지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="2e9b9-133">컬렉션 전체를 열거 하 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="2e9b9-134">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="2e9b9-135">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e9b9-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-136">
            <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-136">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-137">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-137">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-138">용량은 <xref:System.Collections.Generic.Stack%601> 요소의 수가 하는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-138">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="2e9b9-139">요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-139">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2e9b9-140">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-140">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-141">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-141">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-142">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-142">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-143">다음 코드 예제에서는이 생성자와의 몇 가지 메서드는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-143">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="2e9b9-144">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-144">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-145">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-145">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-146"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-146">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-147"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-147">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-148"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-148">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-149">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-149">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-150">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-150">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-151"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-151">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-152"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-152">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="2e9b9-153">요소를 복사할 원본 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-153">The collection to copy elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-154">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-154">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-155">용량은 <xref:System.Collections.Generic.Stack%601> 요소의 수가 하는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-155">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="2e9b9-156">요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-156">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2e9b9-157">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-157">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-158">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-158">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-159">요소에 복사 됩니다는 <xref:System.Collections.Generic.Stack%601> 가 읽는 순서는 <xref:System.Collections.Generic.IEnumerator%601> 의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-159">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="2e9b9-160">이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-160">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-161">다음 코드 예제에서는이 생성자와의 몇 가지 메서드는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-161">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="2e9b9-162">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-162">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-163">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-163">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-164"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-164">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-165"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-165">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-166"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-166">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-167">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-167">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-168">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-168">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-169"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-169">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-170"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-170">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e9b9-171">
            <paramref name="collection" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-171">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="2e9b9-172">
            <see cref="T:System.Collections.Generic.Stack`1" />에 포함될 수 있는 초기 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-172">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-173">비어 있는 상태이고 지정한 초기 용량과 기본 초기 용량 중에서 더 큰 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-173">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-174">용량은 <xref:System.Collections.Generic.Stack%601> 요소의 수가 하는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-174">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="2e9b9-175">요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-175">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="2e9b9-176">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-176">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-177">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-177">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-178">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-178">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e9b9-179">
            <paramref name="capacity" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-179">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-180">
            <see cref="T:System.Collections.Generic.Stack`1" />에서 개체를 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-180">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-181"><xref:System.Collections.Generic.Stack%601.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-181"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="2e9b9-182">용량 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-182">The capacity remains unchanged.</span></span> <span data-ttu-id="2e9b9-183">용량을 다시 설정 하는 <xref:System.Collections.Generic.Stack%601>, 호출 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-183">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="2e9b9-184">빈 트리밍 <xref:System.Collections.Generic.Stack%601> 의 용량 설정는 <xref:System.Collections.Generic.Stack%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-184">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="2e9b9-185">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-185">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-186">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-186">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-187">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-187">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-188">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-188">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-189"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-189">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-190"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-190">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-191"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-191">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-192">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-192">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-193">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-193">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-194"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-194">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-195"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-195">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="2e9b9-196">
            <see cref="T:System.Collections.Generic.Stack`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-196">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="2e9b9-197">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-197">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-198">
            <see cref="T:System.Collections.Generic.Stack`1" />에 요소가 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-198">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-199">
            <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Stack`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-199">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-200">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-200">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="2e9b9-201">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-201">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-202">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-202">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-203">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-203">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-204">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-204">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-205"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-205">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-206"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-206">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-207"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-207">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-208">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-208">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-209">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-209">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-210"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-210">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-211"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-211">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2e9b9-212">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Stack`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-212">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="2e9b9-213">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-213">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="2e9b9-214">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-214">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-215">
            <see cref="T:System.Collections.Generic.Stack`1" />을 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-215">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-216">요소에 대 한 호출의 연속으로 반환 하는 요소의 순서와 비슷한 마지막에 첫 번째 아웃 (후입선출) 순서로 배열에 복사 됩니다 <xref:System.Collections.Generic.Stack%601.Pop%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-216">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-217">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-217">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-218">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-218">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-219">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-219">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-220">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-220">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-221"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-221">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-222"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-222">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-223"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-223">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-224">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-224">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-225">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-225">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-226"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-226">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-227"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-227">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e9b9-228">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-228">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e9b9-229">
            <paramref name="arrayIndex" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-229">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e9b9-230">소스 <see cref="T:System.Collections.Generic.Stack`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-230">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-231">
            <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-231">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e9b9-232">
            <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-232">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-233">용량은 <xref:System.Collections.Generic.Stack%601> 요소의 수가 하는 <xref:System.Collections.Generic.Stack%601> 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-233">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="2e9b9-234"><xref:System.Collections.Generic.Stack%601.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.Generic.Stack%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-234"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-235">용량 보다 크거나 같은 경우는 항상 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-235">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="2e9b9-236">경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 자동으로 다시 할당 하 여 용량을 증가 시켜, 요소를 추가 하는 동안 용량을 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-236">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="2e9b9-237">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-237">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-238">다음 코드 예제에서는 몇 가지의 속성 및 메서드는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-238">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="2e9b9-239">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-239">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-240">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-240">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-241"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-241">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-242"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-242">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-243"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-243">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-244">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-244">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-245">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-245">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-246"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-246">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-247"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-247">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-248">
            <see cref="T:System.Collections.Generic.Stack`1" />에 대한 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-248">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-249">
            <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Stack`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-249">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-250">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-250">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2e9b9-251">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-251">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2e9b9-252">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-252">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2e9b9-253">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-253">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2e9b9-254">이 위치에서 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-254">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-255">따라서 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-255">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-256"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-256"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="2e9b9-257"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-257"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2e9b9-258">경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-258">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2e9b9-259">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-259">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2e9b9-260">마지막으로 호출 하는 경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-260">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-261"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-261">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="2e9b9-262">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-262">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2e9b9-263">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-263">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2e9b9-264">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-264">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2e9b9-265">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-265">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2e9b9-266">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-266">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2e9b9-267">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-267">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2e9b9-268">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-268">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-269">다음 코드 예제에서는 것을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스는 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-269">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="2e9b9-270">`foreach` 문 (`For Each` Visual Basic의 `for each` c + +에서)는 큐를 열거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-270">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="2e9b9-271">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-271">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-272">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-272">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-273"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-273">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-274"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-274">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-275"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-275">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-276">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-276">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-277">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-277">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-278"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-278">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-279"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-279">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-280">
            <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하지 않고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-280">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-281">
            <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-281">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-282">이 메서드는 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Stack%601.Peek%2A>는 <xref:System.Collections.Generic.Stack%601>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-282">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-283">경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-283">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="2e9b9-284">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-284">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-285">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-285">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-286">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-286">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-287">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-287">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-288"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-288">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-289"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-289">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-290"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-290">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-291">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-291">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-292">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-292">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-293"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-293">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-294"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-294">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e9b9-295">
            <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-295">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-296">
            <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-296">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-297">
            <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 제거되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-297">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-298">이 메서드는 <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Stack%601.Peek%2A>는 <xref:System.Collections.Generic.Stack%601>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-298">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="2e9b9-299">경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-299">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="2e9b9-300"><xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-300"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="2e9b9-301">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-301">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-302">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-302">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-303">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-303">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-304">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-304">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-305"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-305">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-306"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-306">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-307"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-307">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-308">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-308">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-309">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-309">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-310"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-310">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-311"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-311">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e9b9-312">
            <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-312">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="2e9b9-313">
            <see cref="T:System.Collections.Generic.Stack`1" />에 적용할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-313">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="2e9b9-314">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-314">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-315">개체를 <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-315">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-316"><xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-316"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="2e9b9-317">경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 이미 용량의 용량과 같은 <xref:System.Collections.Generic.Stack%601> 자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-317">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="2e9b9-318">경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-318">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="2e9b9-319">스택에 있는 슬롯을 차지 하 고 개체와 같이 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-319">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="2e9b9-320">경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 스택, 용량 보다 적습니다 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-320">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="2e9b9-321">용량을 증가 하 여 새 요소로 적용 해야 하는 경우 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-321">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-322">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-322">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-323">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-323">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-324">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-324">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-325"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-325">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-326"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-326">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-327"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-327">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-328">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-328">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-329">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-329">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-330"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-330">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-331"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-331">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-332">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-332">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-333">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-333">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-334">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-334">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2e9b9-335">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-335">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2e9b9-336">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-336">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2e9b9-337">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-337">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2e9b9-338">이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-338">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-339">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-339">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-340"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-340"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="2e9b9-341"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-341"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2e9b9-342">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-342">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2e9b9-343">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-343">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2e9b9-344">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-344">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-345"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-345">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="2e9b9-346">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-346">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2e9b9-347">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-347">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2e9b9-348">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-348">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="2e9b9-349">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-349">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2e9b9-350">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-350">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2e9b9-351">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-351">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2e9b9-352">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-352">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2e9b9-353">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-353">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="2e9b9-354">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-354">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="2e9b9-355">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-355">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e9b9-356">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-356">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2e9b9-357">경우는 원본의 유형을 <xref:System.Collections.ICollection> 대상의 형식으로 자동 캐스팅할 수 없는 `array`의 제네릭이 아닌 구현 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, 제네릭 구현 throw 하는 반면, <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-357">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="2e9b9-358">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-358">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e9b9-359">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-359">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e9b9-360">
            <paramref name="arrayIndex" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-360">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e9b9-361">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-361">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="2e9b9-362">-또는-  <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-362">-or-  <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="2e9b9-363">-또는-  소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-363">-or-  The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="2e9b9-364">-또는-  소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-364">-or-  The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-365">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-365">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e9b9-366">
            <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-366">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2e9b9-367">
            <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-367">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-368">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-368">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2e9b9-369">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-369">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2e9b9-370">열거형 쓰기 권한과 경쟁 하는 드문 경우에 전체 열거 동안 컬렉션을 잠가야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-370">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2e9b9-371">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-371">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2e9b9-372"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-372"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="2e9b9-373">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-373">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="2e9b9-374">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-374">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-375">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-375">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e9b9-376">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-376">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="2e9b9-377">
            <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-377">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-378">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-378">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2e9b9-379">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-379">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2e9b9-380">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-380">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2e9b9-381">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-381">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2e9b9-382"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-382"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="2e9b9-383">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-383">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="2e9b9-384">다음 코드의 사용을 보여 줍니다.는 <xref:System.Collections.ICollection.SyncRoot%2A> C#, c + + 및 Visual Basic에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-384">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="2e9b9-385">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-385">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-386">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-386">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-387">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-387">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-388">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-388">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="2e9b9-389">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-389">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="2e9b9-390">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-390">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="2e9b9-391">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-391">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="2e9b9-392"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-392"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="2e9b9-393">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-393">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-394">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-394">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-395"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-395"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="2e9b9-396"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-396"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="2e9b9-397">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-397">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="2e9b9-398">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-398">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="2e9b9-399">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-399">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="2e9b9-400"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-400">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-401">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-401">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="2e9b9-402">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-402">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="2e9b9-403">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-403">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="2e9b9-404">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-404">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="2e9b9-405">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-405">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="2e9b9-406">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-406">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="2e9b9-407">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-407">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-408">
            <see cref="T:System.Collections.Generic.Stack`1" />을 새 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-408">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e9b9-409">
            <see cref="T:System.Collections.Generic.Stack`1" />의 요소 복사본을 포함하는 새 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-409">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-410">요소에 대 한 호출의 연속으로 반환 하는 요소의 순서와 비슷한 마지막에 첫 번째 아웃 (후입선출) 순서로 배열에 복사 됩니다 <xref:System.Collections.Generic.Stack%601.Pop%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-410">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-411">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-411">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e9b9-412">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-412">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="2e9b9-413">코드 예제에서는 기본 용량으로 문자열의 스택을 만들고 사용 하 여 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 5 개 문자열 스택으로 푸시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-413">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="2e9b9-414">스택의 상태 변경 하지 않는 요소는 스택의 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-414">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="2e9b9-415"><xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 첫 번째 문자열 스택에서 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-415">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="2e9b9-416"><xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택에서 다음 항목을 보고를 사용 하 한 다음은 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드 팝 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-416">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="2e9b9-417"><xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고, 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 반대로 요소의 순서를 사용 하 여 스택의 복사본 만들기.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-417">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="2e9b9-418">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-418">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="2e9b9-419">스택 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-419">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="2e9b9-420"><xref:System.Collections.Generic.Stack%601.%23ctor%2A> 생성자 되돌릴 요소의 순서는 스택의 복사본 만들기를 다시 사용 되며 다음 따라서 세 개의 null 요소가 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-420">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="2e9b9-421"><xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-421">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e9b9-422">
            <see cref="T:System.Collections.Generic.Stack`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e9b9-422">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e9b9-423">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-423">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="2e9b9-424">그러나 재할당 하 고 복사 큰 비용 <xref:System.Collections.Generic.Stack%601> 상당히 커질 수 하므로 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 메서드는 아무 작업도 수행 목록의 용량의 90%를 초과 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-424">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="2e9b9-425">이 상대적으로 작은 향상 큰 재할당 비용을 발생 시키는 것을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-425">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="2e9b9-426">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-426">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="2e9b9-427">다시 설정 하는 <xref:System.Collections.Generic.Stack%601> 를 초기 상태로 호출는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드 호출 하기 전에 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-427">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="2e9b9-428">빈 트리밍 <xref:System.Collections.Generic.Stack%601> 의 용량 설정는 <xref:System.Collections.Generic.Stack%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e9b9-428">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>