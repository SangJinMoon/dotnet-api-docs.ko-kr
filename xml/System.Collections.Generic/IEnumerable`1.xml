<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7628000b2c4025ed54ca68bbecc86cda707f970" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682397" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">열거할 개체의 형식입니다.</typeparam>
    <summary>지정된 형식의 컬렉션을 단순하게 반복할 수 있도록 지원하는 열거자를 노출합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> 컬렉션에 대 한 기본 인터페이스는 <xref:System.Collections.Generic> 네임 스페이스와 같은 <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, 및 <xref:System.Collections.Generic.Stack%601> 와 같은 기타 제네릭 컬렉션 <xref:System.Collections.ObjectModel.ObservableCollection%601> 및 <xref:System.Collections.Concurrent.ConcurrentStack%601>합니다. 구현 하는 컬렉션 <xref:System.Collections.Generic.IEnumerable%601> 를 사용 하 여 열거할 수는 `foreach` 문. 이 인터페이스의 비 제네릭 버전을 참조 하십시오. <xref:System.Collections.IEnumerable?displayProperty=nameWithType>합니다.  
  
 이 인터페이스의 비 제네릭 버전을 참조 하십시오. <xref:System.Collections.IEnumerable?displayProperty=nameWithType>합니다.  
  
 <xref:System.Collections.Generic.IEnumerable%601> 이 인터페이스를 구현할 때 구현 해야 하는 단일 메서드를 포함 합니다. <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>를 반환 하는 <xref:System.Collections.Generic.IEnumerator%601> 개체입니다. 반환 된 <xref:System.Collections.Generic.IEnumerator%601> 노출 하 여 컬렉션을 반복 하는 기능을 제공 된 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법을 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스와 LINQ 쿼리를 만들려면 해당 구현을 사용 하는 방법입니다. 구현 하는 경우 <xref:System.Collections.Generic.IEnumerable%601>를 구현 해야 <xref:System.Collections.Generic.IEnumerator%601> 또는 C#을 사용할 수 있습니다는 [yield](~/docs/csharp/language-reference/keywords/yield.md) 키워드입니다. 구현 <xref:System.Collections.Generic.IEnumerator%601> 필요 <xref:System.IDisposable> 를 구현 해야이 예에서 볼 수 있는 합니다.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 다른 C# 예제 구현 하는 방법을 보여 주는 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 참조는 [제네릭 샘플](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)합니다. 이 샘플에서는 `yield` 구현 하는 대신 키워드 <xref:System.Collections.Generic.IEnumerator%601>합니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 패리티를 제네릭이 아닌 컬렉션을 위해 포함 되었습니다. 구현 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 예상 하는 메서드에 전달 되는 제네릭 컬렉션을 사용 하면 프로그램 <see cref="T:System.Collections.IEnumerable" /> 개체입니다.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
        <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 <xref:System.Collections.Generic.IEnumerator%601> 노출 하 여 컬렉션을 반복 하는 기능을 제공 된 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성입니다. 열거자를 사용할 수는 컬렉션에 데이터를 읽을 수 있지만 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. 이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다. 따라서 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>합니다.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 반환 될 때까지 동일한 개체 <xref:System.Collections.IEnumerator.MoveNext%2A> 로 다시 호출 된 <xref:System.Collections.IEnumerator.MoveNext%2A> 설정 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 를 다음 요소로 합니다.  
  
 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다. <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.  
  
 열거자는 없으므로 컬렉션에 배타적으로 액세스 컬렉션은 변경으로 열거자 유효 합니다. 컬렉션 변경 되 면 열거자가 무효화 되 같은 추가, 수정 또는 요소를 삭제 하 고 예기치 않은 결과가 발생할 수 있습니다. 또한 컬렉션 열거은 스레드로부터 안전한 프로시저가 아닙니다. 스레드 안전성을 보장 하기 위해 열거자 동안 컬렉션을 잠글 하거나 컬렉션에 동기화를 구현 해야 합니다.  
  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 네임 스페이스 동기화 되지 않았습니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법을 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스 및 해당 구현을 사용 하 여 LINQ 쿼리를 만듭니다. 구현 하는 경우 <xref:System.Collections.Generic.IEnumerable%601>를 구현 해야 <xref:System.Collections.Generic.IEnumerator%601> 또는 C#을 사용할 수 있습니다는 [yield](~/docs/csharp/language-reference/keywords/yield.md) 키워드입니다. 구현 <xref:System.Collections.Generic.IEnumerator%601> 필요 <xref:System.IDisposable> 를 구현 해야이 예에서 볼 수 있는 합니다.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 다른 C# 예제 구현 하는 방법을 보여 주는 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 참조는 [제네릭 샘플](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)합니다. 이 샘플을 사용 하는 `yield` 구현 하는 대신 키워드 <xref:System.Collections.Generic.IEnumerator%601>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>