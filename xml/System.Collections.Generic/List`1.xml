<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="649dc28c23dbde95771a5a23c8feb6e1086637c4" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683964" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="e96f2-101">목록에 있는 요소의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="e96f2-102">인덱스로 액세스할 수 있는 강력한 형식의 개체 목록을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-102">Represents a strongly typed list of objects that can be accessed by index.</span>
      </span>
      <span data-ttu-id="e96f2-103">목록의 검색, 정렬 및 조작에 사용할 수 있는 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-103">Provides methods to search, sort, and manipulate lists.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-104"><xref:System.Collections.Generic.List%601> 클래스는 해당 하는 제네릭는 <xref:System.Collections.ArrayList> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-104">The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class.</span></span> <span data-ttu-id="e96f2-105">구현 하는 <xref:System.Collections.Generic.IList%601> 필요에 따라 크기가 동적으로 증가 하는 배열을 사용 하 여 제네릭 인터페이스 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-105">It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.</span></span>  
  
 <span data-ttu-id="e96f2-106">항목을 추가할 수는 <xref:System.Collections.Generic.List%601> 를 사용 하 여는 <xref:System.Collections.Generic.List%601.Add%2A> 또는 <xref:System.Collections.Generic.List%601.AddRange%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-106">You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.</span></span>  
  
 <span data-ttu-id="e96f2-107"><xref:System.Collections.Generic.List%601> 클래스 같음 비교자 및 순서 비교자를 모두를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-107">The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.</span></span>  
  
-   <span data-ttu-id="e96f2-108">와 같은 메서드 <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, 및 <xref:System.Collections.Generic.Dictionary%602.Remove%2A> 목록 요소에 대해 같음 비교자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-108">Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements.</span></span> <span data-ttu-id="e96f2-109">형식에 대 한 기본 같음 비교자 `T` 다음과 같이 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-109">The default equality comparer for type `T` is determined as follows.</span></span> <span data-ttu-id="e96f2-110">경우 형식 `T` 구현 하는 <xref:System.IEquatable%601> 제네릭 인터페이스를 같음 비교자는는 <xref:System.IEquatable%601.Equals%28%600%29> ; 해당 인터페이스의 메서드 그렇지 않으면 기본 같음 비교자는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-110">If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="e96f2-111">와 같은 메서드 <xref:System.Collections.Generic.List%601.BinarySearch%2A> 및 <xref:System.Collections.Generic.List%601.Sort%2A> 목록 요소에 대해 순서 비교자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-111">Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements.</span></span> <span data-ttu-id="e96f2-112">형식에 대 한 기본 비교자 `T` 다음과 같이 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-112">The default comparer for type `T` is determined as follows.</span></span>  <span data-ttu-id="e96f2-113">경우 형식 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스를 기본 비교자는는 <xref:System.IComparable%601.CompareTo%28%600%29> ; 해당 인터페이스의 메서드 그렇지 않은 경우, 형식 `T` 제네릭이 아닌 구현 <xref:System.IComparable> 인터페이스를 다음 기본값 비교자는는 <xref:System.IComparable.CompareTo%28System.Object%29> 해당 인터페이스의 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-113">If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface.</span></span> <span data-ttu-id="e96f2-114">경우 형식 `T` 기본 비교 자가 없으므로 고 비교자 또는 비교 대리자를 명시적으로 제공 해야 두 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-114">If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</span></span>  
  
 <span data-ttu-id="e96f2-115"><xref:System.Collections.Generic.List%601> 정렬할 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-115">The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="e96f2-116">정렬 해야는 <xref:System.Collections.Generic.List%601> 작업을 수행 하기 전에 (같은 <xref:System.Collections.Generic.List%601.BinarySearch%2A>) 해야 하는 <xref:System.Collections.Generic.List%601> 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-116">You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.</span></span>  
  
 <span data-ttu-id="e96f2-117">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-117">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="e96f2-118">이 컬렉션의 인덱스는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-118">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="e96f2-119">에 대 한 매우 큰 <xref:System.Collections.Generic.List%601> 개체를 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 `enabled` 에 구성 요소의 특성 `true` 런타임 환경에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-119">For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="e96f2-120"><xref:System.Collections.Generic.List%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-120"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e96f2-121">변경할 수 없는 버전의 <xref:System.Collections.Generic.List%601> 클래스를 참조 하십시오. <xref:System.Collections.Immutable.ImmutableList%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-121">For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="e96f2-122">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="e96f2-122">Performance Considerations</span></span>  
 <span data-ttu-id="e96f2-123">사용할지 여부를 결정 하는 데는 <xref:System.Collections.Generic.List%601> 또는 <xref:System.Collections.ArrayList> 클래스는 둘 다 유사한 기능을 기억 하는 <xref:System.Collections.Generic.List%601> 클래스 대부분의 경우에서 더 잘 수행 하 고 형식이 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-123">In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe.</span></span> <span data-ttu-id="e96f2-124">형식에 대 한 참조 형식이 사용 되는 경우 `T` 의 <xref:System.Collections.Generic.List%601> 클래스는 두 클래스의 동작은 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-124">If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical.</span></span> <span data-ttu-id="e96f2-125">그러나 값 형식이 형식에 대해 사용 되는 경우 `T`, 구현 및 boxing 문제를 고려해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-125">However, if a value type is used for type `T`, you need to consider implementation and boxing issues.</span></span>  
  
 <span data-ttu-id="e96f2-126">값 형식이 형식에 대해 사용 되는 경우 `T`, 컴파일러의 구현에서는 오류가 발생 하는 <xref:System.Collections.Generic.List%601> 구체적으로 해당 값 형식에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-126">If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type.</span></span> <span data-ttu-id="e96f2-127">즉,의 목록 요소는 <xref:System.Collections.Generic.List%601> 개체는 요소를 사용할 수 있습니다, 전에 목록 요소를 boxing 하지 않는 저장 된 메모리는 클래스 구현을 생성 하는 데 사용 된 메모리 보다 큰 약 500 목록 요소를 만든 후 boxed 될 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-127">That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</span></span>  
  
 <span data-ttu-id="e96f2-128">이때 형식에 사용 되는 값 형식 `T` 구현 하는 <xref:System.IEquatable%601> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-128">Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="e96f2-129">하는 경우와 같은 메서드, <xref:System.Collections.Generic.List%601.Contains%2A> 호출 해야 합니다는 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드는 영향을 받는 목록 요소 상자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-129">If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, which boxes the affected list element.</span></span> <span data-ttu-id="e96f2-130">값 형식을 구현 하는 경우는 <xref:System.IComparable> 인터페이스 하 고 소스 코드도 구현 소유 하는 <xref:System.IComparable%601> 방지 하기 위해 제네릭 인터페이스는 <xref:System.Collections.Generic.List%601.BinarySearch%2A> 및 <xref:System.Collections.Generic.List%601.Sort%2A> 목록 요소를 boxing 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-130">If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements.</span></span> <span data-ttu-id="e96f2-131">소스 코드를 소유 하지 않은 경우 전달 된 <xref:System.Collections.Generic.IComparer%601> 개체는 <xref:System.Collections.Generic.List%601.BinarySearch%2A> 및 <xref:System.Collections.Generic.List%601.Sort%2A> 메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-131">If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods</span></span>  
  
 <span data-ttu-id="e96f2-132">유형별 구현을 사용 하는 <xref:System.Collections.Generic.List%601> 사용 하는 대신 클래스는 <xref:System.Collections.ArrayList> 클래스 또는 강력한 형식의 래퍼 컬렉션을 직접 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-132">It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself.</span></span> <span data-ttu-id="e96f2-133">이유는.NET Framework의 용도를 이미 구현 수행 해야 Microsoft intermediate language 코드 및 메타 데이터를 구현할 수 없습니다. 공용 언어 런타임 공유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-133">The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</span></span>  
  
## <a name="f-considerations"></a><span data-ttu-id="e96f2-134">F # 고려 사항</span><span class="sxs-lookup"><span data-stu-id="e96f2-134">F# Considerations</span></span>  
 <span data-ttu-id="e96f2-135"><xref:System.Collections.Generic.List%601> 클래스 F # 코드에서 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-135">The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.</span></span>  <span data-ttu-id="e96f2-136">대신, [나열](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), 일반적으로 선호 되는 변경할 수 없는, 단일 연결 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-136">Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred.</span></span> <span data-ttu-id="e96f2-137">F # 목록은 정렬 되 고 변경할 수 없는 일련의 값을 제공 되며 함수 스타일 개발에서 사용 하기 위해 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-137">An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</span></span> <span data-ttu-id="e96f2-138">F #에서 사용 될 경우는 <xref:System.Collections.Generic.List%601> 클래스 일반적으로 참조 하는 [ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx) 형식 약어 F # 나열과 이름이 충돌을 방지 하기 위해</span><span class="sxs-lookup"><span data-stu-id="e96f2-138">When used from F#, the <xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-139">다음 예제에서는 추가, 제거 및에서 간단한 비즈니스 개체를 삽입 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-139">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="e96f2-140">다음 예제에서는 몇 가지의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 형식 문자열의 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-140">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string.</span></span> <span data-ttu-id="e96f2-141">(의 예는 <xref:System.Collections.Generic.List%601> 복합 형식의 참조는 <xref:System.Collections.Generic.List%601.Contains%2A> 메서드.)</span><span class="sxs-lookup"><span data-stu-id="e96f2-141">(For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)</span></span>  
  
 <span data-ttu-id="e96f2-142">기본 생성자가 기본 용량을 사용 하 여 문자열의 목록을 만들려면 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-142">The default constructor is used to create a list of strings with the default capacity.</span></span> <span data-ttu-id="e96f2-143"><xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 한 다음은 <xref:System.Collections.Generic.List%601.Add%2A> 여러 항목을 추가 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-143">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="e96f2-144">항목을 나열 및 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 함께 다시는 <xref:System.Collections.Generic.List%601.Count%2A> 속성을 표시 하 여 용량이 필요에 따라 증가 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-144">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="e96f2-145"><xref:System.Collections.Generic.List%601.Contains%2A> 메서드는 목록에 있는 항목의 존재 유무를 테스트 하는 데 사용 되는 <xref:System.Collections.Generic.List%601.Insert%2A> 메서드를 사용 하는 목록 중에 새 항목을 삽입 하 고 목록의 내용을 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-145">The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-146">기본 <xref:System.Collections.Generic.List%601.Item%2A> 속성 (C# 인덱서)는 항목을 검색 하는 데 사용 되는 <xref:System.Collections.Generic.List%601.Remove%2A> 메서드를 사용 하 여 이전에 추가한 중복 항목의 첫 번째 인스턴스를 제거 하 고 내용을 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-146">The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</span></span> <span data-ttu-id="e96f2-147"><xref:System.Collections.Generic.List%601.Remove%2A> 항상 메서드를 발견 하는 첫 번째 인스턴스를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-147">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 <span data-ttu-id="e96f2-148"><xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드는 개수와 일치 하는 축소를 사용 하 고 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-148">The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="e96f2-149">사용 되지 않는 용량 검색의 총 용량 10% 미만 했다면, 목록은 하지 크기가 조정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-149">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span>  
  
 <span data-ttu-id="e96f2-150">마지막으로 <xref:System.Collections.Generic.List%601.Clear%2A> 메서드를 사용 하 여 목록에서 모든 항목을 제거 하 고 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-150">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e96f2-151">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-151">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="e96f2-152">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-152">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="e96f2-153">다중 읽기 작업을 수행 해도 안전는 <see cref="T:System.Collections.Generic.List`1" />, 하지만 읽는 동안 컬렉션이 수정 되는 경우 문제가 발생할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-153">It is safe to perform multiple read operations on a <see cref="T:System.Collections.Generic.List`1" />, but issues can occur if the collection is modified while it’s being read.</span>
      </span>
      <span data-ttu-id="e96f2-154">스레드로부터의 안전성을 보장 하려면 읽기는 동안 컬렉션을 잠글 또는 쓰기 작업을 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-154">To ensure thread safety, lock the collection during a read or write operation.</span>
      </span>
      <span data-ttu-id="e96f2-155">에 액세스 하 여 읽기 및 쓰기에 여러 스레드에서 컬렉션을 사용 하도록 설정 하려면 사용자 지정 동기화를 구현 해야 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-155">To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
      <span data-ttu-id="e96f2-156">기본 제공 동기화 된 컬렉션에 대 한 참조의 클래스는 <see cref="N:System.Collections.Concurrent" /> 네임 스페이스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-156">For collections with built-in synchronization, see the classes in the <see cref="N:System.Collections.Concurrent" /> namespace.</span>
      </span>
      <span data-ttu-id="e96f2-157">기본적으로 스레드 – 안전 대안에 대 한 참조는 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 클래스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e96f2-157">For an inherently thread–safe alternative, see the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-158">
            <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-158">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-159">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-159">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-160">용량은 <xref:System.Collections.Generic.List%601> 요소의 수가 하는 <xref:System.Collections.Generic.List%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-160">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="e96f2-161">요소에 추가 되는 <xref:System.Collections.Generic.List%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-161">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="e96f2-162">컬렉션의 크기 예상할 수 있는 경우를 사용 하는 <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> 생성자와 초기 용량을 지정 하지 않아도 크기 조정 작업에 요소를 추가 하는 동안 여러 번 수행는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-162">If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-163">호출 하 여 용량을 줄일 수 있습니다는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드 또는 설정 하 여는 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-163">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="e96f2-164">용량 메모리를 다시 할당 하 고 복사에 있는 모든 요소는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-164">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-165">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-165">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-166">다음 예제에서는 기본 생성자는 <xref:System.Collections.Generic.List%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-166">The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="e96f2-167">기본 생성자를 표시 하 여 볼 수 있듯이 기본 용량으로 목록을 만듭니다는 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-167">The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
 <span data-ttu-id="e96f2-168">이 예제에서는 추가 하 고 삽입, 용량 이러한 메서드는 사용 되 고 변경 하는 방법을 보여 주는 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-168">The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e96f2-169">요소가 새 목록에 복사되는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-169">The collection whose elements are copied to the new list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-170">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-171">요소에 복사 됩니다는 <xref:System.Collections.Generic.List%601> 컬렉션의 열거자가 읽기 순서와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-171">The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.</span></span>  
  
 <span data-ttu-id="e96f2-172">이 생성자는는 O (*n*) 작업, 여기서 *n* 에 있는 요소의 수는 `collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-172">This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-173">다음 예제는 <xref:System.Collections.Generic.List%601.%23ctor%2A> 생성자와의 다양 한 메서드는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-173">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-174">문자열의 배열은 만들고 배열의 요소를 사용 하 여 목록 채우기 생성자에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-174">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="e96f2-175"><xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 한 다음 초기 용량 입력된 요소를 보유 하는 데 필요한 란 정확히 임을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-175">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-176">
            <paramref name="collection" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-176">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="e96f2-177">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-177">The number of elements that the new list can initially store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-178">비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-178">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-179">용량은 <xref:System.Collections.Generic.List%601> 요소의 수가 하는 <xref:System.Collections.Generic.List%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-179">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="e96f2-180">요소에 추가 되는 <xref:System.Collections.Generic.List%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-180">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="e96f2-181">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-181">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-182">호출 하 여 용량을 줄일 수 있습니다는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드 또는 설정 하 여는 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성이 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-182">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="e96f2-183">용량 메모리를 다시 할당 하 고 복사에 있는 모든 요소는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-183">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-184">이 생성자는는 O (*n*) 작업, 여기서 *n* 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-184">This constructor is an O(*n*) operation, where *n* is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-185">다음 예제는 <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-185">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="e96f2-186">A <xref:System.Collections.Generic.List%601> 4의 용량을 가진 문자열의 만들어질 목록의 최종 크기는 4로 알려져 있기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-186">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="e96f2-187">목록은 4 개의 문자열으로 채워지고 사용 하 여 읽기 전용 복사본 만들어집니다는 <xref:System.Collections.Generic.List%601.AsReadOnly%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-187">The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-188">
            <paramref name="capacity" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-188">
              <paramref name="capacity" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-189">
            <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-189">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-190">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-190">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-191">개체를 <see cref="T:System.Collections.Generic.List`1" />의 끝 부분에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-191">Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-192"><xref:System.Collections.Generic.List%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-192"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e96f2-193">경우 <xref:System.Collections.Generic.List%601.Count%2A> 이미 <xref:System.Collections.Generic.List%601.Capacity%2A>의 용량이 <xref:System.Collections.Generic.List%601> 자동으로 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-193">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="e96f2-194">경우 <xref:System.Collections.Generic.List%601.Count%2A> 는 보다 작은 <xref:System.Collections.Generic.List%601.Capacity%2A>,이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-194">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="e96f2-195">이 메서드는 O 됩니다 용량을 새 요소로 적용로 늘려야 하는 경우 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-195">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-196">다음 예제에서는 추가, 제거 및에서 간단한 비즈니스 개체를 삽입 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-196">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="e96f2-197">다음 예제에서는 몇 가지의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.List%601.Add%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-197">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method.</span></span> <span data-ttu-id="e96f2-198">기본 생성자가 용량이 0 인 문자열의 목록을 만들려면 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-198">The default constructor is used to create a list of strings with a capacity of 0.</span></span> <span data-ttu-id="e96f2-199"><xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 한 다음은 <xref:System.Collections.Generic.List%601.Add%2A> 여러 항목을 추가 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-199">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="e96f2-200">항목을 나열 및 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 함께 다시는 <xref:System.Collections.Generic.List%601.Count%2A> 속성을 표시 하 여 용량이 필요에 따라 증가 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-200">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="e96f2-201">다른 속성 및 메서드는 검색, 삽입 및 목록에서 요소를 제거 하는 데 사용 하 고 마지막으로 목록을 지울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-201">Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e96f2-202">요소가 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가되어야 하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-202">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-203">컬렉션 자체가 <see langword="null" />일 수는 없지만 <c>T</c> 형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-203">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-204">지정된 컬렉션의 요소를 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-204">Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-205">컬렉션에 있는 요소의 순서는 유지 된 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-205">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-206">하는 경우 새 <xref:System.Collections.Generic.List%601.Count%2A> (현재 <xref:System.Collections.Generic.List%601.Count%2A> 컬렉션의 크기를 더한) 보다 커야 <xref:System.Collections.Generic.List%601.Capacity%2A>의 용량이 <xref:System.Collections.Generic.List%601> 자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 및 새 요소가 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-206">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="e96f2-207">경우는 <xref:System.Collections.Generic.List%601> 을 늘리지 않고도 새 요소를 수용할 수는 <xref:System.Collections.Generic.List%601.Capacity%2A>,이 메서드는 O는 (*n*) 작업, 여기서 *n* 추가할 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-207">If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added.</span></span> <span data-ttu-id="e96f2-208">이 메서드는 O 됩니다 용량을 새 요소를 수용 하기 위해 증가 하는 경우 (*n* + *m*) 작업, 여기서 *n* 요소 수는 추가할 및 *m* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-208">If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-209">다음 예제는 <xref:System.Collections.Generic.List%601.AddRange%2A> 메서드와의 다른 다양 한 메서드는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-209">The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-210">문자열의 배열은 만들고 배열의 요소를 사용 하 여 목록 채우기 생성자에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-210">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="e96f2-211"><xref:System.Collections.Generic.List%601.AddRange%2A> 목록을 인수로 사용 하 여 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-211">The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument.</span></span> <span data-ttu-id="e96f2-212">결과 있는 현재 요소는 목록의 모든 요소가 중복 목록의 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-212">The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-213">
            <paramref name="collection" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-213">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-214">현재 컬렉션에 대한 읽기 전용 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 래퍼를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-214">Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-215">현재 <see cref="T:System.Collections.Generic.List`1" />에 대한 읽기 전용 래퍼 역할을 하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-215">An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-216">수정 하지 못하게 하는 <xref:System.Collections.Generic.List%601> 개체,이 래퍼를 통해서만 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-216">To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper.</span></span> <span data-ttu-id="e96f2-217">A <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 개체 컬렉션을 수정 하는 메서드를 노출 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-217">A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection.</span></span> <span data-ttu-id="e96f2-218">그러나 내부에 변경 되 면 <xref:System.Collections.Generic.List%601> 개체를 읽기 전용 컬렉션에 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-218">However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="e96f2-219">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e96f2-219">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-220">다음 예제는 <xref:System.Collections.Generic.List%601.AsReadOnly%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-220">The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span> <span data-ttu-id="e96f2-221">A <xref:System.Collections.Generic.List%601> 4의 용량을 가진 문자열의 만들어질 목록의 최종 크기는 4로 알려져 있기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-221">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="e96f2-222">목록 4 개의 문자열 채워집니다 및 <xref:System.Collections.Generic.List%601.AsReadOnly%2A> 메서드는 읽기 전용를 가져오는 데 <xref:System.Collections.Generic.IList%601> 원래 목록을 래핑하는 제네릭 인터페이스 구현.</span><span class="sxs-lookup"><span data-stu-id="e96f2-222">The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.</span></span>  
  
 <span data-ttu-id="e96f2-223">원래 목록 요소를 사용 하 여 "Coelophysis"로 설정 되어는 <xref:System.Collections.Generic.List%601.Item%2A> 속성 (C# 인덱서) 및 읽기 전용 목록의 내용을 원래 목록에 대 한 래퍼 인지 보여 주기 위해 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-223">An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-224">이진 검색 알고리즘을 사용하여 정렬된 <see cref="T:System.Collections.Generic.List`1" />나 그 일부에서 특정 요소를 찾습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-224">Uses a binary search algorithm to locate a specific element in the sorted <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-225">찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-225">The object to locate.</span>
          </span>
          <span data-ttu-id="e96f2-226">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-226">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-227">기본 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-227">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-228">
            <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-228">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-229">이 메서드는 기본 비교 자가 사용 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 형식에 대 한 `T` 목록 요소의 순서를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-229">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="e96f2-230"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 속성 검사 하는지 여부를 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스를 구현 하를 사용 하 여 사용 가능한 경우.</span><span class="sxs-lookup"><span data-stu-id="e96f2-230">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-231">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-231">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-232">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-232">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-233"><xref:System.Collections.Generic.List%601> ; 비교자 구현에 따라 정렬 되어 있어야 그렇지 않으면 결과 틀립니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-233">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="e96f2-234">비교 `null` 을 다른 참조는 허용 형식과 사용 하는 경우 예외가 생성 되지 않습니다는 <xref:System.IComparable%601> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-234">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="e96f2-235">정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-235">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="e96f2-236">경우는 <xref:System.Collections.Generic.List%601> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-236">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="e96f2-237">경우는 <xref:System.Collections.Generic.List%601> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-237">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="e96f2-238">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-238">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="e96f2-239">에 값을 삽입할 때는 <xref:System.Collections.Generic.List%601>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-239">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="e96f2-240">이 메서드는는 O (로그 *n*) 작업, 여기서 *n* 범위의 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-240">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-241">다음 예제는 <xref:System.Collections.Generic.List%601.Sort> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-241">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="e96f2-242">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-242">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="e96f2-243">목록은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-243">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-244"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 메서드 오버 로드는 다음 목록에 없는 두 문자열을 검색 하는 데 사용 됩니다 및 <xref:System.Collections.Generic.List%601.Insert%2A> 삽입할 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-244">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="e96f2-245">반환 값은 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 문자열 목록에 없기 때문에 메서드는 각각의 경우에서 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-245">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="e96f2-246">비트 보수 (고 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)이 음수 숫자 생성 검색 문자열 보다는 커야 하며 삽입이 위치에 있는 목록에서 첫 번째 요소의 인덱스 유지 정렬 순서입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-246">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="e96f2-247">두 번째 검색 문자열 목록에 있는 모든 요소 보다 큰 이므로 목록의 끝에 삽입 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-247">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-248">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-248">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-249">찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-249">The object to locate.</span>
          </span>
          <span data-ttu-id="e96f2-250">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-250">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e96f2-251">요소를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-251">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span>
          </span>
          <span data-ttu-id="e96f2-252">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-252">-or-</span>
          </span>
          <span data-ttu-id="e96f2-253">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-253">
              <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-254">지정된 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-254">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-255">
            <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-255">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-256">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-256">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="e96f2-257">예를 들어 사용할 수 있습니다는 <xref:System.Collections.CaseInsensitiveComparer> 인스턴스도 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-257">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="e96f2-258">경우 `comparer` 제공의 요소는 <xref:System.Collections.Generic.List%601> 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.Generic.IComparer%601> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-258">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="e96f2-259">경우 `comparer` 은 `null`, 기본 비교자 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스 사용 가능한 경우 해당 구현을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-259">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-260">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-260">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-261">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-261">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-262"><xref:System.Collections.Generic.List%601> ; 비교자 구현에 따라 정렬 되어 있어야 그렇지 않으면 결과 틀립니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-262">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="e96f2-263">비교 `null` 을 다른 참조는 허용 형식과 사용 하는 경우 예외가 생성 되지 않습니다는 <xref:System.IComparable%601> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-263">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="e96f2-264">정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-264">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="e96f2-265">경우는 <xref:System.Collections.Generic.List%601> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-265">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="e96f2-266">경우는 <xref:System.Collections.Generic.List%601> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-266">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="e96f2-267">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-267">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="e96f2-268">에 값을 삽입할 때는 <xref:System.Collections.Generic.List%601>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-268">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="e96f2-269">이 메서드는는 O (로그 *n*) 작업, 여기서 *n* 범위의 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-269">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-270">다음 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-270">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="e96f2-271">이 예제에서는 대체는 비교자 DinoCompare 구현 하는 명명 된 문자열에 대 한 정의 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-271">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="e96f2-272">다음과 같이 작동 되는 비교자:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-272">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="e96f2-273">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-273">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="e96f2-274">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="e96f2-274">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="e96f2-275">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-275">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="e96f2-276">목록 다시 표시 됩니다, 대체 비교자를 사용 하 여 정렬 되 고 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-276">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-277"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드는 다음 하지 목록에서 사용 중인 대체 비교자 여러 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-277">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="e96f2-278"><xref:System.Collections.Generic.List%601.Insert%2A> 메서드를 사용 하 여 문자열을 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-278">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="e96f2-279">라는 함수에 있는 다음 두 가지 방법 `SearchAndInsert`, 비트 보수를 수행 하는 코드와 함께 (의 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)에서 반환 된 음수의 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 에 대 한 인덱스로 사용 하 여 새 문자열을 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-279">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-280">
            <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-280">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-281">검색할 범위의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-281">The zero-based starting index of the range to search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-282">검색할 범위의 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-282">The length of the range to search.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e96f2-283">찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-283">The object to locate.</span>
          </span>
          <span data-ttu-id="e96f2-284">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-284">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e96f2-285">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-285">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-286">지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-286">Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-287">
            <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-287">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-288">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-288">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="e96f2-289">예를 들어 사용할 수 있습니다는 <xref:System.Collections.CaseInsensitiveComparer> 인스턴스도 대/소문자 구분 문자열 검색을 수행 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-289">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="e96f2-290">경우 `comparer` 제공의 요소는 <xref:System.Collections.Generic.List%601> 사용 하 여 지정된 된 값과 비교할 <xref:System.Collections.Generic.IComparer%601> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-290">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="e96f2-291">경우 `comparer` 은 `null`, 기본 비교자 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스 사용 가능한 경우 해당 구현을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-291">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-292">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-292">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-293">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-293">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-294"><xref:System.Collections.Generic.List%601> ; 비교자 구현에 따라 정렬 되어 있어야 그렇지 않으면 결과 틀립니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-294">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="e96f2-295">비교 `null` 을 다른 참조는 허용 형식과 사용 하는 경우 예외가 생성 되지 않습니다는 <xref:System.IComparable%601> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-295">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="e96f2-296">정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-296">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="e96f2-297">경우는 <xref:System.Collections.Generic.List%601> 포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-297">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="e96f2-298">경우는 <xref:System.Collections.Generic.List%601> 지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-298">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="e96f2-299">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-299">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="e96f2-300">에 값을 삽입할 때는 <xref:System.Collections.Generic.List%601>, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-300">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="e96f2-301">이 메서드는는 O (로그 *n*) 작업, 여기서 *n* 범위의 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-301">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-302">다음 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-302">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="e96f2-303">이 예제에서는 대체는 비교자 DinoCompare 구현 하는 명명 된 문자열에 대 한 정의 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-303">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="e96f2-304">다음과 같이 작동 되는 비교자:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-304">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="e96f2-305">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-305">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="e96f2-306">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="e96f2-306">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="e96f2-307">A <xref:System.Collections.Generic.List%601> 문자열의 만들고 5 개의 예제 공룡과 예제의 이름으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-307">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="e96f2-308">두 그룹의 각 이름은 특정 정렬 순서에 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-308">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="e96f2-309">목록이 표시 됩니다, 대체 비교자를 사용 하 여 초 식의 범위에 정렬 하 고 목록을 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-309">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-310"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드는 다음 초 식의 범위에만 "Brachiosaurus"를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-310">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="e96f2-311">문자열이 없습니다 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)에서 반환 되는 음수의는 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드는 새 문자열을 삽입 하기 위한 인덱스로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-311">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-312">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-312">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-313">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-313">-or-</span>
          </span>
          <span data-ttu-id="e96f2-314">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-314">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-315">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-315">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-316">
            <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-316">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-317">크기를 조정하지 않고 내부 데이터 구조가 보유할 수 있는 전체 요소 수를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-317">Gets or sets the total number of elements the internal data structure can hold without resizing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-318">크기를 조정하지 않고 <see cref="T:System.Collections.Generic.List`1" />에 포함될 수 있는 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-318">The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-319"><xref:System.Collections.Generic.List%601.Capacity%2A> 요소의 수가 하는 <xref:System.Collections.Generic.List%601> 저장할 수를 조정 하지 않고 필요한 있지만 <xref:System.Collections.Generic.List%601.Count%2A> 에 실제로 있는 요소의 수가는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-319"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-320"><xref:System.Collections.Generic.List%601.Capacity%2A> 보다 크거나 같은 경우는 항상 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-320"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="e96f2-321">경우 <xref:System.Collections.Generic.List%601.Count%2A> 초과 <xref:System.Collections.Generic.List%601.Capacity%2A> 요소를 추가 하는 동안 용량이 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 자동으로 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-321">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="e96f2-322">용량은 수보다 크게 증가 하 고 사용 되는 메모리를 줄이기 위해 원하는 경우는 <xref:System.Collections.Generic.List%601>를 호출 하 여 용량을 줄일 수 있습니다는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드 또는 설정 하 여는 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성 더 낮은 값을 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-322">If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value.</span></span> <span data-ttu-id="e96f2-323">때의 값 <xref:System.Collections.Generic.List%601.Capacity%2A> 설정 명시적으로 지정된 된 용량을 수용 하기 위해 내부 배열은 다시 할당 하 고 모든 요소 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-323">When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</span></span>  
  
 <span data-ttu-id="e96f2-324">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (*n*) 작업, 여기서 *n* 새 용량입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-324">Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-325">다음 예제에서는 용량 및 개수를 확인 하는 <xref:System.Collections.Generic.List%601> 간단한 비즈니스 개체를 포함 하 고 사용 하 여는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 추가 용량을 제거 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-325">The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-326">다음 예제와 <xref:System.Collections.Generic.List%601.Capacity%2A> 목록 수명의 여러 지점에 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-326">The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list.</span></span> <span data-ttu-id="e96f2-327">용량이 0 사용 하 여 문자열의 목록을 만들려면 기본 생성자 사용 및 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성은이를 보여 주려면 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-327">The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this.</span></span> <span data-ttu-id="e96f2-328">후는 <xref:System.Collections.Generic.List%601.Add%2A> 는 항목을 나열, 메서드는 여러 개의 항목을 추가 하는 데 사용 차례로 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성은 표시 함께 다시는 <xref:System.Collections.Generic.List%601.Count%2A> 속성을 표시 하 여 용량이 필요에 따라 증가 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-328">After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="e96f2-329"><xref:System.Collections.Generic.List%601.Capacity%2A> 후에 다시 속성은 표시의 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드는 개수와 일치 하도록 용량을 줄이기 위해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-329">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count.</span></span> <span data-ttu-id="e96f2-330">마지막으로 <xref:System.Collections.Generic.List%601.Clear%2A> 메서드를 사용 하 여 목록에서 모든 항목을 제거 하 고 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성이 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-330">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-331">
            <see cref="P:System.Collections.Generic.List`1.Capacity" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 작은 값으로 설정되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-331">
              <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="e96f2-332">시스템에 사용 가능한 메모리가 부족합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-332">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-333">
            <see cref="T:System.Collections.Generic.List\`1" />에서 모든 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-333">Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-334"><xref:System.Collections.Generic.List%601.Count%2A> 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-334"><xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="e96f2-335"><xref:System.Collections.Generic.List%601.Capacity%2A> 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-335"><xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="e96f2-336">용량을 다시 설정 하는 <xref:System.Collections.Generic.List%601>, 호출의 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드 또는 집합은 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성을 직접 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-336">To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly.</span></span> <span data-ttu-id="e96f2-337">용량 메모리를 다시 할당 하 고 복사에 있는 모든 요소는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-337">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span> <span data-ttu-id="e96f2-338">빈 트리밍 <xref:System.Collections.Generic.List%601> 의 용량 설정는 <xref:System.Collections.Generic.List%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-338">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="e96f2-339">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-339">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-340">다음 예제는 <xref:System.Collections.Generic.List%601.Clear%2A> 메서드 및 기타 다양 한 속성과 메서드는 <xref:System.Collections.Generic.List%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-340">The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="e96f2-341"><xref:System.Collections.Generic.List%601.Clear%2A> 메서드 목록에서 모든 항목을 제거 하는 프로그램의 끝에는 및 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-341">The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-342">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-342">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-343">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-343">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-344">
            <see cref="T:System.Collections.Generic.List`1" />에 요소가 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-344">Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-345">
            <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-345">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-346">이 메서드는 개체의 구현에 의해 정의 된 대로 기본 같음 비교자를 사용 하 여 일치 여부를 확인는 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 방법을 `T` (목록에 있는 값의 유형).</span><span class="sxs-lookup"><span data-stu-id="e96f2-346">This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method for `T` (the type of values in the list).</span></span>  
  
 <span data-ttu-id="e96f2-347">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-347">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-348">다음 예제는 <xref:System.Collections.Generic.List%601.Contains%2A> 및 <xref:System.Collections.Generic.List%601.Exists%2A> 에 대 한 메서드는 <xref:System.Collections.Generic.List%601> 구현 하는 간단한 비즈니스 개체를 포함 하는 <xref:System.IEquatable%601.Equals%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-348">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-349">다음 예제에서는 복합 형식 개체의 목록이 들어 `Cube`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-349">The following example contains a list of complex objects of type `Cube`.</span></span> <span data-ttu-id="e96f2-350">`Cube` 클래스가 구현 하는 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 메서드를 두 개의 큐브 차원을 동일한 경우 같은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-350">The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method so that two cubes are considered equal if their dimensions are the same.</span></span> <span data-ttu-id="e96f2-351">이 예제에서는 <xref:System.Collections.Generic.List%601.Contains%2A> 메서드 반환 `true`지정된 된 크기를 가지는 큐브에 이미 컬렉션에에서 포함 되어 있으므로, 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-351">In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e96f2-352">대상 배열 요소의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-352">The type of the elements of the target array.</span>
          </span>
        </typeparam>
        <param name="converter">
          <span data-ttu-id="e96f2-353">각 요소를 한 형식에서 다른 형식으로 변환하는 <see cref="T:System.Converter`2" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-353">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-354">현재 <see cref="T:System.Collections.Generic.List`1" />의 요소를 다른 형식으로 변환하고 변환된 요소를 포함하는 목록을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-354">Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-355">현재 <see cref="T:System.Collections.Generic.List`1" />에서 변환된 요소를 포함하는 대상 유형의 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-355">A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-356"><xref:System.Converter%602> 개체를 대상 형식으로 변환 하는 메서드에 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-356">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="e96f2-357">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Converter%602> 대리자 및 변환된 된 요소에 새 저장 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-357">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-358">현재 <xref:System.Collections.Generic.List%601> 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-358">The current <xref:System.Collections.Generic.List%601> remains unchanged.</span></span>  
  
 <span data-ttu-id="e96f2-359">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-359">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-360">라는 메서드를 정의 하는 다음 예제에서는 `PointFToPoint` 변환 하는 <xref:System.Drawing.PointF> 구조체는 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-360">The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="e96f2-361">만듭니다는 <xref:System.Collections.Generic.List%601> 의 <xref:System.Drawing.PointF> 구조, 만듭니다는 `Converter\<PointF, Point>` 위임 (`Converter(Of PointF, Point)` Visual basic에서)를 나타내는 `PointFToPoint` 메서드를에 대리자를 전달는 <xref:System.Collections.Generic.List%601.ConvertAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-361">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method.</span></span> <span data-ttu-id="e96f2-362"><xref:System.Collections.Generic.List%601.ConvertAll%2A> 메서드 전달 하는 입력 목록의 각 요소는 `PointFToPoint` 메서드를 새 목록으로 변환된 된 요소를 배치 <xref:System.Drawing.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-362">The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="e96f2-363">두 목록은 모두 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-363">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-364">
            <paramref name="converter" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-364">
              <paramref name="converter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-365">
            <see cref="T:System.Collections.Generic.List`1" />이나 그 일부를 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-365">Copies the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it to an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="e96f2-366">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-366">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-367">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-367">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-368">대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-368">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-369">이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사해올 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-369">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="e96f2-370">요소가 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-370">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-371">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-371">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-372">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.CopyTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-372">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="e96f2-373">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 5 개 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-373">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="e96f2-374">빈 문자열 배열을 15 요소를 만든 및 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> 메서드 오버 로드는 목록의 모든 요소는 배열의 첫 번째 요소에서 시작 하는 배열에 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-374">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="e96f2-375"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> 메서드 오버 로드는의 모든 요소 6 배열 인덱스에서 시작 하는 배열에 대 한 목록 (배열)를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-375">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="e96f2-376">마지막으로 <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 배열에서 시작 하는 배열에 인덱스 12 (종료 인덱스 11 비어 있음), 인덱스 2로 시작 하 고 목록에서 3 개 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-376">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="e96f2-377">그러면 배열 콘텐츠가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-377">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-378">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-378">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-379">소스 <see cref="T:System.Collections.Generic.List`1" /> 요소 수가 대상 <paramref name="array" />를 포함할 수 있는 요소 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-379">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="e96f2-380">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-380">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-381">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-381">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="e96f2-382">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-382">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-383">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-383">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-384">이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사해올 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-384">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="e96f2-385">요소가 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-385">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-386">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-386">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-387">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.CopyTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-387">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="e96f2-388">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 5 개 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-388">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="e96f2-389">빈 문자열 배열을 15 요소를 만든 및 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> 메서드 오버 로드는 목록의 모든 요소는 배열의 첫 번째 요소에서 시작 하는 배열에 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-389">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="e96f2-390"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> 메서드 오버 로드는의 모든 요소 6 배열 인덱스에서 시작 하는 배열에 대 한 목록 (배열)를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-390">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="e96f2-391">마지막으로 <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 배열에서 시작 하는 배열에 인덱스 12 (종료 인덱스 11 비어 있음), 인덱스 2로 시작 하 고 목록에서 3 개 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-391">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="e96f2-392">그러면 배열 콘텐츠가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-392">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-393">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-393">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-394">
            <paramref name="arrayIndex" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-394">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-395">소스 <see cref="T:System.Collections.Generic.List`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-395">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-396">소스 <see cref="T:System.Collections.Generic.List`1" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-396">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</span>
          </span>
        </param>
        <param name="array">
          <span data-ttu-id="e96f2-397">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-397">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-398">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-398">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="e96f2-399">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-399">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-400">복사할 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-400">The number of elements to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-401">대상 배열의 지정된 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소를 호환되는 1차원 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-401">Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-402">이 방법은 사용 하 여 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사해올 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-402">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="e96f2-403">요소가 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-403">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-404">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-404">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-405">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.CopyTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-405">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="e96f2-406">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 5 개 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-406">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="e96f2-407">빈 문자열 배열을 15 요소를 만든 및 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> 메서드 오버 로드는 목록의 모든 요소는 배열의 첫 번째 요소에서 시작 하는 배열에 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-407">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="e96f2-408"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> 메서드 오버 로드는의 모든 요소 6 배열 인덱스에서 시작 하는 배열에 대 한 목록 (배열)를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-408">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="e96f2-409">마지막으로 <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 배열에서 시작 하는 배열에 인덱스 12 (종료 인덱스 11 비어 있음), 인덱스 2로 시작 하 고 목록에서 3 개 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-409">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="e96f2-410">그러면 배열 콘텐츠가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-410">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-411">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-411">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-412">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-412">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-413">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-413">-or-</span>
          </span>
          <span data-ttu-id="e96f2-414">
            <paramref name="arrayIndex" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-414">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-415">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-415">-or-</span>
          </span>
          <span data-ttu-id="e96f2-416">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-416">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-417">
            <paramref name="index" />가 소스 <see cref="T:System.Collections.Generic.List`1" />의 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-417">
              <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-418">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-418">-or-</span>
          </span>
          <span data-ttu-id="e96f2-419">소스 <see cref="T:System.Collections.Generic.List`1" />의 <paramref name="index" />부터 끝까지에 포함된 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지의 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-419">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-420">
            <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-420">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-421">
            <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-421">The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-422"><xref:System.Collections.Generic.List%601.Capacity%2A> 요소의 수가 하는 <xref:System.Collections.Generic.List%601> 크기를 조정 하지 전에 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-422"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required.</span></span> <span data-ttu-id="e96f2-423"><xref:System.Collections.Generic.List%601.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-423"><xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-424"><xref:System.Collections.Generic.List%601.Capacity%2A> 보다 크거나 같은 경우는 항상 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-424"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="e96f2-425">경우 <xref:System.Collections.Generic.List%601.Count%2A> 초과 <xref:System.Collections.Generic.List%601.Capacity%2A> 요소를 추가 하는 동안 용량이 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 자동으로 다시 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-425">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="e96f2-426">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-426">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-427">다음 예제에서는 용량 및 개수를 확인 하는 <xref:System.Collections.Generic.List%601> 간단한 비즈니스 개체를 포함 하 고 사용 하 여는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 추가 용량을 제거 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-427">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-428">다음 예제에서는 값이 표시는 <xref:System.Collections.Generic.List%601.Count%2A> 목록 수명의 다양 한 지점에 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-428">The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list.</span></span> <span data-ttu-id="e96f2-429">요소를 표시 하 고 목록에 만들고 채운 후의 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-429">After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="e96f2-430">이러한 속성은 한 후 다시 표시는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드가 호출을 하 고 목록의 내용을 후에 다시 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-430">These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-431">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-431">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-432">지정된 조건자에 정의된 조건과 일치하는 요소가 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-432">Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-433">지정된 조건자에 정의된 조건과 일치하는 요소가 하나 이상 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-433">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-434"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-434">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-435">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 일치 하는 경우, 대리자 및 처리 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-435">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="e96f2-436">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-436">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-437">다음 예제는 <xref:System.Collections.Generic.List%601.Contains%2A> 및 <xref:System.Collections.Generic.List%601.Exists%2A> 에 대 한 메서드는 <xref:System.Collections.Generic.List%601> 구현 하는 간단한 비즈니스 개체를 포함 하는 <xref:System.IEquatable%601.Equals%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-437">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-438">다음 예제는 <xref:System.Collections.Generic.List%601.Exists%2A> 메서드와 사용 하는 몇 가지 다른 메서드는 <xref:System.Predicate%601> 제네릭 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-438">The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="e96f2-439">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-439">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="e96f2-440">이 예제에서는 또한 라는 검색 조건자 메서드를 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-440">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="e96f2-441"><xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, 및 <xref:System.Collections.Generic.List%601.FindAll%2A> 메서드는 검색 조건자 메서드를 사용 하 여 목록을 검색 하는 데 사용 됩니다 차례로 <xref:System.Collections.Generic.List%601.RemoveAll%2A> 메서드는 "saurus"로 끝나는 모든 항목을 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-441">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span>  
  
 <span data-ttu-id="e96f2-442">마지막으로 <xref:System.Collections.Generic.List%601.Exists%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-442">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called.</span></span> <span data-ttu-id="e96f2-443">각 요소에 전달 하는 처음부터 목록 트래버스할는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-443">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="e96f2-444">검색이 중지 되 고 메서드가 반환 되는 `true` 경우는 `EndsWithSaurus` 메서드 반환 `true` 모든 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-444">The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element.</span></span> <span data-ttu-id="e96f2-445"><xref:System.Collections.Generic.List%601.Exists%2A> 메서드 반환 `false` 제거 되어 해당 요소가 모두 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-445">The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-446">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-446">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="e96f2-447">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-447">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-448">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-448">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-449">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-449">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-450">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-450">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-451">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-451">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-452"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-452">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-453">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Predicate%601> 를 앞으로 이동 하는 대리자는 <xref:System.Collections.Generic.List%601>첫 번째 요소부터 마지막 요소까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-453">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="e96f2-454">일치 하는 경우 처리가 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-454">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e96f2-455">값 형식을 포함 하는 목록을 검색할 때 형식에 대 한 기본값 검색 조건자를 충족 하지 않습니다 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-455">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="e96f2-456">그렇지 않은 경우 일치 항목이 없는 찾았음을 나타내는 기본 값 및 유형에 대 한 기본값을가 하는 목록 요소를 구분 하기 위해 방식은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-456">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="e96f2-457">사용 하 여 검색 조건자를 충족 하는 경우는 <xref:System.Collections.Generic.List%601.FindIndex%2A> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-457">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="e96f2-458">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-458">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-459">다음 예제는 <xref:System.Collections.Generic.List%601.Find%2A> 메서드를 한 <xref:System.Collections.Generic.List%601> 간단한 복잡 한 개체를 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-459">The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-460">다음 예제에서는 위한 좋은 메서드는 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-460">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="e96f2-461">에 대 한 예제는 <xref:System.Collections.Generic.List%601> 클래스 포함 `book` 클래스의 개체 `Book`, 데이터를 사용 하는 [샘플 XML 파일: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-461">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="e96f2-462">`FillList` 메서드 예제에서 사용 하 여 [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) 의 속성 값을 XML에서 값을 구문 분석 하는 `book` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-462">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="e96f2-463">다음 표에서 find 메서드에 제공 하는 예제를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-463">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="e96f2-464">메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-464">Method</span></span>|<span data-ttu-id="e96f2-465">예</span><span class="sxs-lookup"><span data-stu-id="e96f2-465">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-466">ID를 사용 하 여 책을 찾습니다는 `IDToFind` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-466">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-467">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-467">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-468">해당 갖는 모든 책 찾기 `Genre` 속성은 "컴퓨터"를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-468">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-469">사용 하 여 2001 하기 전에 게시 날짜가 들어 있는 컬렉션에서 마지막 책을 찾습니다는 `PubBefore2001` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-469">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-470">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-470">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-471">사용 하 여 첫 번째 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-471">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-472">사용 하 여 마지막 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-472">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-473">컬렉션의 절반 두 번째에서 컴퓨터의 첫 번째 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-473">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-474">컬렉션의 절반 두 번째에서 마지막 컴퓨터 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-474">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-475">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-475">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-476">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-476">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-477">지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-477">Retrieves all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-478">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 빈 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-478">A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-479"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-479">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-480">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Predicate%601> 대리자와 조건과 일치 하는 요소는 저장 반환 된 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-480">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-481">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-481">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-482">다음 예제에서는 위한 좋은 메서드는 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-482">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="e96f2-483">에 대 한 예제는 <xref:System.Collections.Generic.List%601> 클래스 포함 `book` 클래스의 개체 `Book`, 데이터를 사용 하는 [샘플 XML 파일: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-483">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="e96f2-484">`FillList` 메서드 예제에서 사용 하 여 [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) 의 속성 값을 XML에서 값을 구문 분석 하는 `book` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-484">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="e96f2-485">다음 표에서 find 메서드에 제공 하는 예제를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-485">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="e96f2-486">메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-486">Method</span></span>|<span data-ttu-id="e96f2-487">예</span><span class="sxs-lookup"><span data-stu-id="e96f2-487">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-488">ID를 사용 하 여 책을 찾습니다는 `IDToFind` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-488">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-489">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-489">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-490">해당 갖는 모든 책 찾기 `Genre` 속성은 "컴퓨터"를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-490">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-491">사용 하 여 2001 하기 전에 게시 날짜가 들어 있는 컬렉션에서 마지막 책을 찾습니다는 `PubBefore2001` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-491">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-492">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-492">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-493">사용 하 여 첫 번째 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-493">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-494">사용 하 여 마지막 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-494">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-495">컬렉션의 절반 두 번째에서 컴퓨터의 첫 번째 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-495">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-496">컬렉션의 절반 두 번째에서 마지막 컴퓨터 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-496">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-497">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-497">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-498">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 <see cref="T:System.Collections.Generic.List`1" />이나 그 일부에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-498">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
          <span data-ttu-id="e96f2-499">이 메서드는 조건이 일치하는 항목이 없는 경우 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-499">This method returns -1 if an item that matches the conditions is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-500">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-500">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-501">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-501">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-502">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-502">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-503"><xref:System.Collections.Generic.List%601> 검색은 앞으로 첫 번째 요소부터 마지막 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-503">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="e96f2-504"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-504">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-505">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-505">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="e96f2-506">대리자에 서명을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-506">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="e96f2-507">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-507">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-508">다음 예제에서는 정의 `Employee` 두 필드를 사용 하 여 클래스 `Name` 및 `Id`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-508">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="e96f2-509">또한 정의 `EmployeeSearch` 단일 메서드를 사용 하 여 클래스 `StartsWith`, 나타내는 여부는 `Employee.Name` 필드의 지정한 부분에 제공 된 시작는 `EmployeeSearch` 클래스 생성자 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-509">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="e96f2-510">이 메서드의 서명은 참고</span><span class="sxs-lookup"><span data-stu-id="e96f2-510">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="e96f2-511">에 전달 될 수 있는 대리자의 서명과에 해당 하는 <xref:System.Collections.Generic.List%601.FindIndex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-511">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="e96f2-512">이 예제에서는 인스턴스화합니다는 `List<Employee>` 개체를 추가 하는 다양 한 `Employee` 를 차례로 호출 하는 개체는 <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> 전체 컬렉션을 첫 번째에 대해 처음으로 검색을 두 번 메서드 `Employee` 개체 `Name` 필드가 시작 될 "J" 및 첫 번째에 대 한 두 번째로 `Employee` 개체 `Name` "Ju"로 시작 하는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-512">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with "J", and the second time for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-513">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-513">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="e96f2-514">검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-514">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="e96f2-515">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-515">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-516">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-516">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-517">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-517">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-518"><xref:System.Collections.Generic.List%601> 까지 검색은 `startIndex` 마지막 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-518">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="e96f2-519"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-519">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-520">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-520">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="e96f2-521">대리자에 서명을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-521">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="e96f2-522">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 의 요소 수 `startIndex` 의 끝에는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-522">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-523">다음 예제에서는 정의 `Employee` 두 필드를 사용 하 여 클래스 `Name` 및 `Id`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-523">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="e96f2-524">또한 정의 `EmployeeSearch` 단일 메서드를 사용 하 여 클래스 `StartsWith`, 나타내는 여부는 `Employee.Name` 필드의 지정한 부분에 제공 된 시작는 `EmployeeSearch` 클래스 생성자 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-524">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="e96f2-525">이 메서드의 서명은 참고</span><span class="sxs-lookup"><span data-stu-id="e96f2-525">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="e96f2-526">에 전달 될 수 있는 대리자의 서명과에 해당 하는 <xref:System.Collections.Generic.List%601.FindIndex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-526">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="e96f2-527">이 예제에서는 인스턴스화합니다는 `List<Employee>` 개체를 추가 하는 다양 한 `Employee` 를 차례로 호출 하는 개체는 <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> 메서드 (즉, 인덱스 4에 있는 멤버)의 5 번째 멤버로 시작 해 컬렉션에서 검색할를 두 번입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-527">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</span></span> <span data-ttu-id="e96f2-528">첫 번째 처음으로 검색 `Employee` 개체 `Name` "J"로 시작 하는 필드를 두 번 검색할 첫 번째; `Employee` 개체 `Name` "Ju"로 시작 하는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-528">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-529">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-529">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-530">
            <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-530">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="e96f2-531">검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-531">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-532">검색할 섹션에 있는 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-532">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="e96f2-533">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-533">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-534">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-534">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-535">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-535">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-536"><xref:System.Collections.Generic.List%601> 까지 검색은 `startIndex` 에서 끝나는 `startIndex` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-536">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="e96f2-537"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-537">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-538">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-538">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="e96f2-539">대리자에 서명을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-539">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="e96f2-540">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-540">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-541">다음 예제에서는 정의 `Employee` 두 필드를 사용 하 여 클래스 `Name` 및 `Id`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-541">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="e96f2-542">또한 정의 `EmployeeSearch` 단일 메서드를 사용 하 여 클래스 `StartsWith`, 나타내는 여부는 `Employee.Name` 필드의 지정한 부분에 제공 된 시작는 `EmployeeSearch` 클래스 생성자 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-542">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="e96f2-543">이 메서드의 서명은 참고</span><span class="sxs-lookup"><span data-stu-id="e96f2-543">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="e96f2-544">에 전달 될 수 있는 대리자의 서명과에 해당 하는 <xref:System.Collections.Generic.List%601.FindIndex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-544">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="e96f2-545">이 예제에서는 인스턴스화합니다는 `List<Employee>` 개체를 추가 하는 다양 한 `Employee` 를 차례로 호출 하는 개체는 <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> 컬렉션에서 전체 검색을 두 번 메서드 (즉, 멤버 인덱스 0 인덱스 <xref:System.Collections.Generic.List%601.Count%2A> -1).</span><span class="sxs-lookup"><span data-stu-id="e96f2-545">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1).</span></span> <span data-ttu-id="e96f2-546">첫 번째 처음으로 검색 `Employee` 개체 `Name` "J"로 시작 하는 필드를 두 번 검색할 첫 번째; `Employee` 개체 `Name` "Ju"로 시작 하는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-546">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-547">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-547">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-548">
            <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-548">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-549">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-549">-or-</span>
          </span>
          <span data-ttu-id="e96f2-550">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-550">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-551">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-551">-or-</span>
          </span>
          <span data-ttu-id="e96f2-552">
            <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 섹션을 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-552">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-553">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-553">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-554">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-554">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-555">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-555">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-556"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-556">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-557">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Predicate%601> 뒤로 이동 대리자는 <xref:System.Collections.Generic.List%601>은 지난 요소의 시작 하 고 첫 번째 요소까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-557">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="e96f2-558">일치 하는 경우 처리가 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-558">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e96f2-559">값 형식을 포함 하는 목록을 검색할 때 형식에 대 한 기본값 검색 조건자를 충족 하지 않습니다 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-559">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="e96f2-560">그렇지 않은 경우 일치 항목이 없는 찾았음을 나타내는 기본 값 및 유형에 대 한 기본값을가 하는 목록 요소를 구분 하기 위해 방식은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-560">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="e96f2-561">사용 하 여 검색 조건자를 충족 하는 경우는 <xref:System.Collections.Generic.List%601.FindLastIndex%2A> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-561">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="e96f2-562">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-562">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-563">다음 예제에서는 위한 좋은 메서드는 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-563">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="e96f2-564">에 대 한 예제는 <xref:System.Collections.Generic.List%601> 클래스 포함 `book` 클래스의 개체 `Book`, 데이터를 사용 하는 [샘플 XML 파일: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-564">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="e96f2-565">`FillList` 메서드 예제에서 사용 하 여 [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) 의 속성 값을 XML에서 값을 구문 분석 하는 `book` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-565">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="e96f2-566">다음 표에서 find 메서드에 제공 하는 예제를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-566">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="e96f2-567">메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-567">Method</span></span>|<span data-ttu-id="e96f2-568">예</span><span class="sxs-lookup"><span data-stu-id="e96f2-568">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-569">ID를 사용 하 여 책을 찾습니다는 `IDToFind` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-569">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-570">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-570">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-571">해당 갖는 모든 책 찾기 `Genre` 속성은 "컴퓨터"를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-571">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-572">사용 하 여 2001 하기 전에 게시 날짜가 들어 있는 컬렉션에서 마지막 책을 찾습니다는 `PubBefore2001` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-572">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-573">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-573">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-574">사용 하 여 첫 번째 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-574">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-575">사용 하 여 마지막 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-575">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-576">컬렉션의 절반 두 번째에서 컴퓨터의 첫 번째 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-576">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-577">컬렉션의 절반 두 번째에서 마지막 컴퓨터 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-577">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-578">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-578">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-579">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 <see cref="T:System.Collections.Generic.List`1" />이나 그 일부에서 마지막으로 검색한 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-579">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-580">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-580">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-581">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-581">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-582">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-582">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-583"><xref:System.Collections.Generic.List%601> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-583">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="e96f2-584"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-584">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-585">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-585">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="e96f2-586">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-586">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-587">다음 예제에서는 위한 좋은 메서드는 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-587">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="e96f2-588">에 대 한 예제는 <xref:System.Collections.Generic.List%601> 클래스 포함 `book` 클래스의 개체 `Book`, 데이터를 사용 하는 [샘플 XML 파일: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-588">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="e96f2-589">`FillList` 메서드 예제에서 사용 하 여 [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) 의 속성 값을 XML에서 값을 구문 분석 하는 `book` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-589">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="e96f2-590">다음 표에서 find 메서드에 제공 하는 예제를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-590">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="e96f2-591">메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-591">Method</span></span>|<span data-ttu-id="e96f2-592">예</span><span class="sxs-lookup"><span data-stu-id="e96f2-592">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-593">ID를 사용 하 여 책을 찾습니다는 `IDToFind` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-593">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-594">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-594">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-595">해당 갖는 모든 책 찾기 `Genre` 속성은 "컴퓨터"를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-595">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-596">사용 하 여 2001 하기 전에 게시 날짜가 들어 있는 컬렉션에서 마지막 책을 찾습니다는 `PubBefore2001` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-596">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-597">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-597">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-598">사용 하 여 첫 번째 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-598">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-599">사용 하 여 마지막 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-599">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-600">컬렉션의 절반 두 번째에서 컴퓨터의 첫 번째 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-600">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-601">컬렉션의 절반 두 번째에서 마지막 컴퓨터 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-601">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-602">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-602">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="e96f2-603">역방향 검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-603">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="e96f2-604">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-604">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-605">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-605">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-606">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-606">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-607"><xref:System.Collections.Generic.List%601> 뒤로 검색 됩니다에 `startIndex` 첫 번째 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-607">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="e96f2-608"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-608">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-609">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-609">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="e96f2-610">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 의 시작 부분에서 요소 수는는 <xref:System.Collections.Generic.List%601> 를 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-610">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-611">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-611">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-612">
            <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-612">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="e96f2-613">역방향 검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-613">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-614">검색할 섹션에 있는 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-614">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="e96f2-615">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-615">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-616">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-616">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-617">
            <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-617">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-618"><xref:System.Collections.Generic.List%601> 뒤로 검색 됩니다에 `startIndex` 에서 끝나는 `startIndex` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-618">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="e96f2-619"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-619">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-620">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Predicate%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-620">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="e96f2-621">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-621">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-622">다음 예제에서는 위한 좋은 메서드는 <xref:System.Collections.Generic.List%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-622">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="e96f2-623">에 대 한 예제는 <xref:System.Collections.Generic.List%601> 클래스 포함 `book` 클래스의 개체 `Book`, 데이터를 사용 하는 [샘플 XML 파일: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-623">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="e96f2-624">`FillList` 메서드 예제에서 사용 하 여 [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) 의 속성 값을 XML에서 값을 구문 분석 하는 `book` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-624">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="e96f2-625">다음 표에서 find 메서드에 제공 하는 예제를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-625">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="e96f2-626">메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-626">Method</span></span>|<span data-ttu-id="e96f2-627">예</span><span class="sxs-lookup"><span data-stu-id="e96f2-627">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-628">ID를 사용 하 여 책을 찾습니다는 `IDToFind` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-628">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-629">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-629">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-630">해당 갖는 모든 책 찾기 `Genre` 속성은 "컴퓨터"를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-630">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-631">사용 하 여 2001 하기 전에 게시 날짜가 들어 있는 컬렉션에서 마지막 책을 찾습니다는 `PubBefore2001` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-631">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="e96f2-632">C# 예제에서는 익명 대리자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-632">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-633">사용 하 여 첫 번째 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-633">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-634">사용 하 여 마지막 컴퓨터 책의 인덱스를 찾습니다는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-634">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-635">컬렉션의 절반 두 번째에서 컴퓨터의 첫 번째 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-635">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="e96f2-636">컬렉션의 절반 두 번째에서 마지막 컴퓨터 책의 인덱스를 찾습니다를 사용 하는 `FindComputer` predicate 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-636">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-637">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-637">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-638">
            <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-638">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-639">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-639">-or-</span>
          </span>
          <span data-ttu-id="e96f2-640">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-640">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-641">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-641">-or-</span>
          </span>
          <span data-ttu-id="e96f2-642">
            <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 섹션을 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-642">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="e96f2-643">
            <see cref="T:System.Collections.Generic.List`1" />의 각 요소에 대해 수행할 <see cref="T:System.Action`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-643">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-644">
            <see cref="T:System.Collections.Generic.List`1" />의 각 요소에 대해 지정된 작업을 수행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-644">Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-645"><xref:System.Action%601> 개체에 동작을 수행 하는 메서드에 대리자에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-645">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="e96f2-646">현재 요소의 <xref:System.Collections.Generic.List%601> 에 개별적으로 전달 되는 <xref:System.Action%601> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-646">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.</span></span>  
  
 <span data-ttu-id="e96f2-647">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-647">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-648">본문에는 내부 컬렉션을 수정 된 <xref:System.Action%601> 대리자는 지원 되지 않으며 정의 되지 않은 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-648">Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-649">다음 예제에서는 <xref:System.Action%601> 의 내용을 인쇄 하는 대리자는 <xref:System.Collections.Generic.List%601> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-649">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="e96f2-650">이 예제는 `Print` 메서드는 목록의 내용을 콘솔에 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-650">In this example the `Print` method is used to display the contents of the list to the console.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-651">사용 하 여 콘텐츠를 표시 하는 것 외에도 `Print` 메서드는 C# 예제는 콘솔에 결과 표시 하려면의 사용법을 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-651">In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-652">
            <paramref name="action" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-652">
              <paramref name="action" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-653">컬렉션의 요소가 수정되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-653">An element in the collection has been modified.</span>
          </span>
        </exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-654">
            <see cref="T:System.Collections.Generic.List`1" />를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-654">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-655">
            <see cref="T:System.Collections.Generic.List`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.List`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-655">A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-656">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-656">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="e96f2-657">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-657">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="e96f2-658">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-658">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="e96f2-659">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-659">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="e96f2-660">이 위치에서의 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 속성이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-660">At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="e96f2-661">따라서 호출 해야 합니다는 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-661">Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-662"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 속성 반환 될 때까지 동일한 개체 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-662">The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="e96f2-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="e96f2-664">경우 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-664">If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e96f2-665">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-665">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="e96f2-666">마지막으로 호출 하는 경우 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-666">If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e96f2-667"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-667">You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="e96f2-668">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-668">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e96f2-669">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-669">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="e96f2-670">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-670">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e96f2-671">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-671">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e96f2-672">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-672">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e96f2-673"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-673">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="e96f2-674">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e96f2-674">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-675">범위가 시작되는 <see cref="T:System.Collections.Generic.List`1" /> 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-675">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-676">범위의 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-676">The number of elements in the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-677">소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-677">Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-678">소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-678">A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-679">해당 컬렉션의 하위 집합 또는 참조 형식, 컬렉션의 단순 복사본을 컬렉션의 요소에 대 한 참조만 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-679">A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</span></span> <span data-ttu-id="e96f2-680">개체 자체가 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-680">The objects themselves are not copied.</span></span> <span data-ttu-id="e96f2-681">새 목록에 참조를 원래 목록에 참조로 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-681">The references in the new list point to the same objects as the references in the original list.</span></span>  
  
 <span data-ttu-id="e96f2-682">컬렉션의 요소를 포함 하는 값 형식 컬렉션 또는 컬렉션의 하위 집합의 단순 복사본입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-682">A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</span></span> <span data-ttu-id="e96f2-683">그러나 컬렉션의 요소는 다른 개체에 대 한 참조가 들어 있으면 해당 개체 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-683">However, if the elements of the collection contain references to other objects, those objects are not copied.</span></span> <span data-ttu-id="e96f2-684">새 컬렉션의 요소에 참조 개체는 원본 컬렉션의 요소에 대 한 참조와 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-684">The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</span></span>  
  
 <span data-ttu-id="e96f2-685">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-685">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="e96f2-686">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-686">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-687">다음 예제는 <xref:System.Collections.Generic.List%601.GetRange%2A> 메서드와는 다른 방법으로는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-687">The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-688">예의 끝에는 <xref:System.Collections.Generic.List%601.GetRange%2A> 메서드 인덱스 위치 2 부터는 목록에서 세 가지 항목을 가져오는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-688">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="e96f2-689"><xref:System.Collections.Generic.List%601.ToArray%2A> 메서드 결과에 <xref:System.Collections.Generic.List%601>, 세 요소의 배열 생성.</span><span class="sxs-lookup"><span data-stu-id="e96f2-689">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="e96f2-690">배열 요소의 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-690">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-691">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-691">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-692">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-692">-or-</span>
          </span>
          <span data-ttu-id="e96f2-693">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-693">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-694">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 올바른 범위를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-694">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-695">
            <see cref="T:System.Collections.Generic.List`1" /> 또는 그 일부에서 처음 나오는 값의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-695">Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-696">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-696">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-697">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-697">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-698">지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-698">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-699">
            <paramref name="item" />이 있으면 전체 <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-699">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-700"><xref:System.Collections.Generic.List%601> 검색은 앞으로 첫 번째 요소부터 마지막 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-700">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="e96f2-701">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-701">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-702">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-702">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-703">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-703">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-704">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-704">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-705"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> 메서드 오버 로드는 처음부터 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-705">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="e96f2-706"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하는 목록 및 목록의 끝을 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-706">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-707">마지막으로 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-707">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-708">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-708">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-709">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-709">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e96f2-710">검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-710">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="e96f2-711">0은 빈 목록에서 유효합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-711">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-712">지정된 개체를 검색하고, 지정된 인덱스에서 마지막 요소로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-712">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-713">
            <paramref name="index" />부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-713">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-714"><xref:System.Collections.Generic.List%601> 까지 검색은 `index` 마지막 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-714">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.</span></span>  
  
 <span data-ttu-id="e96f2-715">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-715">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-716">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 의 요소 수 `index` 의 끝에는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-716">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-717">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-717">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-718">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-718">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-719"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> 메서드 오버 로드는 처음부터 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-719">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="e96f2-720"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하는 목록 및 목록의 끝을 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-720">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-721">마지막으로 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-721">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-722">
            <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-722">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-723">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-723">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-724">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-724">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e96f2-725">검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-725">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="e96f2-726">0은 빈 목록에서 유효합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-726">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-727">검색할 섹션에 있는 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-727">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-728">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-728">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-729">
            <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-729">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-730"><xref:System.Collections.Generic.List%601> 까지 검색은 `index` 에서 끝나는 `index` 플러스 `count` 에서 1을 뺀 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-730">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="e96f2-731">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-731">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-732">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-732">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-733">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-733">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-734">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-734">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-735"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29> 메서드 오버 로드는 처음부터 검색 하 고 문자열의 첫 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-735">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="e96f2-736"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하는 목록 및 목록의 끝을 검색 하는 데 사용 되 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-736">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-737">마지막으로 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 두 인덱스 위치에서 시작 하는 두 항목의 범위를 검색 하는 데 사용 됩니다; 해당 범위에 검색 문자열의 인스턴스가 없는 때문에-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-737">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-738">
            <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-738">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-739">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-739">-or-</span>
          </span>
          <span data-ttu-id="e96f2-740">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-740">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-741">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-741">-or-</span>
          </span>
          <span data-ttu-id="e96f2-742">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 섹션을 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-742">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-743">
            <c>항목</c>이 삽입될 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-743">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e96f2-744">삽입할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-744">The object to insert.</span>
          </span>
          <span data-ttu-id="e96f2-745">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-745">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-746">
            <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 요소를 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-746">Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-747"><xref:System.Collections.Generic.List%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-747"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e96f2-748">경우 <xref:System.Collections.Generic.List%601.Count%2A> 이미 <xref:System.Collections.Generic.List%601.Capacity%2A>의 용량이 <xref:System.Collections.Generic.List%601> 자동으로 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-748">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="e96f2-749">경우 `index` 같으면 <xref:System.Collections.Generic.List%601.Count%2A>, `item` 의 끝에 추가 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-749">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-750">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-750">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-751">다음 예제에서는 추가, 제거 및에서 간단한 비즈니스 개체를 삽입 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-751">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="e96f2-752">다음 예제는 <xref:System.Collections.Generic.List%601.Insert%2A> 메서드와 함께 다양 한 다른의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-752">The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="e96f2-753">목록을 만든 후에 요소가 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-753">After the list is created, elements are added.</span></span> <span data-ttu-id="e96f2-754"><xref:System.Collections.Generic.List%601.Insert%2A> 가운데 목록에 항목을 삽입 하려면 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-754">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list.</span></span> <span data-ttu-id="e96f2-755">항목 나중에 제거를 사용 하 여 중복은 삽입 된 <xref:System.Collections.Generic.List%601.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-755">The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-756">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-756">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-757">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-757">-or-</span>
          </span>
          <span data-ttu-id="e96f2-758">
            <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-758">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-759">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-759">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="collection">
          <span data-ttu-id="e96f2-760">요소가 <see cref="T:System.Collections.Generic.List`1" />에 삽입되어야 하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-760">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-761">컬렉션 자체가 <see langword="null" />일 수는 없지만 <c>T</c> 형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-761">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-762">
            <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-762">Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-763"><xref:System.Collections.Generic.List%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-763"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e96f2-764">하는 경우 새 <xref:System.Collections.Generic.List%601.Count%2A> (현재 <xref:System.Collections.Generic.List%601.Count%2A> 컬렉션의 크기를 더한) 보다 커야 <xref:System.Collections.Generic.List%601.Capacity%2A>의 용량이 <xref:System.Collections.Generic.List%601> 자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 및 새 요소가 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-764">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="e96f2-765">경우 `index` 같으면 <xref:System.Collections.Generic.List%601.Count%2A>, 요소의 끝에 추가 되어 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-765">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-766">컬렉션에 있는 요소의 순서는 유지 된 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-766">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-767">이 메서드는 O는 (*n* \* *m*) 작업을 여기서 *n* 추가할 수 있는 요소의 수가 고 *m* 는<xref:System.Collections.Generic.List%601.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="e96f2-767">This method is an O(*n* \* *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-768">다음 예제에서는 <xref:System.Collections.Generic.List%601.InsertRange%2A> 메서드와의 다른 다양 한 메서드는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-768">The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-769">목록에 만들고 몇 가지 식 공룡의의 이름으로 채워진 후의 <xref:System.Collections.Generic.List%601.InsertRange%2A> 세 사나운 식 공룡의의 배열 인덱스 위치 3에서 시작 하 여 목록에 삽입할 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-769">After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-770">
            <paramref name="collection" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-770">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-771">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-771">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-772">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-772">-or-</span>
          </span>
          <span data-ttu-id="e96f2-773">
            <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-773">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-774">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-774">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-775">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-775">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-776">지정한 인덱스의 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-776">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-777"><xref:System.Collections.Generic.List%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-777"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="e96f2-778">이 속성은 `myCollection[index]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-778">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="e96f2-779">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-779">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-780">이 섹션의 예제에 <xref:System.Collections.Generic.List%601.Item%2A> 속성 (C# 인덱서) 및 다양 한 다른의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-780">The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="e96f2-781">목록 후에 만들고 사용 하 여 채울는 <xref:System.Collections.Generic.List%601.Add%2A> 메서드는 요소를 검색 및 사용 하 여 표시는 <xref:System.Collections.Generic.List%601.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-781">After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="e96f2-782">(사용 하는 예제는 <xref:System.Collections.Generic.List%601.Item%2A> 목록 요소 값을 설정 하는 속성 참조 <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span><span class="sxs-lookup"><span data-stu-id="e96f2-782">(For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-783">Visual Basic, C# 및 c + + 모든는 액세스 하기 위한 구문이 <xref:System.Collections.Generic.List%601.Item%2A> 해당 이름을 사용 하지 않고 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-783">Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name.</span></span> <span data-ttu-id="e96f2-784">대신, 포함 하는 변수는 <xref:System.Collections.Generic.List%601> 배열인 것 처럼 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-784">Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.</span></span>  
  
 <span data-ttu-id="e96f2-785">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.Generic.List%601.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-785">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="e96f2-786">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Generic.List%601.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-786">Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-787">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-787">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-788">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-788">-or-</span>
          </span>
          <span data-ttu-id="e96f2-789">
            <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-789">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-790">
            <see cref="T:System.Collections.Generic.List`1" /> 또는 그 일부에서 마지막으로 나오는 값의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-790">Returns the zero-based index of the last occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-791">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-791">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-792">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-792">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-793">지정된 개체를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-793">Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-794">전체 <see cref="T:System.Collections.Generic.List`1" />에 <paramref name="item" />이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-794">The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-795"><xref:System.Collections.Generic.List%601> 뒤로 마지막 요소에서 시작 하 고 첫 번째 요소에서 끝나는 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-795">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="e96f2-796">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-796">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-797">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-797">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-798">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-798">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-799">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-799">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-800"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> 메서드 오버 로드 끝부터 전체 목록을 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-800">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-801"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 고 문자열의 첫 번째 목록에서 검색 등과의 시작 부분에 계속 이전 버전과 목록을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-801">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="e96f2-802">마지막으로 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 네 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-802">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-803">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-803">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-804">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-804">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e96f2-805">역방향 검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-805">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-806">지정된 개체를 검색하고, 첫 번째 요소에서 지정된 인덱스로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-806">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-807">첫 번째 요소부터 <paramref name="index" />까지 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-807">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-808"><xref:System.Collections.Generic.List%601> 뒤로 검색 됩니다에 `index` 첫 번째 요소의 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-808">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.</span></span>  
  
 <span data-ttu-id="e96f2-809">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-809">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-810">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 의 시작 부분에서 요소 수는는 <xref:System.Collections.Generic.List%601> 를 `index`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-810">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-811">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-811">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-812">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-812">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-813"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> 메서드 오버 로드 끝부터 전체 목록을 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-813">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-814"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 고 문자열의 첫 번째 목록에서 검색 등과의 시작 부분에 계속 이전 버전과 목록을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-814">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="e96f2-815">마지막으로 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 네 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-815">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-816">
            <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-816">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-817">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-817">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-818">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-818">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e96f2-819">역방향 검색의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-819">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-820">검색할 섹션에 있는 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-820">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-821">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-821">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-822">
            <paramref name="count" />개의 요소를 포함하고 <paramref name="index" />에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-822">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-823"><xref:System.Collections.Generic.List%601> 뒤로 검색 됩니다에 `index` 에서 끝나는 `index` 뺀 `count` + 1, 경우 `count` 가 0 보다 크면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-823">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="e96f2-824">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-824">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-825">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-825">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-826">다음 예제에서는 세 개의 오버 로드를 모두는 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-826">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="e96f2-827">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 0과 5 인덱스 위치에 두 번 나타나는 하나의 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-827">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="e96f2-828"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> 메서드 오버 로드 끝부터 전체 목록을 검색 하 고 문자열의 두 번째 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-828">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="e96f2-829"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 메서드 오버 로드는 인덱스 위치 3 시작 하 고 문자열의 첫 번째 목록에서 검색 등과의 시작 부분에 계속 이전 버전과 목록을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-829">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="e96f2-830">마지막으로 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> 메서드 오버 로드는 4 개의 항목을 인덱스 위치 4에서 시작 하 고 뒤로 확장할 범위를 검색 하는 데 사용 됩니다 (즉, 검색 4, 3, 2 및 1 위치에 있는 항목); 검색의 인스턴스가 없는 때문에이 검색 – 1을 반환 해당 범위에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-830">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-831">
            <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-831">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-832">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-832">-or-</span>
          </span>
          <span data-ttu-id="e96f2-833">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-833">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-834">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-834">-or-</span>
          </span>
          <span data-ttu-id="e96f2-835">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 섹션을 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-835">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-836">
            <see cref="T:System.Collections.Generic.List`1" />에서 제거할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-836">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-837">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-837">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-838">
            <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-838">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-839">
            <paramref name="item" />이 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-839">
              <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-840">이 메서드는 <see langword="false" />가 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.List`1" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-840">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-841">경우 형식 `T` 구현 하는 <xref:System.IEquatable%601> 제네릭 인터페이스 같음 비교자는는 <xref:System.IEquatable%601.Equals%2A> ; 해당 인터페이스의 메서드 그렇지 않으면 기본 같음 비교자는 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-841">If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e96f2-842">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-842">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-843">다음 예제에서는 추가, 제거 및에서 간단한 비즈니스 개체를 삽입 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-843">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="e96f2-844">다음 예제에서는 <xref:System.Collections.Generic.List%601.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-844">The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span> <span data-ttu-id="e96f2-845">여러의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 제네릭 클래스는 추가, 삽입 및 목록을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-845">Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list.</span></span> <span data-ttu-id="e96f2-846">이러한 작업을 수행한 후 목록에 중복 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-846">After these operations, the list contains a duplicate.</span></span> <span data-ttu-id="e96f2-847"><xref:System.Collections.Generic.List%601.Remove%2A> 메서드를 사용 하 여 중복 항목의 첫 번째 인스턴스를 제거 하 고 내용이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-847">The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed.</span></span> <span data-ttu-id="e96f2-848"><xref:System.Collections.Generic.List%601.Remove%2A> 항상 메서드를 발견 하는 첫 번째 인스턴스를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-848">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-849">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-849">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-850">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-850">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-851">
            <see cref="T:System.Collections.Generic.List`1" />에서 제거한 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-851">The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-852"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-852">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-853">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Predicate%601> 대리자와 조건과 일치 하는 요소에서 제거 됩니다는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-853">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="e96f2-854">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-854">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-855">다음 예제는 <xref:System.Collections.Generic.List%601.RemoveAll%2A> 메서드와 사용 하는 몇 가지 다른 메서드는 <xref:System.Predicate%601> 제네릭 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-855">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="e96f2-856">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-856">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="e96f2-857">이 예제에서는 또한 라는 검색 조건자 메서드를 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-857">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="e96f2-858"><xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, 및 <xref:System.Collections.Generic.List%601.FindAll%2A> 메서드는 검색 조건자 메서드를 사용 하 여 목록을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-858">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.</span></span>  
  
 <span data-ttu-id="e96f2-859"><xref:System.Collections.Generic.List%601.RemoveAll%2A> 메서드는 "saurus"로 끝나는 모든 항목을 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-859">The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span> <span data-ttu-id="e96f2-860">각 요소에 전달 하는 처음부터 목록 트래버스할는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-860">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="e96f2-861">요소가 제거 하는 경우는 `EndsWithSaurus` 메서드 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-861">The element is removed if the `EndsWithSaurus` method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-862">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-862">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="e96f2-863">이러한 언어는 컨텍스트를 올바른 대리자를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-863">These languages infer the correct delegate from context, and create it automatically.</span></span>  
  
 <span data-ttu-id="e96f2-864">마지막으로 <xref:System.Collections.Generic.List%601.Exists%2A> 메서드 "saurus"로 끝나는 없는 문자열 목록에 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-864">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with "saurus".</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-865">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-865">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-866">제거할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-866">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-867">
            <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 있는 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-867">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-868">호출 하는 경우 <xref:System.Collections.Generic.List%601.RemoveAt%2A> 항목을 제거 하려면 목록에서 나머지 항목 제거 된 항목을 바꾸려면 매겨집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-868">When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item.</span></span> <span data-ttu-id="e96f2-869">예를 들어 인덱스 3에 있는 항목을 제거 하면 4 인덱스의 항목 3 위치로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-869">For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</span></span> <span data-ttu-id="e96f2-870">또한 목록에 있는 항목의 수 (로 표현 되는 <xref:System.Collections.Generic.List%601.Count%2A> 속성) 1 씩 감소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-870">In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.</span></span>  
  
 <span data-ttu-id="e96f2-871">이 메서드는 O는 (*n*) 작업, 여기서 *n* 됩니다 (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span><span class="sxs-lookup"><span data-stu-id="e96f2-871">This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-872">다음 예제에서는 추가, 제거 및에서 간단한 비즈니스 개체를 삽입 하는 <xref:System.Collections.Generic.List%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-872">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-873">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-873">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-874">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-874">-or-</span>
          </span>
          <span data-ttu-id="e96f2-875">
            <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-875">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-876">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-876">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-877">제거할 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-877">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-878">
            <see cref="T:System.Collections.Generic.List`1" />에서 요소의 범위를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-878">Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-879">항목이 제거 되 고에 그 뒤에 모든 요소는 <xref:System.Collections.Generic.List%601> 감소 인덱스가 `count`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-879">The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.</span></span>  
  
 <span data-ttu-id="e96f2-880">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-880">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-881">다음 예제는 <xref:System.Collections.Generic.List%601.RemoveRange%2A> 메서드와의 다른 다양 한 메서드는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-881">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-882">목록 생성 되 고 수정 된 후의 <xref:System.Collections.Generic.List%601.RemoveRange%2A> 메서드를 사용 하 여 인덱스 위치 2에서 시작 하 고 목록에서 두 개의 요소를 제거 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-882">After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-883">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-883">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-884">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-884">-or-</span>
          </span>
          <span data-ttu-id="e96f2-885">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-885">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-886">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 올바른 범위를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-886">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-887">
            <see cref="T:System.Collections.Generic.List`1" /> 또는 그 일부에서 요소의 순서를 반대로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-887">Reverses the order of the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-888">전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소의 순서를 반대로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-888">Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-889">이 방법은 사용 하 여 <xref:System.Array.Reverse%2A?displayProperty=nameWithType> 요소의 순서를 반대로 하려면.</span><span class="sxs-lookup"><span data-stu-id="e96f2-889">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="e96f2-890">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-890">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-891">다음 예제에서는 두 오버 로드는 <xref:System.Collections.Generic.List%601.Reverse%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-891">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="e96f2-892">이 예에서는 만듭니다는 <xref:System.Collections.Generic.List%601> 의 문자열 및 문자열 6 개를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-892">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="e96f2-893"><xref:System.Collections.Generic.List%601.Reverse> 목록 되돌리려면 메서드 오버 로드를 사용 하는 다음의 <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> 메서드 오버 로드는 요소 1로 시작 하 고 4 개의 요소가 포함 된 목록의 중간을 반대로 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-893">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-894">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-894">The zero-based starting index of the range to reverse.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-895">순서를 반대로 바꿀 범위의 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-895">The number of elements in the range to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-896">지정된 범위에서 요소의 순서를 반대로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-896">Reverses the order of the elements in the specified range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-897">이 방법은 사용 하 여 <xref:System.Array.Reverse%2A?displayProperty=nameWithType> 요소의 순서를 반대로 하려면.</span><span class="sxs-lookup"><span data-stu-id="e96f2-897">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="e96f2-898">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-898">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-899">다음 예제에서는 두 오버 로드는 <xref:System.Collections.Generic.List%601.Reverse%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-899">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="e96f2-900">이 예에서는 만듭니다는 <xref:System.Collections.Generic.List%601> 의 문자열 및 문자열 6 개를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-900">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="e96f2-901"><xref:System.Collections.Generic.List%601.Reverse> 목록 되돌리려면 메서드 오버 로드를 사용 하는 다음의 <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> 메서드 오버 로드는 요소 1로 시작 하 고 4 개의 요소가 포함 된 목록의 중간을 반대로 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-901">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-902">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-902">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-903">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-903">-or-</span>
          </span>
          <span data-ttu-id="e96f2-904">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-904">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-905">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 올바른 범위를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-905">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-906">
            <see cref="T:System.Collections.Generic.List`1" /> 또는 그 일부에 포함된 요소를 정렬합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-906">Sorts the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overloaded-method-syntax"></a><span data-ttu-id="e96f2-907">오버 로드 된 메서드 구문</span><span class="sxs-lookup"><span data-stu-id="e96f2-907">Overloaded method syntax</span></span>  
 <span data-ttu-id="e96f2-908"><xref:System.Collections.Generic.List%601.Sort%2A> 메서드를 사용 하면 목록에서 개체 유형에 대 한 기본 비교자를 정렬할 수 또는 고객 정렬 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-908">The  <xref:System.Collections.Generic.List%601.Sort%2A> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</span></span>  
  
 <span data-ttu-id="e96f2-909">[목록\<T >. Sort ()](xref:System.Collections.Generic.List`1.Sort*) 개체 유형의 기본 비교자를 사용 하 여 전체 목록의 요소를에서 정렬 합니다. 목록에 보관 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-909">[List\<T>.Sort()](xref:System.Collections.Generic.List`1.Sort*) Sorts the elements in the entire list using the default comparer of the object type held in the list.</span></span>  
  
 <span data-ttu-id="e96f2-910">[목록\<T >. 정렬 M (비교\<T > 비교)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29) 지정된 된 비교자를 사용 하 여 전체 목록에 요소를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-910">[List\<T>.Sort M(Comparison\<T> comparison)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29) Sorts the elements in the entire list using the specified comparer.</span></span>  
  
 <span data-ttu-id="e96f2-911">[목록\<T >. 정렬 (IComparer\<T > 비교자)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29) 요소를 사용 하 여 지정 된 전체 목록에서 정렬 <xref:System.Comparison%601?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-911">[List\<T>.Sort(IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in the entire list using the specified <xref:System.Comparison%601?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e96f2-912">[목록\<T >. 정렬 (Int32 인덱스, Int32 카운트 IComparer\<T > 비교자)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) 지정된 된 비교자를 사용 하 여 목록에서 요소의 범위에 있는 요소를 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-912">[List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.</span></span>  
  
## <a name="parameters"></a><span data-ttu-id="e96f2-913">매개 변수</span><span class="sxs-lookup"><span data-stu-id="e96f2-913">Parameters</span></span>  
  
|<span data-ttu-id="e96f2-914">매개 변수</span><span class="sxs-lookup"><span data-stu-id="e96f2-914">Parameter</span></span>|<span data-ttu-id="e96f2-915">형식</span><span class="sxs-lookup"><span data-stu-id="e96f2-915">Type</span></span>|<span data-ttu-id="e96f2-916">설명</span><span class="sxs-lookup"><span data-stu-id="e96f2-916">Description</span></span>|  
|---------------|----------|-----------------|  
|`comparison`|<xref:System.Comparison%601>|<span data-ttu-id="e96f2-917">요소를 비교할 때 사용할 대리자 메서드</span><span class="sxs-lookup"><span data-stu-id="e96f2-917">The delegate method to use when comparing elements</span></span>|  
|<span data-ttu-id="e96f2-918">비교자</span><span class="sxs-lookup"><span data-stu-id="e96f2-918">comparer</span></span>|<xref:System.Collections.Generic.IComparer%601>|<span data-ttu-id="e96f2-919"><xref:System.Collections.Generic.IComparer%601> 기본 비교자를 사용 하려면 null 또는 요소를 비교할 때 사용 하도록 구현 <xref:System.Collections.Generic.Comparer%601.Default>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-919">The <xref:System.Collections.Generic.IComparer%601> implementation to use when comparing elements, or null to use the default comparer <xref:System.Collections.Generic.Comparer%601.Default>.</span></span>|  
|`index`|<xref:System.Int32>|<span data-ttu-id="e96f2-920">정렬할 범위의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-920">The zero-based starting index of the range to sort.</span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="e96f2-921">정렬할 범위의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-921">The length of the range to sort.</span></span>|  
  
## <a name="exceptions"></a><span data-ttu-id="e96f2-922">예외</span><span class="sxs-lookup"><span data-stu-id="e96f2-922">Exceptions</span></span>  
  
|<span data-ttu-id="e96f2-923">예외</span><span class="sxs-lookup"><span data-stu-id="e96f2-923">Exception</span></span>|<span data-ttu-id="e96f2-924">조건</span><span class="sxs-lookup"><span data-stu-id="e96f2-924">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="e96f2-925">`comparer` 지정 하지 않으면 또는 `null`, 기본 비교자 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 의 구현을 찾을 수 없습니다는 <xref:System.IComparable%601?displayProperty=nameWithType> 제네릭 인터페이스 또는 <xref:System.IComparable?displayProperty=nameWithType> 화 형식에 대 한 인터페이스</span><span class="sxs-lookup"><span data-stu-id="e96f2-925">`comparer` is not specified or `null`, and the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> cannot find implementation of the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface or the <xref:System.IComparable?displayProperty=nameWithType> interface for type T.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="e96f2-926">`comparison`가 `null`인 경우</span><span class="sxs-lookup"><span data-stu-id="e96f2-926">`comparison` is `null`.</span></span>|  
|<xref:System.ArgumentException>|<span data-ttu-id="e96f2-927">구현 `comparison` 또는 `comparer` 정렬 하는 동안 오류가 발생 했습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-927">The implementation of `comparison` or `comparer` caused an error during the sort.</span></span> <span data-ttu-id="e96f2-928">예를 들어 항목을 자기 자신과 비교할 때 `comparison`에서 0을 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-928">For example, `comparison` might not return 0 when comparing an item with itself.</span></span><br /><br /> <span data-ttu-id="e96f2-929">또는</span><span class="sxs-lookup"><span data-stu-id="e96f2-929">-or-</span></span><br /><br /> <span data-ttu-id="e96f2-930">`index` 및 `count`가 <xref:System.Collections.Generic.List%601>의 올바른 범위를 지정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-930">`index` and `count` do not specify a valid range in the <xref:System.Collections.Generic.List%601>.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="e96f2-931">`index` 가 0 보다 작은 또는 `count` 0 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-931">`index` is less than 0 or `count` is less than 0.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-932">기본 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-932">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-933">이 메서드는 기본 비교 자가 사용 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 형식에 대 한 `T` 목록 요소의 순서를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-933">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="e96f2-934"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 속성 검사 하는지 여부를 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스를 구현 하를 사용 하 여 사용 가능한 경우.</span><span class="sxs-lookup"><span data-stu-id="e96f2-934">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-935">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-935">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-936">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-936">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-937">이 방법은 사용 하 여는 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 메서드를 다음과 같이 맞추어 내면적인 정렬 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-937">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="e96f2-938">파티션 크기는 16 개 요소를 삽입 정렬 알고리즘을 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-938">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-939">파티션 수가 2 개 로그를 초과 하는 경우 *n*여기서 *n* 범위는 입력 배열의 Heapsort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-939">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-940">그렇지 않으면 Quicksort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-940">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="e96f2-941">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-941">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="e96f2-942">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-942">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="e96f2-943">평균적으로이 메서드는는 O (*n* 로그 *n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>최악의 경우에는 o (*n* <sup>2</sup>) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-943">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-944">다음 예제에서는 일부 이름을 `List<String>` 목록을 정렬 되지 않은 순서로 호출 하는 개체, 표시는 <xref:System.Collections.Generic.List%601.Sort%2A> 메서드를 다음 정렬된 된 목록을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-944">The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 <span data-ttu-id="e96f2-945">다음 코드에서는 <xref:System.Collections.Generic.List%601.Sort> 및 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 간단한 비즈니스 개체에 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-945">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object.</span></span> <span data-ttu-id="e96f2-946">호출의 <xref:System.Collections.Generic.List%601.Sort> 메서드 파트 형식에 대 한 기본 비교 자가 사용으로 인해 및 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 메서드는 무명 메서드를 사용 하 여 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-946">Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-947">다음 예제는 <xref:System.Collections.Generic.List%601.Sort> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-947">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="e96f2-948">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-948">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="e96f2-949">목록은 표시 하 고 정렬 하 고 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-949">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-950"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 메서드 오버 로드는 다음 목록에 없는 두 문자열을 검색 하는 데 사용 됩니다 및 <xref:System.Collections.Generic.List%601.Insert%2A> 삽입할 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-950">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="e96f2-951">반환 값은 <xref:System.Collections.Generic.List%601.BinarySearch%2A> 문자열 목록에 없기 때문에 메서드는 각각의 경우에서 음수입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-951">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="e96f2-952">비트 보수 (고 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)이 음수 숫자 생성 검색 문자열 보다는 커야 하며 삽입이 위치에 있는 목록에서 첫 번째 요소의 인덱스 유지 정렬 순서입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-952">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="e96f2-953">두 번째 검색 문자열 목록에 있는 모든 요소 보다 큰 이므로 목록의 끝에 삽입 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-953">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-954">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-954">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="e96f2-955">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-955">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-956">지정된 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소를 정렬합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-956">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-957">경우 `comparer` 제공의 요소는 <xref:System.Collections.Generic.List%601> 사용 하 여 지정 된 정렬 <xref:System.Collections.Generic.IComparer%601> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-957">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="e96f2-958">경우 `comparer` 은 `null`, 기본 비교자 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스 사용 가능한 경우 해당 구현을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-958">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-959">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-959">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-960">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-960">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-961">이 방법은 사용 하 여는 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 메서드를 다음과 같이 맞추어 내면적인 정렬 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-961">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="e96f2-962">파티션 크기는 16 개 요소를 삽입 정렬 알고리즘을 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-962">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-963">파티션 수가 2 개 로그를 초과 하는 경우 *n*여기서 *n* 범위는 입력 배열의 Heapsort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-963">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-964">그렇지 않으면 Quicksort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-964">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="e96f2-965">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-965">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="e96f2-966">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-966">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="e96f2-967">평균적으로이 메서드는는 O (*n* 로그 *n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>최악의 경우에는 o (*n* <sup>2</sup>) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-967">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-968">다음 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-968">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="e96f2-969">이 예제에서는 대체는 비교자 DinoCompare 구현 하는 명명 된 문자열에 대 한 정의 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-969">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="e96f2-970">다음과 같이 작동 되는 비교자:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-970">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="e96f2-971">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-971">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="e96f2-972">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="e96f2-972">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="e96f2-973">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-973">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="e96f2-974">목록 다시 표시 됩니다, 대체 비교자를 사용 하 여 정렬 되 고 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-974">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-975"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드는 다음 하지 목록에서 사용 중인 대체 비교자 여러 문자열을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-975">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="e96f2-976"><xref:System.Collections.Generic.List%601.Insert%2A> 메서드를 사용 하 여 문자열을 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-976">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="e96f2-977">라는 함수에 있는 다음 두 가지 방법 `SearchAndInsert`, 비트 보수를 수행 하는 코드와 함께 (의 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)에서 반환 된 음수의 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 에 대 한 인덱스로 사용 하 여 새 문자열을 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-977">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-978">
            <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-978">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-979">
            <paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-979">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="e96f2-980">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-980">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="e96f2-981">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-981">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-982">지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-982">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-983">경우 `comparison` 제공의 요소는 <xref:System.Collections.Generic.List%601> 대리자가 나타내는 메서드를 사용 하 여 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-983">If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.</span></span>  
  
 <span data-ttu-id="e96f2-984">경우 `comparison` 은 `null`, <xref:System.ArgumentNullException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-984">If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="e96f2-985">이 방법은 사용 하 여 <xref:System.Array.Sort%2A?displayProperty=nameWithType>, 다음과 같이 맞추어 내면적인 정렬 적용:</span><span class="sxs-lookup"><span data-stu-id="e96f2-985">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="e96f2-986">파티션 크기는 16 개 요소를 삽입 정렬 알고리즘 사용</span><span class="sxs-lookup"><span data-stu-id="e96f2-986">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="e96f2-987">파티션 수가 2 개 로그를 초과 하는 경우 *n*여기서 *n* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](https://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-987">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-988">그렇지 않으면 Quicksort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-988">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="e96f2-989">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-989">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="e96f2-990">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-990">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="e96f2-991">평균적으로이 메서드는는 O (*n* 로그 *n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>최악의 경우에는 o (*n* <sup>2</sup>) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-991">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-992">다음 코드에서는 <xref:System.Collections.Generic.List%601.Sort%2A> 및 <xref:System.Collections.Generic.List%601.Sort%2A> 간단한 비즈니스 개체에 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-992">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object.</span></span> <span data-ttu-id="e96f2-993">호출의 <xref:System.Collections.Generic.List%601.Sort%2A> 메서드 파트 형식에 대 한 기본 비교 자가 사용으로 인해 및 <xref:System.Collections.Generic.List%601.Sort%2A> 메서드는 무명 메서드를 사용 하 여 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-993">Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-994">다음 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-994">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="e96f2-995">이 예제에서는 문자열에 대 한 대체 비교 메서드를 정의 `CompareDinosByLength`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-995">The example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="e96f2-996">이 방법은 다음과 같습니다:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-996">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="e96f2-997">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-997">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="e96f2-998">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="e96f2-998">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="e96f2-999">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-999">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="e96f2-1000">목록에는 빈 문자열과 null 참조가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1000">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="e96f2-1001">사용 하 여 정렬 목록이 표시 되는 <xref:System.Comparison%601> 나타내는 제네릭 대리자는 `CompareDinosByLength` 메서드를 다시 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1001">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-1002">
            <paramref name="comparison" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1002">
              <paramref name="comparison" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1003">
            <paramref name="comparison" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1003">The implementation of <paramref name="comparison" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="e96f2-1004">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparison" />에서 0을 반환하지 않을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1004">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-1005">정렬할 범위의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1005">The zero-based starting index of the range to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e96f2-1006">정렬할 범위의 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1006">The length of the range to sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e96f2-1007">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1007">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1008">지정된 비교자를 사용하여 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 있는 요소를 정렬합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1008">Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1009">경우 `comparer` 제공의 요소는 <xref:System.Collections.Generic.List%601> 사용 하 여 지정 된 정렬 <xref:System.Collections.Generic.IComparer%601> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1009">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="e96f2-1010">경우 `comparer` 은 `null`, 기본 비교자 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable%601> 제네릭 인터페이스 사용 가능한 경우 해당 구현을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1010">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="e96f2-1011">그렇지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 하는 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1011">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="e96f2-1012">경우 형식 `T` 인터페이스 중 하나를 구현 하지 않는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1012">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e96f2-1013">이 방법은 사용 하 여 <xref:System.Array.Sort%2A?displayProperty=nameWithType>, 다음과 같이 맞추어 내면적인 정렬 적용:</span><span class="sxs-lookup"><span data-stu-id="e96f2-1013">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="e96f2-1014">파티션 크기는 16 개 요소를 삽입 정렬 알고리즘 사용</span><span class="sxs-lookup"><span data-stu-id="e96f2-1014">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="e96f2-1015">파티션 수가 2 개 로그를 초과 하는 경우 *n*여기서 *n* 는 범위 입력 배열을 사용 하 여 한 [Heapsort](https://en.wikipedia.org/wiki/Heapsort) 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1015">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="e96f2-1016">그렇지 않으면 Quicksort 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1016">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="e96f2-1017">이 구현은 수행 불안정 정렬 됩니다. 즉, 두 요소가 같은 경우 순서 유지 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1017">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="e96f2-1018">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1018">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="e96f2-1019">평균적으로이 메서드는는 O (*n* 로그 *n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>최악의 경우에는 o (*n* <sup>2</sup>) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1019">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-1020">다음 예제는 <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드와 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1020">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="e96f2-1021">이 예제에서는 대체는 비교자 DinoCompare 구현 하는 명명 된 문자열에 대 한 정의 `IComparer<string>` (`IComparer(Of String)` Visual Basic의 `IComparer<String^>` Visual c + +에서) 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1021">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="e96f2-1022">다음과 같이 작동 되는 비교자:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1022">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="e96f2-1023">둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1023">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="e96f2-1024">셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1024">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="e96f2-1025">A <xref:System.Collections.Generic.List%601> 문자열의 만들고 5 개의 예제 공룡과 예제의 이름으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1025">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="e96f2-1026">두 그룹의 각 이름은 특정 정렬 순서에 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1026">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="e96f2-1027">목록이 표시 됩니다, 대체 비교자를 사용 하 여 초 식의 범위에 정렬 하 고 목록을 다시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1027">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="e96f2-1028"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드 오버 로드는 다음 초 식의 범위에만 "Brachiosaurus"를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1028">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="e96f2-1029">문자열이 없습니다 비트 보수 (에서 ~ C# 및 Visual c + + 연산자 `Xor` Visual Basic의-1)에서 반환 되는 음수의는 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 메서드는 새 문자열을 삽입 하기 위한 인덱스로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1029">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-1030">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1030">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e96f2-1031">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1031">-or-</span>
          </span>
          <span data-ttu-id="e96f2-1032">
            <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1032">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1033">
            <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 지정하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1033">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="e96f2-1034">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1034">-or-</span>
          </span>
          <span data-ttu-id="e96f2-1035">
            <paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1035">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="e96f2-1036">예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1036">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e96f2-1037">
            <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1037">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1038">
            <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1038">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1039">
            <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1039">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-1040">
            <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1040">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1041">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1041">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="e96f2-1042">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1042">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="e96f2-1043">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1043">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1044">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1044">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1045">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1045">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1046">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1046">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="e96f2-1047">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1047">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="e96f2-1048">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1048">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="e96f2-1049">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1049">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="e96f2-1050">이 위치에서의 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1050">At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined.</span></span> <span data-ttu-id="e96f2-1051">따라서 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1051">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-1052"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성 반환 될 때까지 동일한 개체 <xref:System.Collections.IEnumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1052">The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="e96f2-1053"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="e96f2-1054">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1054">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e96f2-1055">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1055">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="e96f2-1056">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1056">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="e96f2-1057"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1057">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="e96f2-1058">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1058">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e96f2-1059">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1059">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="e96f2-1060">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1060">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e96f2-1061">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1061">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e96f2-1062">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1062">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e96f2-1063"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1063">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="e96f2-1064">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1064">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="e96f2-1065">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1065">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="e96f2-1066">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1066">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="e96f2-1067">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1067">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1068">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1068">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-1069">경우는 원본의 유형을 <xref:System.Collections.ICollection> 대상의 형식으로 자동 캐스팅할 수 없는 `array`의 제네릭이 아닌 구현은 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, 제네릭 구현 throw 하는 반면, <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1069">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="e96f2-1070">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1070">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-1071">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1071">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-1072">
            <paramref name="arrayIndex" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1072">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1073">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1073">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="e96f2-1074">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1074">-or-</span>
          </span>
          <span data-ttu-id="e96f2-1075">
            <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1075">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="e96f2-1076">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1076">-or-</span>
          </span>
          <span data-ttu-id="e96f2-1077">소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1077">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="e96f2-1078">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1078">-or-</span>
          </span>
          <span data-ttu-id="e96f2-1079">소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1079">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1080">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1080">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1081">
            <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1081">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-1082">
            <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1082">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1083"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1083">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="e96f2-1084">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1084">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="e96f2-1085">열거형 쓰기 권한과 경쟁 하는 드문 경우에 전체 열거 동안 컬렉션을 잠글 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1085">In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e96f2-1086">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1086">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e96f2-1087"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1087"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="e96f2-1088">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1088">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="e96f2-1089">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1089">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1090">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1090">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1091">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1091">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="e96f2-1092">
            <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1092">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1093"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1093">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="e96f2-1094">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1094">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="e96f2-1095">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1095">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e96f2-1096">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1096">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e96f2-1097"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 반환 된 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1097"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="e96f2-1098">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1098">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="e96f2-1099">다음 코드의 사용을 보여 줍니다.는 <xref:System.Collections.ICollection.SyncRoot%2A> C#, c + + 및 Visual Basic에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1099">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="e96f2-1100">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1100">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1101">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1101">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1102">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1102">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1103">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1103">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="e96f2-1104">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1104">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="e96f2-1105">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1105">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="e96f2-1106">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1106">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="e96f2-1107"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1107"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="e96f2-1108">이 위치에서의 <xref:System.Collections.IEnumerator.Current%2A> 속성이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1108">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="e96f2-1109">따라서 호출 해야 합니다는 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.IEnumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1109">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-1110"><xref:System.Collections.IEnumerator.Current%2A> 될 때까지 동일한 개체를 반환 하는 속성 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1110">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="e96f2-1111"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="e96f2-1112">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e96f2-1113">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="e96f2-1114">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e96f2-1115"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1115">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-1116">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1116">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e96f2-1117">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1117">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="e96f2-1118">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1118">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="e96f2-1119">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1119">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e96f2-1120">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1120">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e96f2-1121"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1121">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="e96f2-1122">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1122">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-1123">
            <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1123">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1124">
            <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1124">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1125">새 요소가 삽입된 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1125">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1126">경우 <xref:System.Collections.Generic.List%601.Count%2A> 는 보다 작은 <xref:System.Collections.Generic.List%601.Capacity%2A>,이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1126">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="e96f2-1127">이 메서드는 O 됩니다 용량을 새 요소로 적용로 늘려야 하는 경우 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1127">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1128">
            <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1128">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-1129">
            <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1129">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1130">
            <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1130">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1131">
            <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1131">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1132">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1132">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-1133">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1133">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-1134">
            <see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1134">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1135">
            <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1135">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1136">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1136">The index of <paramref name="item" /> if found in the list; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1137">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1137">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-1138">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1138">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1139">
            <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1139">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-1140">
            <c>항목</c>이 삽입될 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1140">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e96f2-1141">
            <see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1141">The object to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1142">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1142">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1143">`index`가 <xref:System.Collections.IList>의 항목 수와 같으면 `item`가 끝에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1143">If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.</span></span>  
  
 <span data-ttu-id="e96f2-1144">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1144">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-1145">
            <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1145">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1146">
            <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1146">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1147">
            <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1147">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1148">
            <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1148">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-1149">
            <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1149">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1150">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1150">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="e96f2-1151">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼가 지정 된 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1151">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="e96f2-1152">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1152">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1153">
            <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1153">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1154">
            <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1154">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-1155">
            <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1155">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1156">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1156">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="e96f2-1157">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1157">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="e96f2-1158">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1158">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e96f2-1159">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1159">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1160">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1160">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e96f2-1161">지정한 인덱스의 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1161">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1162">C# 언어의 [이](~/docs/csharp/language-reference/keywords/this.md) 구현 하는 대신 인덱서를 정의 하는 키워드는 <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1162">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="e96f2-1163">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1163">Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="e96f2-1164">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1164">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e96f2-1165">
            <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1165">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1166">속성이 설정되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IList" />에 할당할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1166">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e96f2-1167">
            <see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1167">The object to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1168">
            <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1168">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1169">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1169">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="e96f2-1170">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1170">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e96f2-1171">
            <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1171">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1172">
            <see cref="T:System.Collections.Generic.List`1" />의 요소를 새 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1172">Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1173">
            <see cref="T:System.Collections.Generic.List`1" />의 요소 복사본을 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1173">An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1174">사용 하 여 요소가 복사 되 <xref:System.Array.Copy%2A?displayProperty=nameWithType>, 변수인는 O (*n*) 작업을 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1174">The elements are copied using <xref:System.Array.Copy%2A?displayProperty=nameWithType>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-1175">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1175">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-1176">다음 예제는 <xref:System.Collections.Generic.List%601.ToArray%2A> 메서드와는 다른 방법으로는 <xref:System.Collections.Generic.List%601> 범위에서 동작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1176">The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="e96f2-1177">예의 끝에는 <xref:System.Collections.Generic.List%601.GetRange%2A> 메서드 인덱스 위치 2 부터는 목록에서 세 가지 항목을 가져오는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1177">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="e96f2-1178"><xref:System.Collections.Generic.List%601.ToArray%2A> 메서드 결과에 <xref:System.Collections.Generic.List%601>, 세 요소의 배열 생성.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1178">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="e96f2-1179">배열 요소의 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1179">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e96f2-1180">
            <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 실제 수가 임계값보다 작은 경우 용량을 요소 수로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1180">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1181">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1181">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="e96f2-1182">그러나 재할당 하 고 복사 큰 비용 <xref:System.Collections.Generic.List%601> 상당히 커질 수 하므로 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드는 아무 작업도 수행 목록의 용량의 90%를 초과 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1182">The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="e96f2-1183">이 상대적으로 작은 향상 큰 재할당 비용을 발생 시키는 것을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1183">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-1184">90%의 현재 임계값 이후 릴리스에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1184">The current threshold of 90 percent might change in future releases.</span></span>  
  
 <span data-ttu-id="e96f2-1185">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1185">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="e96f2-1186">다시 설정 하는 <xref:System.Collections.Generic.List%601> 를 초기 상태로 호출는 <xref:System.Collections.Generic.List%601.Clear%2A> 메서드 호출 하기 전에 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1186">To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="e96f2-1187">빈 트리밍 <xref:System.Collections.Generic.List%601> 의 용량 설정는 <xref:System.Collections.Generic.List%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1187">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="e96f2-1188">사용 하 여 용량 설정할 수도 있습니다는 <xref:System.Collections.Generic.List%601.Capacity%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1188">The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-1189">다음 예제에서는 용량 및 개수를 확인 하는 <xref:System.Collections.Generic.List%601> 간단한 비즈니스 개체를 포함 하 고 사용 하 여는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 추가 용량을 제거 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1189">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="e96f2-1190">다음 예제는 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1190">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="e96f2-1191">여러의 속성 및 메서드는 <xref:System.Collections.Generic.List%601> 클래스는 추가, 삽입 및 문자열의 목록에서 항목을 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1191">Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings.</span></span> <span data-ttu-id="e96f2-1192">그런 다음 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 메서드를 사용 하는 개수와 일치 하는 용량을 줄일 및 <xref:System.Collections.Generic.List%601.Capacity%2A> 및 <xref:System.Collections.Generic.List%601.Count%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1192">Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="e96f2-1193">사용 되지 않는 용량 검색의 총 용량 10% 미만 했다면, 목록은 하지 크기가 조정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1193">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span> <span data-ttu-id="e96f2-1194">마지막으로, 목록의 내용은 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1194">Finally, the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="e96f2-1195">요소에 대해 확인할 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1195">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e96f2-1196">
            <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1196">Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e96f2-1197">
            <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1197">
              <see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e96f2-1198">목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1198">If the list has no elements, the return value is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e96f2-1199"><xref:System.Predicate%601> 반환 하는 메서드에 대리자 `true` 개체에 전달 하는 경우 대리자에 정의 된 조건과 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1199">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="e96f2-1200">현재 요소의 <xref:System.Collections.Generic.List%601> 를 개별적으로 전달 되는 <xref:System.Predicate%601> 대리자 및 처리는 대리자가 반환 하는 경우 중지 됩니다 `false` 모든 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1200">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element.</span></span> <span data-ttu-id="e96f2-1201">단일 스레드에서 모든 호출 및 요소 순서 대로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1201">The elements are processed in order, and all calls are made on a single thread.</span></span>  
  
 <span data-ttu-id="e96f2-1202">이 메서드는 O는 (*n*) 작업, 여기서 *n* 은 <xref:System.Collections.Generic.List%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1202">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e96f2-1203">다음 예제는 <xref:System.Collections.Generic.List%601.TrueForAll%2A> 메서드와 사용 하는 몇 가지 다른 방법도 <xref:System.Predicate%601> 제네릭 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1203">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="e96f2-1204">A <xref:System.Collections.Generic.List%601> 문자열의 만들어지면 2 개 (위치 1과 5)에서 "saurus"으로 끝나는 8 공룡 이름이 들어 있는입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1204">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="e96f2-1205">이 예제에서는 또한 라는 검색 조건자 메서드를 정의 `EndsWithSaurus`문자열 매개 변수를 허용 하는, 및에서는 나타내는 입력된 문자열이 "saurus"로 끝나는 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1205">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="e96f2-1206"><xref:System.Collections.Generic.List%601.TrueForAll%2A> 메서드를 차례로 각 요소를 전달 하는 처음부터는 목록을 트래버스는 `EndsWithSaurus` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1206">The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="e96f2-1207">검색을 중지 하는 경우는 `EndsWithSaurus` 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1207">The search stops when the `EndsWithSaurus` method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e96f2-1208">C# 및 Visual Basic에서 필요 없는 만들려는 `Predicate<string>` 위임 (`Predicate(Of String)` Visual basic에서) 명시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1208">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="e96f2-1209">이러한 언어 올바른 대리자 컨텍스트를 유추 하 고 자동으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e96f2-1209">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e96f2-1210">
            <paramref name="match" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e96f2-1210">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>