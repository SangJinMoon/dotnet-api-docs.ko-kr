<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="52623-101">큐에 있는 요소의 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-101">Specifies the type of elements in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="52623-102">개체의 선입선출(FIFO) 컬렉션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="52623-102">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-103">이 클래스는 순환 배열로 제네릭 큐를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-103">This class implements a generic queue as a circular array.</span></span> <span data-ttu-id="52623-104">에 저장 된 개체는 <xref:System.Collections.Generic.Queue%601> 한쪽 끝에 삽입 되 고 다른에서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-104">Objects stored in a <xref:System.Collections.Generic.Queue%601> are inserted at one end and removed from the other.</span></span> <span data-ttu-id="52623-105">큐 및 스택은 유용 정보에 대 한 임시 저장소를 사용 해야 하는 경우 즉 때 하려는 경우도 요소 값을 검색 한 후 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-105">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="52623-106">사용 하 여 <xref:System.Collections.Generic.Queue%601> 순서는 컬렉션에 저장 된 정보에 액세스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-106">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="52623-107">사용 하 여 <xref:System.Collections.Generic.Stack%601> 반대 순서로 정보에 액세스 해야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="52623-107">Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order.</span></span> <span data-ttu-id="52623-108">사용 하 여 <xref:System.Collections.Concurrent.ConcurrentQueue%601> 또는 <xref:System.Collections.Concurrent.ConcurrentStack%601> 동시에 여러 스레드에서 컬렉션에 액세스 해야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="52623-108">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="52623-109">세 가지 주요 작업을 수행할 수는 <xref:System.Collections.Generic.Queue%601> 와 해당 요소:</span><span class="sxs-lookup"><span data-stu-id="52623-109">Three main operations can be performed on a <xref:System.Collections.Generic.Queue%601> and its elements:</span></span>  
  
-   <span data-ttu-id="52623-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> 끝에 요소를 추가 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="52623-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 시작 부분부터 가장 오래 된 요소를 제거는 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="52623-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> 시작 부분에 있는 가장 오래 된 요소를 반환 하는 미리 보기는 <xref:System.Collections.Generic.Queue%601> 하지만 제거 하지 않습니다는 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> peek returns the oldest element that is at the start of the <xref:System.Collections.Generic.Queue%601> but does not remove it from the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-113">용량을 <xref:System.Collections.Generic.Queue%601> 요소의 수가는 <xref:System.Collections.Generic.Queue%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-113">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="52623-114">요소에 추가 되는 <xref:System.Collections.Generic.Queue%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-114">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="52623-115">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="52623-116"><xref:System.Collections.Generic.Queue%601> 허용 `null` 참조에 대 한 유효한 값을 입력 하 고 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-116"><xref:System.Collections.Generic.Queue%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-117">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-117">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="52623-118">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-118">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-119">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-119">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-120"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-120">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-121"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-121">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-122"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-122">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-123">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-123">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-124">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-124">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-125"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-125">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-126"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-126">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="52623-127">공용 정적 (<see langword="Shared" /> Visual basic에서)이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="52623-128">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-128">Any instance members are not guaranteed to be thread safe.</span></span>  
  
 <span data-ttu-id="52623-129">A <see cref="T:System.Collections.Generic.Queue`1" /> 수 여러 판독기 동시에 지원할으로 컬렉션은 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-129">A <see cref="T:System.Collections.Generic.Queue`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="52623-130">컬렉션 전체를 열거 하 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="52623-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="52623-131">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-131">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-132">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-132">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="52623-133"><see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-133">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-134">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-134">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-135">용량은 <xref:System.Collections.Generic.Queue%601> 요소의 수가 하는 <xref:System.Collections.Generic.Queue%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-135">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="52623-136">요소에 추가 되는 <xref:System.Collections.Generic.Queue%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-136">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="52623-137">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-137">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-138">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-138">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="52623-139">이 생성자는 o (1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-139">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-140">다음 코드 예제에서는이 생성자와의 몇 가지 다른 메서드는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-140">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="52623-141">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-141">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-142">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-142">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-143"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-143">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-144"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-144">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-145"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-145">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-146">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-146">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-147">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-147">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-148"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-148">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-149"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-149">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="52623-150">해당 요소가 새 <see cref="T:System.Collections.Generic.Queue`1" />에 복사되는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-150">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></param>
        <summary><span data-ttu-id="52623-151">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-151">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-152">용량은 <xref:System.Collections.Generic.Queue%601> 요소의 수가 하는 <xref:System.Collections.Generic.Queue%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-152">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="52623-153">요소에 추가 되는 <xref:System.Collections.Generic.Queue%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-153">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="52623-154">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-154">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-155">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-155">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="52623-156">요소에 복사 됩니다는 <xref:System.Collections.Generic.Queue%601> 가 읽는 순서는 <xref:System.Collections.Generic.IEnumerator%601> 의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-156">The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="52623-157">이 생성자는는 O (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-157">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-158">다음 코드 예제에서는이 생성자와의 몇 가지 다른 메서드는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-158">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="52623-159">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-159">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-160">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-160">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-161"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-161">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-162"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-162">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-163"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-163">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-164">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-164">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-165">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-165">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-166"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-166">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-167"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-167">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="52623-168"><paramref name="collection" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="52623-168"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="52623-169"><see cref="T:System.Collections.Generic.Queue`1" />에 포함될 수 있는 초기 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-169">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="52623-170">비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-171">용량은 <xref:System.Collections.Generic.Queue%601> 요소의 수가 하는 <xref:System.Collections.Generic.Queue%601> 보유할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-171">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="52623-172">요소에 추가 되는 <xref:System.Collections.Generic.Queue%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-172">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="52623-173">컬렉션의 크기를 예상할 수 있는 경우에 다양 한 크기 조정 작업에 요소를 추가 하는 동안 수행할 필요가 없습니다 초기 용량을 지정 하는 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-173">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-174">호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-174">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="52623-175">이 생성자는는 O (`n`) 작업, 여기서 `n` 은 `capacity`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-175">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="52623-176"><paramref name="capacity" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="52623-176"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-177"><see cref="T:System.Collections.Generic.Queue`1" />에서 개체를 모두 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-177">Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-178"><xref:System.Collections.Generic.Queue%601.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-178"><xref:System.Collections.Generic.Queue%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="52623-179">용량 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-179">The capacity remains unchanged.</span></span> <span data-ttu-id="52623-180">용량을 다시 설정 하는 <xref:System.Collections.Generic.Queue%601>, 호출 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-180">To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span> <span data-ttu-id="52623-181">빈 트리밍 <xref:System.Collections.Generic.Queue%601> 의 용량 설정는 <xref:System.Collections.Generic.Queue%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-181">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="52623-182">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-182">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-183">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-183">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="52623-184">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-184">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-185">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-185">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-186"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-186">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-187"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-187">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-188"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-188">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-189">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-189">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-190">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-190">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-191"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-191">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-192"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-192">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="52623-193"><see cref="T:System.Collections.Generic.Queue`1" />에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-193">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="52623-194">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-194">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="52623-195"><see cref="T:System.Collections.Generic.Queue`1" />에 요소가 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-195">Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="52623-196"><see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Queue`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-196"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-197">이 메서드는 기본 같음 비교자를 사용 하 여 일치 확인 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 큐에 있는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-197">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the queue.</span></span>  
  
 <span data-ttu-id="52623-198">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-198">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-199">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-199">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="52623-200">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-200">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-201">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-201">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-202"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-202">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-203"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-203">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-204"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-204">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-205">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-205">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-206">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-206">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-207"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-207">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-208"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-208">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="52623-209"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Queue`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-209">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="52623-210"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-210">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="52623-211"><c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-211">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="52623-212"><see cref="T:System.Collections.Generic.Queue`1" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-212">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-213">요소가 복사 되는 <xref:System.Array> 열거자가 반복는 동일한 순서로 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-213">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-214">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-214">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="52623-215"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="52623-215"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="52623-216"><paramref name="arrayIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="52623-216"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="52623-217">소스 <see cref="T:System.Collections.Generic.Queue`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="52623-217">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52623-218"><see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="52623-218">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <value><span data-ttu-id="52623-219"><see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-219">The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-220">용량은 <xref:System.Collections.Generic.Queue%601> 요소의 수가 하는 <xref:System.Collections.Generic.Queue%601> 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-220">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store.</span></span> <span data-ttu-id="52623-221"><xref:System.Collections.Generic.Queue%601.Count%2A> 에 실제로 있는 요소의 수가 고 <xref:System.Collections.Generic.Queue%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-221"><xref:System.Collections.Generic.Queue%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-222">용량 보다 크거나 같은 경우는 항상 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-222">The capacity is always greater than or equal to <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span> <span data-ttu-id="52623-223">경우 <xref:System.Collections.Generic.Queue%601.Count%2A> 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 자동으로 다시 할당 하 여 용량을 증가 시켜, 요소를 추가 하는 동안 용량을 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-223">If <xref:System.Collections.Generic.Queue%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="52623-224">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-225">다음 코드 예제에서는 몇 가지의 속성 및 메서드는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-225">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="52623-226">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-226">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-227">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-227">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-228"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-228">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-229"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-229">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-230"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-230">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-231">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-231">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-232">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-232">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-233"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-233">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-234"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-234">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-235"><see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-235">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="52623-236"><see cref="T:System.Collections.Generic.Queue`1" />의 시작에서 제거하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-236">The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-237">이 메서드는 <xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Queue%601.Peek%2A>는 <xref:System.Collections.Generic.Queue%601>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-237">This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-238">경우 형식 `T` 참조 형식인 `null` 에 추가할 수는 <xref:System.Collections.Generic.Queue%601> 값으로.</span><span class="sxs-lookup"><span data-stu-id="52623-238">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="52623-239">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="52623-239">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-240">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-240">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method.</span></span>  
  
 <span data-ttu-id="52623-241">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-241">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-242">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-242">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-243"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-243">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-244"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-244">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-245"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-245">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-246">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-247">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-247">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-248"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-248">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-249"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-249">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52623-250"><see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="52623-250">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="52623-251"><see cref="T:System.Collections.Generic.Queue`1" />에 추가할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-251">The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="52623-252">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-252">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="52623-253">개체를 <see cref="T:System.Collections.Generic.Queue`1" />의 끝 부분에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-253">Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-254">경우 <xref:System.Collections.Generic.Queue%601.Count%2A> 이미 용량의 용량과 같은 <xref:System.Collections.Generic.Queue%601> 자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-254">If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="52623-255">경우 <xref:System.Collections.Generic.Queue%601.Count%2A> 작으면 내부 배열의 용량 보다이 메서드는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-255">If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="52623-256">내부 배열을 재할당 하 여 새 요소로 적용 하는 경우이 메서드는 O는 됩니다 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-256">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-257">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-257">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method.</span></span>  
  
 <span data-ttu-id="52623-258">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-258">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-259">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-259">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-260"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-260">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-261"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-261">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-262"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-262">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-263">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-263">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-264">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-264">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-265"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-265">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-266"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-266">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-267"><see cref="T:System.Collections.Generic.Queue`1" />를 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-267">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="52623-268"><see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Queue`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-268">An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-269">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="52623-269">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="52623-270">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-270">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="52623-271">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-271">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="52623-272">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-272">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="52623-273">이 위치에서 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-273">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-274">따라서 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-274">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="52623-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>는 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="52623-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="52623-277">경우 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-277">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="52623-278">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-278">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="52623-279">마지막으로 호출 하는 경우 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-279">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-280"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-280">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="52623-281">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-281">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="52623-282">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-282">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="52623-283">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 메서드와의 값을 가져오는 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 속성 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-283">If the collection is modified between calling <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="52623-284">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="52623-284">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="52623-285">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-285">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-286">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-286">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="52623-287">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-287">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="52623-288">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="52623-288">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-289">다음 코드 예제에서는 것을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스는 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-289">The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable.</span></span> <span data-ttu-id="52623-290">`foreach` 문 (`For Each` Visual Basic의 `for each` c + +에서)는 큐를 열거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-290">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="52623-291">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-291">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-292">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-292">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-293"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-293">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-294"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-294">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-295"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-295">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-296">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-296">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-297">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-297">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-298"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-298">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-299"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-299">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-300"><see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하지 않고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-300">Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="52623-301"><see cref="T:System.Collections.Generic.Queue`1" />의 처음에 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-301">The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-302">이 메서드는 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Queue%601.Peek%2A>는 <xref:System.Collections.Generic.Queue%601>를 수정하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-302">This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="52623-303">경우 형식 `T` 참조 형식인 `null` 에 추가할 수는 <xref:System.Collections.Generic.Queue%601> 값으로.</span><span class="sxs-lookup"><span data-stu-id="52623-303">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="52623-304">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="52623-304">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-305">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-305">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="52623-306">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-306">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-307">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-307">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-308"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-308">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-309"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-309">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-310"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-310">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-311">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-311">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-312">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-312">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-313"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-313">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-314"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-314">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="52623-315"><see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="52623-315">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-316">컬렉션을 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-316">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="52623-317">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-317">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-318">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="52623-318">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="52623-319">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-319">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="52623-320">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-320">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="52623-321">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-321">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="52623-322">이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-322">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-323">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-323">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="52623-324"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-324"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="52623-325"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-325"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="52623-326">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-326">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="52623-327">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-327">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="52623-328">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-328">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-329"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-329">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="52623-330">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-330">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="52623-331">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-331">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="52623-332">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드와의 값을 가져오는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-332">If the collection is modified between calling <xref:System.Collections.IEnumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="52623-333">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="52623-333">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="52623-334">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-334">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-335">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-335">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="52623-336">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-336">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="52623-337">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="52623-337">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="52623-338"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-338">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="52623-339"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-339">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="52623-340"><c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-340">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="52623-341">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-341">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="52623-342">경우는 원본의 유형을 <xref:System.Collections.ICollection> 대상의 형식으로 자동 캐스팅할 수 없는 `array`의 제네릭이 아닌 구현 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, 제네릭 구현 throw 하는 반면, <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-342">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="52623-343">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-343">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="52623-344"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="52623-344"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="52623-345"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-345"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="52623-346"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="52623-346"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="52623-347">또는</span><span class="sxs-lookup"><span data-stu-id="52623-347">-or-</span></span>  
  
 <span data-ttu-id="52623-348"><paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-348"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
 <span data-ttu-id="52623-349">또는</span><span class="sxs-lookup"><span data-stu-id="52623-349">-or-</span></span>  
  
 <span data-ttu-id="52623-350">소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="52623-350">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span>  
  
 <span data-ttu-id="52623-351">또는</span><span class="sxs-lookup"><span data-stu-id="52623-351">-or-</span></span>  
  
 <span data-ttu-id="52623-352">소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-352">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52623-353"><see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="52623-353">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value>
          <span data-ttu-id="52623-354"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-354"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="52623-355"><see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-355">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-356">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-356">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="52623-357">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-357">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="52623-358">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-358">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-359">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-359">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="52623-360"><xref:System.Collections.ICollection.SyncRoot%2A>는 <xref:System.Collections.ICollection>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-360"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="52623-361">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-361">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="52623-362">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-362">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52623-363"><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="52623-363">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="52623-364">
          <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-364">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="52623-365"><see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-365">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-366">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-366">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="52623-367">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-367">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="52623-368">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-368">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-369">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-369">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="52623-370"><xref:System.Collections.ICollection.SyncRoot%2A>는 <xref:System.Collections.ICollection>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-370"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="52623-371">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-371">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="52623-372">다음 코드의 사용을 보여 줍니다.는 <xref:System.Collections.ICollection.SyncRoot%2A> C#, c + + 및 Visual Basic에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-372">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As IColletion = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="52623-373">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-373">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-374">컬렉션을 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-374">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="52623-375">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-375">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-376">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="52623-376">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="52623-377">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-377">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="52623-378">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-378">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="52623-379">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-379">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="52623-380"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-380"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="52623-381">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-381">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-382">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-382">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="52623-383"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-383"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="52623-384"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-384"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="52623-385">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-385">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="52623-386">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-386">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="52623-387">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-387">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="52623-388"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-388">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="52623-389">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-389">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="52623-390">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-390">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="52623-391">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드와의 값을 가져오는 <xref:System.Collections.IEnumerator.Current%2A> 속성 <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효로 되 었 하는 경우에 설정 하는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-391">If the collection is modified between calling <xref:System.Collections.IEnumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="52623-392">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="52623-392">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="52623-393">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-393">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="52623-394">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-394">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="52623-395">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-395">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="52623-396">이 메서드는 o (1) 작업.</span><span class="sxs-lookup"><span data-stu-id="52623-396">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-397"><see cref="T:System.Collections.Generic.Queue`1" /> 요소를 새 배열에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-397">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="52623-398"><see cref="T:System.Collections.Generic.Queue`1" />에서 복사된 요소를 포함하는 새 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-398">A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-399"><xref:System.Collections.Generic.Queue%601> 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-399">The <xref:System.Collections.Generic.Queue%601> is not modified.</span></span> <span data-ttu-id="52623-400">새 배열의 요소 순서의 시작 부분에서 요소의 순서와 같습니다는 <xref:System.Collections.Generic.Queue%601> 끝입니다.</span><span class="sxs-lookup"><span data-stu-id="52623-400">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.</span></span>  
  
 <span data-ttu-id="52623-401">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-401">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52623-402">다음 코드 예제에서는 여러 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Queue%601> 제네릭 클래스를 포함 하는 <xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-402">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="52623-403">코드 예제에서는 기본 용량으로 문자열의 큐를 만들고 사용 하 여 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 메서드 문자열 5 개를 큐에 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-403">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="52623-404">큐의 요소는 큐의 상태가 바뀌지 않는 열거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-404">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="52623-405"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드 첫 번째 문자열 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-405">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="52623-406"><xref:System.Collections.Generic.Queue%601.Peek%2A> 메서드는 큐에서 다음 항목을 살펴볼 수는 다음의 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 메서드는 큐에서 제거 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-406">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="52623-407"><xref:System.Collections.Generic.Queue%601.ToArray%2A> 메서드 배열을 만들고, 큐 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 큐의 복사본을 만드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-407">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="52623-408">복사본의 요소가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-408">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="52623-409">큐의 크기 두 배인 배열 만들어지고 및 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 메서드 배열의 중간에서 시작 배열 요소를 복사 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-409">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="52623-410"><xref:System.Collections.Generic.Queue%601.%23ctor%2A> 생성자를 다시 시작에 있는 세 개의 null 요소를 포함 하는 큐의 두 번째 복사본을 만들 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="52623-410">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="52623-411"><xref:System.Collections.Generic.Queue%601.Contains%2A> 메서드는 큐의 첫 번째 복사본에서 "4" 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Queue%601.Count%2A> 속성에 표시 되는 큐가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-411">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52623-412"><see cref="T:System.Collections.Generic.Queue`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-412">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52623-413">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="52623-413">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="52623-414">그러나 재할당 하 고 복사 큰 비용 <xref:System.Collections.Generic.Queue%601> 상당히 커질 수 하므로 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 메서드는 아무 작업도 수행 목록의 용량의 90%를 초과 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="52623-414">The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="52623-415">이 상대적으로 작은 향상 큰 재할당 비용을 발생 시키는 것을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-415">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="52623-416">이 메서드는 O는 (`n`) 작업, 여기서 `n` 은 <xref:System.Collections.Generic.Queue%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-416">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="52623-417">다시 설정 하는 <xref:System.Collections.Generic.Queue%601> 를 초기 상태로 호출는 <xref:System.Collections.Generic.Queue%601.Clear%2A> 메서드 호출 하기 전에 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="52623-417">To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="52623-418">빈 트리밍 <xref:System.Collections.Generic.Queue%601> 의 용량 설정는 <xref:System.Collections.Generic.Queue%601> 기본 용량을 합니다.</span><span class="sxs-lookup"><span data-stu-id="52623-418">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>