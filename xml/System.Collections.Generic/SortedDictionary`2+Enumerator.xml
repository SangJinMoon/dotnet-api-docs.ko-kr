<Type Name="SortedDictionary&lt;TKey,TValue&gt;+Enumerator" FullName="System.Collections.Generic.SortedDictionary&lt;TKey,TValue&gt;+Enumerator">
  <TypeSignature Language="C#" Value="public struct SortedDictionary&lt;TKey,TValue&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.IDictionaryEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit SortedDictionary`2/Enumerator&lt;TKey, TValue&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IDictionaryEnumerator, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure SortedDictionary(Of TKey, TValue).Enumerator&#xA;Implements IDictionaryEnumerator, IEnumerator(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="public: value class SortedDictionary&lt;TKey, TValue&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::IDictionaryEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionaryEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="161ee-101"><see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 열거합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-102">`foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators.</span></span> <span data-ttu-id="161ee-103">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="161ee-104">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="161ee-105">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="161ee-106">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="161ee-107">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="161ee-108">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="161ee-109">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="161ee-110">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="161ee-111">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="161ee-112">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="161ee-113">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="161ee-114">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-114">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="161ee-115">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-115">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="161ee-116">이 위치에서의 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 속성이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-116">At this position, the <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="161ee-117">따라서 호출 해야 합니다는 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-117">Therefore, you must call the <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="161ee-118"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 속성 반환 될 때까지 동일한 개체 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-118">The <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="161ee-119"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-119"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="161ee-120">경우 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-120">If <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="161ee-121">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-121">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="161ee-122">마지막으로 호출 하는 경우 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-122">If the last call to <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="161ee-123"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-123">You cannot set <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="161ee-124">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-124">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="161ee-125">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-125">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="161ee-126">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-126">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="161ee-127">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-127">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="161ee-128">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-128">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="161ee-129"><xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-129">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />
    <altmember cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As KeyValuePair(Of TKey, TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; Current { System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="161ee-130">열거자의 현재 위치에 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-130">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="161ee-131"><see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-131">The element in the <see cref="T:System.Collections.Generic.SortedDictionary`2" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-132"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 다음 조건에서 속성 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-132">The <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> property is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="161ee-133">열거자는 열거자를 만든 직후 사전에 첫 번째 요소 앞에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-133">The enumerator is positioned before the first element in the dictionary, immediately after the enumerator is created.</span></span> <span data-ttu-id="161ee-134"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-134">The <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>.</span></span>  
  
-   <span data-ttu-id="161ee-135">마지막으로 호출한 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-135">The last call to <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="161ee-136"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 속성 반환 될 때까지 동일한 개체 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-136">The <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="161ee-137"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-137"><xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> to the next element.</span></span> <span data-ttu-id="161ee-138">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 유효 하지 않더라도로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-138">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="161ee-139">성능 향상을 위해이 속성 열거자 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치 되는 경우 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-139">For better performance, this property does not throw an exception if the enumerator is positioned before the first element or after the last element.</span></span> <span data-ttu-id="161ee-140">대신 속성의 값 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-140">Instead, the value of the property is undefined.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="161ee-141">
          <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-141">Releases all resources used by the <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="161ee-142">열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 다음 요소로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-142">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</span></span></summary>
        <returns>
          <span data-ttu-id="161ee-143">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-143"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-144">열거자 컬렉션 및 첫 번째 호출의 첫 번째 요소 앞에 배치 되는 열거자를 만든 후의 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 메서드 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-144">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to the <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> method advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="161ee-145">경우 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-145">If <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="161ee-146">열거자가 있는 경우이 위치에 대 한 후속 호출에서 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-146">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="161ee-147">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-147">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="161ee-148">요소, 삭제 또는 추가, 수정 하는 등 컬렉션 변경 되 면 열거자가 복구할 수 없게 무효화 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-148">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-149">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-149">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionaryEnumerator.Entry">
      <MemberSignature Language="C#" Value="System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Entry As DictionaryEntry Implements IDictionaryEnumerator.Entry" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { System::Collections::DictionaryEntry get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionaryEnumerator.Entry</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.DictionaryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="161ee-150">열거자의 현재 위치에 있는 요소를 <see cref="T:System.Collections.DictionaryEntry" /> 구조체로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-150">Gets the element at the current position of the enumerator as a <see cref="T:System.Collections.DictionaryEntry" /> structure.</span></span></summary>
        <value><span data-ttu-id="161ee-151">컬렉션에서 사전의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" /> 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-151">The element in the collection at the current position of the dictionary, as a <see cref="T:System.Collections.DictionaryEntry" /> structure.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-152">열거자를 만든 후 또는 이후에 <xref:System.Collections.IEnumerator.Reset%2A> 메서드가 호출 되는 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 <xref:System.Collections.IDictionaryEnumerator.Entry%2A>, 그렇지 않으면 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 은 정의 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-152">After an enumerator is created or after the <xref:System.Collections.IEnumerator.Reset%2A> method is called, the <xref:System.Collections.IEnumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>; otherwise, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span>  
  
 <span data-ttu-id="161ee-153"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> 마지막으로 호출 하는 경우 또한 예외를 throw 속성 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-153">The <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="161ee-154"><xref:System.Collections.IDictionaryEnumerator.Entry%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-154"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="161ee-155"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IDictionaryEnumerator.Entry%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-155"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-156">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-156">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
        <altmember cref="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionaryEnumerator.Key">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionaryEnumerator.Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionaryEnumerator.Key" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Key As Object Implements IDictionaryEnumerator.Key" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IDictionaryEnumerator.Key { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionaryEnumerator.Key</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="161ee-157">열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-157">Gets the key of the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="161ee-158">컬렉션에서 열거자의 현재 위치에 있는 요소의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-158">The key of the element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-159">열거자를 만든 후 또는 이후에 <xref:System.Collections.IEnumerator.Reset%2A> 메서드가 호출 되는 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 <xref:System.Collections.IDictionaryEnumerator.Key%2A>, 그렇지 않으면 <xref:System.Collections.IDictionaryEnumerator.Key%2A> 은 정의 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-159">After an enumerator is created or after the <xref:System.Collections.IEnumerator.Reset%2A> method is called, the <xref:System.Collections.IEnumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Key%2A>; otherwise, <xref:System.Collections.IDictionaryEnumerator.Key%2A> is undefined.</span></span>  
  
 <span data-ttu-id="161ee-160"><xref:System.Collections.IDictionaryEnumerator.Key%2A> 마지막으로 호출 하는 경우 또한 예외를 throw 속성 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-160">The <xref:System.Collections.IDictionaryEnumerator.Key%2A> property also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="161ee-161"><xref:System.Collections.IDictionaryEnumerator.Key%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-161"><xref:System.Collections.IDictionaryEnumerator.Key%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="161ee-162"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IDictionaryEnumerator.Key%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-162"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Key%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-163">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-163">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
        <altmember cref="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionaryEnumerator.Value">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionaryEnumerator.Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionaryEnumerator.Value" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Value As Object Implements IDictionaryEnumerator.Value" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IDictionaryEnumerator.Value { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionaryEnumerator.Value</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="161ee-164">열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-164">Gets the value of the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="161ee-165">컬렉션에서 열거자의 현재 위치에 있는 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-165">The value of the element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-166">열거자를 만든 후 또는 이후에 <xref:System.Collections.IEnumerator.Reset%2A> 메서드가 호출 되는 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 <xref:System.Collections.IDictionaryEnumerator.Value%2A>, 그렇지 않으면 <xref:System.Collections.IDictionaryEnumerator.Value%2A> 은 정의 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-166">After an enumerator is created or after the <xref:System.Collections.IEnumerator.Reset%2A> method is called, the <xref:System.Collections.IEnumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Value%2A>; otherwise, <xref:System.Collections.IDictionaryEnumerator.Value%2A> is undefined.</span></span>  
  
 <span data-ttu-id="161ee-167"><xref:System.Collections.IDictionaryEnumerator.Value%2A> 마지막으로 호출 하는 경우 또한 예외를 throw 속성 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-167">The <xref:System.Collections.IDictionaryEnumerator.Value%2A> property also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="161ee-168"><xref:System.Collections.IDictionaryEnumerator.Value%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-168"><xref:System.Collections.IDictionaryEnumerator.Value%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="161ee-169"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IDictionaryEnumerator.Value%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-169"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Value%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-170">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-170">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
        <altmember cref="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="161ee-171">열거자의 현재 위치에 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-171">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="161ee-172">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-172">The element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-173"><xref:System.Collections.IEnumerator.Current%2A> 다음 조건에서 속성 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-173">The <xref:System.Collections.IEnumerator.Current%2A> property is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="161ee-174">열거자를 만든 직후 또는 직후 열거자는 컬렉션의 첫 번째 요소 앞에 배치 되는 <xref:System.Collections.IEnumerator.Reset%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-174">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created or immediately after the <xref:System.Collections.IEnumerator.Reset%2A> method is called.</span></span>   <span data-ttu-id="161ee-175"><xref:System.Collections.IEnumerator.MoveNext%2A> 메서드를 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소로 이동 해야 <xref:System.Collections.IEnumerator.Current%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-175">The <xref:System.Collections.IEnumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
-   <span data-ttu-id="161ee-176">마지막으로 호출한 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-176">The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="161ee-177"><xref:System.Collections.IEnumerator.Current%2A> 속성 반환 될 때까지 동일한 개체 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-177">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="161ee-178"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-178"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span> <span data-ttu-id="161ee-179">사이 컬렉션이 수정 되는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 및 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 유효 하지 않더라도로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-179">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-180">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-180">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="161ee-181">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-181">Sets the enumerator to its initial position, which is before the first element in the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="161ee-182">호출한 후의 <xref:System.Collections.IEnumerator.Reset%2A> 호출 해야 합니다는 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> 하는 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 메서드는 <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-182">After calling the <xref:System.Collections.IEnumerator.Reset%2A> method, you must call the <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.SortedDictionary%602.Enumerator.Current%2A> property.</span></span>  
  
 <span data-ttu-id="161ee-183">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-183">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="161ee-184">요소, 삭제 또는 추가, 수정 하는 등 컬렉션 변경 되 면 열거자가 복구할 수 없게 무효화 합니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-184">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="161ee-185">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="161ee-185">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>