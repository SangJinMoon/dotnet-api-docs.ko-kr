<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83e7d38da992c06fbcfa631ea8af70aebe6366f0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30419397" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 구현을 통해 리소스에 대한 액세스 권한이 활성 보안 주체에 부여되어야 하는지를 결정하는 권한을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 클래스를 사용 하 여 명령적 액세스 검사를 수행 하는 기능을 제공 된 <xref:System.Security.Claims.ClaimsAuthorizationManager> 응용 프로그램에 대해 구성 된 합니다. 호출 하 여는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드 또는 정적 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> 메서드를 클레임 인증 관리자에 대해 정의 된 권한 부여 정책에 따라 코드의 실행 경로 내에서 리소스에 대 한 보호를 제공할 수 있습니다. 선언적 액세스 검사를 사용 하 여 수행할 수는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 클래스입니다.  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 클래스도 구성 하는 클레임 권한 부여 관리자를 사용 하 여는 <xref:System.IdentityModel.Configuration.IdentityConfiguration> 아래에서 설정 되는 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> 속성입니다. 이 WS-페더레이션 사용 되지 않습니다; 시나리오 에서도 모든 경우에 마찬가지 예를 들어 활성 (WCF) 웹 응용 프로그램 및 콘솔 응용 프로그램입니다. 클레임 권한 부여 관리자 구성에서 또는 프로그래밍 방식으로 지정할 수 있습니다. 클레임 권한 부여 관리자는 구성 파일을 지정 하려면 설정는 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) 요소는 [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) 요소에서 id 구성을이 참조 하는지 확인 하 고는 [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) 런타임에 의해 로드 되는 요소 (예를 들어 여 설정의 `identityConfigurationName` 특성). 클레임 권한 부여 관리자를 프로그래밍 방식으로 설정 하려면에 대 한 처리기를 제공는 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> 이벤트입니다.  
  
 한 수준에서 제공 하는 기능 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 역할 기반 액세스 검사 (RBAC)를 통해 제공 된 것과 비슷합니다는 <xref:System.Security.Permissions.PrincipalPermission> 클래스입니다; 그러나는 <xref:System.Security.Claims.ClaimsAuthorizationManager> 클래스 활성 사용자가 있는 클레임을 기반으로 검사를 수행 합니다. 따라서 단일 역할에 따라 많은 사용 권한을 수집 일반적으로 됩니다 순수 RBAC를 통해 사용할 수 있는 것 보다 훨씬 더 많은 세분성 수 있습니다. 아마도, 무엇 보다도 클레임 기반 권한 부여 코드에서 리소스에 대 한 특정 작업에 대 한 권한이 필요할 수 있습니다 백 엔드 정책은 클레임을 구성 하려면 사용 될 수 있으므로 더 잘 분리 비즈니스 논리 및 권한 부여 정책을 사용 하도록 설정 된 엔터티를 제시 수요를 충족 하기 위해가 있어야 합니다. RBAC 같은 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 에서 파생 된 클래스에서 구현 하는 코드 액세스 보안 달리 즉, 사용자 기반 액세스 검사를 수행 된 <xref:System.Security.CodeAccessPermission> 클래스를 사용 하 여 스택 워크는 코드의 모든 호출자에 게 사용 권한을 부여 했는지 확인 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>현재 보안 주체에 대해서만 검사를 수행 합니다.  
  
 정적 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> 메서드는 지정된 된 리소스에 대 한 지정 된 작업에 대 한 액세스를 확인 합니다. 리소스 및 작업은 모두 문자열 며 일반적으로 Uri입니다. 인스턴스를 초기화할 수도 있습니다 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 동작 및 리소스 및 호출 된 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드. 생성자는 단일 리소스 및 작업에만 사용 하지만 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 통해 개체를 결합 하는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> 및 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> 메서드. 이러한 메서드를 사용 하 여 만든 권한 여러 리소스 작업 쌍을 포함할 수 있습니다.  
  
 두 메서드를 호출 하 여 액세스가 결정는 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> 으로 구성 된 클레임 권한 부여 관리자의 메서드는 <xref:System.Security.Claims.AuthorizationContext> 활성 보안 주체가 구성 (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), 리소스 및 작업. Throw 한 <xref:System.Security.SecurityException> 현재 보안 주체가 리소스에 작업을 수행할 수 있는 권한이 없는 경우 그렇지 않은 경우 실행 됩니다.  
  
 경우에 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 여러 리소스 작업 쌍을 포함 하는 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> 권한에 포함 된 리소스 작업 쌍의 각 메서드가 호출 됩니다.  에 대 한 호출에 대 한 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 성공 하 여 활성 사용자 권한에 포함 된 리소스 작업 쌍의 모든 권한이 있어야 합니다.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> 메서드, 또는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 선언 합니다. 각각의 경우 구성 된 <xref:System.Security.Claims.ClaimsAuthorizationManager> 평가 된 지정 된 리소스 및 작업에 대 한 현재 보안 주체를 호출 합니다. 현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <xref:System.Security.SecurityException> throw 되 고, 그러지 않으면 실행이 진행 됩니다.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 다음 XML 표시 사용자 지정 클레임 권한 부여를 사용 하는 데 필요한 최소 구성 된 관리자는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 클래스입니다. 여기에 최소한 선언 해야 둘 다는 `system.identityModel` 및 `system.identityModel.services` 섹션의 `<configSection>` 요소 다음에 권한 부여 관리자를 지정 하 고는 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)기본 id 구성 요소입니다. 이렇게 하면 권한 부여 관리자는 기본 페더레이션 구성에서 참조 되는 합니다. 권한 부여 관리자에 지정 된 id 구성의 이름을 지정할 수도 있습니다는 `identityConfigurationName` 특성에는 [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) 요소입니다.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">보안 주체에 권한이 부여되어야 하는 리소스입니다.</param>
        <param name="action">보안 주체에 권한이 부여되어야 하는 작업입니다.</param>
        <summary>
          <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 개체가 지정 된 리소스 작업 쌍으로 초기화 합니다. 호출할 수 있습니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드 액세스 검사를 수행 하도록 합니다.  
  
 생성자는 단일 리소스 및 작업에만 사용 하지만 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 통해 개체를 결합 하는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> 및 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> 메서드. 이러한 방법을 통해 만든 사용 권한은 여러 리소스 작업 쌍을 포함할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" />이 <see langword="null" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">보안 주체에 권한이 부여되어야 하는 리소스입니다.</param>
        <param name="action">보안 주체에 권한이 부여되어야 하는 작업입니다.</param>
        <summary>지정된 리소스에 대해 지정된 작업을 수행할 수 있는 권한이 현재 주체에 부여되었는지 여부를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 리소스에 지정된 된 작업에 대 한 보안 주체에 권한을 부여 해야 또는 <xref:System.Security.SecurityException> 예외가 throw 됩니다.  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> 구성 된 클레임 권한 부여 관리자의 메서드를 호출는 <xref:System.Security.Claims.AuthorizationContext> 활성 보안 주체가 이루어진 (<xref:System.Threading.Thread.CurrentPrincipal%2A>), 리소스 및 작업.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> 메서드. 지정 된 리소스 및 작업에 대 한 현재 보안 주체를 평가 하는 구성 된 클레임 권한 부여 관리자가 호출 됩니다. 현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <xref:System.Security.SecurityException> throw 되 고, 그러지 않으면 실행이 진행 됩니다.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 보안 주체는 <see cref="T:System.Security.Claims.ClaimsPrincipal" />에서 할당할 수 없습니다.  
  
 또는  
  
 구성된 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />가 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">권한 부여 검사에 실패했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 인스턴스의 복사본을 반환합니다.</summary>
        <returns>현재 인스턴스에서 복사된 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스와 연결된 리소스 작업 쌍에 대한 권한이 현재 주체에 부여되었는지 여부를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인스턴스와 연결 된 리소스 작업 쌍의 모든 현재 보안 주체에 권한을 부여 해야 또는 <xref:System.Security.SecurityException> 예외가 throw 됩니다.  
  
 생성자는 단일 리소스 및 작업에만 사용 하지만 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 통해 개체를 결합 하는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> 및 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> 메서드. 이러한 방법을 통해 만든 사용 권한은 여러 리소스 작업 쌍을 포함할 수 있습니다.  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드가 호출 하는 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> 으로 구성 된 클레임 권한 부여 관리자의 메서드는 <xref:System.Security.Claims.AuthorizationContext> 하 여 활성 사용자는 구성 (<xref:System.Threading.Thread.CurrentPrincipal%2A>), 리소스와 각 포함 된 리소스 작업 쌍에 대 한 작업 사용 권한. 에 대 한는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 활성 성공 하려면 보안 주체가 모든 권한에 포함 된 리소스 작업 쌍에 대 한 권한이 있어야 합니다.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 메서드. 지정 된 리소스 및 작업에 대 한 현재 보안 주체를 평가 하는 구성 된 클레임 권한 부여 관리자가 호출 됩니다. 현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <xref:System.Security.SecurityException> throw 되 고, 그러지 않으면 실행이 진행 됩니다.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 보안 주체는 <see cref="T:System.Security.Claims.ClaimsPrincipal" />에서 할당할 수 없습니다.  
  
 또는  
  
 구성된 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />가 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">권한 부여 검사에 실패했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">사용 권한을 다시 생성하는 데 사용할 XML 인코딩입니다.</param>
        <summary>지정된 XML 인코딩에서 현재 사용 권한 및 상태를 다시 생성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하 여 만든 XML 인코딩을 사용 권한을 다시 만듭니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">인코딩에 인식할 수 없는 요소나 특성 또는 부적합한 형식의 XML이 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">현재 사용 권한과 교차하는 사용 권한입니다. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />의 인스턴스여야 합니다.</param>
        <summary>현재 권한과 지정된 권한의 교집합에 해당하는 권한을 반환합니다.</summary>
        <returns>현재 사용 권한과 지정된 사용 권한의 교집합에 해당하는 새 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 또는 <paramref name="target" />이 <paramref name="null" />이거나 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />의 인스턴스가 아닌 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 되는 사용 권한을 지정 된 사용 권한 및 현재 사용 권한에서 모두 존재 하 던 리소스 작업 쌍에 있습니다. 리소스 작업 쌍에 사용 권한을 둘 중 하나에 존재 하는 포함 되지 않습니다. 에 대 한 한 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 새 사용 권한이 되려면 현재 보안 주체가 하기만에 현재 사용 권한 및 지정한 사용 권한의 공통 된 리소스 작업 쌍에 대 한 승인을 받아야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">하위 집합 관계를 테스트할 사용 권한입니다. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />의 인스턴스여야 합니다.</param>
        <summary>현재 사용 권한이 지정된 사용 권한의 하위 집합인지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          현재 사용 권한이 지정된 사용 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 권한은 현재 사용 권한이 포함 된 리소스 작업 쌍 모두도 지정된 된 사용에 지정된 된 사용 권한의 하위 집합입니다. 경우 `target` 은 `null` 의 인스턴스가 아닌 또는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> 반환 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>사용 권한이 제한되지 않았는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          현재 권한이 제한되지 않은 경우 <see langword="true" />이고, 제한되는 경우 <see langword="false" />입니다. 권한이 제한되지 않음을 나타내는 <see langword="true" />를 항상 반환합니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XML로 인코딩된 현재 사용 권한 및 해당 상태 형식을 반환합니다.</summary>
        <returns>XML로 인코딩된 현재 사용 권한 및 해당 상태 형식입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하 여 인코딩된 XML 형식에서 주 서버를 재구성할 수 있습니다는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">현재 사용 권한과 결합할 사용 권한입니다. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 형식이어야 합니다.</param>
        <summary>현재 권한과 지정된 권한의 합집합에 해당하는 새 권한을 반환합니다. 현재 인스턴스 및 대상 인스턴스에 존재하는 리소스-작업 쌍을 모두 보유하는 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 개체입니다.</summary>
        <returns>현재 사용 권한과 지정된 사용 권한의 합집합에 해당하는 새 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 또는 <paramref name="target" />이 <paramref name="null" />이거나 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />의 인스턴스가 아닌 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 되는 사용 권한을에 현재 사용 권한이 있는 포함 된 리소스 작업 쌍의 모든 않았으며의 지정한 사용 권한에 포함 된 리소스 작업 쌍의 모든 표시 됩니다. 에 대 한 한 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 새 사용 권한이 되려면 현재 보안 주체가 현재 사용 권한과에 존재 하는 리소스 작업 쌍의 모든와 모든 지정된 된 사용에 존재 하는 리소스 작업 쌍에 대 한 권한이 있어야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>