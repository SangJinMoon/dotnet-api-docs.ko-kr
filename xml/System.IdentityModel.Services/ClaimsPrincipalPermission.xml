<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClaimsPrincipalPermission.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583e7d38da992c06fbcfa631ea8af70aebe6366f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83e7d38da992c06fbcfa631ea8af70aebe6366f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Represents a permission that uses a <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph> implementation to determine if access to a resource should be granted to the active principal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph> 구현을 통해 리소스에 대한 액세스 권한이 활성 보안 주체에 부여되어야 하는지를 결정하는 권한을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> class provides the capability to perform imperative access checks by using the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> that is configured for an application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 클래스를 사용 하 여 명령적 액세스 검사를 수행 하는 기능을 제공 된 <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> 응용 프로그램에 대해 구성 된 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>By invoking the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method or the static <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method, you can provide protection to resources from within the execution path of your code according to the authorization policy defined for your claims authentication manager.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드 또는 정적 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> 메서드를 클레임 인증 관리자에 대해 정의 된 권한 부여 정책에 따라 코드의 실행 경로 내에서 리소스에 대 한 보호를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Declarative access checks can be performed by using the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt;</ph> class.</source>
          <target state="translated">선언적 액세스 검사를 사용 하 여 수행할 수는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> class uses the claims authorization manager configured by the <ph id="ph2">&lt;xref:System.IdentityModel.Configuration.IdentityConfiguration&gt;</ph> that is set under the <ph id="ph3">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 클래스도 구성 하는 클레임 권한 부여 관리자를 사용 하 여는 <ph id="ph2">&lt;xref:System.IdentityModel.Configuration.IdentityConfiguration&gt;</ph> 아래에서 설정 되는 <ph id="ph3">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>This is true in all cases, even in scenarios where WS-Federation is not used; for example, active (WCF) Web applications and Console applications.</source>
          <target state="translated">이 WS-페더레이션 사용 되지 않습니다; 시나리오 에서도 모든 경우에 마찬가지 예를 들어 활성 (WCF) 웹 응용 프로그램 및 콘솔 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>You can specify the claims authorization manager either in configuration or programmatically.</source>
          <target state="translated">클레임 권한 부여 관리자 구성에서 또는 프로그래밍 방식으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>To specify the claims authorization manager in a configuration file, set the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>claimsAuthorizationManager<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)</ept> element under an <bpt id="p2">[</bpt><ph id="ph3">&amp;lt;</ph>identityConfiguration<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)</ept> element and ensure that this identity configuration is referenced by the <bpt id="p3">[</bpt><ph id="ph5">&amp;lt;</ph>federationConfiguration<ph id="ph6">&amp;gt;</ph><ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)</ept> element that is loaded by the runtime (for example, by setting the <ph id="ph7">`identityConfigurationName`</ph> attribute).</source>
          <target state="translated">클레임 권한 부여 관리자는 구성 파일을 지정 하려면 설정는 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>claimsAuthorizationManager<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)</ept> 요소는 <bpt id="p2">[</bpt> <ph id="ph3">&amp;lt;</ph>identityConfiguration<ph id="ph4">&amp;gt;</ph> <ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)</ept> 요소에서 id 구성을이 참조 하는지 확인 하 고는 <bpt id="p3">[</bpt> <ph id="ph5">&amp;lt;</ph>federationConfiguration<ph id="ph6">&amp;gt;</ph> <ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)</ept> 런타임에 의해 로드 되는 요소 (예를 들어 여 설정의 <ph id="ph7">`identityConfigurationName`</ph> 특성).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>To set the claims authorization manager programmatically, provide a handler for the <ph id="ph1">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">클레임 권한 부여 관리자를 프로그래밍 방식으로 설정 하려면에 대 한 처리기를 제공는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>On one level, the functionality provided by <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> is similar to the role-based access checks (RBAC) provided through the <ph id="ph2">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> class; however, the <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> class performs checks based on the claims presented by the active principal.</source>
          <target state="translated">한 수준에서 제공 하는 기능 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 역할 기반 액세스 검사 (RBAC)를 통해 제공 된 것과 비슷합니다는 <ph id="ph2">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> 클래스입니다; 그러나는 <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> 클래스 활성 사용자가 있는 클레임을 기반으로 검사를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>This enables far more granularity than is available through pure RBAC, where many permissions are typically collected under a single role.</source>
          <target state="translated">따라서 단일 역할에 따라 많은 사용 권한을 수집 일반적으로 됩니다 순수 RBAC를 통해 사용할 수 있는 것 보다 훨씬 더 많은 세분성 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Perhaps, more importantly, claims-based authorization enables better separation of business logic and authorization policy because permission can be demanded for a specific action on a resource in code and back-end policy can be used to configure which claims the presenting entity must possess in order to satisfy the demand.</source>
          <target state="translated">아마도, 무엇 보다도 클레임 기반 권한 부여 코드에서 리소스에 대 한 특정 작업에 대 한 권한이 필요할 수 있습니다 백 엔드 정책은 클레임을 구성 하려면 사용 될 수 있으므로 더 잘 분리 비즈니스 논리 및 권한 부여 정책을 사용 하도록 설정 된 엔터티를 제시 수요를 충족 하기 위해가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Like RBAC, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> performs a user-based access check, that is, unlike code access security implemented by classes that derive from the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class and use a stack walk to ensure that all callers of the code have been granted a permission, <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> performs its check only on the current principal.</source>
          <target state="translated">RBAC 같은 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 에서 파생 된 클래스에서 구현 하는 코드 액세스 보안 달리 즉, 사용자 기반 액세스 검사를 수행 된 <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> 클래스를 사용 하 여 스택 워크는 코드의 모든 호출자에 게 사용 권한을 부여 했는지 확인 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph>현재 보안 주체에 대해서만 검사를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The static <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method checks access for a specified action on a specified resource.</source>
          <target state="translated">정적 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> 메서드는 지정된 된 리소스에 대 한 지정 된 작업에 대 한 액세스를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The resource and action are both strings and are typically URIs.</source>
          <target state="translated">리소스 및 작업은 모두 문자열 며 일반적으로 Uri입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>You can also initialize an instance of <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> with an action and a resource and call the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method.</source>
          <target state="translated">인스턴스를 초기화할 수도 있습니다 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 동작 및 리소스 및 호출 된 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
          <target state="translated">생성자는 단일 리소스 및 작업에만 사용 하지만 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 통해 개체를 결합 하는 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>A permission created by using these methods may contain multiple resource-action pairs.</source>
          <target state="translated">이러한 메서드를 사용 하 여 만든 권한 여러 리소스 작업 쌍을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Both methods determine access by invoking the <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> method of the configured claims authorization manager with an <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>), the resource, and the action.</source>
          <target state="translated">두 메서드를 호출 하 여 액세스가 결정는 <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> 으로 구성 된 클레임 권한 부여 관리자의 메서드는 <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> 활성 보안 주체가 구성 (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph>), 리소스 및 작업.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>They throw a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> if the current principal is not authorized to perform the action on the resource; otherwise, execution proceeds.</source>
          <target state="translated">Throw 한 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 현재 보안 주체가 리소스에 작업을 수행할 수 있는 권한이 없는 경우 그렇지 않은 경우 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>In the case of a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> that contains multiple resource-action pairs, the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> method is invoked for each of the resource-action pairs contained in the permission.</source>
          <target state="translated">경우에 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 여러 리소스 작업 쌍을 포함 하는 <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> 권한에 포함 된 리소스 작업 쌍의 각 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>For the call to <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed, the active principal must be authorized for all of the resource-action pairs contained in the permission.</source>
          <target state="translated">에 대 한 호출에 대 한 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 성공 하 여 활성 사용자 권한에 포함 된 리소스 작업 쌍의 모든 권한이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The following example shows how to protect a resource by using the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method, or a <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt;</ph> declaration.</source>
          <target state="translated">다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> 메서드, 또는 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt;</ph> 선언 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>In each case, the configured <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> is invoked to evaluate the current principal against the specified resource and action.</source>
          <target state="translated">각각의 경우 구성 된 <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> 평가 된 지정 된 리소스 및 작업에 대 한 현재 보안 주체를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>If the current principal is not authorized for the specified action on the specified resource, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown; otherwise, execution proceeds.</source>
          <target state="translated">현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> throw 되 고, 그러지 않으면 실행이 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>The following XML shows the minimum configuration required to use a custom claims authorization manager with the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> class.</source>
          <target state="translated">다음 XML 표시 사용자 지정 클레임 권한 부여를 사용 하는 데 필요한 최소 구성 된 관리자는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>You must, at a minimum, declare both the <ph id="ph1">`system.identityModel`</ph> and the <ph id="ph2">`system.identityModel.services`</ph> sections in the <ph id="ph3">`&lt;configSection&gt;`</ph> element and then specify your authorization manager in a <bpt id="p1">[</bpt><ph id="ph4">&amp;lt;</ph>claimsAuthorizationManager<ph id="ph5">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)</ept> element under the default identity configuration.</source>
          <target state="translated">여기에 최소한 선언 해야 둘 다는 <ph id="ph1">`system.identityModel`</ph> 및 <ph id="ph2">`system.identityModel.services`</ph> 섹션의 <ph id="ph3">`&lt;configSection&gt;`</ph> 요소 다음에 권한 부여 관리자를 지정 하 고는 <bpt id="p1">[</bpt> <ph id="ph4">&amp;lt;</ph>claimsAuthorizationManager<ph id="ph5">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)</ept>기본 id 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>This will ensure that your authorization manager is referenced from the default federation configuration.</source>
          <target state="translated">이렇게 하면 권한 부여 관리자는 기본 페더레이션 구성에서 참조 되는 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
          <source>Alternatively, you can specify the name of the identity configuration under which your authorization manager is specified in the <ph id="ph1">`identityConfigurationName`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>federationConfiguration<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)</ept> element.</source>
          <target state="translated">권한 부여 관리자에 지정 된 id 구성의 이름을 지정할 수도 있습니다는 <ph id="ph1">`identityConfigurationName`</ph> 특성에는 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>federationConfiguration<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>The resource on which the principal should be authorized.</source>
          <target state="translated">보안 주체에 권한이 부여되어야 하는 리소스입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>The action for which the principal should be authorized.</source>
          <target state="translated">보안 주체에 권한이 부여되어야 하는 작업입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> object is initialized with the specified resource-action pair.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 개체가 지정 된 리소스 작업 쌍으로 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>You can call the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method to perform an access check.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드 액세스 검사를 수행 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
          <target state="translated">생성자는 단일 리소스 및 작업에만 사용 하지만 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 통해 개체를 결합 하는 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source>The permission created through these methods may contain multiple resource-action pairs.</source>
          <target state="translated">이러한 방법을 통해 만든 사용 권한은 여러 리소스 작업 쌍을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="resource" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resource" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="action" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The resource on which the principal should be authorized.</source>
          <target state="translated">보안 주체에 권한이 부여되어야 하는 리소스입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The action for which the principal should be authorized.</source>
          <target state="translated">보안 주체에 권한이 부여되어야 하는 작업입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>Checks if the current principal is authorized to perform the specified action on the specified resource.</source>
          <target state="translated">지정된 리소스에 대해 지정된 작업을 수행할 수 있는 권한이 현재 주체에 부여되었는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The principal must be authorized for the specified action on the specified resource or the <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> exception is thrown.</source>
          <target state="translated">지정된 된 리소스에 지정된 된 작업에 대 한 보안 주체에 권한을 부여 해야 또는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> method of the configured claims authorization manager is invoked with an <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), the resource, and the action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> 구성 된 클레임 권한 부여 관리자의 메서드를 호출는 <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> 활성 보안 주체가 이루어진 (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), 리소스 및 작업.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The following example shows how to protect a resource by using the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action.</source>
          <target state="translated">지정 된 리소스 및 작업에 대 한 현재 보안 주체를 평가 하는 구성 된 클레임 권한 부여 관리자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>If the current principal is not authorized for the specified action on the specified resource, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown; otherwise, execution proceeds.</source>
          <target state="translated">현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> throw 되 고, 그러지 않으면 실행이 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The current principal is not assignable from <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsPrincipal" /&gt;</ph>.</source>
          <target state="translated">현재 보안 주체는 <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsPrincipal" /&gt;</ph>에서 할당할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>There is no <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph> configured.</source>
          <target state="translated">구성된 <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph>가 없는 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
          <source>The authorization check failed.</source>
          <target state="translated">권한 부여 검사에 실패했습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy">
          <source>Returns a copy of the current <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> instance.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 인스턴스의 복사본을 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy">
          <source>A <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> copied from the current instance.</source>
          <target state="translated">현재 인스턴스에서 복사된 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>Checks if the current principal is authorized for the resource-action pairs associated with the current instance.</source>
          <target state="translated">현재 인스턴스와 연결된 리소스 작업 쌍에 대한 권한이 현재 주체에 부여되었는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The current principal must be authorized for all of the resource-action pairs associated with this instance or the <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> exception is thrown.</source>
          <target state="translated">이 인스턴스와 연결 된 리소스 작업 쌍의 모든 현재 보안 주체에 권한을 부여 해야 또는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
          <target state="translated">생성자는 단일 리소스 및 작업에만 사용 하지만 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> 통해 개체를 결합 하는 <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The permission created through these methods may contain multiple resource-action pairs.</source>
          <target state="translated">이러한 방법을 통해 만든 사용 권한은 여러 리소스 작업 쌍을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method invokes the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> method of the configured claims authorization manager with an <ph id="ph3">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph4">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), the resource, and the action for each of the resource-action pairs contained in the permission.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드가 호출 하는 <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType&gt;</ph> 으로 구성 된 클레임 권한 부여 관리자의 메서드는 <ph id="ph3">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> 하 여 활성 사용자는 구성 (<ph id="ph4">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), 리소스와 각 포함 된 리소스 작업 쌍에 대 한 작업 사용 권한.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>For the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed the active principal must be authorized for all of the resource-action pairs that are contained in the permission.</source>
          <target state="translated">에 대 한는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 활성 성공 하려면 보안 주체가 모든 권한에 포함 된 리소스 작업 쌍에 대 한 권한이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The following example shows how to protect a resource by using the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제를 사용 하 여 리소스를 보호 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action.</source>
          <target state="translated">지정 된 리소스 및 작업에 대 한 현재 보안 주체를 평가 하는 구성 된 클레임 권한 부여 관리자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>If the current principal is not authorized for the specified action on the specified resource, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown; otherwise, execution proceeds.</source>
          <target state="translated">현재 보안 주체가 지정된 된 리소스에 지정된 된 작업에 대 한 권한이 없는 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> throw 되 고, 그러지 않으면 실행이 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The current principal is not assignable from <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsPrincipal" /&gt;</ph>.</source>
          <target state="translated">현재 보안 주체는 <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsPrincipal" /&gt;</ph>에서 할당할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>There is no <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph> configured.</source>
          <target state="translated">구성된 <ph id="ph1">&lt;see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /&gt;</ph>가 없는 경우</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
          <source>The authorization check failed.</source>
          <target state="translated">권한 부여 검사에 실패했습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
          <source>The XML encoding to use to reconstruct the permission.</source>
          <target state="translated">사용 권한을 다시 생성하는 데 사용할 XML 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
          <source>Reconstructs the current permission and its state from the specified XML encoding.</source>
          <target state="translated">지정된 XML 인코딩에서 현재 사용 권한 및 상태를 다시 생성합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
          <source>Reconstructs a permission from the XML encoding created by a call to the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A&gt;</ph> method.</source>
          <target state="translated">호출 하 여 만든 XML 인코딩을 사용 권한을 다시 만듭니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
          <source>The encoding contains unrecognized elements or attributes or improperly formed XML.</source>
          <target state="translated">인코딩에 인식할 수 없는 요소나 특성 또는 부적합한 형식의 XML이 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>The permission to intersect with the current permission.</source>
          <target state="translated">현재 사용 권한과 교차하는 사용 권한입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>It must be an instance of <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>의 인스턴스여야 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>Returns a permission that is the intersection of the current permission and the specified permission.</source>
          <target state="translated">현재 권한과 지정된 권한의 교집합에 해당하는 권한을 반환합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> that represents the intersection of the current permission and the specified permission; or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if <ph id="ph3">&lt;paramref name="target" /&gt;</ph> is <ph id="ph4">&lt;paramref name="null" /&gt;</ph> or is not an instance of <ph id="ph5">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>.</source>
          <target state="translated">현재 사용 권한과 지정된 사용 권한의 교집합에 해당하는 새 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="target" /&gt;</ph>이 <ph id="ph4">&lt;paramref name="null" /&gt;</ph>이거나 <ph id="ph5">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>의 인스턴스가 아닌 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>The permission that is returned has only the resource-action pairs that were present both in the current permission and in the specified permission.</source>
          <target state="translated">반환 되는 사용 권한을 지정 된 사용 권한 및 현재 사용 권한에서 모두 존재 하 던 리소스 작업 쌍에 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>Resource-action pairs that existed in only one or the other of the permissions are not included.</source>
          <target state="translated">리소스 작업 쌍에 사용 권한을 둘 중 하나에 존재 하는 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
          <source>For a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed on the new permission, the current principal only needs to be authorized for the resource-action pairs that were common to the current permission and the specified permission.</source>
          <target state="translated">에 대 한 한 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 새 사용 권한이 되려면 현재 보안 주체가 하기만에 현재 사용 권한 및 지정한 사용 권한의 공통 된 리소스 작업 쌍에 대 한 승인을 받아야 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The permission to be tested for the subset relationship.</source>
          <target state="translated">하위 집합 관계를 테스트할 사용 권한입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source>It must be an instance of <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>의 인스턴스여야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source>Returns a value that indicates whether current permission is a subset of the specified permission.</source>
          <target state="translated">현재 사용 권한이 지정된 사용 권한의 하위 집합인지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if current permission is a subset of the specified permission; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 사용 권한이 지정된 사용 권한의 하위 집합이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source>The current permission is a subset of the specified permission if all of the resource-action pairs contained in the current permission are also present in the specified permission.</source>
          <target state="translated">현재 권한은 현재 사용 권한이 포함 된 리소스 작업 쌍 모두도 지정된 된 사용에 지정된 된 사용 권한의 하위 집합입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">`null`</ph> or is not an instance of <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph>, the <ph id="ph4">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A&gt;</ph> returns <ph id="ph5">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`target`</ph> 은 <ph id="ph2">`null`</ph> 의 인스턴스가 아닌 또는 <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph>, <ph id="ph4">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A&gt;</ph> 반환 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted">
          <source>Returns a value that indicates whether the permission is unrestricted.</source>
          <target state="translated">사용 권한이 제한되지 않았는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the permission is unrestricted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 권한이 제한되지 않은 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 제한되는 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted">
          <source>Always returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> indicating that permission is unrestricted.</source>
          <target state="translated">권한이 제한되지 않음을 나타내는 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 항상 반환합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml">
          <source>Returns the XML encoded form of the current permission and its state.</source>
          <target state="translated">XML로 인코딩된 현재 사용 권한 및 해당 상태 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml">
          <source>The XML encoded form of the current permission and its state.</source>
          <target state="translated">XML로 인코딩된 현재 사용 권한 및 해당 상태 형식입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml">
          <source>The principal can be reconstructed from its XML encoded form by calling the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A&gt;</ph> method.</source>
          <target state="translated">호출 하 여 인코딩된 XML 형식에서 주 서버를 재구성할 수 있습니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>The permission to combine with current permission.</source>
          <target state="translated">현재 사용 권한과 결합할 사용 권한입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>It must be of type <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>Returns a new permission that is the union of the current permission and the specified permission.</source>
          <target state="translated">현재 권한과 지정된 권한의 합집합에 해당하는 새 권한을 반환합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source><ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> object that has all of the resource-action pairs that are present in the current instance and the target instance.</source>
          <target state="translated">현재 인스턴스 및 대상 인스턴스에 존재하는 리소스-작업 쌍을 모두 보유하는 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> that represents the union of the current permission and the specified permission; or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if <ph id="ph3">&lt;paramref name="target" /&gt;</ph> is <ph id="ph4">&lt;paramref name="null" /&gt;</ph> or is not an instance of <ph id="ph5">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>.</source>
          <target state="translated">현재 사용 권한과 지정된 사용 권한의 합집합에 해당하는 새 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="target" /&gt;</ph>이 <ph id="ph4">&lt;paramref name="null" /&gt;</ph>이거나 <ph id="ph5">&lt;see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /&gt;</ph>의 인스턴스가 아닌 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>The permission that is returned has all of the resource-action pairs that are present in the current permission and all of the resource-action pairs that are present the specified permission.</source>
          <target state="translated">반환 되는 사용 권한을에 현재 사용 권한이 있는 포함 된 리소스 작업 쌍의 모든 않았으며의 지정한 사용 권한에 포함 된 리소스 작업 쌍의 모든 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
          <source>For a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed on the new permission, the current principal must be authorized for all of the resource-action pairs that existed in the current permission and all of the resource-action pairs that existed in the specified permission.</source>
          <target state="translated">에 대 한 한 <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> 새 사용 권한이 되려면 현재 보안 주체가 현재 사용 권한과에 존재 하는 리소스 작업 쌍의 모든와 모든 지정된 된 사용에 존재 하는 리소스 작업 쌍에 대 한 권한이 있어야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>