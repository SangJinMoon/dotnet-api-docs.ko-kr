<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlSchemaValidator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5593dcfff13b2f3c4579da94de3116830777dc050.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">593dcfff13b2f3c4579da94de3116830777dc050</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Represents an XML Schema Definition Language (XSD) Schema validation engine.</source>
          <target state="translated">XSD(XML 스키마 정의 언어) 스키마 유효성 검사 엔진을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> class cannot be inherited.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Do not use schemas from unknown or untrusted sources or locations.</source>
          <target state="translated">위치 또는 알 수 없거나 신뢰할 수 없는 원본에서 스키마를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Doing so will compromise the security of your code.</source>
          <target state="translated">이렇게 하면 코드의 보안을 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>XML schemas (including inline schemas) are inherently vulnerable to denial of service attacks; do not accept them in untrusted scenarios.</source>
          <target state="translated">XML 스키마 (인라인 스키마 포함)는 기본적으로 서비스 거부 공격; 되기 쉬우므로 신뢰할 수 없는 경우에는 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Schema validation error messages and exceptions may expose sensitive information about the content model or URI paths to the schema file.</source>
          <target state="translated">스키마 유효성 검사 오류 메시지와 예외는 정적 콘텐츠 모델이 나 스키마 파일에 대 한 URI 경로 대 한 중요 한 정보를 노출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Be careful not to expose this information to untrusted callers.</source>
          <target state="translated">신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 하십시오.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class provides an efficient, high-performance mechanism to validate XML data against XML schemas in a push-based manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스는 밀어넣기 기반 방식으로 XML 스키마에 대해 XML 데이터의 유효성을 검사할 수 있는 효과적인 고성능 메커니즘을 제공합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>For example, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class allows you to validate an XML infoset in-place without having to serialize it as an XML document and then reparse the document using a validating XML reader.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스를 사용하면 XML 문서로 serialize한 다음 유효성 검사 XML 판독기를 사용하여 문서를 다시 구문 분석할 필요 없이 내부에서 직접 XML Infoset의 유효성을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class can also be used to build validation engines over custom XML data sources or as a way to build a validating XML writer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스 사용자 지정 XML 데이터 소스를 통해 또는 유효성 검사 XML 작성기를 작성 하는 방법으로 유효성 검사 엔진을 빌드하는 데 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class, see the <bpt id="p1">[</bpt>XmlSchemaValidator Push-Based Validation<ept id="p1">](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md)</ept> topic.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스를 참조 하십시오.는 <bpt id="p1">[</bpt>XmlSchemaValidator 밀어넣기 기반 유효성 검사<ept id="p1">](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation flags of an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object are not set be default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> 의 유효성 검사 플래그는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 없는 개체 집합 기본값 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object is <ph id="ph3">`null`</ph> by default.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체가 <ph id="ph3">`null`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.</source>
          <target state="translated">결과적으로 외부 스키마에서 참조 되는 가져오기 또는 redefine 요소 해결 되지 않은 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> object containing element and attribute names as atomized strings.</source>
          <target state="translated">원자화된 문자열 형식의 요소 및 특성 이름이 포함된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> object containing the XML Schema Definition Language (XSD) schemas used for validation.</source>
          <target state="translated">유효성 검사에 사용할 XSD(XML 스키마 정의 언어) 스키마가 포함된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.IXmlNamespaceResolver" /&gt;</ph> object used for resolving namespaces encountered during validation.</source>
          <target state="translated">유효성을 검사하는 동안 발견된 네임스페이스를 확인하는 데 사용하는 <ph id="ph1">&lt;see cref="T:System.Xml.IXmlNamespaceResolver" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /&gt;</ph> value specifying schema validation options.</source>
          <target state="translated">스키마 유효성 검사 옵션을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>The contents of the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> parameter are copied into an internal <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object when the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> or the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation options are set.</source>
          <target state="translated">콘텐츠는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> 매개 변수는 내부에 복사 됩니다 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> 개체 때는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> 유효성 검사 옵션을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>As a result, changes to the input <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object during validation do not affect the outcome of validation.</source>
          <target state="translated">결과적으로, 입력에 변경 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> 유효성 검사 중에 개체를 유효성 검사의 결과 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> parameter specified is not compiled, its <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt;</ph> method is called.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> 지정 된 매개 변수는 컴파일되지 해당 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> parameter is especially important for validating <ph id="ph2">`xs:QName`</ph> types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> 매개 변수는 유효성 검사를 위해 특히 중요 <ph id="ph2">`xs:QName`</ph> 형식입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class does not copy the in-scope namespaces from the <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> object but instead holds a reference to it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스 범위에서 네임 스페이스를 복사 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> 개체 하지만 대신에 대 한 참조를 보유 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>This allows new namespaces to be added to the <ph id="ph1">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> object during the validation process.</source>
          <target state="translated">이렇게 하면 새 네임 스페이스에 추가할 수 있습니다.는 <ph id="ph1">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> 유효성 검사 프로세스 중에 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation flags of an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object are not set be default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> 의 유효성 검사 플래그는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 없는 개체 집합 기본값 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object is <ph id="ph3">`null`</ph> by default.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체가 <ph id="ph3">`null`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.</source>
          <target state="translated">결과적으로 외부 스키마에서 참조 되는 가져오기 또는 redefine 요소 해결 되지 않은 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>For an example of the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> constructor, see the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class reference topic.</source>
          <target state="translated">에 대 한 예제는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> 생성자 참조는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스 참조 항목입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>One or more of the parameters specified are <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 매개 변수 중 하나 이상이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
          <source>An error occurred while compiling schemas in the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> 매개 변수에 포함된 스키마를 컴파일하는 동안 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> object to add to the set of schemas used for validation.</source>
          <target state="translated">유효성 검사에 사용되는 스키마 집합에 추가할 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.</source>
          <target state="translated">유효성 검사에 사용되는 스키마 집합에 XSD(XML 스키마 정의 언어) 스키마를 추가합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> method can be used to simulate the effect of encountering an inline XML schema in the XML document being validated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> 유효성을 검사 중인 XML 문서에 인라인 XML 스키마의 효과 시뮬레이션 하 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The target namespace of the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> parameter cannot match that of any element or attribute already encountered by the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> 매개 변수의 대상 네임스페이스는 이미 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체에 발생한 요소나 특성의 대상 네임스페이스와 달라야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> validation option is not set, the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> method does nothing.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> 유효성 검사 옵션을 설정 하지 않으면는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A&gt;</ph> 메서드는 아무 작업도 수행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> parameter specified is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The target namespace of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> parameter matches that of any element or attribute already encountered by the <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> 매개 변수의 대상 네임스페이스가 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체에서 이미 발견한 요소 또는 특성의 대상 네임스페이스와 일치하는 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> parameter is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> 매개 변수가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
          <source>Ends validation and checks identity constraints for the entire XML document.</source>
          <target state="translated">유효성 검사를 끝내고 전체 XML 문서에서 identity 제약 조건을 확인합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;</ph> method ends validation and checks identity constraints for the entire XML document if the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> validation option is set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;</ph> 메서드 유효성 검사를 끝내 고 전체 XML 문서에 대 한 identity 제약 조건을 확인는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> 유효성 검사 옵션을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
          <source>An identity constraint error was found in the XML document.</source>
          <target state="translated">XML 문서에 identity 제약 조건 오류가 있는 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
          <source>Returns the expected attributes for the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에 나타날 수 있는 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> objects or an empty array if there are no expected attributes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> 개체의 배열이거나, 나타날 수 있는 특성이 없는 경우 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> method is called immediately after the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> method, all the attributes that could appear in the XML document are returned.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> 메서드 직후에 호출 되는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> 메서드를 XML 문서에 나타날 수 있는 모든 특성이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> method is called after one or more calls to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method, the attributes that haven't yet been validated for the current element are returned.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A&gt;</ph> 메서드를 한 번 이상 호출한 후에 호출 됩니다는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드를 현재 요소에 대 한 유효성 검사 아직 하지 않은 특성이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>Returns the expected particles in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에 나타날 수 있는 파티클을 반환합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaParticle" /&gt;</ph> objects or an empty array if there are no expected particles.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaParticle" /&gt;</ph> 개체의 배열이거나, 나타날 수 있는 파티클이 없는 경우 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>The valid particles that can be returned by the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> method are instances of the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAny&gt;</ph> classes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> 메서드가 반환할 수 있는 유효한 파티클은 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAny&gt;</ph> 클래스의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>When the compositor for the content model is an <ph id="ph1">`xs:sequence`</ph>, only the next particle in the sequence is returned.</source>
          <target state="translated">내용 모델의 compositor가 <ph id="ph1">`xs:sequence`</ph>인 경우 시퀀스에서 다음 파티클만 반환됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>If the compositor for the content model is an <ph id="ph1">`xs:all`</ph> or an <ph id="ph2">`xs:choice`</ph>, then all valid particles that could follow in the current element context are returned.</source>
          <target state="translated">내용 모델의 compositor가 <ph id="ph1">`xs:all`</ph> 또는 <ph id="ph2">`xs:choice`</ph>인 경우 현재 요소 컨텍스트에서 따를 수 있는 유효한 파티클이 모두 반환됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>For example, in the XML Schema Definition Language (XSD) schema and XML document that follow, after validating the <ph id="ph1">`book`</ph> element, the <ph id="ph2">`book`</ph> element is the current element context.</source>
          <target state="translated">예를 들어, XSD(XML 스키마 정의 언어) 스키마 및 이 스키마를 따르는 XML 문서에서 <ph id="ph1">`book`</ph> 요소의 유효성을 검사한 후에는 <ph id="ph2">`book`</ph> 요소가 현재 요소 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> method returns an array containing a single <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> object representing the <ph id="ph3">`title`</ph> element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> 요소를 나타내는 단일 <ph id="ph3">`title`</ph> 개체가 포함된 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>When the validation context is the <ph id="ph1">`title`</ph> element, the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> method returns an empty array.</source>
          <target state="translated">유효성 검사 컨텍스트가 <ph id="ph1">`title`</ph> 요소인 경우 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> 메서드는 빈 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> method is called after the <ph id="ph2">`title`</ph> element has been validated but before the <ph id="ph3">`description`</ph> element has been validated, it returns an array containing a single <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> object representing the <ph id="ph5">`description`</ph> element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> 요소의 유효성을 검사한 후 <ph id="ph2">`title`</ph> 요소의 유효성을 검사하기 전에 <ph id="ph3">`description`</ph> 메서드를 호출하면 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> 요소를 나타내는 단일 <ph id="ph5">`description`</ph> 개체가 포함된 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> method is called after the <ph id="ph2">`description`</ph> element has been validated then it returns an array containing a single <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAny&gt;</ph> object representing the wildcard.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A&gt;</ph> 요소의 유효성을 검사한 후 <ph id="ph2">`description`</ph> 메서드를 호출하면 와일드카드를 나타내는 단일 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAny&gt;</ph> 개체가 포함된 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>The example takes the following XML as input.</source>
          <target state="translated">이 예제에서는 다음 XML을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
          <source>The example takes the following XSD schema as input.</source>
          <target state="translated">이 예제에서는 다음 XSD 스키마를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> to populate with <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> objects for any attributes not yet encountered during validation in the element context.</source>
          <target state="translated">요소 컨텍스트에서 유효성 검사를 수행하는 동안 발견되지 않은 특성에 대해 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 개체로 채울 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
          <source>Validates identity constraints on the default attributes and populates the <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> specified with <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> objects for any attributes with default values that have not been previously validated using the <ph id="ph3">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> method in the element context.</source>
          <target state="translated">기본 특성에 대한 identity 제약 조건의 유효성을 검사하고, 요소 컨텍스트에서 <ph id="ph1">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> 메서드를 사용하여 아직 유효성이 검사되지 않고 기본값을 사용하는 모든 특성에 대해 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> 개체로 지정된 <ph id="ph3">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>를 채웁니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> method must be called after validating all the attributes for the current element with the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> 메서드를 호출 하 여 현재 요소에 대 한 모든 특성을 확인 한 후 해야는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> method should be used to determine what default attributes are to be inserted into the XML document being validated.</source>
          <target state="translated">유효성을 검사 중인 XML 문서에 삽입할 기본 특성을 결정하려면 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> 메서드를 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Initializes the state of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체의 상태를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>Initializes the state of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체의 상태를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> method is only valid if called immediately after the construction of an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object or after a call to <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> 메서드는 생성 후 즉시 호출 하는 경우에 유효만 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체를 호출한 후 또는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
          <source>Calling the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /&gt;</ph> method is valid immediately after the construction of an <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object or after a call to <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /&gt;</ph> only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /&gt;</ph> 개체를 만든 직후 또는 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph>을 호출한 후가 아닌 시점에 <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /&gt;</ph> 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph>, or <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> object used to initialize the validation context of the <ph id="ph4">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object for partial validation.</source>
          <target state="translated">부분 유효성 검사를 위해 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> 개체의 유효성 검사 컨텍스트를 초기화하는 데 사용할 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>Initializes the state of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object using the <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> specified for partial validation.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph>를 사용하여 부분 유효성 검사를 위해 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> 개체의 상태를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> method that takes an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> as a parameter initializes an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object to its starting state for partial validation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph>를 매개 변수로 사용하는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> 메서드는 부분 유효성 검사를 위해 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체를 시작 상태로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>In the following example, an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> is initialized for partial validation using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 부분 유효성 검사를 위해 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> 메서드를 사용하여 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph>를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The <ph id="ph1">`orderNumber`</ph> schema element is passed by selecting the schema element by <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> in the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaObjectTable&gt;</ph> collection returned by the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`orderNumber`</ph> 개체의 <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> 속성이 반환하는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaObjectTable&gt;</ph> 컬렉션에서 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A&gt;</ph>으로 스키마 요소를 선택하여 <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> 스키마 요소를 전달합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object then validates this specific element.</source>
          <target state="translated">그러면 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체가 이 특정 요소의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The example takes the following XML schema as input.</source>
          <target state="translated">이 예제에서는 다음 XML 스키마를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>Calling the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /&gt;</ph> method is valid immediately after the construction of an <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object or after a call to <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /&gt;</ph> only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /&gt;</ph> 개체를 만든 직후 또는 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph>을 호출한 후가 아닌 시점에 <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /&gt;</ph> 메서드를 호출한 경우</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph>, or <ph id="ph4">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaAttribute" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> 개체가 아닌 경우</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> parameter cannot be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaObject" /&gt;</ph> 매개 변수는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
          <source>Gets or sets the line number information for the XML node being validated.</source>
          <target state="translated">유효성을 검사할 XML 노드의 줄 번호 정보를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.IXmlLineInfo" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.IXmlLineInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
          <source>Line information is reported by any <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> thrown during the validation process.</source>
          <target state="translated">모든 줄 정보를 보고 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> 유효성 검사 프로세스 중에 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
          <source>The default <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A&gt;</ph> property returns 0 for the <ph id="ph3">&lt;xref:System.Xml.IXmlLineInfo.LineNumber%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.IXmlLineInfo.LinePosition%2A&gt;</ph> properties.</source>
          <target state="translated">기본 <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A&gt;</ph> 속성에 대 한 0을 반환 합니다.는 <ph id="ph3">&lt;xref:System.Xml.IXmlLineInfo.LineNumber%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Xml.IXmlLineInfo.LinePosition%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set if the current element content is successfully skipped.</source>
          <target state="translated">현재 요소 콘텐츠를 성공적으로 건너뛴 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>Skips validation of the current element content and prepares the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object to validate content in the parent element's context.</source>
          <target state="translated">현재 요소 내용의 유효성 검사를 생략하고 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체를 준비하여 부모 요소의 컨텍스트에서 내용의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A&gt;</ph> method skips validation of the current element content and prepares the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object to validate content in the parent element's context; it is equivalent to skipping validation for all the children of the current element and then calling the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A&gt;</ph> 메서드는 현재 요소 내용의 유효성 검사를 생략 하 고 준비는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체는 부모 요소의 컨텍스트에서 내용의 유효성을 검사 하는 현재 요소의 모든 자식에 대 한 유효성 검사를 생략 하는 것과 같습니다 한 다음 호출 된 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>If the current element content is successfully skipped, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>.</source>
          <target state="translated">현재 요소 콘텐츠를 성공적으로 건너뛰면는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>No validation errors are reported on skipped content.</source>
          <target state="translated">건너뛴된 콘텐츠에 유효성 검사 오류가 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, calling <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> after calling <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
          <source>Gets or sets the source URI for the XML node being validated.</source>
          <target state="translated">유효성을 검사할 XML 노드의 소스 URI를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
          <source>A <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> object representing the source URI for the XML node being validated; the default is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">유효성을 검사할 XML 노드의 소스 URI를 나타내는 <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> 개체입니다. 기본값은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
          <source>The source URI is reported by any <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> thrown during the validation process.</source>
          <target state="translated">URI에서 보고 되는 소스 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> 유효성 검사 프로세스 중에 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A&gt;</ph> property is not set, the file name for the XML document is <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph> in validation error messages.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A&gt;</ph> 속성이 설정 되지 않은, XML 문서에 대 한 파일 이름이 <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph> 유효성 검사 오류 메시지에 있습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Validates the attribute in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 특성의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The local name of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The namespace URI of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The value of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the attribute.</source>
          <target state="translated">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>Validates the attribute name, namespace URI, and value in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The validated attribute's value.</source>
          <target state="translated">유효성이 검사된 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> method must be called after validating all the attributes for the current element with the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> 메서드를 호출 하 여 현재 요소에 대 한 모든 특성을 확인 한 후 해야는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> object was passed to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method validates the attribute against the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> object.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> 개체에 전달 된는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드 특성에 대해 유효성을 검사는 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>If the attribute is successfully validated in the current element context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">현재 요소 컨텍스트에서 특성이 성공적으로 확인 되 면는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The attribute is not valid in the current element context.</source>
          <target state="translated">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, calling <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> after calling <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>One or more of the parameters specified are <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 매개 변수 중 하나 이상이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The local name of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The namespace URI of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph> used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated">특성 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the attribute.</source>
          <target state="translated">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter and can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>Validates the attribute name, namespace URI, and value in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The validated attribute's value.</source>
          <target state="translated">유효성이 검사된 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> method must be called after validating all the attributes for the current element with the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> 메서드를 호출 하 여 현재 요소에 대 한 모든 특성을 확인 한 후 해야는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> object was passed to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> method validates the attribute against the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> object.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> 개체에 전달 된는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</ph> 메서드 특성에 대해 유효성을 검사는 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>If the attribute is successfully validated in the current element context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">현재 요소 컨텍스트에서 특성이 성공적으로 확인 되 면는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The attribute is not valid in the current element context.</source>
          <target state="translated">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, calling <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> after calling <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
          <source>One or more of the parameters specified are <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 매개 변수 중 하나 이상이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Validates the element in the current context.</source>
          <target state="translated">현재 컨텍스트에서 요소의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The local name of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The namespace URI of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the element's name.</source>
          <target state="translated">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>Validates the element in the current context.</source>
          <target state="translated">현재 컨텍스트에서 요소의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>If the element name is successfully validated in the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>If the element name or any of its attributes are invalid the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Invalid&gt;</ph>; otherwise the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>.</source>
          <target state="translated">요소 이름 또는 특성 중 하나라도 잘못 된 경우 현재 컨텍스트는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Invalid&gt;</ph>고, 그렇지 않으면는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이로 설정 되어 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The element's name is not valid in the current context.</source>
          <target state="translated">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The local name of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The namespace URI of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the element's name.</source>
          <target state="translated">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>xsi:Type<ept id="p1">&lt;/c&gt;</ept> attribute value of the element.</source>
          <target state="translated">요소의 <bpt id="p1">&lt;c&gt;</bpt>xsi:Type<ept id="p1">&lt;/c&gt;</ept> 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>xsi:Nil<ept id="p1">&lt;/c&gt;</ept> attribute value of the element.</source>
          <target state="translated">요소의 <bpt id="p1">&lt;c&gt;</bpt>xsi:Nil<ept id="p1">&lt;/c&gt;</ept> 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>xsi:SchemaLocation<ept id="p1">&lt;/c&gt;</ept> attribute value of the element.</source>
          <target state="translated">요소의 <bpt id="p1">&lt;c&gt;</bpt>xsi:SchemaLocation<ept id="p1">&lt;/c&gt;</ept> 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>xsi:NoNamespaceSchemaLocation<ept id="p1">&lt;/c&gt;</ept> attribute value of the element.</source>
          <target state="translated">요소의 <bpt id="p1">&lt;c&gt;</bpt>xsi:NoNamespaceSchemaLocation<ept id="p1">&lt;/c&gt;</ept> 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>Validates the element in the current context with the <bpt id="p1">&lt;c&gt;</bpt>xsi:Type<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>xsi:Nil<ept id="p2">&lt;/c&gt;</ept>, <bpt id="p3">&lt;c&gt;</bpt>xsi:SchemaLocation<ept id="p3">&lt;/c&gt;</ept>, and <bpt id="p4">&lt;c&gt;</bpt>xsi:NoNamespaceSchemaLocation<ept id="p4">&lt;/c&gt;</ept> attribute values specified.</source>
          <target state="translated">지정된 <bpt id="p1">&lt;c&gt;</bpt>xsi:Type<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>xsi:Nil<ept id="p2">&lt;/c&gt;</ept>, <bpt id="p3">&lt;c&gt;</bpt>xsi:SchemaLocation<ept id="p3">&lt;/c&gt;</ept> 및 <bpt id="p4">&lt;c&gt;</bpt>xsi:NoNamespaceSchemaLocation<ept id="p4">&lt;/c&gt;</ept> 특성 값으로 현재 컨텍스트에서 요소의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>If the element name is successfully validated in the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>If the element name or any of its attributes are invalid in the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Invalid&gt;</ph>; otherwise the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>.</source>
          <target state="translated">요소 이름이 나 특성 중 하나는 현재 컨텍스트에서 유효 하지 않은 경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Invalid&gt;</ph>고, 그렇지 않으면는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidity.NotKnown&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> value was not passed as a parameter to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> constructor, <ph id="ph3">`xsi:SchemaLocation`</ph> and <ph id="ph4">`xsi:NoNamespaceSchemaLocation`</ph> attribute values are ignored.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> 값에 대 한 매개 변수로 전달 되지 않았습니다 고 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;</ph> 생성자 <ph id="ph3">`xsi:SchemaLocation`</ph> 및 <ph id="ph4">`xsi:NoNamespaceSchemaLocation`</ph> 특성 값은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The element's name is not valid in the current context.</source>
          <target state="translated">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
          <source>For example, the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</source>
          <target state="translated">단순 콘텐츠를 포함하는 요소에 대해 해당 데이터 형식을 기준으로 요소의 텍스트 콘텐츠가 유효한지 확인하고 복합 콘텐츠를 포함하는 요소에 대해 현재 요소의 콘텐츠가 완전한지 확인합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the element.</source>
          <target state="translated">요소의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</source>
          <target state="translated">단순 콘텐츠를 포함하는 요소에 대해 해당 데이터 형식을 기준으로 요소의 텍스트 콘텐츠가 유효한지 확인하고 복합 콘텐츠를 포함하는 요소에 대해 현재 요소의 콘텐츠가 완전한지 확인합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The parsed, typed text value of the element if the element has simple content.</source>
          <target state="translated">요소에 단순 콘텐츠가 있는 경우 요소의 구문 분석되고 형식화된 텍스트 값입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>For elements with simple content, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method verifies that the text content of the element is valid according to its data type and returns the parsed typed value.</source>
          <target state="translated">단순 콘텐츠가 있는 요소의 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드 확인 요소의 텍스트 콘텐츠의 데이터 형식이 올바른지 및 구문 분석 된 형식화 된 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The text content of the element is obtained from the results of previous calls to <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph>.</source>
          <target state="translated">요소의 텍스트 콘텐츠를 결과에 대 한 이전 호출에서 가져온 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>For elements with complex content, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method verifies if the content of the current element is complete.</source>
          <target state="translated">복합 콘텐츠가 있는 요소에 대 한는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드는 현재 요소의 콘텐츠가 완전 한지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>If the element has a default value, the value returned from the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method is the default value for the element.</source>
          <target state="translated">요소에 있는 경우 기본 값에서 반환 되는 값은 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드는 요소에 대 한 기본값입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object was constructed with the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> value as a parameter, the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method checks the identity constraint rules (if any) that apply to the element.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 으로 생성 된 개체는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> 값을 매개 변수로 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 요소에 적용 되는 방법을 검사 identity 제약 조건 규칙 (있는 경우).</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>If the element is successfully validated in the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">현재 컨텍스트에서 요소는 유효성을 검사 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The element's content is not valid.</source>
          <target state="translated">요소의 콘텐츠가 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, if the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful validation of the text content of the element.</source>
          <target state="translated">요소의 텍스트 콘텐츠에 대한 유효성이 성공적으로 검사될 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The typed text content of the element.</source>
          <target state="translated">요소의 형식화된 텍스트 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>Verifies if the text content of the element specified is valid according to its data type.</source>
          <target state="translated">지정된 요소의 데이터 형식을 기준으로 해당 요소의 텍스트 콘텐츠가 유효한지 확인합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The parsed, typed simple content of the element.</source>
          <target state="translated">요소의 구문 분석되고 형식화된 단순 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>If you are validating against the <ph id="ph1">`xs:key`</ph>, <ph id="ph2">`xs:keyref`</ph>, or <ph id="ph3">`xs:unique`</ph> identity constraints, do not use the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method overload.</source>
          <target state="translated">에 대 한 유효성을 검사할 경우는 <ph id="ph1">`xs:key`</ph>, <ph id="ph2">`xs:keyref`</ph>, 또는 <ph id="ph3">`xs:unique`</ph> identity 제약 조건을 사용 하지 않는 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>Instead, call the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method and pass it the value of the element.</source>
          <target state="translated">대신, 호출의 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 메서드는 요소의 값을 전달 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>Then call the  <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method overload, which takes <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> as an argument, to verify that the text content of the element is valid according to its data type.</source>
          <target state="translated">그런 다음 호출에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드 오버 로드를 사용 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 요소의 텍스트 콘텐츠의 데이터 형식이 올바른지 확인 하려면를 인수로 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>For elements with simple content, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType&gt;</ph> method verifies that the text content of the element is valid according to its data type and returns the parsed typed value.</source>
          <target state="translated">단순 콘텐츠가 있는 요소의 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType&gt;</ph> 메서드 확인 요소의 텍스트 콘텐츠의 데이터 형식이 올바른지 및 구문 분석 된 형식화 된 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The text content of the element is obtained from the typed content passed as a parameter.</source>
          <target state="translated">요소의 텍스트 콘텐츠를 매개 변수로 전달 된 입력 된 콘텐츠를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>If calls to the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method have been previously made, an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">경우에 대 한 호출이 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 메서드 이전에 적용 되는 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>If the element has complex content an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">요소에 있는 경우 복합 콘텐츠는 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object was constructed with the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> value as a parameter, the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method checks the identity constraint rules (if any) that apply to the element.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 으로 생성 된 개체는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> 값을 매개 변수로 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 요소에 적용 되는 방법을 검사 identity 제약 조건 규칙 (있는 경우).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>If the element is successfully validated in the current context, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> properties are set with the results of the validation.</source>
          <target state="translated">현재 컨텍스트에서 요소는 유효성을 검사 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성 유효성 검사의 결과가 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The element's text content is not valid.</source>
          <target state="translated">요소의 텍스트 콘텐츠가 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> method was not called in the correct sequence (for example, if the <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> method is called after calling <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>), calls to the <ph id="ph4">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> method have been previously made, or the element has complex content.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph> 메서드의 호출 순서가 잘못되거나(예: <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /&gt;</ph>를 호출한 후 <ph id="ph3">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 경우), <ph id="ph4">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> 메서드를 이전에 호출했거나, 요소에 복합 콘텐츠가 있는 경우</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
          <source>The typed text content parameter cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">형식화된 텍스트 콘텐츠 매개 변수가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> object whose properties are set on successful verification that all the required attributes in the element context are present.</source>
          <target state="translated">요소 컨텍스트의 필수 특성이 모두 있는지를 화인하는 유효성 검사가 성공할 경우 속성이 설정되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>Verifies whether all the required attributes in the element context are present and prepares the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object to validate the child content of the element.</source>
          <target state="translated">요소 컨텍스트에 필수 특성이 모두 있는지 확인하고 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체를 준비하여 요소의 자식 내용의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> method should always be called before <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</ph> 메서드 하기 전에 항상 호출 해야 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph> method must be called before proceeding with validation of an element's content.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A&gt;</ph> 요소 내용의 유효성 검사를 진행 하기 전에 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>If all the required attributes in the element context are present, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> object's (if specified) <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Valid&gt;</ph>.</source>
          <target state="translated">요소 컨텍스트에 필수 특성이 모두 있는 경우에 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;</ph> 지정 하는 경우 개체의 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> 속성이 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidity.Valid&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>One or more of the required attributes in the current element context were not found.</source>
          <target state="translated">현재 요소 컨텍스트의 필수 특성 중 하나 이상이 없는 경우</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>For example, calling <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph> after calling <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /&gt;</ph>를 호출한 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
          <source>One or more of the parameters specified are <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 매개 변수 중 하나 이상이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Validates whether text is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</source>
          <target state="translated">현재 요소 컨텍스트에서 텍스트가 허용되는지 확인하고 현재 요소에 단순 내용이 있는지 확인하기 위해 텍스트를 누적합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>A text <ph id="ph1">&lt;see langword="string" /&gt;</ph> to validate in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 유효성을 검사할 텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>Validates whether the text <ph id="ph1">&lt;see langword="string" /&gt;</ph> specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</source>
          <target state="translated">지정된 텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph>을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>If the element has simple content, the text <ph id="ph1">`string`</ph> specified is concatenated on each call to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method until the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method is called.</source>
          <target state="translated">요소에 있는 경우 단순 콘텐츠를 텍스트 <ph id="ph1">`string`</ph> 지정을 호출할 때마다 연결는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 때까지 메서드는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method is called, all the text is validated.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>If the element has complex content, no text concatenation occurs.</source>
          <target state="translated">요소의 내용이 복합, 텍스트 연결 없음 발생 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>The text <ph id="ph1">&lt;see langword="string" /&gt;</ph> specified is not allowed in the current element context.</source>
          <target state="translated">지정된 텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph>을 현재 요소 컨텍스트에서 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>For example, the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
          <source>The text <ph id="ph1">&lt;see langword="string" /&gt;</ph> parameter cannot be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph> used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated">텍스트 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>Validates whether the text returned by the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph> object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph> 개체에서 반환된 텍스트를 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>The following are important notes to consider when using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method.</source>
          <target state="translated">다음은 사용할 때 고려해 야 할 중요 참고 사항에서 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>If the element has simple content, the text <ph id="ph1">`string`</ph> specified is concatenated on each call to the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> method until the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method is called.</source>
          <target state="translated">요소에 있는 경우 단순 콘텐츠를 텍스트 <ph id="ph1">`string`</ph> 지정을 호출할 때마다 연결는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</ph> 때까지 메서드는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> method is called, all the text is validated.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</ph> 메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>If the element has complex content, no text concatenation occurs.</source>
          <target state="translated">요소의 내용이 복합, 텍스트 연결 없음 발생 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>The text <ph id="ph1">&lt;see langword="string" /&gt;</ph> specified is not allowed in the current element context.</source>
          <target state="translated">지정된 텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph>을 현재 요소 컨텍스트에서 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>For example, the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
          <source>The text <ph id="ph1">&lt;see langword="string" /&gt;</ph> parameter cannot be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">텍스트 <ph id="ph1">&lt;see langword="string" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaValidator">
          <source>Validates whether white space is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</source>
          <target state="translated">현재 요소 컨텍스트에서 공백을 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
          <source>A white space <ph id="ph1">&lt;see langword="string" /&gt;</ph> to validate in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 유효성을 검사할 공백 <ph id="ph1">&lt;see langword="string" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
          <source>Validates whether the white space in the <ph id="ph1">&lt;see langword="string" /&gt;</ph> specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="string" /&gt;</ph>에 있는 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
          <source>White space is not allowed in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
          <source>For example, if the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph> used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated">공백 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph><ph id="ph2">&lt;see langword="delegate" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
          <source>Validates whether the white space returned by the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph> object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlValueGetter" /&gt;</ph> 개체에서 반환된 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
          <source>White space is not allowed in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> method was not called in the correct sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> 메서드가 올바른 시퀀스로 호출되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
          <source>For example, if the <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph> method is called after calling <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph>.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /&gt;</ph>를 호출한 후 <ph id="ph2">&lt;see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /&gt;</ph> 메서드를 호출하는 경우가 여기에 해당합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.ValidationEventHandler" /&gt;</ph> that receives schema validation warnings and errors encountered during schema validation.</source>
          <target state="translated">스키마 유효성을 검사하는 동안 발생하는 스키마 유효성 검사 경고 및 오류를 받을 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.ValidationEventHandler" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>If no <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> is specified, an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> is thrown for all schema validation errors with an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSeverityType&gt;</ph> value of <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSeverityType.Error&gt;</ph>.</source>
          <target state="translated">되지 않은 경우 <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> 지정는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> 인 모든 스키마 유효성 검사 오류에 대해 throw 되는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSeverityType&gt;</ph> 값 <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSeverityType.Error&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> is not thrown for validation warnings with an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSeverityType&gt;</ph> value of <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSeverityType.Warning&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> 인 유효성 검사 경고에 대 한 throw 되지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSeverityType&gt;</ph> 값 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSeverityType.Warning&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file against the <ph id="ph2">`contosoBooks.xsd`</ph> schema.</source>
          <target state="translated">다음 예제에서는 유효성을 검사는 <ph id="ph1">`contosoBooks.xml`</ph> 에 대 한 파일은 <ph id="ph2">`contosoBooks.xsd`</ph> 스키마입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to deserialize the <ph id="ph2">`contosoBooks.xml`</ph> file and pass the value of the nodes to the methods of the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스를 사용하여 <ph id="ph2">`contosoBooks.xml`</ph> 파일을 deserialize하고 노드 값을 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 클래스의 메서드에 전달합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`contosoBooks.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
          <target state="translated">이 예제에서는 또한 <ph id="ph1">`contosoBooks.xsd`</ph>를 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
          <source>Gets or sets the object sent as the sender object of a validation event.</source>
          <target state="translated">유효성 검사 이벤트의 sender 개체로 보낼 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>; the default is this <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다. 기본값은 이 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaValidator" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
          <source>For an example of a validation event, see the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler&gt;</ph> event.</source>
          <target state="translated">유효성 검사 이벤트의 예제를 보려면는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph> object used to resolve <bpt id="p1">&lt;c&gt;</bpt>xs:import<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>xs:include<ept id="p2">&lt;/c&gt;</ept> elements as well as <bpt id="p3">&lt;c&gt;</bpt>xsi:schemaLocation<ept id="p3">&lt;/c&gt;</ept> and <bpt id="p4">&lt;c&gt;</bpt>xsi:noNamespaceSchemaLocation<ept id="p4">&lt;/c&gt;</ept> attributes.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>xs:import<ept id="p1">&lt;/c&gt;</ept> 및 <bpt id="p2">&lt;c&gt;</bpt>xs:include<ept id="p2">&lt;/c&gt;</ept> 요소뿐만 아니라 <bpt id="p3">&lt;c&gt;</bpt>xsi:schemaLocation<ept id="p3">&lt;/c&gt;</ept> 및 <bpt id="p4">&lt;c&gt;</bpt>xsi:noNamespaceSchemaLocation<ept id="p4">&lt;/c&gt;</ept> 특성을 확인하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph> 개체를 설정합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph> object; the default is an <ph id="ph2">&lt;see cref="T:System.Xml.XmlUrlResolver" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph> 개체입니다. 기본값은 <ph id="ph2">&lt;see cref="T:System.Xml.XmlUrlResolver" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation flags of an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object are not set be default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> 의 유효성 검사 플래그는 <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 없는 개체 집합 기본값 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> object is <ph id="ph3">`null`</ph> by default.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;</ph> 개체가 <ph id="ph3">`null`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
          <source>As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.</source>
          <target state="translated">결과적으로 외부 스키마에서 참조 되는 가져오기 또는 redefine 요소 해결 되지 않은 기본적으로 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>