<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlSchemaType.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac585bac839dd366a43eb786976e61e86cdc516f147.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85bac839dd366a43eb786976e61e86cdc516f147</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaType">
          <source>The base class for all simple types and complex types.</source>
          <target state="translated">모든 단순 형식 및 복합 형식에 대한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Schema.XmlSchemaType">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class for an example using this class.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph> 클래스 및 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> 이 클래스를 사용 하는 예제에 대 한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element.</source>
          <target state="translated">컴파일 이후 개체 형식 또는 기본 제공 XSD(XML 스키마 정의 언어) 데이터 형식, simpleType 요소 또는 complexType 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>This is a post-schema-compilation infoset property.</source>
          <target state="translated">이 속성은 스키마 컴파일 이후 정보 집합 속성입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>The built-in XSD data type, simpleType element, or complexType element.</source>
          <target state="translated">기본 제공 XSD 데이터 형식, simpleType 요소 또는 complexType 요소입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>The complexType is derived from the type specified by the base value.</source>
          <target state="translated">ComplexType 기준 값에 지정 된 형식에서 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>The base value must be a QName.</source>
          <target state="translated">기준 값은 QName 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseSchemaType%2A&gt;</ph> property is obsolete and has been replaced by the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseSchemaType%2A&gt;</ph> 속성이 사용 되지 않으며로 대체 되었습니다는 <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
          <source>Gets the post-compilation value for the base type of this schema type.</source>
          <target state="translated">이 스키마 형식의 기본 형식에 대한 컴파일 이후 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> object representing the base type of this schema type.</source>
          <target state="translated">이 스키마 형식의 기본 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A&gt;</ph> property always has a value, because all schema types have a base type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A&gt;</ph> 모든 스키마 형식을 기본 형식 때문에 항상 속성 값이 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
          <source>This value is set upon schema compilation, making it a part of the post-schema-compilation infoset.</source>
          <target state="translated">스키마 컴파일 스키마 컴파일 infoset의 일부가 되 면이 값은 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.Datatype">
          <source>Gets the post-compilation value for the data type of the complex type.</source>
          <target state="translated">복합 형식의 데이터 형식에 대한 컴파일 이후 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Datatype">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDatatype" /&gt;</ph> post-schema-compilation value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDatatype" /&gt;</ph> 스키마 컴파일 이후 값입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Gets the post-compilation information on how this element was derived from its base type.</source>
          <target state="translated">이 요소가 해당 기본 형식에서 파생된 방법에 대한 컴파일 이후 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>One of the valid <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> values.</source>
          <target state="translated">유효한 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>The following table shows the values that this property can contain.</source>
          <target state="translated">다음 표에서이 속성에 포함 될 수 있는 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> value</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>No derivation method specified.</source>
          <target state="translated">파생 메서드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Derived by Substitution.</source>
          <target state="translated">대체에 의해 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Derived by Extension.</source>
          <target state="translated">확장에 의해 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Derived by Restriction.</source>
          <target state="translated">제한에 의해 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Derived by List.</source>
          <target state="translated">목록에 의해 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
          <source>Derived by Union.</source>
          <target state="translated">Union에 의해 파생 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.</source>
          <target state="translated">추가 파생이 허용되는지 여부를 나타내는 형식 파생의 최종 특성을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>One of the valid <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> values.</source>
          <target state="translated">유효한 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>The following table shows the values that this property can contain for simple type.</source>
          <target state="translated">다음 표에서 단순 형식에 대 한이 속성에 포함 될 수 있는 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> value</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Overrides the schema <ph id="ph1">`blockDefault`</ph> setting allowing any derivations by restriction, extension, or substitution to take place.</source>
          <target state="translated">스키마 재정의 <ph id="ph1">`blockDefault`</ph> 제한, 확장 또는 대체에의 한 파생 수 있도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>No derivation method is specified.</source>
          <target state="translated">없음 파생 메서드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>This is the default.</source>
          <target state="translated">이 값이 기본값입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Derivation rules are taken from the schema blockDefault setting.</source>
          <target state="translated">파생 규칙 스키마 blockDefault 설정에서 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Substitution.</source>
          <target state="translated">대체에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Extension.</source>
          <target state="translated">확장에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Restriction.</source>
          <target state="translated">제한에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source><ph id="ph1">`#all`</ph>.</source>
          <target state="translated"><ph id="ph1">`#all`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by any derivation method.</source>
          <target state="translated">파생 메서드에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>The following table shows the values that this property can contain for complex type.</source>
          <target state="translated">다음 표에서 복합 유형에 대 한이 속성에 포함 될 수 있는 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> value</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDerivationMethod&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Overrides the schema <ph id="ph1">`blockDefault`</ph> setting allowing any derivations by restriction, extension, or substitution to take place.</source>
          <target state="translated">스키마 재정의 <ph id="ph1">`blockDefault`</ph> 제한, 확장 또는 대체에의 한 파생 수 있도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>No derivation method is specified.</source>
          <target state="translated">없음 파생 메서드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>This is the default.</source>
          <target state="translated">이 값이 기본값입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Derivation rules are taken from the schema <ph id="ph1">`blockDefault`</ph> setting.</source>
          <target state="translated">스키마에서 파생 규칙 가져옵니다 <ph id="ph1">`blockDefault`</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Substitution.</source>
          <target state="translated">대체에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Extension.</source>
          <target state="translated">확장에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by Restriction.</source>
          <target state="translated">제한에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source><ph id="ph1">`#all`</ph>.</source>
          <target state="translated"><ph id="ph1">`#all`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Final">
          <source>Cannot be replaced by a type derived by any derivation method.</source>
          <target state="translated">파생 메서드에 의해 파생 된 형식으로 바꿀 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
          <source>Gets the post-compilation value of the <ph id="ph1">&lt;see cref="P:System.Xml.Schema.XmlSchemaType.Final" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.Schema.XmlSchemaType.Final" /&gt;</ph> 속성의 컴파일 이후 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
          <source>The post-compilation value of the <ph id="ph1">&lt;see cref="P:System.Xml.Schema.XmlSchemaType.Final" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.Schema.XmlSchemaType.Final" /&gt;</ph> 속성의 컴파일 이후 값입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
          <source>The default is the <ph id="ph1">&lt;see langword="finalDefault" /&gt;</ph> attribute value of the <ph id="ph2">&lt;see langword="schema" /&gt;</ph> element.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="finalDefault" /&gt;</ph> 요소의 <ph id="ph2">&lt;see langword="schema" /&gt;</ph> 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
          <source>This value indicates how the type is restricted when the type is extended through restriction.</source>
          <target state="translated">이 값 방식을 형식이 제한 된 형식의 제한을 통해 확장 될 때를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
          <source>If the type is marked as <ph id="ph1">`final`</ph>, this type cannot be extended.</source>
          <target state="translated">형식으로 표시 되어 있으면 <ph id="ph1">`final`</ph>,이 형식을 확장할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaType">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph> that represents the built-in complex type of the complex type specified.</source>
          <target state="translated">지정된 복합 형식의 기본 제공 복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> values representing the complex type.</source>
          <target state="translated">복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph> that represents the built-in complex type of the complex type specified.</source>
          <target state="translated">지정된 복합 형식의 기본 제공 복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph> that represents the built-in complex type.</source>
          <target state="translated">기본 제공 복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> of the complex type.</source>
          <target state="translated">복합 형식의 <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph> that represents the built-in complex type of the complex type specified by qualified name.</source>
          <target state="translated">정규화된 이름으로 지정된 복합 형식의 기본 제공 복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph> that represents the built-in complex type.</source>
          <target state="translated">기본 제공 복합 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaComplexType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="T:System.Xml.Schema.XmlSchemaType">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph> that represents the built-in simple type of the specified simple type.</source>
          <target state="translated">지정된 단순 형식의 기본 제공 단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> values representing the simple type.</source>
          <target state="translated">단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph> that represents the built-in simple type of the specified simple type.</source>
          <target state="translated">지정된 단순 형식의 기본 제공 단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph> that represents the built-in simple type.</source>
          <target state="translated">기본 제공 단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>You cannot directly serialize the built-in type.</source>
          <target state="translated">기본 제공 형식을 직접 serialize 할 수 없는 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>If you need to serialize the type, create a new simple type which derives from the built-in type and serialize the simple type.</source>
          <target state="translated">형식을 serialize 하는 데 필요한 경우 기본 제공 형식에서 파생 된 새 단순 유형을 만들고 단순 형식을 serialize 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
          <source>The following example shows how to create the type and add it to the schema.</source>
          <target state="translated">다음 예제에는 유형을 만들 스키마에 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> of the simple type.</source>
          <target state="translated">단순 형식의 <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph> that represents the built-in simple type of the simple type that is specified by the qualified name.</source>
          <target state="translated">정규화된 이름으로 지정된 단순 형식의 기본 제공 단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph> that represents the built-in simple type.</source>
          <target state="translated">기본 제공 단순 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>You cannot directly serialize the built-in type.</source>
          <target state="translated">기본 제공 형식을 직접 serialize 할 수 없는 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>If you need to serialize the type, create a new simple type which derives from the built-in type and serialize the simple type.</source>
          <target state="translated">형식을 serialize 하는 데 필요한 경우 기본 제공 형식에서 파생 된 새 단순 유형을 만들고 단순 형식을 serialize 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>The following example shows how to create the type and add it to the schema.</source>
          <target state="translated">다음 예제에는 유형을 만들 스키마에 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source>The derived <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> to test.</source>
          <target state="translated">테스트할 파생된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source>The base <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> to test the derived <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph> against.</source>
          <target state="translated">파생된 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph>을 테스트하는 기준으로 사용할 기본 <ph id="ph2">&lt;see cref="T:System.Xml.Schema.XmlSchemaType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> values representing a type derivation method to exclude from testing.</source>
          <target state="translated">테스트에서 제외할 형식 파생 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source>Returns a value indicating if the derived schema type specified is derived from the base schema type specified</source>
          <target state="translated">파생된 스키마 형식이 기본 스키마 형식에서 파생되는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the derived type is derived from the base type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">파생 형식이 기본 형식에서 파생되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
          <source>The following is an example of the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.IsDerivedFrom%2A&gt;</ph> method.</source>
          <target state="translated">다음은의 예는 <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType.IsDerivedFrom%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.IsMixed">
          <source>Gets or sets a value indicating if this type has a mixed content model.</source>
          <target state="translated">이 형식에 혼합 콘텐츠 모델을 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.IsMixed">
          <source>This property is only valid in a complex type.</source>
          <target state="translated">이 속성은 복합 형식에만 유효합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.IsMixed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type has a mixed content model; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">형식에 혼합 콘텐츠 모델을 사용하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.IsMixed">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.IsMixed">
          <source>This virtual method is overridden in derived classes.</source>
          <target state="translated">이 가상 메서드는 파생된 클래스에서 재정의 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.Name">
          <source>Gets or sets the name of the type.</source>
          <target state="translated">형식 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Name">
          <source>The name of the type.</source>
          <target state="translated">형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Name">
          <source>The name must be an no-colon name (NCName) as defined in the World Wide Web Consortium (W3C) XML Namespaces specification.</source>
          <target state="translated">이름을은 World Wide Web Consortium (W3C) XML 네임 스페이스 사양에 정의 된 대로 콜론 없는 이름 (NCName) 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.Name">
          <source>If specified, the name must be unique among all <ph id="ph1">`simpleType`</ph> and <ph id="ph2">`complexType`</ph> elements.</source>
          <target state="translated">를 지정 하는 경우 이름은 모든 간에 고유 해야 <ph id="ph1">`simpleType`</ph> 및 <ph id="ph2">`complexType`</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
          <source>Gets the qualified name for the type built from the <ph id="ph1">&lt;see langword="Name" /&gt;</ph> attribute of this type.</source>
          <target state="translated">이 형식의 <ph id="ph1">&lt;see langword="Name" /&gt;</ph> 특성으로부터 만들어진 형식에 대한 정규화된 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
          <source>This is a post-schema-compilation property.</source>
          <target state="translated">이 속성은 스키마 컴파일 이후 속성입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> for the type built from the <ph id="ph2">&lt;see langword="Name" /&gt;</ph> attribute of this type.</source>
          <target state="translated">이 형식의 <ph id="ph2">&lt;see langword="Name" /&gt;</ph> 특성으로부터 만든 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Xml.Schema.XmlSchemaType.TypeCode">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> of the type.</source>
          <target state="translated">형식의 <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Schema.XmlSchemaType.TypeCode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlTypeCode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>