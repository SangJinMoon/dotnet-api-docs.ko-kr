<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ArrayPool`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5924af3bcdfd42b06e9a7eaf3e33460653c01b53b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">924af3bcdfd42b06e9a7eaf3e33460653c01b53b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffers.ArrayPool`1">
          <source>The type of the objects that are in the resource pool.</source>
          <target state="translated">리소스 풀에 있는 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Buffers.ArrayPool`1">
          <source>Provides a resource pool that enables reusing instances of type <ph id="ph1">&lt;see cref="T:T[]" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:T[]" /&gt;</ph> 형식의 인스턴스를 재사용할 수 있는 리소스 풀을 제공합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffers.ArrayPool`1">
          <source>Using the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> class to rent and return buffers (using the <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> methods) can improve performance in situations where arrays are created and destroyed frequently, resulting in significant memory pressure on the garbage collector.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> 임대 하 고 버퍼를 반환 하는 클래스 (사용 하는 <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> 메서드) 배열 생성 되 고 자주 소멸 상황에서 성능을 향상 시킬 수 있습니다, 때문에 가비지 메모리가 상당한 압박에 수집기입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffers.ArrayPool`1">
          <source>This class is thread-safe.</source>
          <target state="translated">이 클래스는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffers.ArrayPool`1">
          <source>All members may be used by multiple threads concurrently.</source>
          <target state="translated">모든 멤버 여러 스레드에서 동시에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.#ctor">
          <source>Note that this constructor is protected; it can only be called by classes derived from the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> class.</source>
          <target state="translated">이 생성자가 보호 되는지; 참고 파생 된 클래스 에서만 호출 될 수는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create">
          <source>A new instance of the <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 클래스의 새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>The maximum length of an array instance that may be stored in the pool.</source>
          <target state="translated">풀에 저장될 수 있는 배열 인스턴스의 최대 길이입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>The maximum number of array instances that may be stored in each bucket in the pool.</source>
          <target state="translated">풀에 있는 각 버킷에 저장될 수 있는 배열 인스턴스의 최대수입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>The pool groups arrays of similar lengths into buckets for faster access.</source>
          <target state="translated">풀은 빠른 액세스를 위해 비슷한 길이의 배열을 버킷에 그룹화합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> class using the specifed configuration.</source>
          <target state="translated">지정된 구성을 사용하여 <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>A new instance of the <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> class with the specified configuration.</source>
          <target state="translated">지정된 구성을 사용하여 <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 클래스의 새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
          <source>The instance of the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> class created by this method will group arrays into buckets, with no more than <ph id="ph2">`maxArraysPerBucket`</ph> in each bucket, and with those arrays not exceeding <ph id="ph3">`maxArrayLength`</ph> in length.</source>
          <target state="translated">인스턴스는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> 이 메서드에 의해 만들어진 클래스는 배열 없이 버킷으로 그룹화 이상 <ph id="ph2">`maxArraysPerBucket`</ph> 초과 하지 않는 해당 배열과 각 버킷에 <ph id="ph3">`maxArrayLength`</ph> 길이입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>The minimum length of the array.</source>
          <target state="translated">배열의 최소 길이입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>Retrieves a buffer that is at least the requested length.</source>
          <target state="translated">요청된 길이 이상의 버퍼를 검색합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:T[]" /&gt;</ph> that is at least <ph id="ph2">&lt;paramref name="minimumLength" /&gt;</ph> in length.</source>
          <target state="translated">길이가 <ph id="ph2">&lt;paramref name="minimumLength" /&gt;</ph> 이상인 <ph id="ph1">&lt;see cref="T:T[]" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>This buffer is loaned to the caller and should be returned to the same pool using the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> method, so that it can be reused in subsequent calls to the <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> method.</source>
          <target state="translated">이 버퍼는 호출자에 게 빌려 및 사용 하 여 동일한 풀에 반환 되어야 합니다는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> 메서드, 해당 it에 대 한 후속 호출에서 다시 사용할 수는 <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>Failure to return a rented buffer is not a fatal error.</source>
          <target state="translated">심각한 오류 임대 버퍼를 반환 하지가 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Rent(System.Int32)">
          <source>However, it may lead to decreased application performance, as the pool may need to create a new buffer to replace the lost one.</source>
          <target state="translated">그러나 풀 손실 대체 하기 위해 새 버퍼 만들어야 할 수 하는 대로 저하 응용 프로그램 성능 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>A buffer to return to the pool that was previously obtained using the <ph id="ph1">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> 메서드를 사용하여 이전에 가져온 풀에 반환할 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>Indicates whether the contents of the buffer should be cleared before reuse.</source>
          <target state="translated">버퍼의 내용을 다시 사용하기 전에 지워야 하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="clearArray" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>, and if the pool will store the buffer to enable subsequent reuse, the <ph id="ph3">&lt;see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)" /&gt;</ph> method will clear the <ph id="ph4">&lt;paramref name="array" /&gt;</ph> of its contents so that a subsequent caller using the <ph id="ph5">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> method will not see the content of the previous caller.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="clearArray" /&gt;</ph>가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정된 경우 및 풀이 이후 다시 사용할 수 있도록 버퍼를 저장하는 경우 <ph id="ph3">&lt;see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)" /&gt;</ph> 메서드는 해당 콘텐츠의 <ph id="ph4">&lt;paramref name="array" /&gt;</ph>를 지웁니다. <ph id="ph5">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> 메서드를 사용하는 후속 호출자는 이전 호출자의 콘텐츠를 표시하지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="clearArray" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph> or if the pool will release the buffer, the array's contents are left unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="clearArray" /&gt;</ph>가 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정되는 경우 또는 풀이 버퍼를 해제하는 경우 배열의 내용은 변경되지 않고 남겨집니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>Returns an array to the pool that was previously obtained using the <ph id="ph1">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> method on the same <ph id="ph2">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> instance.</source>
          <target state="translated">동일한 <ph id="ph2">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 인스턴스에서 <ph id="ph1">&lt;see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /&gt;</ph> 메서드를 사용하여 이전에 가져온 풀에 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>Once a buffer has been returned to the pool, the caller gives up all ownership of the buffer and must not use it.</source>
          <target state="translated">버퍼 풀으로 반환 되 면 호출자에 게는 버퍼의 모든 소유권을 포기 하 고 사용 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>The reference returned from a given call to the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> method must only be returned using the <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> method once.</source>
          <target state="translated">에 지정된 된 호출에서 반환 된 참조는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> 사용 하 여 메서드 반환만 해야는 <ph id="ph2">&lt;xref:System.Buffers.ArrayPool%601.Return%2A&gt;</ph> 메서드를 한 번입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
          <source>The default <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> may hold onto the returned buffer in order to rent it again, or it may release the returned buffer if it's determined that the pool already has enough buffers stored.</source>
          <target state="translated">기본 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> 이거나 다시 풀에 이미 충분 한 버퍼를 저장 하는 경우 반환된 된 버퍼를 해제할 수 있습니다 임대 하기 위해 반환된 된 버퍼에 보유할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Buffers.ArrayPool`1.Shared">
          <source>Gets a shared <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> instance.</source>
          <target state="translated">공유 <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Buffers.ArrayPool`1.Shared">
          <source>A shared <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> instance.</source>
          <target state="translated">공유 <ph id="ph1">&lt;see cref="T:System.Buffers.ArrayPool`1" /&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Buffers.ArrayPool`1.Shared">
          <source>The shared pool provides a default implementation of the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> class that's intended for general applicability.</source>
          <target state="translated">공유 풀의 기본 구현을 제공는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601&gt;</ph> 는 클래스는 일반 해봐야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Buffers.ArrayPool`1.Shared">
          <source>A shared class maintains arrays of multiple sizes, and may hand back a larger array than was actually requested, but it will never hand back a smaller array than was requested.</source>
          <target state="translated">공유 클래스의 여러 크기, 배열을 유지 관리 하 고 실제로 요청 보다 큰 배열 제공할 수 있습니다 하지만 것은 하지 다시 전달할 요청한 것 보다 더 작은 배열입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Buffers.ArrayPool`1.Shared">
          <source>Renting a buffer from a shared class using the <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> method will result in an existing buffer being taken from the pool if an appropriate buffer is available or in a new buffer being allocated if one is not available.</source>
          <target state="translated">사용 하 여 공유 클래스 버퍼 임대는 <ph id="ph1">&lt;xref:System.Buffers.ArrayPool%601.Rent%2A&gt;</ph> 메서드는 적절 한 버퍼가 사용할 수 없거나 새 버퍼에 할당 한 경우 사용할 수 없는 경우 풀에서 제거 되 고 기존 버퍼에 발생 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>