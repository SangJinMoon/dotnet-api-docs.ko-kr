<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="def27fc8960e34162ed6faf152d89b8f64a9e167" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174407" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>특정 문화권(비관리 코드 개발의 경우 *로캘*이라고 함)에 대한 정보를 제공합니다. 이 정보에는 문화권 이름, 쓰기 시스템, 사용된 달력, 문자열의 정렬 순서, 날짜 및 숫자 형식이 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> 클래스 언어, 하위 언어, 국가/지역, 일정 및 특정 문화권과 관련 된 규칙 등의 문화권 관련 정보를 제공 합니다. 또한이 클래스의 문화권 관련 인스턴스에 대 한 액세스 제공는 <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, 및 <xref:System.Globalization.TextInfo> 개체입니다. 이러한 개체는 대/소문자, 숫자 및 날짜 서식 지정 및 문자열 비교 등의 문화권 관련 작업에 필요한 정보를 포함 합니다. <xref:System.Globalization.CultureInfo> 클래스에 직접 또는 간접적으로 서식을 지정, 구문 분석, 또는 같은 culture 별 데이터를 조작 하는 클래스에서 사용 됩니다 <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>, 및 숫자 형식입니다.  
  
 섹션 내용  
  
 [문화권 이름 및 식별자](#CultureNames)   
 [고정 중립 및 특정 문화권](#Invariant)   
 [사용자 지정 문화권](#Custom)   
 [동적 문화권 데이터](#Dynamic)   
 [현재 문화권 및 현재 UI 문화권](#Current)   
 [모든 문화권 가져오기](#GetAll)   
 [문화권 및 스레드](#Threads)   
 [문화권 및 응용 프로그램 도메인](#AppDomain)   
 [문화권 및 작업 기반 비동기 작업](#Async)   
 [CultureInfo 개체 serialization](#Serialization)   
 [제어판 재정](#CPanel)   
 [대체 정렬 순서](#AlternateSort)   
 [문화권 및 Windows 앱](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>문화권 이름 및 식별자  
 <xref:System.Globalization.CultureInfo> 클래스 RFC 4646에 따라 각 문화권에 대 한 고유 이름을 지정 합니다. 이름에는 언어와 연관 된 ISO 639 두 문자의 소문자 문화권 코드 및 국가 또는 지역와 관련 된 ISO 3166 두 문자의 대문자 하위 문화권 코드의 조합입니다. 또한 대상으로 하는 앱에 대 한 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 이상 실행 되 고 Windows 10 이상, 태그는 지원 되는 유효한 bcp-47 언어에 해당 하는 문화권 이름입니다.  
  
> [!NOTE]
>  경우 문화권 이름이 전달 되는 클래스 생성자 또는 메서드에 같은 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 또는 <xref:System.Globalization.CultureInfo>, 대 소문자는 중요 하지 않습니다.  
  
 RFC 4646에 따라 문화권 이름 형식은 *languagecode2*>-*country/regioncode2*여기서 *languagecode2* 는 두 문자 언어 코드 및 *country/regioncode2* 두 문자로 하위 문화권 코드입니다. 영어 (미국)에 대 한 일본어 (일본) 및 영문 JA-JP를 포함 하는 예제. 두 문자 언어 코드를 사용할 수 없는 경우에는 세 문자로 된 ISO 639-2에서에서 파생 된 코드 사용 됩니다.  
  
 일부 문화권 이름은 ISO 15924 스크립트를 지정 하는 참고 합니다. 예를 들어 Cyrl 키릴 자모 스크립트를 지정 하 고 Latn 라틴어 스크립트를 지정 합니다. 패턴을 사용 하 여 스크립트를 포함 하는 문화권 이름을 *languagecode2*-*scripttag*-*country/regioncode2*합니다. 이러한 종류의 문화권 이름의 예로 uz-Cyrl-UZ 우즈베크어 (우즈베키스탄, 키릴 자모)에 대 한 합니다. Windows Vista 이전 Windows 운영 체제에서는 스크립트를 포함 하는 문화권 이름을 사용 하 여 패턴 *languagecode2*-*country/regioncode2* - * scripttag*, 예를 들어 uz-UZ-Cyrl 우즈베크어 (우즈베키스탄, 키릴 자모)에 대 한 합니다.  
  
 중립 문화권만 두 문자의 소문자 언어 코드에 의해 지정 됩니다. 예를 들어 fr 프랑스어에 대 한 중립 문화권을 지정 하 고 de 독일어에 대 한 중립 문화권을 지정 합니다.  
  
> [!NOTE]
>  이 규칙으로 일치 하지 않는 문화권 이름은 두 가지가 있습니다. 중국어 (간체) Zh-hans, 명명 된 및 중국어 (번체), Zh-hant 라는 culture는 중립 문화권입니다. 문화권 이름은 현재 표준 나타내고 이전 이름 ZH-CHS 및 ZH-CHT 사용에 대 한 이유가 없다면 사용 해야 합니다.  
  
 문화권 식별자 표준 국제 숫자 약어 이며, 설치 된 문화권 중 하나를 고유 하 게 식별 하는 데 필요한 구성 요소가 있습니다. 응용 프로그램은 미리 정의 된 문화권 식별자를 사용 하거나 사용자 지정 식별자를 정의할 수 있습니다.  
  
 미리 정의 된 특정 문화권 이름과 식별자가 고 다른 클래스에서 사용 하 고는 <xref:System.Globalization?displayProperty=nameWithType> 네임 스페이스입니다. 자세한 culture 정보에 표시 된 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서.  
  
 문화권 이름 및 식별자에는 특정 컴퓨터에서 찾을 수 있는 문화권의 하위 집합을 나타내는 기억 합니다. Windows 버전 또는 서비스 팩에는 사용할 수 있는 culture 변경할 수 있습니다. 응용 프로그램을 사용 하 여 사용자 지정 문화권 추가 <xref:System.Globalization.CultureAndRegionInfoBuilder> 클래스입니다. 사용자가 Microsoft 로캘 작성기 도구를 사용 하 여 자신의 사용자 지정 문화권을 추가 합니다. Microsoft c a l e 작성기는 관리 코드를 사용 하 여 작성 된 `CultureAndRegionInfoBuilder` 클래스.  
  
 여러 개의 고유 이름을 문화권에는 다음 클래스 멤버와 관련 된 이름 특히와 밀접 하 게 관련이 있습니다.  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>고정 중립 및 특정 문화권  
 문화권은 일반적으로 나누어집니다: 고정 문화권, 중립 문화권 및 특정 문화권입니다.  
  
 고정 문화권은 문화권을 구분 하지 않습니다. 빈 문자열을 사용 하 여 이름별 고정 culture를 지정 하는 응용 프로그램 ("") 또는 해당 식별자로. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 고정 문화권의 인스턴스를 정의합니다. 연결 된 모든 국가/지역의 있지만 영어와 합니다. 거의 모든 방법에서 사용 되는 `Globalization` 문화권을 필요로 하는 네임 스페이스입니다.  
  
 중립 문화권은 연결 된 문화권 언어 있고 국가/지역을 사용 하지 않습니다. 특정 문화권은 문화권 언어 및 국가/지역 연관 된입니다. 예를 들어 fr 프랑스 문화권에 대 한 중립 이름이 며 FR-FR 특정 프랑스어 (프랑스) 문화권의 이름입니다. Note 중국어 간체 및 중국어 (번체) 중립 문화권 간주도 됩니다.  
  
 인스턴스를 만들지는 <xref:System.Globalization.CompareInfo> 클래스에 포함 된 데이터는 임의로 지정 되므로 중립 문화권 좋지 않습니다. 표시 하 고 데이터 정렬 언어 및 국가 지정 합니다. 또한는 <xref:System.Globalization.CompareInfo.Name%2A> 의 속성을 <xref:System.Globalization.CompareInfo> 중립 문화권만 반환 하 고는 지역에 대해 생성 하는 개체입니다.  
  
 정의 된 문화권 계층일 특정 문화권의 부모는 중립 문화권 및 중립 문화권의 부모는 고정 문화권입니다. <xref:System.Globalization.CultureInfo.Parent%2A> 속성 특정 문화권과 관련 된 중립 문화권을 포함 합니다. 사용자 지정 문화권은는 <xref:System.Globalization.CultureInfo.Parent%2A> 속성이이 패턴을 준수 합니다.  
  
 특정 문화권에 대 한 리소스를 운영 체제에서 사용할 수 없는 경우 관련 된 중립 문화권에 대 한 리소스 사용 됩니다. 중립 문화권에 대 한 리소스를 사용할 수 없는 경우에 주 어셈블리에 포함 된 리소스 사용 됩니다. 리소스 대체 프로세스에 대 한 자세한 내용은 참조 하십시오. [리소스 패키징 및 배포](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)합니다.  
  
 Windows API에는 로캘 중 목록은.NET Framework에서 지 원하는 문화권의 목록에서 약간 다릅니다. Windows와의 상호 운용성이 필요한 경우 예를 들어 p/invoke 메커니즘을 통해 응용 프로그램 사용 해야 정의 된 특정 문화권 운영 체제에 대 한 합니다. 특정 문화권을 사용 하면 일관성와 동일 하 게 되는 로캘 식별자로 식별 되는 해당 하는 Windows 로캘 <xref:System.Globalization.CultureInfo.LCID%2A>합니다.  
  
 A <xref:System.Globalization.DateTimeFormatInfo> 또는 <xref:System.Globalization.NumberFormatInfo> 고정 문화권에 대해서만 또는 특정 문화권에 대 한, 중립 문화권에 대해 만들 수 있습니다.  
  
 경우 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 는 <xref:System.Globalization.TaiwanCalendar> 있지만 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 다음 ZH-TW로 설정 되지 않은 <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> 빈 문자열을 반환 ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>사용자 지정 문화권  
 Windows 운영 체제 및.NET Framework에서 지 원하는 미리 정의 된 문화권, 외에도.NET Framework는 세 가지 유형의 사용자 지정 문화권을 지원 합니다.  
  
-   Windows 또는.NET Framework에서 사용할 수 있는 culture를 보완 하는 새 문화권입니다. 예를 들어 응용 프로그램을 설치할 수는 <xref:System.Globalization.CultureInfo> 시스템의 경우 문자열을 나타냅니다 (또는 Fijan (피지)) 문화권 개체입니다.  
  
-   대체 문화권 속성을 갖는 Windows 및.NET Framework에서 지 원하는 표준 문화권의 속성과 다릅니다.  
  
-   사용자와 표준 문화권을 재정의 합니다. 사용자를 사용할 수는 **국가 및 언어** 응용 프로그램에 **제어판** 기존 문화권 속성 값을 사용자 지정할 수 있습니다.  
  
> [!NOTE]
>  사용할 수는 <xref:System.Globalization.CultureAndRegionInfoBuilder> 클래스를 정의 저장 및 보완 하거나 기존 문화권을 대신 하는 사용자 지정 문화권을 등록 합니다. <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> 메서드 대상 시스템에서 사용자 지정 문화권을 설치 하는 데 사용할 수 있는 로캘 데이터 Markup Language (LDML) 파일을 만듭니다. 단계별 단계에 대 한 내용은 사용 하는 <xref:System.Globalization.CultureAndRegionInfoBuilder> 새로 만들 수는 클래스 또는 참조 되는 대체 문화권은 <xref:System.Globalization.CultureAndRegionInfoBuilder> 클래스 항목입니다.  
  
 .NET Framework에서 사용자 지정 문화권을 지원 하므로 culture 별 데이터를 사용할 때 다음을 고려해 야 합니다.  
  
-   사용자 지정 문화권 미리 정의 된 문화권의 범위를 초과 하는 값을 가질 수 있습니다. 예를 들어, 일부 문화권 비정상적으로 긴 월 이름, 예기치 않은 날짜 또는 시간 형식 또는 기타 특이 한 데이터를 가집니다.  
  
-   사용자의 사용자 지정; 따라야 사용자 인터페이스에서 culture 별 데이터를 표시할 때 예를 들어 24 시간제 또는 yyyyMMdd 날짜 형식을 사용자 할 수 있습니다.  
  
-   사용자 지정 문화권 기본값을 재정의 해야 합니다. 따라서 문화권 데이터를 안정적 수를 고려해 수 없습니다. 국가 이름, 숫자 및 날짜 형식 및 철자를 나중에 변경할 수 있습니다. 날짜 및 시간 함수를 구문 분석에 전달 될 날짜 및 시간 문자열 등의 문화권 구분 데이터를 serialize 하려는 경우 고정 문화권 또는 특정을 사용 해야 합니다.  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 시스템에 설치 하는 사용자 지정 문화권의 속성 값이 포함 됩니다는 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 플래그 및 사용자 지정 문화권 할당 된 프로그램 <xref:System.Globalization.CultureInfo.LCID%2A> 속성 값이 `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, 또는 4096). 즉, Windows 10 이상에서는이 값에 할당 되었는지도 전체 문화권 데이터가 부족 하는 시스템 정의 문화권 note 합니다.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>동적 문화권 데이터  
 고정 문화권을 제외 하 고 문화권 데이터는 동적입니다. 미리 정의 된 문화권에도 마찬가지입니다. 예를 들어 국가 또는 지역의 새 통화, 단어의 맞춤법 또는 기본 일정을 변경 및 그에 따라 문화권 정의 변경 합니다.  사용자 지정 문화권 예 고 없이 변경 될 수 있으며 모든 특정 culture는 사용자 지정 대체 문화권에 의해 재정의 될 수 있습니다. 또한 아래에 설명한 대로 개별 사용자 문화 기본 설정을 재정의할 수 있습니다. 항상 응용 프로그램 실행 시 문화권 데이터를 가져와야 합니다.  
  
> [!CAUTION]
>  데이터를 저장할 때 응용 프로그램에서, 이진 형식으로 또는 특정 문화권에 관계 없이 형식을 사용 해야 합니다. 고정 문화권이 아닌 특정 문화권에 연관 된 현재 값에 따라 저장 되는 데이터를 읽을 수 없게 또는 해당 문화권 변경 되 면 의미가 변경 될 수 있습니다.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>현재 문화권 및 현재 UI 문화권  
 .NET Framework 응용 프로그램의 모든 스레드는 현재 문화권 및 현재 UI 문화권에 있습니다. 현재 문화권 날짜, 시간, 숫자 및 통화 값, 텍스트, 대/소문자 규칙 및 문자열을 비교 하는 방법의 정렬 순서에 대 한 형식 지정 규칙을 결정 합니다. 런타임 시 문화권별 리소스를 검색할 현재 UI 문화권이 사용 됩니다.  
  
> [!NOTE]
>  스레드 단위 별로 현재 및 현재 UI 문화권 결정 하는 방법에 대 한 자세한 내용은 참조는 [문화권 및 스레드](#Threads) 섹션. 새 응용 프로그램 도메인 및 응용 프로그램 도메인 경계를 교차 하는 스레드에서 실행 스레드에서 현재 및 현재 UI 문화권 결정 하는 방법에 대 한 내용은 참조는 [문화권 및 응용 프로그램 도메인](#AppDomain) 섹션. 현재 및 현재 작업 기반 비동기 작업을 수행 하는 스레드에서 결정 하는 방법에 대 한 자세한 내용은 참조는 [문화권 및 작업 기반 비동기 작업](#Async) 섹션.  
  
 현재 문화권에 대 한 정보를 자세한 참조는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성 항목입니다. 현재 UI 문화권에 대 한 정보를 자세한 참조는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성 항목입니다.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>현재 및 현재 UI 문화권을 검색합니다.  
 가져올 수는 <xref:System.Globalization.CultureInfo> 두 가지 방법 중 하나는 현재 문화권을 나타내는 개체입니다.  
  
-   값을 검색 하는 여는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성입니다.  
  
-   값을 검색 하는 여는 [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) 속성입니다.  
  
 다음 예제에서는 두 속성 값을 검색, 비교은 같은지, 및 현재 문화권의 이름을 표시 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 가져올 수는 <xref:System.Globalization.CultureInfo> 두 가지 방법 중 하나는 현재 UI 문화권을 나타내는 개체입니다.  
  
-   값을 검색 하는 여는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다.  
  
-   값을 검색 하는 여는 [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) 속성입니다.  
  
 다음 예제에서는 두 속성 값을 검색, 비교은 같은지, 및 현재 UI 문화권의 이름을 표시 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>현재 및 현재 UI 문화권 설정  
 문화권 및 UI 문화권의 스레드를 변경 하려면 다음을 수행 합니다.  
  
1.  인스턴스화하는 <xref:System.Globalization.CultureInfo> 호출 하 여 해당 문화권을 나타내는 개체를 <xref:System.Globalization.CultureInfo> 클래스 생성자 및 문화권의 이름을 전달 합니다. <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 생성자를 인스턴스화하는 <xref:System.Globalization.CultureInfo> 같은 경우에 새 문화권과 Windows의 현재 문화권으로 사용자를 나타내는 개체를 재정의 합니다.   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 생성자 지정할 수 있습니다. 여부 새로 인스턴스화된 <xref:System.Globalization.CultureInfo> 개체가 사용자는 새 문화권과 Windows의 현재 문화권으로 동일한 경우 재정의 반영 합니다.  
  
2.  할당 된 <xref:System.Globalization.CultureInfo> 개체는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 또는 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다. 또한 응용 프로그램의 데스크톱.NET Framework 4.6 이상 버전에서 실행 중인 경우 할당할 수도 있습니다는 <xref:System.Globalization.CultureInfo> 개체는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 또는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다.  
  
 다음 예에서는 현재 문화권을 검색합니다. 프랑스어 (프랑스) 문화권 이외 인 경우 현재 문화권을 프랑스어 (프랑스) 변경 됩니다. 그렇지 않으면 현재 문화권을 프랑스어 (룩셈부르크) 변경 됩니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 다음 예에서는 현재 문화권을 검색합니다. 다른 사용자 계정 이면 된 슬로베니아어 (슬로베니아) 문화권 슬로베니아어 (슬로베니아)에 현재 문화권을 변경 합니다. 그렇지 않으면 현재 문화권 크로아티아어 (크로아티아) 변경 됩니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>모든 문화권 가져오기  
 호출 하 여 문화권의 또는 로컬 컴퓨터에서 사용할 수 있는 모든 문화권의 배열 특정 범주를 검색할 수 있습니다는 <xref:System.Globalization.CultureInfo.GetCultures%2A> 메서드. 예를 들어 단독 또는 조합 하 여 사용자 지정 문화권, 특정 문화권 또는 중립 문화권 검색할 수 있습니다.  
  
 다음 예제에서는 <xref:System.Globalization.CultureInfo.GetCultures%2A> 메서드를 두 번, 첫 번째 인스턴스와 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 열거형 멤버를 모든 사용자 지정 문화권을 검색 및는 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 열거형 멤버를 모든 대체 문화권을 검색 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>문화권 및 스레드  
 새 응용 프로그램 스레드를 시작할 때 현재 문화권 및 현재 UI 문화권의 현재 스레드 문화권 아니라에 현재 시스템 문화권에 의해 정의 됩니다. 다음 예제에서 차이점을 보여 줍니다. 현재 문화권 및 응용 프로그램 스레드의 현재 UI 문화권을 프랑스어 (프랑스) 문화권 (FR-FR) 설정합니다. 현재 문화권 FR-FR 이미 있으면 예제에서는 영어 (미국) 문화권 (EN-US)으로 설정 합니다. 통화 값으로 세 개의 난수를 표시 한 다음에 통화 값으로 세 자리 보다 임의적인 숫자를 표시 하는 새 스레드를 만듭니다. 하지만 새 스레드에 의해 표시 되는 통화 값은 예제의 출력으로 주 응용 프로그램 스레드에서 출력 달리 프랑스어 (프랑스) 문화권의 서식 지정 규칙을 반영 하지 않습니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 이전의.NET Framework의 버전에는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 가장 일반적으로 주 응용 프로그램 스레드 다른 모든 작업자 스레드가와 같은 문화권을 공유 함을 확인 응용 프로그램 수준 문화권의 이름을 전달 하는 또는 <xref:System.Globalization.CultureInfo> 개체를 응용 프로그램 수준 문화권을 나타내는 한 <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> 위임 합니다. 다음 예제에서는이 방법을 사용 하 여 두 개의 스레드에 의해 표시 되는 통화 값 같은 문화권의 형식 규칙을 반영 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 설정할 수 있습니다 문화권 및 UI 문화권을 스레드 풀 스레드 비슷한 방식으로 호출 하 여는 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> 메서드.  
  
 부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]를 설정할 수 있습니다 문화권 및 UI 문화권의 모든 스레드가 응용 프로그램 도메인에서 보다 직접 할당 하 여는 <xref:System.Globalization.CultureInfo> 해당 문화권을 나타내는 개체는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성입니다. 다음 예제는 이러한 속성을 사용 하 여 기본 응용 프로그램 도메인의 모든 스레드가 동일한 문화권을 공유 하는 되도록 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  하지만 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성은 정적 멤버, 기본 문화권 및 이러한 속성 값을 설정 하는 시점에 현재 응용 프로그램 도메인에 대 한 기본 UI 문화권을 정의 합니다. 자세한 내용은 다음 섹션을 참조 하십시오. [문화권 및 응용 프로그램 도메인](#AppDomain)합니다.  
  
 값을 할당 하면는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성, 문화권 및 UI 문화권이 응용 프로그램 도메인에 있는 스레드의 경우에 변경할 하지 명시적으로 할당 된 문화권입니다. 그러나 이러한 스레드는 현재 응용 프로그램 도메인에서 실행 하는 동안에 새 문화권 설정을 반영 합니다. 이러한 스레드를 다른 응용 프로그램 도메인에서 실행 하는 경우 문화권이 해당 응용 프로그램 도메인에 대해 정의 된 기본 문화권이 됩니다. 결과적으로, 항상 주 응용 프로그램 스레드 culture를 설정 하 고에 의존 하지 권장는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성을 변경 합니다.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>문화권 및 응용 프로그램 도메인  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성 값을 설정 하거나 검색할 때 현재 응용 프로그램 도메인에 대 한 기본 문화권을 명시적으로 정의 하는 정적 속성입니다. 다음 예제에서는 기본 응용 프로그램 도메인의 기본 culture와 기본 UI 문화권을 프랑스어 (프랑스)으로 설정 하 고 다음 사용 하 여는 <xref:System.AppDomainSetup> 클래스 및 <xref:System.AppDomainInitializer> 대리자에는 새 응용 프로그램 도메인의 기본 culture 및 UL culture를 설정 하려면 러시아어 (러시아)입니다. 단일 스레드는 다음 각 응용 프로그램 도메인에 두 개의 메서드를 실행합니다. 스레드의 문화권과 UI 문화권은 설정 되지 않았음을 명시적으로; note 기본 문화권 및 UI 문화권의 스레드가 실행 중인 응용 프로그램 도메인에서 파생 되므로 합니다. 또한는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 기본값을 반환 하는 속성 <xref:System.Globalization.CultureInfo> 메서드 호출이 수행 하는 경우 현재 응용 프로그램 도메인의 값입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 문화권 및 응용 프로그램 도메인에 대 한 자세한 내용은 항목의 "응용 프로그램 도메인 및 스레드 수" 섹션을 참조 하십시오.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>문화권 및 작업 기반 비동기 작업  
 [작업 기반 비동기 프로그래밍 패턴](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) 사용 하 여 <xref:System.Threading.Tasks.Task> 및 <xref:System.Threading.Tasks.Task%601> 개체에서 대리자를 비동기적으로 실행할 스레드 풀 스레드입니다. 특정 작업이 실행 되는 특정 스레드 사전에 알려지지 않은 있지만 런타임에 결정 됩니다.  
  
 대상 앱에 대해서는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 컨텍스트는 비동기 작업의 일부인 이상 버전, 문화권 또는 합니다. 즉, 앱부터 대상으로 하는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 기본적으로 비동기 작업의 값을 상속는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 스레드 시작 되는 속성입니다. 현재 문화권 이나 현재 UI 문화권 시스템 문화권와 다른 경우 현재 문화권 스레드 경계를 교차 하 고 비동기 작업을 실행 하 고 있는 스레드 풀 스레드의 현재 문화권을 됩니다.  
  
 다음 예제에서는 간단한 설명을 제공합니다. 사용 하 여는 <xref:System.Runtime.Versioning.TargetFrameworkAttribute> 대상에 특성의 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]합니다. 이 예제에서는 정의 <xref:System.Func%601> 대리자 `formatDelegate`, 통화 값으로 서식이 지정 된 일부 숫자를 반환 하는 합니다. 변경 하 여 예제는 현재 시스템 문화권을 프랑스어 (프랑스) 또는 프랑스어 (프랑스)은 이미 현재 문화권을 영어 (미국)입니다. 그런 다음 해당:  
  
-   기본 응용 프로그램 스레드에서 동기적으로 실행 되도록 대리자를 직접 호출 합니다.  
  
-   스레드 풀 스레드에서 대리자를 비동기적으로 실행 하는 작업을 만듭니다.  
  
-   호출 하 여 동기적으로 기본 응용 프로그램 스레드에서 대리자를 실행 하는 작업을 만듭니다는 <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> 메서드.  
  
 현재 문화권을 프랑스어 (프랑스) 변경 된 경우, 예제의 결과 보여 지 듯이 있는 작업은 비동기적으로 호출 하는 스레드의 현재 문화권에 해당 비동기 작업에 대 한 현재 문화권이 됩니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 이전에.NET Framework의 버전을 대상으로 하는 앱에 대 한는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 특정 버전의.NET Framework를 대상 하지 않는 응용 프로그램의 경우 호출 스레드의 문화권에 속하지 않는 작업의 컨텍스트 또는 합니다. 대신, 명시적으로 정의 된 경우가 아니면 기본적으로 새 스레드 문화권은 시스템 문화권입니다. 다음 예제에서는 없기 한다는 점을 제외 하면 앞의 예와 동일는 <xref:System.Runtime.Versioning.TargetFrameworkAttribute> 특성에서이 보여 줍니다. 스레드 풀 스레드에서 비동기적으로 실행 하는 작업의 문화권 fr fr. 보다는 EN-US 하는 예에서는 실행 된 시스템의 시스템 문화권을 영어 (미국) 때문에  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 .NET Framework의 버전을 대상으로 하는 앱에 대 한는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 하 고 나중에 있지만 이전에 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]를 사용할 수 있습니다는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 호출 스레드의 문화권이 비동기에서 사용 되는 기본적으로 하는 작업 스레드 풀 스레드를 실행 합니다. 다음 예제는 이전 예제와 동일한 사용 한다는 점을 제외 하 고는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성을 해당 스레드 풀 스레드는 같은 기본 응용 프로그램 스레드 문화권입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 앱 별 고 도메인 속성은 모든 스레드가 특정 응용 프로그램 도메인에서 문화권을 명시적으로 할당에 대 한 기본 문화권 설정, 즉 합니다. 그러나 대상 앱에 대해서는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 작업 응용 프로그램 도메인 경계를 교차 하는 경우에 호출 스레드의 문화권이 비동기 작업 컨텍스트의 일부인을 유지 하는 이상 버전에서는 또는 합니다.  
  
 다음 예제에서는 작업이 실행 되 고 메서드가 응용 프로그램 도메인 경계를 넘는 경우에 호출 스레드의 문화권이 작업 기반 비동기 작업의 현재 문화권 남아 있는지를 보여 줍니다. 클래스를 정의 `DataRetriever`, 단일 메서드 `GetFormattedNumber`, 1, 000 통화 값으로 형식이 지정-1 사이의 배정밀도 부동 소수점 난수를 반환 하는 합니다. 첫 번째 태스크를 실행 하는 단순히 인스턴스화하는 `DataRetriever` 인스턴스와 호출 해당 `GetFormattedNumber` 메서드. 두 번째 태스크는 현재 응용 프로그램 도메인을 보고, 새 응용 프로그램 도메인, 인스턴스화하는 `DataRetriever` 인스턴스에 새 응용 프로그램 도메인 및 호출에서 해당 `GetFormattedNumber` 메서드. 예제의 출력에서 볼 수 있듯이 현재 문화권에 동일 하 게 호출 스레드, 첫 번째 작업 및 두 번째 태스크는 모두 기본 응용 프로그램 도메인 및 두 번째 응용 프로그램 도메인에서 실행 될 때입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>CultureInfo 개체 serialization  
 경우는 <xref:System.Globalization.CultureInfo> 개체를 직렬화 할 실제로 저장 되는 <xref:System.Globalization.CultureInfo.Name%2A> 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>합니다. 환경에만 성공적으로 deserialize 하는 위치는 <xref:System.Globalization.CultureInfo.Name%2A> 같은 의미 합니다. 다음 세 가지 예제를 보여 왜 이것이 항상 대/소문자:  
  
-   경우는 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 속성 값은 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, 및 Windows XP에서 역직렬화 할 수 없는 경우 해당 문화권 Windows Vista 또는 최신 버전의 Windows 운영 체제에서 처음 도입 합니다. 마찬가지로, culture 처음에 Windows XP 서비스 팩 2에 도입 하는 경우 수 없으면 Windows XP 시스템을에 설치 되지 않은 문화권에 대 한 역직렬화 할 합니다.  
  
-   경우는 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 값은 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, 및는 역직렬화 된 컴퓨터에 설치 된이 사용자의 사용자 지정 문화권 없을, 것을 역직렬화 할 수 없으면입니다.  
  
-   경우는 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 값은 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, 및는 역직렬화 된 컴퓨터에이 대체 문화권 없을, 동일한 이름에만 동일한 특성을 역직렬화 합니다. 예를 들어 EN-US 컴퓨터 B에는 없지만 컴퓨터 A에서 대체 문화권 한 경우는 <xref:System.Globalization.CultureInfo> culture의 사용자 지정 특성이 없는이 culture에 참조 컴퓨터 A에서 serialize 되 고 컴퓨터 B에서 deserialize 된 개체 전송 됩니다. Culture와 같은 다른 의미를 역직렬화 합니다.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>제어판 재정  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다. 일반적으로 응용 프로그램에 이러한 사용자 재정의 따라야 합니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>대체 정렬 순서  
 일부 문화권에서는 둘 이상의 정렬 순서를 지원 합니다. 예:  
  
-   스페인어 (스페인) 문화권에는 두 가지 정렬 순서가: 기본 국제 정렬 순서 및 전통 정렬 순서입니다. 인스턴스화하는 경우는 <xref:System.Globalization.CultureInfo> ES-ES 문화권 이름을 가진 개체 국제 정렬 순서를 사용 합니다. 인스턴스화하는 경우는 <xref:System.Globalization.CultureInfo> es-ES-tradnl 문화권 이름을 가진 개체 전통 정렬 순서를 사용 합니다.  
  
-   ZH-CN (중국어 (간체, 중국)) 문화권에는 두 가지 정렬 순서가 지원: 발음 (기본값)와 획 수에 있습니다. 인스턴스화하는 경우는 <xref:System.Globalization.CultureInfo> 개체 ZH-CN 문화권 이름으로 기본 정렬 순서를 사용 합니다. 인스턴스화하는 경우는 <xref:System.Globalization.CultureInfo> 획 수에 따라 문자열 정렬 0x00020804의 로컬 식별자를 가진 개체입니다.  
  
 다음 표에서 기본 및 대체 정렬 순서에 대 한 대체 정렬 순서와 식별자를 지 원하는 문화권을 나열 합니다.  
  
|문화권 이름|culture|기본 정렬 이름 및 id|대체 정렬 이름 및 식별자|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|스페인어 (스페인)|국제: 0x00000C0A|기존의: 0x0000040A|  
|zh-TW|중국어 (대만)|획 수: 0x00000404|보포모포: 0x00030404|  
|zh-CN|중국어 (중국)|발음: 0x00000804|획 수: 0x00020804|  
|zh-HK|중국어 (홍콩 특별 행정구)|획 수: 0x00000c04|획 수: 0x00020c04|  
|zh-SG|중국어 (싱가포르)|발음: 0x00001004|획 수: 0x00021004|  
|zh-MO|중국어 (마카오 특별 행정구)|발음: 0x00001404|획 수: 0x00021404|  
|ja-JP|일본어 (일본)|기본값: 0x00000411|유니코드: 0x00010411|  
|ko-KR|한국어 (대한민국)|기본값: 0x00000412|한국어 완성-유니코드: 0x00010412|  
|de-DE|독일어 (독일)|사전: 0x00000407|전화 번호부 정렬 DIN: 0x00010407|  
|hu-HU|헝가리어 (헝가리)|기본값: 0x0000040e|기술적인 정렬: 0x0001040e|  
|ka GE|그루지야어 (그루지야)|기존의: 0x00000437|현대 정렬: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>현재 문화권 및 UWP 앱  
 유니버설 Windows 플랫폼 (UWP) 앱에서의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> .NET Core와.NET Framework 앱의 경우와 마찬가지로 속성은 읽기 / 쓰기입니다. 그러나 UWP 앱에는 단일 문화권을 인식 합니다. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성 map에서 첫 번째 값으로는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 컬렉션입니다.  

.NET Framework 및.NET Core 응용 프로그램에서 현재 문화권은 스레드 단위 설정 및 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 문화권과 현재 스레드의 UI 문화권 속성을 반영 합니다. UWP 앱에서 현재 문화권에 매핑되는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 는 전역 설정 하는 컬렉션입니다. 설정의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 또는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성이 변경 될 경우 전체 앱의 culture; 스레드 단위 별로 culture를 설정할 수 없습니다.
  
## Examples  
 만드는 방법을 보여 주는 다음 예제는 <xref:System.Globalization.CultureInfo> 국제 정렬와 스페인어 (스페인)에 대 한 개체 <xref:System.Globalization.CultureInfo> 전통 정렬 된 개체입니다.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">미리 정의된 <see cref="T:System.Globalization.CultureInfo" /> 식별자, 기존 <see cref="P:System.Globalization.CultureInfo.LCID" /> 개체의 <see cref="T:System.Globalization.CultureInfo" /> 속성 또는 Windows 전용 문화권 식별자입니다.</param>
        <summary>문화권 식별자별로 지정된 문화권을 기반으로 하는 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 미리 정의 된 문화권 식별자에 나열 된는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서.  
  
 대부분의 경우에는 `culture` 매개 변수는 해당 국가별 언어 지원 (NLS) 로캘 식별자에 매핑됩니다. 값은 `culture` 매개 변수 값이 됩니다는 <xref:System.Globalization.CultureInfo.LCID%2A> 새 속성 <xref:System.Globalization.CultureInfo>합니다.  
  
 로캘 이름 생성자를 호출 하는 것이 좋습니다 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>이므로 로캘 이름이 Lcid에 것이 좋습니다. 사용자 지정 로캘에 대 한 로캘 이름은 필수입니다.  
  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다. 지정된 된 문화권 식별자에는 Windows의 현재 문화권의 문화권 식별자와 일치를이 생성자는 한 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 해당 재정의 사용 하는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성과의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo> (예를 들어 없으면 선택한 일정 중 하나는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>)는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 지정된 된 문화권 식별자는 Windows의 현재 문화권의 식별자와 일치 하지 않으면이 생성자는 한 <xref:System.Globalization.CultureInfo> 지정된 된 문화권에 대 한 기본값을 사용 하는 합니다.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 항상 속성이 `true`합니다.  
  
 예를 들어 아랍어 (사우디아라비아)는 Windows의 현재 문화권 및 사용자가 회교식 달력을 그레고리오 력으로 변경 합니다.  
  
-   와 `CultureInfo("0x0401")` (문화권 이름을 AR-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.GregorianCalendar> (하는 사용자 설정) 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("0x041E")` (문화권 이름 번째 번째) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
 유로 사용 하는 문화권에 대 한.NET Framework 및 Windows XP 유로으로 기본 통화를 설정 합니다. 그러나 이전 버전의 Windows는 그렇지 않습니다. 따라서 이전 버전의 Windows 사용자 통화 설정을 제어판의 국가 및 언어 옵션을 통해 변경 되지 않은 경우 통화 수 올바르지 않을 합니다. 통화에 대 한.NET Framework 기본 설정을 사용 하려면 응용 프로그램 사용 해야는 <xref:System.Globalization.CultureInfo> 허용 하는 생성자 오버 로드는 `useUserOverride` 매개 변수 설정 하 고 `false`합니다.  
  
> [!NOTE]
>  에 대 한 이전 버전과 호환성을 사용 하 여 생성 하는 문화권을 `culture` 0x0004 또는 0x7c04의 매개 변수는 갖습니다는 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS, ZH-CHT의 속성 각각. 대신 이전 이름을 사용 하는 것에 대 한 이유가 없다면 Zh-hans 또는 Zh-hant 현재 표준 문화권 이름을 사용 하 여 문화권을 생성 하려면 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" />가 0보다 작은 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" />가 올바른 문화권 식별자가 아닙니다. 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="culture" /> 유효한 문화권 식별자가 아닙니다. 부터는 [! 이 생성자를 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="culture" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 메서드에서 throw 된 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">미리 정의된 <see cref="T:System.Globalization.CultureInfo" /> 이름, 기존 <see cref="P:System.Globalization.CultureInfo.Name" />의 <see cref="T:System.Globalization.CultureInfo" /> 또는 Windows 전용 문화권 이름입니다. <c>이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <summary>이름에 지정된 문화권을 기반으로 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 목록이 미리 정의 된 문화권 이름에 대 한 참조는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다.  
  
 경우 `name` 은 <xref:System.String.Empty?displayProperty=nameWithType>, 생성자 고정 문화권의 인스턴스를 만듭니다;이 해당 값을 검색 하는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다.  
  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다. 과 연관 된 문화권 식별자 `name` 일치 하는 현재 Windows 문화권이이 생성자의 문화권 식별자를 만듭니다는 <xref:System.Globalization.CultureInfo> 는 속성에대한사용자설정을포함하는재정의사용하는개체<xref:System.Globalization.DateTimeFormatInfo>에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 속성을는 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 과 연관 된 문화권 식별자 `name` 현재 Windows 문화권이이 생성자의 문화권 식별자 만듭니다 일치 하지 않으면는 <xref:System.Globalization.CultureInfo> 지정된 된 문화권에 대 한 기본값을 사용 하는 개체입니다.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 항상 속성이 `true`합니다.  
  
 예를 들어 아랍어 (사우디아라비아)은 Windows의 현재 문화권 및 사용자 일반 달력을 회교식에서 달력으로 변경 합니다.  
  
-   와 `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.GregorianCalendar> (하는 사용자 설정) 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> 새 속성 <xref:System.Globalization.CultureInfo> 지정된 이름과 관련 된 문화권 식별자로 설정 됩니다.  
  
 유로 사용 하는 문화권에 대 한.NET Framework 및 Windows XP 유로으로 기본 통화를 설정 합니다. 그러나 이전 버전의 Windows 이렇게 하지 마십시오. 따라서 이전 버전의 Windows 사용자 통화 설정을 제어판의 국가 및 언어 옵션을 통해 변경 되지 않은 경우 통화 수 올바르지 않을 합니다. 통화에 대 한.NET Framework 기본 설정을 사용 하려면 응용 프로그램 사용 해야는 <xref:System.Globalization.CultureInfo> 허용 하는 생성자 오버 로드는 `useUserOverride` 매개 변수 설정 하 고 `false`합니다.  
  
   
  
## Examples  
 다음 예에서는 현재 문화권을 검색합니다. 호출 이외의 노드에 프랑스어 (프랑스) 문화권 인 경우는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 를 인스턴스화하는 생성자는 <xref:System.Globalization.CultureInfo> 개체 프랑스어 (프랑스) 문화권을 표시 하 고 현재 스레드 문화권입니다. 인스턴스화하고 그렇지 않으면는 <xref:System.Globalization.CultureInfo> 하면 현재 문화권을 프랑스어 (룩셈부르크) 문화권을 나타내는 개체입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />가 null인 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" />이 유효한 문화권 이름이 아닙니다. 자세한 내용은 호출자 참고 사항 섹션을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 유효한 문화권 이름이 아닙니다. 부터는 [! 이 생성자를 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="name" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 를 쓰고 <paramref name="name" /> 보충 또는 대체 문화권 메서드가 throw의 이름이 올바르지는 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">미리 정의된 <see cref="T:System.Globalization.CultureInfo" /> 식별자, 기존 <see cref="P:System.Globalization.CultureInfo.LCID" /> 개체의 <see cref="T:System.Globalization.CultureInfo" /> 속성 또는 Windows 전용 문화권 식별자입니다.</param>
        <param name="useUserOverride">사용자가 선택한 문화권 설정(<see langword="true" />)을 사용할지 아니면 기본 문화권 설정(<see langword="false" />)을 사용할지를 나타내는 부울입니다.</param>
        <summary>사용자가 시스템에서 선택한 문화권 설정을 사용할지 여부를 지정하는 부울과 문화권 식별자별로 지정된 문화권을 기반으로 하는 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 미리 정의 된 문화권 식별자에 나열 된는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서.  
  
 대부분의 경우에는 `culture` 매개 변수는 해당 국가별 언어 지원 (NLS) 로캘 식별자에 매핑됩니다. 값은 `culture` 매개 변수 값이 됩니다는 <xref:System.Globalization.CultureInfo.LCID%2A> 새 속성 <xref:System.Globalization.CultureInfo>합니다.  
  
 로캘 이름 생성자를 호출 하는 것이 좋습니다 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>이므로 로캘 이름이 Lcid에 것이 좋습니다. 사용자 지정 로캘에 대 한 로캘 이름은 필수입니다.  
  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 일반적으로 응용 프로그램 사용자 재정의 하지 허용 해야 합니다. Note는 재정의 허용 하지 않고 자체 작업이 반드시 데이터 안정성; 블로그 항목을 참조 [문화권 데이터 (고정 적인) 제외 안정적으로 간주 해서는 안](http://go.microsoft.com/fwlink/?LinkId=156850)합니다.  
  
 경우는 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 속성이로 설정 되어 `true` 지정된 된 문화권 식별자에는 Windows의 현재 문화권의 식별자와 일치 하 고,이 생성자는 <xref:System.Globalization.CultureInfo> 속성에 대 한 사용자 설정을 포함 하는 재정의 사용 하는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 속성을는 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 그렇지 않은 경우이 생성자는 만듭니다는 <xref:System.Globalization.CultureInfo> 지정된 된 문화권에 대 한 기본값을 사용 하는 합니다.  
  
 값은 `useUserOverride` 매개 변수 값이 됩니다는 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 속성입니다.  
  
 예를 들어 아랍어 (사우디아라비아)은 Windows의 현재 문화권 및 사용자가 회교식 달력을 그레고리오 력으로 변경 합니다.  
  
-   와 `CultureInfo("0x0401", true)` (문화권 이름을 AR-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.GregorianCalendar> (하는 사용자 설정) 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("0x0401", false)` (문화권 이름을 AR-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.HijriCalendar> (ar SA에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `false`합니다.  
  
-   와 `CultureInfo("0x041E", true)` (문화권 이름 번째 번째) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("0x041E", false)` (문화권 이름 번째 번째) <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `false`합니다.  
  
 유로 사용 하는 문화권에 대 한.NET Framework 및 Windows XP 유로으로 기본 통화를 설정 합니다. 그러나 이전 버전의 Windows는 그렇지 않습니다. 따라서 이전 버전의 Windows 사용자 통화 설정을 제어판의 국가 및 언어 옵션을 통해 변경 되지 않은 경우 통화 수 올바르지 않을 합니다. 통화에 대 한.NET Framework 기본 설정을 사용 하려면 응용 프로그램 설정 해야는 `useUserOverride` 매개 변수를 `false`합니다.  
  
> [!NOTE]
>  에 대 한 이전 버전과 호환성을 사용 하 여 생성 하는 문화권을 `culture` 0x0004 또는 0x7c04의 매개 변수는 갖습니다는 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS, ZH-CHT의 속성 각각. 대신 이전 이름을 사용 하는 것에 대 한 이유가 없다면 Zh-hans 또는 Zh-hant 현재 표준 문화권 이름을 사용 하 여 문화권을 생성 하려면 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" />가 0보다 작은 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" />가 올바른 문화권 식별자가 아닙니다. 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="culture" /> 유효한 문화권 식별자가 아닙니다. 부터는 [! 이 생성자를 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="culture" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 메서드에서 throw 된 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">미리 정의된 <see cref="T:System.Globalization.CultureInfo" /> 이름, 기존 <see cref="P:System.Globalization.CultureInfo.Name" />의 <see cref="T:System.Globalization.CultureInfo" /> 또는 Windows 전용 문화권 이름입니다. <c>이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <param name="useUserOverride">사용자가 선택한 문화권 설정(<see langword="true" />)을 사용할지 아니면 기본 문화권 설정(<see langword="false" />)을 사용할지를 나타내는 부울입니다.</param>
        <summary>사용자가 시스템에서 선택한 문화권 설정을 사용할지 여부를 지정하는 부울과 이름별로 지정된 문화권을 기반으로 하는 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 목록이 미리 정의 된 문화권 이름에 대 한 참조는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다.  
  
 경우 `name` 은 <xref:System.String.Empty?displayProperty=nameWithType>, 생성자 고정 문화권의 인스턴스를 만듭니다;이 해당 값을 검색 하는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다.  
  
 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권을 연관 된 값의 일부를 재정의할 사용자를 선택할 수 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 일반적으로 응용 프로그램 사용자 재정의 하지 허용 해야 합니다. Note는 재정의 허용 하지 않고 자체 작업이 반드시 데이터 안정성; 블로그 항목을 참조 [문화권 데이터 (고정 적인) 제외 안정적으로 간주 해서는 안](http://go.microsoft.com/fwlink/?LinkId=156850)합니다.  
  
 경우는 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 속성이 `true` 지정된 된 문화권 이름과와 관련 된 문화권 식별자에는 Windows의 현재 문화권의 culture 식별자와 일치 하 고,이 생성자를 만듭니다는 <xref:System.Globalization.CultureInfo> 이러한 재정의 사용 하는 속성에 대 한 사용자 설정을 포함 하는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 속성을는 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 그렇지 않은 경우이 생성자는 만듭니다는 <xref:System.Globalization.CultureInfo> 지정된 된 문화권에 대 한 기본값을 사용 하는 합니다.  
  
 값은 `useUserOverride` 매개 변수 값이 됩니다는 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 속성입니다.  
  
 예를 들어 아랍어 (사우디아라비아)은 Windows의 현재 문화권 및 사용자 일반 달력을 회교식에서 달력으로 변경 합니다.  
  
-   와 `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.GregorianCalendar> (하는 사용자 설정) 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.HijriCalendar> (ar SA에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `false`합니다.  
  
-   와 `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `true`합니다.  
  
-   와 `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> 로 설정 된 <xref:System.Globalization.ThaiBuddhistCalendar> (번째 번째에 대 한 기본 일정은)는 및 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 로 설정 된 `false`합니다.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> 새 속성 <xref:System.Globalization.CultureInfo> 지정된 이름과 관련 된 문화권 식별자로 설정 됩니다.  
  
 유로 사용 하는 문화권에 대 한.NET Framework 및 Windows XP 유로으로 기본 통화를 설정 합니다. 그러나 이전 버전의 Windows 이렇게 하지 마십시오. 따라서 이전 버전의 Windows 사용자 통화 설정을 제어판의 국가 및 언어 옵션을 통해 변경 되지 않은 경우 통화 수 올바르지 않을 합니다. 통화에 대 한.NET Framework 기본 설정을 사용 하려면 응용 프로그램 설정 해야는 `useUserOverride` 매개 변수를 `false`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />가 null인 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" />이 유효한 문화권 이름이 아닙니다. 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 유효한 문화권 이름이 아닙니다. 부터는 [! 이 생성자를 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="name" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 를 쓰고 <paramref name="name" /> 보충 또는 대체 문화권 메서드가 throw의 이름이 올바르지는 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권에서 사용하는 기본 달력을 가져옵니다.</summary>
        <value>문화권에서 사용하는 기본 달력을 나타내는 <see cref="T:System.Globalization.Calendar" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 따라서 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true`,이 속성의 값 문화권에서 사용 되는 기본 달력에서 다를 수 있습니다.  
  
 현재 사용 되는 달력을 변경 하는 응용 프로그램 <xref:System.Globalization.CultureInfo> 설정 하 여는 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 속성 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>의 인스턴스인는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다. 새 일정에 나열 된 일정 중 하나 여야 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>합니다. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 날짜 및 시간 서식와 연결 된 사용자 지정 하는 다른 속성도 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>캐시된 문화권 관련 정보를 새로 고칩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 culture 및 형식 패턴, 같은 정보를 요청 된 처음으로 캐시 됩니다. 수명 동안 정보를 변경할 수는 <xref:System.AppDomain>, 예를 들어 사용자 제어판의 국가 및 언어 옵션 부분 수정 합니다. 그러나는 <xref:System.Globalization.CultureInfo> 클래스 변경 내용을 시스템 설정에서 자동으로 검색 되지 않습니다.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> 메서드의 캐시를 지웁니다 <xref:System.Globalization.CultureInfo> 가 만든 개체 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 의 정보를 새로 고치는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, 및 <xref:System.Globalization.RegionInfo.CurrentRegion%2A> 속성을 현재 시스템 설정에 따라 합니다.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> 메서드의 정보를 새로 고치지 않습니다는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 기존 스레드에 대 한 속성. 그러나 향후 스레드는가 모든 새 <xref:System.Globalization.CultureInfo> 속성 값입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" />의 복사본을 만듭니다.</summary>
        <returns>현재 <see cref="T:System.Globalization.CultureInfo" />의 복사본입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복제본은 쓰기 가능한 경우에 원래 <xref:System.Globalization.CultureInfo> 읽기 전용입니다. 따라서 복사본의 속성을 수정할 수 있습니다.  
  
 개체의 단순 복사본에만 개체의 복사본이입니다. 개체가 다른 개체에 대 한 참조를 포함 하는 경우 단순 복사는 참조 개체의 복사본을 만들지 않습니다. 원래 개체를 대신 참조 합니다. 이와 반대로 개체의 전체 복사본을 개체의 복사본 및 해당 개체에서 직접 또는 간접적으로 참조 하는 모든 대상을 복사를 만듭니다.  
  
 <xref:System.Globalization.CultureInfo.Clone%2A> 메서드 향상 된 단순 복사본을 만듭니다. 반환 된 개체는 <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, 및 <xref:System.Globalization.CultureInfo.Calendar%2A> 속성도 복사 됩니다. 따라서 복제 <xref:System.Globalization.CultureInfo> 개체 원래 영향을 주지 않고 복사 된 해당 속성을 수정할 수 <xref:System.Globalization.CultureInfo> 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 CultureInfo.Clone도 복제는 <xref:System.Globalization.DateTimeFormatInfo> 및 <xref:System.Globalization.NumberFormatInfo> 와 연결 된 인스턴스는 <xref:System.Globalization.CultureInfo>합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권에 대한 문자열을 비교하는 방법을 정의하는 <see cref="T:System.Globalization.CompareInfo" />를 가져옵니다.</summary>
        <value>문화권에 대한 문자열을 비교하는 방법을 정의하는 <see cref="T:System.Globalization.CompareInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A> 속성에서 반환 된 <xref:System.Globalization.CompareInfo> 문화권 구분 정렬 및 문자열 비교 연산에 사용 되는 문화권별 정보를 제공 하는 개체입니다.  
  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Globalization.CultureInfo> 국제 정렬와 스페인어 (스페인)에 대 한 <xref:System.Globalization.CultureInfo> 전통 정렬을 사용 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">미리 정의된 <see cref="T:System.Globalization.CultureInfo" />의 이름 또는 기존 <see cref="T:System.Globalization.CultureInfo" /> 개체의 이름입니다. <c>이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <summary>지정된 이름과 관련된 특정 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" />을(를) 만듭니다.</summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" />개체는 다음을 나타냅니다. <paramref name="name" />이 빈 문자열("")인 경우 고정 문화권입니다.  -또는-  <paramref name="name" />이 중립 문화권인 경우 <paramref name="name" />과 연관된 특정 문화권입니다.  -또는-  <paramref name="name" />이 이미 특정 문화권인 경우 <paramref name="name" />이 지정하는 문화권입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 메서드 호출을 래핑하는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 생성자입니다.  
  
> [!NOTE]
>  목록이 미리 정의 된 문화권 이름에 대 한 참조는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다.  
  
 세 개의로 그룹화 되 고 문화권: 고정 문화권, 중립 문화권 및 특정 문화권입니다. 자세한 내용은 참조에 대 한 설명을 <xref:System.Globalization.CultureInfo> 클래스입니다.  
  
 이 메서드에서 반환 된 특정 문화권의 문화권 식별자 Windows의 현재 문화권의 culture 식별자와 일치 하는 경우이 메서드가 만드는 <xref:System.Globalization.CultureInfo> Windows 문화권을 사용 하는 개체를 재정의 합니다. 재정의의 속성에 대 한 사용자 설정을 포함 된 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 인스턴스화하는 <xref:System.Globalization.CultureInfo> 이며 기본값은 문화권 설정을 사용자 재정의 하지 않고 호출 하는 개체는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 생성자의 값을 가진 `false` 에 대 한는 `useUserOverride` 인수입니다.  
  
 하지만 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> "관련" 라는 용어를 포함 하는 메서드 이름, 버전 간에 또는 사용자 지정 문화권 또는 사용자 재정의 때문에 culture 데이터가 변경 될 수 있습니다. 데이터를 저장 하기 위한 고정 문화권 또는 이진 또는 고정 폼을 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 검색 <xref:System.Globalization.CultureInfo> 중립 문화권을 나타내는 개체의 <xref:System.Globalization.CultureInfo.GetCultures%2A> 메서드 고 정렬 합니다. 배열의 요소를 반복 하면서 각 중립 문화권의 이름을 전달는 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 메서드와 메서드에 의해 반환 된 특정 문화권의 이름을 표시 합니다.  
  
> [!NOTE]
>  이 예제에는 ZH-CHS 및 ZH-CHT 문화권 이름을 사용합니다. 그러나 응용 프로그램의 Windows Vista를 대상 하 고 나중에 ZH-CHS 및 ZH-CHT 대신 Zh-hant 대신 Zh-hans를 사용 해야 합니다. Zh-hans 및 Zh-hant 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
>   
>  또한 note 예제의 결과 중국어 (번체) 중립 문화권 (글꼴, ZH-CHT, 또는 Zh-hant)의 입력 ZH-TW를 반환 합니다, 대만 Windows 설치에서 다를 수 있습니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" />이 유효한 문화권 이름이 아닙니다.  -또는-  <paramref name="name" />에 지정된 문화권에 특정 문화권이 연결되어 있지 않습니다.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" />가 null인 경우</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 유효한 문화권 이름이 아닙니다. 부터는 [! 이 메서드에서 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" /> 개체와 관련된 문화권 형식을 가져옵니다.</summary>
        <value>하나 이상의 <see cref="T:System.Globalization.CultureTypes" /> 값의 비트 조합입니다. 기본값은 없습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 <xref:System.Globalization.CultureTypes> 열거형 및 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 속성입니다.  
  
 [!code-cpp[system.globalization.cultureTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cpp/ct.cpp#1)]
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 스레드에서 사용하는 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" /> 개체를 가져오거나 설정합니다.</summary>
        <value>현재 스레드에서 사용하는 문화권을 나타내는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> 이 속성에서 반환 되는 개체 및 관련된 개체 날짜에 대 한 기본 형식, 시간, 숫자, 통화 값, 텍스트의 순서 정렬, 대/소문자 규칙을 확인 하 고 문자열을 비교 합니다.  
  
 현재 문화권은 정적에서 반환 되는 실행 중인 스레드의 속성 <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> 속성입니다. 값은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성의 값에 해당 하는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 속성. 값을 검색 하는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성은 검색 된 <xref:System.Globalization.CultureInfo> 에서 반환 된 개체는 `Thread.CurrentThread.CurrentCulture` 속성입니다. 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]의 값을 설정는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성에는 현재 스레드 문화권도 변경 합니다.  
  
> [!NOTE]
>  .NET Framework 4.5.2 및 이전 버전의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성은 읽기 전용입니다.  즉, 속성 값을 검색할 수 있지만 설정할 수 없습니다. 현재 문화권을 변경 하려면 할당는 <xref:System.Globalization.CultureInfo> 새 문화권을 나타내는 개체는 `Thread.CurrentThread.CurrentCulture` 속성입니다. 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성은 읽기 / 쓰기; 설정 및 속성의 값을 검색할 수 있습니다. 속성 값 설정 하면는 <xref:System.Globalization.CultureInfo> 을 새 문화권의 값을 나타내는 개체는 `Thread.CurrentThread.CurrentCulture` 속성도 변경 합니다.  
  
 섹션 내용  
  
 [스레드의 Culture는 결정 하는 방법](#ThreadCulture)   
 [현재 문화권 가져오기](#Getting)   
 [CurrentCulture 속성을 명시적으로 설정합니다.](#ExplicitSetting)   
 [현재 문화권 및 사용자 재정의](#Overrides)   
 [문화권 및 Windows 앱](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>스레드의 Culture는 결정 하는 방법  
 스레드가 시작 될 때 해당 문화권 처음 다음과 같이 결정 됩니다.  
  
-   지정 된 문화권을 검색 하 여는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 는 스레드가 실행 중인, 속성 값이 경우 응용 프로그램 도메인 속성 `null`합니다.  
  
-   스레드가 작업 기반 비동기 작업 및 응용 프로그램 대상 실행 되 고 있는 스레드 풀 스레드 문화권 인 경우는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 또는 이후 버전의.NET Framework에 해당 문화권 호출 스레드의 문화권에 의해 결정 됩니다.  다음 예에서는 현재 문화권 포르투갈어 (브라질) 바뀌고 각각 표시 하는 스레드 ID, 해당 작업 ID 및 현재 문화권의 6 가지 작업을 시작 합니다. 호출 스레드의 문화권이 각 작업 (및 스레드) 상속한 것입니다.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     자세한 내용은의 "문화권 및 작업 기반 비동기 작업" 섹션을 참조 하십시오.는 <xref:System.Globalization.CultureInfo> 항목입니다.  
  
-   Windows를 호출 하 여 `GetUserDefaultLocaleName` 함수입니다.  
  
 시스템 설치 문화권 또는 사용자의 기본 culture를와 다른 특정 문화권을 설정 하면 다중 스레드 응용 프로그램을 시작 하는 경우 해당 스레드의 현재 문화권 됩니다에서 반환 되는 culture는 `GetUserDefaultLocaleName` 문화권을 지정 하지 않으면 작동는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 스레드가 실행 중인 응용 프로그램 도메인의 속성입니다.  
  
 스레드의 문화권을 결정 하는 방법에 대 한 자세한 내용은의 "문화권 및 스레드" 섹션을 참조 하십시오.는 <xref:System.Globalization.CultureInfo> 참조 페이지입니다.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>현재 문화권 가져오기  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성은 스레드별 설정, 즉, 각 스레드는 자체 culture를 가질 수 있습니다. 값을 검색 하 여 현재 스레드의 culture를 가져오면는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성을 다음 예로 보여 줍니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 현재 스레드의 culture의 값을 검색할 수도 있습니다는 <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> 속성입니다.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>CurrentCulture 속성을 명시적으로 설정합니다.  
 자세한는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 기존 스레드에 의해 사용 되는 문화권을 변경 하려면 설정한는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 새 문화권 속성입니다. 이러한 방식으로 변경 하는 스레드의 문화권을 명시적으로 변경 하는 경우 스레드 응용 프로그램 도메인 경계를 이동 하는 경우를 유지 합니다. 다음 예제에서는 네덜란드어 (네덜란드)에 현재 스레드 문화권을 변경합니다. 현재 스레드 응용 프로그램 도메인 경계를 교차 하는 경우 현재 문화권 남아 변경 된 보여 줍니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  문화권을 사용 하 여 변경에서 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성 필요는 <xref:System.Security.Permissions.SecurityPermission> 하 여 권한은 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 값이 설정 합니다. 스레드를 조작은 스레드와 관련 된 보안 상태로 인해 위험 합니다. 따라서 신뢰할 수 있는 코드에만 하 고 다음 필요한 경우에이 권한을 부여 해야 합니다. 부분적으로 신뢰할 수 있는 코드에 스레드 문화권을 변경할 수 없습니다.  
  
 부터는 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 현재 스레드 문화권을 프랑스어 (캐나다)) (등 특정 문화권 또는 중립 문화권 (예: 프랑스어) 명시적으로 변경할 수 있습니다. 때는 <xref:System.Globalization.CultureInfo> 개체는 중립 문화권의 값을 나타냅니다 <xref:System.Globalization.CultureInfo> 와 같은 <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, 및 <xref:System.Globalization.CultureInfo.TextInfo%2A> 반영 연관 된 특정 문화권의 중립 문화권입니다. 예를 들어 영어 중립 문화권에 대 한 기준 문화권은 영어 (미국); 독일어 culture에 대 한 기준 문화권이 독일어 (독일)입니다. 다음 예에서는 프랑스어 하 고 특정 문화권을 프랑스어 (캐나다) 중립 문화권 현재 문화권 설정 된 경우 서식 지정에 차이 보여 줍니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 사용할 수도 있습니다는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 와 함께 속성은 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 속성을 설정 하려면는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 다음 예제와 같이 사용자에 게 ASP.NET 응용 프로그램의 속성 문화권의 기본 설정 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>현재 문화권 및 사용자 재정의  
 Windows에서는 사용자가의 표준 속성 값을 재정의 하는 <xref:System.Globalization.CultureInfo> 개체와 연결된 된 개체를 사용 하 여 **국가 및 언어 옵션** 제어판에서. <xref:System.Globalization.CultureInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성은 다음과 같은 경우에 이러한 사용자 재정의 반영 합니다.  
  
-   Windows에서 현재 스레드 문화권은 암시적으로 설정 하는 경우 `GetUserDefaultLocaleName` 함수입니다.  
  
-   현재 스레드 문화권에 정의 된 경우는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성은 Windows 시스템의 현재 문화권에 해당 합니다.  
  
-   현재 스레드 문화권에서 반환 되는 문화권에 명시적으로 설정 하는 경우는 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 메서드와 culture Windows 현재 시스템 문화권에 해당 하는지 합니다.  
  
-   현재 스레드 문화권에 의해 인스턴스화될 culture에 명시적으로 설정 하는 경우는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 생성자 및 문화권 Windows 현재 시스템 문화권에 해당 하는지 합니다.  
  
 경우에 따라, 특히 서버 응용 프로그램에 대 한 현재 문화권의 설정는 <xref:System.Globalization.CultureInfo> 사용자 재정의 반영 하는 개체를 적절 하지 않을 합니다. 대신, 현재 스레드 문화권을 설정할 수 있습니다는 <xref:System.Globalization.CultureInfo> 사용자 반영 되지 않는 개체는 다음과 같은 방법으로 재정의 합니다.  
  
-   호출 하 여는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 생성자의 값을 가진 `false` 에 대 한는 `useUserOverride` 인수입니다.  
  
-   호출 하 여는 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 읽기 전용 캐시를 반환 하는 메서드, <xref:System.Globalization.CultureInfo> 개체입니다.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>현재 문화권 및 UWP 앱  
 유니버설 Windows 플랫폼 (UWP) 앱에서의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 방금에서 같이.NET Framework 및.NET Core 응용 프로그램의 속성은 읽기 / 쓰기 하므로 현재 culture를 설정 하 고 가져오려는 사용할 수 있습니다. 그러나 UWP 앱은 현재 문화권 및 현재 UI 문화권 간에 구분 되지 않습니다. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성 map에서 첫 번째 값으로는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 컬렉션입니다.  

.NET Framework 및.NET Core 응용 프로그램에서 현재 문화권은 스레드 단위 설정 및 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성은 현재 스레드 문화권을 반영 합니다. UWP 앱에서 현재 문화권에 매핑됩니다는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 속성은 전역 설정입니다. 설정의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성이 변경 될 경우 전체 앱의 culture; 스레드 단위 별로 culture를 설정할 수 없습니다.
  
## Examples  
 다음 예제에서는 변경 하는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 현재 스레드의 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">속성이 <see langword="null" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">현재 문화권을 설정 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>리소스 관리자가 런타임에 문화권 관련 리소스를 찾기 위해 사용하는 현재 사용자 인터페이스를 나타내는 <see cref="T:System.Globalization.CultureInfo" /> 개체를 가져오거나 설정합니다.</summary>
        <value>리소스 관리자가 런타임에 문화권 관련 리소스를 찾기 위해 사용하는 문화권입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 UI 문화권은 스레드별 속성입니다. 즉, 각 스레드는 자체 현재 UI 문화권입니다. 이 속성은 검색 하거나로 시작 하는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]설정는 <xref:System.Globalization.CultureInfo> 에 할당 된 개체는 `System.Threading.Thread.CurrentThread.CurrentUICulture` 속성입니다. 스레드가 시작 될 때 해당 UI 문화권 처음 다음과 같이 결정 됩니다.  
  
-   지정 된 문화권을 검색 하 여는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 는 스레드가 실행 중인, 속성 값이 경우 응용 프로그램 도메인 속성 `null`합니다.  
  
-   스레드가 작업 기반 비동기 작업 및 응용 프로그램 대상 실행 되 고 있는 스레드 풀 스레드 문화권 인 경우는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 또는 이후 버전의.NET Framework에 해당 UI 문화권은 호출 스레드의 UI 문화권에 의해 결정 됩니다.  다음 예에서는 현재 UI 문화권 포르투갈어 (브라질) 바뀌고 스레드 ID, 해당 작업 ID 및 해당 현재 UI 문화권을 표시 하며 각 6 가지 작업을 시작 합니다. 작업 (및 스레드)의 각 호출 스레드의 UI 문화권을 상속 했습니다.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     자세한 내용은의 "문화권 및 작업 기반 비동기 작업" 섹션을 참조 하십시오.는 <xref:System.Globalization.CultureInfo> 항목입니다.  
  
-   Windows를 호출 하 여 `GetUserDefaultUILanguage` 함수입니다.  
  
> [!NOTE]
>  에 [!INCLUDE[Compact](~/includes/compact-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성은 읽기 전용입니다. 현재 UI 문화권은 시스템의 국가별 설정에 따라 결정 됩니다 및 프로그래밍 방식으로 변경할 수 없습니다.  
  
 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 사용자 인터페이스 문화권을 변경 하는 스레드에서 사용, 설정는 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 새 문화권 속성입니다. 이러한 방식으로 변경 하는 스레드의 UI 문화권을 명시적으로 변경 하는 경우 스레드 응용 프로그램 도메인 경계를 이동 하는 경우를 유지 합니다.  
  
> [!NOTE]
>  .NET Framework 4.5.2 및 이전 버전의 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성은 읽기 전용입니다.  즉, 속성 값을 검색할 수 있지만 설정할 수 없습니다. 할당 된 현재 UI 문화권을 변경 하려면는 <xref:System.Globalization.CultureInfo> 새 UI 문화권을 나타내는 개체는 `Thread.CurrentThread.CurrentUICulture` 속성입니다. 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성은 읽기 / 쓰기; 설정 및 속성의 값을 검색할 수 있습니다. 속성 값 설정 하면는 <xref:System.Globalization.CultureInfo> 을 새 문화권의 값을 나타내는 개체는 `Thread.CurrentThread.CurrentCulture` 속성도 변경 합니다.  
  
 섹션 내용  
  
 [현재 UI 문화권 가져오기](#Getting)   
 [현재 UI 문화권을 명시적으로 설정합니다.](#Explicit)   
 [암시적는 현재 UI 문화권 설정](#Implicit)   
 [보안 고려 사항](#Security)   
 [현재 UI 문화권 및 Windows 앱](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>현재 UI 문화권 가져오기  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성은 스레드별 설정, 즉, 각 스레드는 자체 UI 문화권을 가질 수 있습니다. 값을 검색 하 여 현재 스레드의 UI 문화권을 가져오면는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성을 다음 예로 보여 줍니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 현재 스레드의 UI 문화권의 값을 검색할 수도 있습니다는 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>현재 UI 문화권을 명시적으로 설정합니다.  
 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]를 할당 하 여 현재 UI 문화권을 변경할 수 있습니다는 <xref:System.Globalization.CultureInfo> 새 문화권을 나타내는 개체는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다. 현재 UI 문화권 (EN-US 또는 DE-DE) 등 특정 문화권 또는 중립 문화권 (예: en 또는 de)에 설정할 수 있습니다. 다음 예제에서는 FR-FR 또는 프랑스어 (프랑스)에 현재 UI 문화권을 설정합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 다중 스레드 응용 프로그램에서 설정할 수 있습니다 명시적으로 UI 문화권의 모든 스레드에 할당 하 여 한 <xref:System.Globalization.CultureInfo> 를 스레드의 문화권을 나타내는 개체 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다. 현재 스레드의 스레드를 설정 하려면 해당 문화권을 사용 하는 경우 새 문화권을 할당할 수 있습니다는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 속성입니다. 스레드의 UI 문화권 명시적으로 설정 된 경우, 응용 프로그램 도메인 경계를 교차 하 고 다른 응용 프로그램 도메인의 코드를 실행 하는 경우에 스레드가 동일한 문화권을 유지 하도록 합니다.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>암시적는 현재 UI 문화권 설정  
 기본 응용 프로그램 스레드를 포함 하 여 스레드를 첫 번째 경우 만들 기본적으로 다음과 같이 현재 UI 문화권 설정:  
  
-   에 정의 된 문화권을 사용 하 여는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성 값이 현재 응용 프로그램 도메인에 대 한 속성 `null`합니다.  
  
-   시스템의 기본 culture를 사용 하 여 Windows 운영 체제를 사용 하는 시스템에서 공용 언어 런타임에서 호출 Windows `GetUserDefaultUILanguage` 함수는 현재 UI 문화권 설정입니다. `GetUserDefaultUILanguage` 사용자가 설정한 기본 UI 문화권을 반환 합니다. 사용자 기본 UI 언어 설정 하지 않은 경우 원래 시스템에 설치 된 문화권을 반환 합니다.  
  
 스레드가 응용 프로그램 경계를 교차 하 다른 응용 프로그램 도메인의 코드를 실행 하는 경우 해당 문화권에서 새로 만든 스레드의 것과 동일한 방식으로 결정 됩니다.  
  
 시스템 설치 UI culture와에서 다른 특정 UI 문화권을 설정 하거나 사용자의 UI 문화권의 기본 설정 및 다중 스레드 응용 프로그램을 시작 하는 경우 이러한 스레드는 현재 UI 문화권 됩니다는 에서반환되는문화권`GetUserDefaultUILanguage`문화권을 지정 하지 않으면 작동는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 스레드가 실행 중인 응용 프로그램 도메인의 속성입니다.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>보안 고려 사항  
 현재 스레드의 문화권을 변경 하려면는 <xref:System.Security.Permissions.SecurityPermission> 하 여 권한은 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 값이 설정 합니다.  
  
> [!CAUTION]
>  스레드를 조작은 스레드와 관련 된 보안 상태로 인해 위험 합니다. 따라서 신뢰할 수 있는 코드에만 하 고 다음 필요한 경우에이 권한을 부여 해야 합니다. 부분적으로 신뢰할 수 있는 코드에 스레드 문화권을 변경할 수 없습니다.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>현재 UI 문화권 및 UWP 앱  
 
유니버설 Windows 플랫폼 (UWP) 앱에서의 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 방금에서 같이.NET Framework 및.NET Core 응용 프로그램의 속성은 읽기 / 쓰기 하므로 현재 culture를 설정 하 고 가져오려는 사용할 수 있습니다. 그러나 UWP 앱은 현재 문화권 및 현재 UI 문화권 간에 구분 되지 않습니다. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성 map에서 첫 번째 값으로는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 컬렉션입니다.

.NET Framework 및.NET Core 응용 프로그램에서 현재 UI 문화권은 스레드별 설정 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성은 현재 스레드의 UI 문화권을 반영 합니다. UWP 앱에서 현재 문화권에 매핑됩니다는 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 속성은 전역 설정입니다. 설정의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성이 변경 될 경우 전체 앱의 culture; 스레드 단위 별로 culture를 설정할 수 없습니다.    
  
## Examples  
 다음 코드 예제에서는 변경 하는 방법을 보여 줍니다.는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 현재 스레드의 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">속성이 <see langword="null" />로 설정됩니다.</exception>
        <exception cref="T:System.ArgumentException">속성이 리소스 파일을 찾는 데 사용할 수 없는 문화권 이름으로 설정되어 있습니다. 리소스 파일 이름에는 문자, 숫자, 하이픈 또는 밑줄만 포함할 수 있습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">현재 UI 문화권을 설정 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>날짜와 시간 표시를 위한 문화권 형식을 정의하는 <see cref="T:System.Globalization.DateTimeFormatInfo" />를 가져오거나 설정합니다.</summary>
        <value>날짜와 시간 표시를 위한 문화권 형식을 정의하는 <see cref="T:System.Globalization.DateTimeFormatInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 값은 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성에는 응용 프로그램 속성에 액세스 될 때까지 계산 되지 않습니다. 변경할 수 있습니다 현재 문화권을 새 문화권은 응용 프로그램을 실행 한 다음 응용 프로그램에 액세스 하는 동안는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 또는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성을 응용 프로그램은 검색에 대 한 재정의 하는 대신 새 문화권에 대 한 기본값은 원래 culture입니다. 원래 현재 문화권에 대 한 재정의 유지 하려면 응용 프로그램이 액세스 해야는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 현재 문화권을 변경 하기 전에 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 CultureInfo.Clone도 복제는 <xref:System.Globalization.DateTimeFormatInfo> 및 <xref:System.Globalization.NumberFormatInfo> 와 연결 된 인스턴스는 <xref:System.Globalization.CultureInfo>합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">속성이 null로 설정되어 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 속성 또는 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 속성 중 하나가 설정되고 <see cref="T:System.Globalization.CultureInfo" />는 읽기 전용입니다.</exception>
        <block subset="none" type="usage">
          <para>경우 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 는 <see cref="T:System.Globalization.TaiwanCalendar" /> 있지만 <see cref="P:System.Threading.Thread.CurrentCulture" /> 중국어 (대만), ZH-TW, 다음 라는로 설정 되지 않은 <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, 및 <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> 빈 문자열을 반환 ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 응용 프로그램 도메인의 스레드에 대한 기본 문화권을 가져오거나 설정합니다.</summary>
        <value>기본 문화권은 현재 어플리케이션 도메인에 있는 스레드에 해당하며 현재 시스템 문화권이 응용 프로그램 도메인에 있는 기본 스레드 문화권인 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 이전 버전에서는 기본적으로 모든 스레드의 culture로 설정 되어 Windows 시스템 문화권입니다. 응용 프로그램의 현재 문화권에 해당 기본 시스템 문화권에서와 다른 경우이 동작은 하지 바람직한 경우가 많습니다. 에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성을 사용 하면 응용 프로그램을 응용 프로그램 도메인에서 모든 스레드의 기본 문화권을 정의 합니다.  
  
> [!IMPORTANT]
>  문화권을 명시적으로 설정 하지 않은 경우 모든 기존 스레드를 설정 하는 응용 프로그램 도메인에서 실행 되는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성에 이러한 스레드 문화권도 변경 합니다. 그러나 이러한 스레드를 다른 응용 프로그램 도메인에서 실행 하는 경우 culture가 정의한는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 해당 응용 프로그램 도메인에서 속성 또는 기본값이 사용 되지 않는 기본 시스템 문화권에 의해 정의 됩니다. 항상 명시적으로 기본 응용 프로그램 스레드 culture를 설정 하 고에 의존 하지 좋습니다이 인해는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성을 기본 응용 프로그램 스레드 문화권을 정의 합니다.  
  
 값을 명시적으로 설정 되어 있지 않으면는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 속성은 `null`, 명시적 culture 할당 되지 않은 응용 프로그램 도메인에 있는 스레드의 문화권은 기본 Windows 시스템 문화권에 의해 정의 됩니다.  
  
 문화권, 스레드 및 응용 프로그램 도메인에 대 한 자세한 내용은 참조 "문화권 및 스레드" 및 "문화권 및 응용 프로그램 도메인" 섹션는 <xref:System.Globalization.CultureInfo> 참조 페이지.  
  
   
  
## Examples  
 다음 예제에서는 새 스레드의 현재 문화권을 정의에서.NET Framework의 기본 동작을 보여 줍니다. 시작 시 설정 현재 문화권 및 현재 UI 문화권을 프랑스어 (프랑스)에 기본 시스템 문화권은 이미 프랑스어 (프랑스)을 제외한 모든 시스템에서. 기본 시스템 문화권을 프랑스어 (프랑스) 이미 있으면 코드 현재 문화권 및 현재 UI 문화권 영어 (미국)를 설정 합니다. 그런 다음 호출 하 여 `DisplayRandomNumbers` 루틴에 세 개의 난수를 생성 하 고 통화 값으로 표시 합니다. 또한를 실행 하는 새 스레드를 만들 다음으로 `DisplayRandomNumbers` 루틴입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 볼 수 있듯이 예제의 출력 시스템 문화권이 영어 (미국) 인 컴퓨터에서 예제가 실행 될 때 주 스레드가 프랑스어 (프랑스) 문화권의 형식 규칙을 사용 하 여 해당 통화 값을 표시 합니다. 그러나 작업자 스레드의 문화권으로 응용 프로그램의 현재 문화권 아니라 Windows 시스템의 현재 문화권에서 파생 됩니다. 때문에 작업 스레드 영어 (미국) 문화권의 형식 규칙을 사용 하 여 해당 통화 값을 표시 합니다.  
  
 다음 예제에서는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 현재 문화권 및 새 응용 프로그램 스레드는 현재 UI 문화권을 정의 하는 속성입니다. 시작 시 설정 현재 문화권 및 현재 UI 문화권을 프랑스어 (프랑스)에 기본 시스템 문화권은 이미 프랑스어 (프랑스)을 제외한 모든 시스템에서. 기본 시스템 문화권을 프랑스어 (프랑스) 이미 있으면 영어 (미국)에 현재 문화권 및 현재 UI 문화권 설정 합니다. 그런 다음 호출 하 여 `DisplayRandomNumbers` 루틴에 세 개의 난수를 생성 하 고 통화 값으로 표시 합니다. 또한를 실행 하는 새 스레드를 만들 다음으로 `DisplayRandomNumbers` 루틴입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 볼 수 있듯이 예제의 출력 시스템 문화권이 영어 (미국) 인 컴퓨터에서 예제가 실행 될 때 주 스레드와 작업자 스레드 모두 프랑스어 (프랑스) 문화권의 형식 규칙을 사용 하 여 통화 값이 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 응용 프로그램 도메인의 스레드에 대한 기본 UI 문화권을 가져오거나 설정합니다.</summary>
        <value>기본 UI 문화권은 현재 어플리케이션 도메인에 있는 스레드에 해당하며 현재 시스템 UI 문화권이 응용 프로그램 도메인에 있는 기본 스레드 문화권인 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 이전 버전에서는 기본적으로 모든 스레드의 UI 문화권으로 설정 됩니다는 Windows 시스템 문화권입니다. 응용 프로그램의 기본 시스템 문화권에서와 다른 현재 UI 문화권 인 경우이 동작은 하지 바람직한 경우가 많습니다. 에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성을 사용 하면 응용 프로그램 도메인에서 모든 스레드의 기본 UI 문화권을 정의할 수 있습니다.  
  
> [!IMPORTANT]
>  UI 문화권을 명시적으로 설정 하지 않은 경우 모든 기존 스레드를 설정 하는 응용 프로그램 도메인에서 실행 되는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성에 이러한 스레드 문화권도 변경 합니다. 그러나 이러한 스레드를 다른 응용 프로그램 도메인에서 실행 하는 경우 culture가 정의한는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 해당 응용 프로그램 도메인에서 속성 또는 기본값이 사용 되지 않는 기본 시스템 문화권에 의해 정의 됩니다. 항상 명시적으로 기본 응용 프로그램 스레드 culture를 설정 하는에 의존 하지 마십시오 권장이 인해는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성을 기본 응용 프로그램 스레드 문화권을 정의 합니다.  
  
 값을 명시적으로 설정 되어 있지 않으면는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 속성은 `null`, 명시적 culture 할당 되지 않은 응용 프로그램 도메인의 모든 스레드는 현재 문화권 기본 Windows 시스템 문화권에 의해 정의 됩니다.  
  
 문화권, 스레드 및 응용 프로그램 도메인에 대 한 자세한 내용은 참조 "문화권 및 스레드" 및 "문화권 및 응용 프로그램 도메인" 섹션는 <xref:System.Globalization.CultureInfo> 참조 페이지.  
  
   
  
## Examples  
 다음 예제에서는 새 스레드의 현재 문화권을 정의에서.NET Framework의 기본 동작을 보여 줍니다. 영어 및 러시아어 언어 리소스를 사용 합니다. GreetingStrings.txt 라는 텍스트 파일에는 영어 언어 리소스가 포함 되어 있습니다.  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 사용 하 여 GreetingStrings.resources 라는 이진.resources 파일로 컴파일됩니다는 [리소스 파일 생성기](~/docs/framework/tools/resgen-exe-resource-file-generator.md) 다음 명령을 사용 합니다.  
  
```console  
resgen greetingstrings.txt  
```  
  
 GreetingStrings.ru RU.txt 라는 텍스트 파일 러시아어 언어 리소스가 포함 되어 있습니다.  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 사용 하 여 GreetingStrings.ru RU.resources 라는 이진.resources 파일로 컴파일됩니다는 [리소스 파일 생성기](~/docs/framework/tools/resgen-exe-resource-file-generator.md) 다음 명령을 사용 합니다.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 아래 표시 된 응용 프로그램 코드 Example1.vb 또는 Example1.cs 라는 파일에 상주 합니다. Visual Basic 컴파일러에 대 한 다음 명령을 사용 하 여 실행 파일에 컴파일됩니다.  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 C# 컴파일러의 경우이 명령은 유사 합니다.  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 이 예에 나오는 대체 문화권에 대 한 리소스와 함께 실행 코드를 포함 하는 어셈블리를 만듭니다. 사용할 수도 있습니다는 [어셈블리 링커](~/docs/framework/tools/al-exe-assembly-linker.md) 에 다음 명령을 사용 하 여 러시아어 (러시아) 문화권에 대 한 리소스 파일을 만듭니다.  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 시작 시의 예제에서는 현재 문화권 및 현재 UI 문화권 러시아어 (러시아)에서 설정 러시아어 이미는 기본 시스템 문화권에 항목을 제외한 모든 시스템 (러시아). 기본 시스템 문화권 이미 있으면 러시아어 (러시아), 코드 집합 현재 문화권 및 현재 UI 문화권을 영어 (미국) 합니다. 그런 다음 호출 하는 `ShowGreeting` 루틴 이후의 메서드 호출에서 간단한 문자열 처음 호출 될 및 약간 다른 문자열로 표시 됩니다. 또한를 실행 하는 새 스레드를 만들 다음으로 `ShowGreeting` 루틴입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 예제 출력이 보여 주는 시스템 문화권이 영어 (미국) 인 컴퓨터에서 예제가 실행 될 때 주 스레드가 러시아어에서의 초기 문자열이 표시 됩니다. 그러나 작업자 스레드의 문화권으로 응용 프로그램의 현재 문화권 아니라 Windows 시스템의 현재 문화권에서 파생 됩니다. 때문에 작업자 스레드에 영어로 해당 문자열을 표시 합니다.  
  
 다음 예제에서는 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 및 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 현재 문화권 및 새 응용 프로그램 스레드는 현재 UI 문화권을 정의 하는 속성입니다.  
  
 이 예제에서는 이전 예제와 동일한 리소스 파일을 사용 합니다. 제외 하 고 실행 가능한 어셈블리의 변경에 컴파일하고를 위성 어셈블리로 러시아어 언어 지역화 된 리소스를 포함 하는 명령을 동일 수 있습니다.  
  
 시작 시의 예제에서는 현재 문화권 및 현재 UI 문화권 러시아어 (러시아)에서 설정 러시아어 이미는 기본 시스템 문화권에 항목을 제외한 모든 시스템 (러시아). 기본 시스템 문화권은 러시아어 이미 있는 경우 (러시아) 설정 현재 문화권 및 현재 UI 문화권을 영어 (미국)입니다. 그런 다음 호출 하는 `ShowGreeting` 루틴 이후의 메서드 호출에서 간단한 문자열 처음 호출 될 및 약간 다른 문자열로 표시 됩니다. 또한를 실행 하는 새 스레드를 만들 다음으로 `ShowGreeting` 루틴입니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 볼 수 있듯이 예제의 출력 시스템 문화권이 영어 (미국) 인 컴퓨터에서 예제가 실행 될 때 주 스레드와 작업자 스레드 모두 러시아어 언어에 해당 문자열 표시입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">집합 작업에서 <see cref="P:System.Globalization.CultureInfo.Name" /> 속성 값이 올바르지 않습니다.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>전체 지역화된 문화 이름을 가져옵니다.</summary>
        <value>전체 지역화 된 문화 이름을 형식으로 * languagefull * [* 국가 / regionfull *] 여기서 * languagefull *은 언어의 전체 이름 및 * country / regionfull *은 국가/지역의 전체 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 지역화 된 이름을 나타내는 <xref:System.Globalization.CultureInfo> 개체입니다.  
  
 문화권 이름은 스크립팅 또는 서식 지정 규칙으로 인해 달라질 수 있습니다. 를 표시 하려면 반환 된 이름을 사용 하 고 구문 분석 하려고 해야 합니다.  
  
 사용자 지정 문화권 방법으로 만들어진 경우는 <xref:System.Globalization.CultureAndRegionInfoBuilder> 클래스는 <xref:System.Globalization.CultureInfo.DisplayName%2A> 속성은 값으로 초기화는 <xref:System.Globalization.CultureInfo.NativeName%2A> 속성.  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  0x0004 및 0x7C04 culture 식별자와 ZH-CHS 및 ZH-CHT culture를 각각 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권 이름을 *languagefull* [*country/regionfull*] (영어) 형식으로 가져옵니다.</summary>
        <value>형식의 문화권 이름 * languagefull * [* 국가 / regionfull *] 영어, where에서 * languagefull *은 언어의 전체 이름 및 * country / regionfull *은 국가/지역의 전체 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예를 들어는 <xref:System.Globalization.CultureInfo.EnglishName%2A> 특정 문화권에 대 한 이름 EN-US는 "영어 (미국)"입니다.  
  
 이 속성의 값은.NET Framework의 언어 버전에 관계 없이 동일 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">현재 <see cref="T:System.Globalization.CultureInfo" />와 비교할 개체입니다.</param>
        <summary>지정된 개체가 현재 <see cref="T:System.Globalization.CultureInfo" />와 같은 문화권인지 여부를 확인합니다.</summary>
        <returns>
          <paramref name="value" />가 현재 <see cref="T:System.Globalization.CultureInfo" />와 같은 문화권이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Object.Equals%2A?displayProperty=nameWithType>를 재정의합니다.  
  
 두 개의 <xref:System.Globalization.CultureInfo> 개체는 같은 것으로 간주 되는 <xref:System.Globalization.CultureInfo.Name%2A> 및 <xref:System.Globalization.CultureInfo.CompareInfo%2A> 속성이 같은지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 그래픽 사용자 인터페이스 문화권이 적합하지 않은 경우 콘솔 응용 프로그램에 적합한 대체 사용자 인터페이스 문화권을 가져옵니다.</summary>
        <returns>콘솔에서 텍스트를 읽고 표시하는 데 사용되는 대체 문화권입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 아랍어, 히브리어, 우르두어 시리아어와 같은 언어 양방향 텍스트를 기반으로 합니다. 그래픽 사용자 인터페이스를 포함 하는 Windows 응용 프로그램, 양방향 언어를 지원 합니다. 그러나 운영 체제 콘솔의 텍스트 사용자 인터페이스를 사용 하는 콘솔 응용 프로그램, 양방향 지원을 제공 하지 않습니다. 따라서, 아랍어 또는 히브리어에 콘솔 응용 프로그램을 지역화 하는 경우 응용 프로그램 콘솔 화면에서 읽을 수 없는 텍스트를 표시 합니다.  
  
 사용자 인터페이스 문화권이 응용 프로그램 사용자 입력 및 출력을 지원 해야 하 고 기본적으로 같은 운영 체제 culture와 리소스를 지정 합니다. 예를 들어는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 한 아랍어 문화권은 아랍어 운영 체제에 대 한 속성을 반환 합니다. 사용 하 여는 <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> 콘솔 응용 프로그램 사용자 인터페이스에 대 한 적합 한 문화권을 검색 하는 메서드입니다. 응용 프로그램 대체 사용자 인터페이스 문화권을 검색 한 후 문화권 현재 스레드의 현재 사용자 인터페이스 문화권을 할당 해야 합니다. 자세한 내용은의 "명시적으로 설정의 현재 UI 문화권" 섹션을 참조 하십시오.는 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 속성입니다.  
  
 다음은 미리 정의 된 문화권 이름에서 다른 대체 사용자 인터페이스 문화권 이름을 가진 미리 정의 된 문화권입니다.  
  
|미리 정의 된 문화권|문화권 이름|대체 사용자 인터페이스 문화권 이름|  
|------------------------|------------------|------------------------------------------|  
|암하라어|am|ko-KR|  
|암하라어 (에티오피아)|am-ET|ko-KR|  
|(중립 아랍어)|ar|ko-KR|  
|아랍어 (아랍에미리트)|ar-AE|ko-KR|  
|아랍어 (바레인)|ar-BH|ko-KR|  
|아랍어 (알제리아)|ar-DZ|fr-FR|  
|아랍어 (이집트)|ar 예|ko-KR|  
|아랍어 (이라크)|ar-IQ|ko-KR|  
|아랍어 (요르단)|ar JO|ko-KR|  
|아랍어 (쿠웨이트)|ar-KW|ko-KR|  
|아랍어 (레바논)|ar-LB|ko-KR|  
|아랍어 (리비아)|ar 파일|ko-KR|  
|아랍어 (모로코)|ar-MA|fr-FR|  
|아랍어 (오만)|ar OM|ko-KR|  
|아랍어 (카타르)|ar-QA|ko-KR|  
|아랍어 (사우디아라비아)|ar-SA|ko-KR|  
|아랍어 (시리아)|ar SY|ko-KR|  
|아랍어 (튀니지)|ar-TN|fr-FR|  
|아랍어 (예멘)|ar-YE|ko-KR|  
|Assamese|as|ko-KR|  
|아샘어 (인도)|IN로|ko-KR|  
|벵골어|bn|ko-KR|  
|벵골어 (방글라데시)|bn-BD|ko-KR|  
|벵골어 (인도)|bn IN|ko-KR|  
|티베트어|bo|ko-KR|  
|티베트어 (중국)|bo CN|ko-KR|  
|디베히어|dv|ko-KR|  
|디베히어 (인도)|dv-MV|ko-KR|  
|페르시아어|fa|ko-KR|  
|페르시아어 (이란)|fa-IR|ko-KR|  
|구자라트어|gu|ko-KR|  
|구자라트어 (인도)|gu IN|ko-KR|  
|히브리어|he|ko-KR|  
|히브리어 (이스라엘)|he-IL|ko-KR|  
|힌디어|안녕|ko-KR|  
|힌디어 (인도)|안녕하세요-IN|ko-KR|  
|이 문자|ii|ko-KR|  
|이 문자 (중국)|ii-CN|ko-KR|  
|이누크티투트어 어|iu 캔|ko-KR|  
|음절 이누크티투트어 (캐나다)|iu-Cans-CA|ko-KR|  
|크메르어|km|ko-KR|  
|크메르어 (캄보디아)|km-KH|ko-KR|  
|카나다어|kn|ko-KR|  
|카나다어 (인도)|IN kn|ko-KR|  
|콘칸어|kok|ko-KR|  
|콘칸어 (인도)|kok IN|ko-KR|  
|라오스어|lo|ko-KR|  
|라오스어 (라오스 P.D.R.)|lo-LA|ko-KR|  
|말라얄람어|ml|ko-KR|  
|말라얄람어 (인도)|ml IN|ko-KR|  
|모호크어|moh|ko-KR|  
|모호크어 (모호크)|moh-CA|ko-KR|  
|마라티어|mr|ko-KR|  
|마라티어 (인도)|mr IN|ko-KR|  
|네팔어|ne|ko-KR|  
|네팔어 (네팔)|ne-NP|ko-KR|  
|노르웨이어|아니요|nb-NO|  
|오리야어|또는|ko-KR|  
|오리야어 (인도)|또는 IN|ko-KR|  
|펀잡어|pa|ko-KR|  
|펀잡어 (인도)|pa IN|ko-KR|  
|다리어|pr|ko-KR|  
|다리어 (아프가니스탄)|prs-AF|ko-KR|  
|파슈토어|ps|ko-KR|  
|파슈토어 (아프가니스탄)|ps-AF|ko-KR|  
|산스크리트어|sa|ko-KR|  
|산스크리트어 (인도)|sa IN|ko-KR|  
|스리랑카어|si|ko-KR|  
|스리랑카어 (스리랑카)|si LK|ko-KR|  
|시리아어|syr|ko-KR|  
|시리아어 (시리아)|syr SY|ko-KR|  
|타밀어|ta|ko-KR|  
|타밀어 (인도)|ta-IN|ko-KR|  
|텔루구어|te|ko-KR|  
|텔루구어 (인도)|te IN|ko-KR|  
|태국어|th|ko-KR|  
|태국어 (태국)|번째 번째|ko-KR|  
|위구르어|ug|ko-KR|  
|위구르어 (중국)|ug-CN|ko-KR|  
|우르두어|사용자|ko-KR|  
|우르두어 (파키스탄)|ur-PK|ko-KR|  
|베트남어|vi|ko-KR|  
|베트남어 (베트남)|vi VN|ko-KR|  
  
 응용 프로그램 צ ְ ײ <xref:System.Globalization.CultureAndRegionInfoBuilder> 를 만들 대체는 문화권 및 해당 문화권의 콘솔 대체 (fallback) 문화권을 포함할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 문화권 개체와 연결 된 대체 사용자 인터페이스 문화권을 표시 합니다.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문화권의 캐시된 읽기 전용 인스턴스를 검색합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">LCID(로캘 식별자)입니다.</param>
        <summary>지정된 문화권 식별자를 사용하여 문화권의 캐시된 읽기 전용 인스턴스를 검색합니다.</summary>
        <returns>읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 개체</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 문자열 오버 로드를 사용 하는 것이 좋습니다 (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), Lcid 대신 로캘 이름을 사용 해야 하기 때문에 있습니다. 사용자 지정 로캘에 대 한 로캘 이름은 필수입니다.  
  
 경우 `culture` 반환 된 현재 문화권의 로캘 식별자 <xref:System.Globalization.CultureInfo> 개체는 모든 사용자 재정의 반영 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" />가 0보다 작은 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" />가 지원되지 않는 문화권을 지정할 경우 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="culture" /> 유효한 문화권 식별자가 아닙니다. 부터는 [! 이 메서드에서 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="culture" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 메서드에서 throw 된 <see cref="T:System.Globalization.CultureNotFoundException" />합니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">문화권의 이름입니다. <c>이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <summary>지정된 문화권 이름을 사용하여 문화권의 캐시된 읽기 전용 인스턴스를 검색합니다.</summary>
        <returns>읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 개체</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 목록이 미리 정의 된 문화권 이름에 대 한 참조는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 메서드 검색 캐시 된 읽기 전용 <xref:System.Globalization.CultureInfo> 개체입니다. 해당 호출 보다 더 나은 성능을 제공는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자입니다.  
  
 경우 `name` 반환 된 현재 문화권의 이름인 <xref:System.Globalization.CultureInfo> 개체는 모든 사용자 재정의 반영 하지 않습니다. 이렇게 하면 메서드가 서버 응용 프로그램 또는 시스템에 대 한 실제 사용자 계정이 없는 및 여러 문화권을 효율적으로 로드 해야 하는 도구에 적합 합니다.  
  
 경우 `name` 은 <xref:System.String.Empty?displayProperty=nameWithType>, 고정 문화권을 반환 합니다. 이 해당 값을 검색 하는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />가 null인 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" />가 지원되지 않는 문화권을 지정할 경우 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 유효한 문화권 이름이 아닙니다. 부터는 [! 이 메서드에서 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="name" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 를 쓰고 <paramref name="name" /> 보충 또는 대체 문화권 메서드가 throw의 이름이 올바르지는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">문화권의 이름입니다. <c>이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <param name="altName">
          <c>이름</c>을 초기화하는 데 사용된 <see cref="T:System.Globalization.TextInfo" /> 및 <see cref="T:System.Globalization.CompareInfo" /> 개체를 제공하는 문화권 이름입니다. <c>altName</c>은 대/소문자를 구분하지 않습니다.</param>
        <summary>문화권의 캐시된 읽기 전용 인스턴스를 검색합니다. 매개 변수는 다른 문화권이 지정하는 <see cref="T:System.Globalization.TextInfo" /> 및 <see cref="T:System.Globalization.CompareInfo" /> 개체를 사용하여 초기화되는 문화권을 지정합니다.</summary>
        <returns>읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 개체</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 목록이 미리 정의 된 문화권 이름에 대 한 참조는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 메서드를 가져옵니다는 캐시 된 읽기 전용 <xref:System.Globalization.CultureInfo> 개체입니다. 해당 호출 보다 더 나은 성능을 제공는 <xref:System.Globalization.CultureInfo.%23ctor%2A> 생성자입니다. 고 메서드를 사용 하는 문화권에 지정 된 유사한 만듭니다는 `name` 이지만 여러 가지 정렬 및 대/소문자 구분 규칙 매개 변수입니다.  
  
 경우 `name` 또는 `altName` 이름인 반환 된 개체는 현재 문화권의 모든 사용자 재정의 반영 하지 않습니다. 경우 `name` 은 <xref:System.String.Empty?displayProperty=nameWithType>, 고정 문화권을 반환 합니다. 이 해당 값을 검색 하는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다. 경우 `altName` 은 <xref:System.String.Empty?displayProperty=nameWithType>, 메서드에서 사용 된 쓰기 시스템 및 비교 고정 문화권에 지정 된 규칙입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 또는 <paramref name="altName" />이 null입니다.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> 또는 <paramref name="altName" />이 지원되지 않는 문화권을 지정할 경우 자세한 내용은 호출자 참고 사항을 참조하세요.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 또는 <paramref name="altName" /> 유효한 문화권 이름이 아닙니다. 부터는 [! 이 메서드에서 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="name" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 를 쓰고 <paramref name="name" /> 보충 또는 대체 문화권 메서드가 throw의 이름이 올바르지는 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다. 실행 되는 앱 부터는 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 하거나 나중에 Windows 7 이상에서 메서드를 검색 한 <see cref="T:System.Globalization.CultureInfo" /> 식별자가 <paramref name="name" /> 에서 운영 체제; 운영 체제 해당 문화권을 지원 하지 않는 경우 를 쓰고 <paramref name="name" /> 보충 또는 대체 문화권 메서드가 throw의 이름이 올바르지는 <see cref="T:System.Globalization.CultureNotFoundException" /> 예외입니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">RFC 4646 표준에 따라 지정된 언어 이름입니다.</param>
        <summary>더 이상 사용되지 않습니다. 지정된 RFC 4646 언어 태그에 의해 언어적 특성이 식별되는 읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 개체를 검색합니다.</summary>
        <returns>읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 개체</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 및 <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> 속성은 사용 되지 않습니다. 이러한 요소를 사용 하는 대신 응용 프로그램이 새 사용할지 <xref:System.Globalization.CultureInfo> 개체에 대 한 호출과 <xref:System.Globalization.CultureInfo.Name%2A> 속성입니다. IETF 태그 및 이름이 동일합니다.  
  
 RFC 4646 표준으로는 IETF Internet Engineering Task Force ()를 유지 관리 되는 언어를 식별 하는 데는 균일 한 수단을 제공 하는 IETF 언어 태그를 정의 합니다. IETF 언어 태그의 형식을 반환 하는 문화권 이름은 같습니다는 <xref:System.Globalization.CultureInfo.Name%2A> 속성을 하지만 문화권을 고유 하 게 식별 하지 않습니다. 서로 다른 문화권 동일한 언어적 특성을 갖는 같은 IETF 언어 태그를 공유 합니다. 문화권의 언어적 특성에 포함 되어는 <xref:System.Globalization.TextInfo> 연관 된 개체는 <xref:System.Globalization.CultureInfo> 개체입니다.  
  
 IETF 언어 태그 필수 언어 식별자, 선택적 스크립트 식별자 및 옵션 영역 식별자로 이루어져 있습니다.  
  
 응용 프로그램 관리 맞춤법 및 문법을 검사와 같은 언어 관련 작업을 제어 하는 검색 된 문화권을 사용 해야 합니다. 응용 프로그램 텍스트 정렬 또는 시간과 날짜 서식 지정 등의 문화권 관련 작업을 제어 하는 검색 된 문화권을 사용 하지 마십시오.  
  
 자세한 내용은 RFC 4646, "태그에 대 한 식별 언어" 및 가장 최근의 초안 표준, 초안-십자-langtags-05.txt에서 참조 하십시오. [ http://go.microsoft.com/fwlink/?LinkId=100231 ](http://go.microsoft.com/fwlink/?LinkId=100231)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />가 null인 경우</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" />이 지원되는 문화권에 해당하지 않는 경우</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이전 버전에서 throw 한 <see cref="T:System.ArgumentException" /> 경우 <paramref name="name" /> 지원 되는 문화권의 이름에 해당 하지 않습니다. 부터는 [! 이 메서드에서 throw INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 <see cref="T:System.Globalization.CultureNotFoundException" />합니다.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">검색할 문화권을 필터링하는 열거형 값의 비트 조합입니다.</param>
        <summary>지정된 <see cref="T:System.Globalization.CultureTypes" /> 매개 변수에 의해 필터링된 지원 문화권 목록을 가져옵니다.</summary>
        <returns>
          <paramref name="types" /> 매개 변수로 지정된 문화권이 포함된 배열입니다. 문화권의 배열은 정렬되어 있지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A> 메서드를 호출한 가장 일반적으로 `types` 매개 변수는 다음과 같은 값으로 설정 합니다.  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>를 반환 하는 모든 특정 문화권입니다.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>모든 중립 문화권 및 고정 문화권을 반환 하는 합니다.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>모든 중립 및 특정 문화권, Windows 시스템에 설치 된 문화권 및 사용자가 만든 사용자 지정 문화권을 반환 하는 합니다.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>등록 등의 모든 사용자 지정 문화권을 반환 하는 <xref:System.Globalization.CultureAndRegionInfoBuilder> 클래스입니다. Windows 10 이전의 Windows 버전에서의 <xref:System.Globalization.CultureTypes.UserCustomCulture> 값 모든 사용자 정의 사용자 지정 문화권에 적용 됩니다. Windows 10 부터는에 적용 하는 완전 한 문화적 데이터 없고 고유한 로컬 식별자가 없는 시스템 문화권에 표시 된 대로 <xref:System.Globalization.CultureInfo.LCID%2A> 속성 값입니다. 결과적으로, 다음과 같은 코드에는 이전 버전의 Windows 및 Windows 10에서 실행 될 때 다른 결과가 반환 됩니다.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  0x0004 및 0x7C04 culture 식별자와 ZH-CHS 및 ZH-CHT culture를 각각 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="types" />가 잘못된 <see cref="T:System.Globalization.CultureTypes" /> 값 조합을 지정하는 경우</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">형식 지정 개체를 가져오는 <see cref="T:System.Type" />입니다. 이 메서드는 <see cref="T:System.Globalization.NumberFormatInfo" /> 및 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 형식만 지원합니다.</param>
        <summary>지정된 형식의 서식을 지정하는 방법을 정의하는 개체를 가져옵니다.</summary>
        <returns>
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 속성의 값입니다. 이것은 <paramref name="formatType" />이 <see cref="T:System.Globalization.NumberFormatInfo" /> 클래스의 <see cref="T:System.Type" /> 개체인 경우 현재 <see cref="T:System.Globalization.CultureInfo" />에 대한 기본 숫자 형식 정보를 포함하는 <see cref="T:System.Globalization.NumberFormatInfo" />입니다.  -또는-  <paramref name="formatType" />이 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 클래스에 대한 <see cref="T:System.Type" /> 개체인 경우 현재 <see cref="T:System.Globalization.CultureInfo" />에 대한 기본 날짜 및 시간 형식 정보를 포함하는 <see cref="T:System.Globalization.DateTimeFormatInfo" />인 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 속성 값입니다.  -또는- <paramref name="formatType" />이 다른 개체이면 null입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A>는 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>를 구현합니다.  
  
 `NumberFormatInfo` 기본 데이터 형식이 서식 메서드와 함께 사용 되는 culture 별 숫자 형식을 제공 합니다. `DateTimeFormatInfo` 날짜 및 시간 값은 특정 문화권에 대 한 형식을 지정 하는 방법을 제어 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>해시 알고리즘과 해시 테이블 같은 데이터 구조에 적합한 현재 <see cref="T:System.Globalization.CultureInfo" />에 대한 해시 함수의 역할을 합니다.</summary>
        <returns>현재 <see cref="T:System.Globalization.CultureInfo" />의 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>를 재정의합니다.  
  
 이 메서드는 <xref:System.Globalization.CultureInfo.Equals%2A> 메서드에 따라 동일한 두 개체에 대해 같은 해시 코드를 생성합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>더 이상 사용되지 않습니다. RFC 4646 표준 식별 언어를 가져옵니다.</summary>
        <value>RFC 4646 표준 식별 언어의 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 속성 및 <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> 메서드는 사용 되지 않습니다. 를 대신 사용 해야는 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 속성입니다. IETF 태그 및 이름이 동일합니다.  
  
 RFC 4646 표준으로는 IETF Internet Engineering Task Force ()를 유지 관리 되는 언어를 식별 하는 데는 균일 한 수단을 제공 하는 IETF 언어 태그를 정의 합니다. IETF 언어 태그의 형식을 반환 하는 문화권 이름은 비슷합니다는 <xref:System.Globalization.CultureInfo.Name%2A> 속성을 하지만 문화권을 고유 하 게 식별 하지 않습니다. 즉, 서로 다른 문화권 동일한 언어적 특성을 갖는 경우 같은 IETF 언어 태그를 공유 합니다. 문화권의 언어적 특성에 포함 되어는 <xref:System.Globalization.TextInfo> 연관 된 개체는 <xref:System.Globalization.CultureInfo> 개체입니다.  
  
 IETF 언어 태그 필수 언어 식별자, 선택적 스크립트 식별자 및 옵션 영역 식별자로 이루어져 있습니다.  
  
 자세한 내용은 참조 [RFC 5646 "식별 언어에 대 한 태그](http://go.microsoft.com/fwlink/?LinkId=230876)합니다. 목록이 하위 태그에 대 한 참조 [IANA 언어 하위 태그 레지스트리](http://go.microsoft.com/fwlink/?LinkId=230877)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>운영 체제에 설치된 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" />를 가져옵니다.</summary>
        <value>운영 체제에 설치된 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 Windows에서는 일본어 버전과 같은 지역화 된 운영 체제에서 운영 체제의 culture를 반환합니다. 이 속성은 해당 하는 `GetSystemDefaultUILanguage` Windows api에서입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권 독립(고정)적인 <see cref="T:System.Globalization.CultureInfo" /> 개체를 가져옵니다.</summary>
        <value>문화권 독립(고정)적인 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고정 문화권은 문화권을 구분 하지 않는; 연결 된 모든 국가/지역의 있지만 영어와 합니다. 빈 문자열을 사용 하 여 고정 문화권 이름으로 지정한 ("")에 대 한 호출에는 <xref:System.Globalization.CultureInfo> 인스턴스화 메서드. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 또한 고정 문화권의 인스턴스를 검색 합니다. 거의 모든 방법에서 사용할 수는 <xref:System.Globalization> 문화권을 필요로 하는 네임 스페이스입니다. 와 같은 속성에 의해 반환 되는 개체 <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 또한 문자열 비교를 반영 하 고 고정 문화권의 규칙 형식 지정 합니다.  
  
 사용자 지정 하거나.NET Framework 또는 운영 체제에 대 한 업데이트 하 여 변경 될 수 있는 문화권 구분 데이터와는 달리 고정 문화권 데이터는 시간이 지남에 따라 및 설치 된 문화권에 걸쳐 안정적이 고 사용자가 사용자 지정할 수 없습니다. 따라서에서 특히 유용 문화권에 관계 없이 결과 필요로 하는 작업에 대 한 서식 지정 및 구문 분석 작업에 유지 되는 데이터를 정렬 및 순서 지정에 데이터를 표시 해야 하는 작업의 형식이 같은 한 문화권에 관계 없이 고정된 순서입니다.  
  
## <a name="string-operations"></a>문자열 작업  
 현재 스레드 문화권의 규칙에 의해 영향을 받지 않습니다 고 되는 일관 된 문화권에 걸쳐 문화권 구분 문자열 작업에 대 한 고정 문화권을 사용할 수 있습니다. 예를 들어 정렬 된 데이터를 고정 된 순서로 표시 하거나 현재 스레드 문화권에 관계 없이 문자열에는 표준 대/소문자 규칙 집합이 적용 좋습니다. 이 작업을 수행 하려면 전달는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 개체 변수가 있는 메서드를는 <xref:System.Globalization.CultureInfo> 매개 변수를 같은 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> 및 <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>합니다.  
  
## <a name="persisting-data"></a>데이터 유지  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 문화권 독립 형식으로 데이터를에서 유지 하도록 속성을 사용할 수 있습니다. 이 변경 되지 않습니다 및 데이터 serialize 및 deserialize 문화권에 걸쳐를 사용할 수 있는 알려진된 형식을 제공 합니다. 데이터를 역직렬화 후 현재 사용자의 문화권 규칙에 따라 적절 하 게 나타낼 수 있습니다.  
  
 예를 들어 문자열 형식으로 날짜 및 시간 데이터를 유지 하기로 선택한 경우 전달할 수 있습니다는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 개체를 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 또는 <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 는 문자열과 있습니다를 만드는 메서드를 전달할 수는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 개체는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 또는 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 문자열을 날짜 및 시간 값으로 다시 변환 하는 방법입니다. 이 기술은 되도록 기본 날짜 및 시간 값에는 데이터를 읽거나 다른 문화권의 사용자가 작성 하는 경우 변경 되지 않습니다.  
  
 다음 예제에서는 고정 culture를 사용 하 여 유지 하는 <xref:System.DateTime> 문자열 값입니다. 그런 다음 문자열을 구문 분석 하 고 프랑스어 (프랑스) 및 독일어 (독일) 문화권의 서식 지정 규칙을 사용 하 여 해당 값을 표시 합니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>보안 결정  
 (예: 시스템 리소스에 대 한 액세스를 허용할 것인지 여부) 보안 결정 하는 경우 문자열 비교 또는 대/소문자 변경의 결과에 따라, 사용 하지 않아야 고정 문화권입니다. 대신 포함 된 메서드를 호출 하 여 대/소문자 구분 또는 대/소문자 비구분 서 수 비교를 수행 해야는 <xref:System.StringComparison> 매개 변수 중 하나를 제공 하 고 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 또는 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 인수로 서입니다. 문화권 구분 문자열 작업을 수행 하는 코드는 현재 문화권 변경 하거나 코드를 실행 하는 컴퓨터의 문화권 코드를 테스트 하는 데 사용 되는 culture와 다른 경우 보안 취약점이 발생할 수 있습니다. 반면,는 서 수 비교는 전적으로 비교 문자의 이진 값에 따라 다릅니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" />가 중립 문화권을 표시하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" />가 중립 문화권을 표시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중립 문화권은 연결 된 문화권 언어 있고 국가 / 지역을 사용 하지 않습니다. 특정 문화권은 언어와 국가 또는 지역 둘 다와 연결 된 문화권에서 점이 다릅니다. 예를 들어 fr FR-FR 프랑스에 프랑스 문화권에 대 한 이름인 동안 프랑스어 중립 문화권에 대 한 이름입니다.  
  
 이 속성이 반환 하는 경우 `false`, 문화권이 특정 문화권 이나 고정 문화권 중 하나입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중국어 언어를 사용 하는 culture는 중립 문화권을 결정 합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>현재 <see langword="true" />가 읽기 전용이면 <see cref="T:System.Globalization.CultureInfo" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Globalization.CultureInfo> 는 읽기 전용의 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 인스턴스가 읽기 전용이 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Globalization.CultureInfo.IsReadOnly%2A> 보호는 <xref:System.Globalization.DateTimeFormatInfo> 및 <xref:System.Globalization.NumberFormatInfo> 와 연결 된 인스턴스는 <xref:System.Globalization.CultureInfo>합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>활성 입력 로캘 식별자를 가져옵니다.</summary>
        <value>입력 로캘 식별자를 지정하는 부호 있는 32비트 숫자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력된 로캘 식별자에는 자판 배열은 전에 라고 했습니다. 입력된 로캘 식별자 자판 배열 보다 넓은 개념 없으므로 음성-텍스트 변환기는 (입력기) 또는 다른 형태의 입력을 나타낼 수도 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" />에 대한 문화권 식별자를 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" />에 대한 문화권 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 문화권 식별자 해당 NLS 로캘 식별자에 매핑됩니다.  
  
 버전의 Windows 로캘 id, Windows 10 이전 `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, 또는 4096) 사용자가 만든 사용자 지정 문화권에 할당 됩니다. Windows 10 부터는 고유 로캘 식별자가 없습니다 및 전체 시스템에서 제공한 데이터가 없는 모든 문화권에 할당 됩니다. 결과적으로 문화권을 반복 하 고 사용 하는 것을 검색 하는 코드는 <xref:System.Globalization.CultureInfo.LCID%2A> 값 `LOCALE_CUSTOM_UNSPECIFIED` 더 큰 하위 집합을 반환 <xref:System.Globalization.CultureInfo> Windows 10에서 실행 되 면 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Globalization.CultureInfo> 국제 정렬 순서와 스페인어 (스페인)에 대 한 <xref:System.Globalization.CultureInfo> 전통 정렬 순서입니다.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권 이름을 *languagecode2*-*country/regioncode2* 형식으로 가져옵니다.</summary>
        <value>형식의 문화권 이름 * languagecode2 *-* country / regioncode2 * 합니다. * languagecode2 * ISO 639-1에서에서 파생 된 두 문자의 소문자 코드입니다. * country / regioncode2 *가 ISO 3166에서 파생 되며 일반적으로 두 개의 대문자 또는 bcp-47 언어 태그로 구성 되어 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 미리 정의 된 문화권 이름 및 식별자 목록은 하는 <xref:System.Globalization.CultureInfo.Name%2A> 참조 속성은 반환할 수는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에서. 또한 Windows 10부터 `name` 모든 유효한 bcp-47 언어 태그로 될 수 있습니다. 문화권 이름은 변경 될 수 있으며는 것도 반영할 수 있는 사용자 지정 문화권의 이름은 참고 합니다.  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 속성에 제공 된 명명 표준을 따릅니다는 <xref:System.Globalization.CultureInfo> 클래스 항목입니다. 대체 정렬 순서 표시가 제외 하는 문화권 이름의 약식 형태를 반환 합니다. 예를 들어, 인스턴스화하는 경우는 <xref:System.Globalization.CultureInfo> 대체 정렬 순서를 반영 하도록 "de-de_phoneb" 문자열을 사용 하 여 개체의 <xref:System.Globalization.CultureInfo.Name%2A> 속성은 "DE-DE"를 반환 합니다.  
  
 문화권의 전체 이름을 가져오려면 사용할지는 <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, 또는 <xref:System.Globalization.CultureInfo.NativeName%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권에서 표시하도록 설정된 문화권 이름(언어, 국가/지역 및 선택적 스크립트로 구성됨)을 가져옵니다.</summary>
        <value>문화권 이름입니다. 언어의 전체 이름, 국가/지역의 전체 이름 및 선택적 스크립트로 구성됩니다. 이 형식에 대해서는 <see cref="T:System.Globalization.CultureInfo" /> 클래스에 대한 설명에서 다룹니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 값은.NET Framework의 언어 버전에 관계 없이 동일 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>숫자, 통화 및 백분율 표시를 위한 문화권 형식을 정의하는 <see cref="T:System.Globalization.NumberFormatInfo" />를 가져오거나 설정합니다.</summary>
        <value>숫자, 통화 및 백분율 표시를 위한 문화권 형식을 정의하는 <see cref="T:System.Globalization.NumberFormatInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 값은 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 사용자 속성에 액세스 될 때까지 계산 되지 않습니다. 사용자 응용 프로그램 실행 중 이며 다음 액세스 하는 동안 새로운 문화권으로 현재 문화권을 변경 하려면 제어판을 사용 하는 경우는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 또는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성, 응용 프로그램이 새 문화권에 대 한 기본값을 검색 합니다. 원래 문화권에 대 한 재정의 하지 않습니다. 원래 현재 문화권에 대 한 재정의 유지 하려면 응용 프로그램이 액세스 해야는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 및 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 현재 문화권을 변경 하기 전에 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 CultureInfo.Clone도 복제는 <xref:System.Globalization.DateTimeFormatInfo> 및 <xref:System.Globalization.NumberFormatInfo> 와 연결 된 인스턴스는 <xref:System.Globalization.CultureInfo>합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">속성이 null로 설정되어 있습니다.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 속성 또는 <see cref="T:System.Globalization.NumberFormatInfo" /> 속성 중 하나가 설정되고 <see cref="T:System.Globalization.CultureInfo" />는 읽기 전용입니다.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권에서 사용할 수 있는 달력 목록을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" />로 표시되는 문화권에서 사용할 수 있는 달력을 나타내는 <see cref="T:System.Globalization.Calendar" /> 형식의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 사용 되는 달력을 변경 하는 응용 프로그램 <xref:System.Globalization.CultureInfo> 설정 하 여는 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 속성 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>의 인스턴스인는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다. 새 일정에 나열 된 일정 중 하나 여야 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>합니다. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 날짜 및 시간 서식와 연결 된 사용자 지정 하는 다른 속성도 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 확인 하는 방법을 보여 줍니다.는 <xref:System.Globalization.GregorianCalendar> 문화권에서 지원 되는 버전입니다.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" />의 부모 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" />를 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" />의 부모 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문화권 계층일 중립 문화권의 부모는 특정 문화권의 부모 인 중립 문화권에는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>의 부모가 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 자체 고정 문화권입니다. 부모 문화권만 자식 간에 공통적으로 적용 되는 정보 집합을 포함 합니다.  
  
 특정 문화권에 대 한 리소스를 시스템에서 사용할 수 없는 경우 중립 문화권에 대 한 리소스 사용 됩니다. 중립 문화권에 대 한 리소스를 사용할 수 없는 경우에 주 어셈블리에 포함 된 리소스 사용 됩니다. 리소스 대체 프로세스에 대 한 자세한 내용은 참조 하십시오. [리소스 패키징 및 배포](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중국어 언어를 사용 하 여 각 특정 문화권의 부모 문화권을 확인 합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">래핑할 <see cref="T:System.Globalization.CultureInfo" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Globalization.CultureInfo" /> 개체의 읽기 전용 래퍼를 반환합니다.</summary>
        <returns>
          <paramref name="ci" /> 주변의 읽기 전용 <see cref="T:System.Globalization.CultureInfo" /> 래퍼입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 래퍼를 `ci`, 또는에서 반환 된 개체는 `ci`합니다.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 및 `ci`합니다.<xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성을 설정하지 마십시오.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.CultureInfo.ReadOnly%2A> 메서드를 보호할 수는 <xref:System.Globalization.DateTimeFormatInfo> 및 <xref:System.Globalization.NumberFormatInfo> 와 연결 된 인스턴스는 <xref:System.Globalization.CultureInfo>합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" />가 null인 경우</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문화권과 관련된 쓰기 시스템을 정의하는 <see cref="T:System.Globalization.TextInfo" />를 가져옵니다.</summary>
        <value>문화권과 관련된 쓰기 시스템을 정의하는 <see cref="T:System.Globalization.TextInfo" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A> 속성 문자열에 대 한 문화권별 대/소문자 구분 정보를 제공 합니다. 문화권을 구분 하지 않는 대/소문자를 수행 하려면 응용 프로그램을 사용할지는 <xref:System.Globalization.CultureInfo.TextInfo%2A> 속성 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Globalization.CultureInfo> 국제 정렬 순서와 스페인어 (스페인)에 대 한 <xref:System.Globalization.CultureInfo> 전통 정렬 순서입니다.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" /> 언어를 나타내는 세 문자로 된 ISO 639-2 코드를 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" /> 언어를 나타내는 세 문자로 된 ISO 639-2 코드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예를 들어, 영어에 대 한 3 자 약어 "eng"입니다.  
  
> [!NOTE]
>  때 간의 통신을 처리는 일반적으로 데이터를 유지 하려면 이상의 전체를 사용 하 여 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>합니다. 언어를 사용 하 여 컨텍스트 및 데이터 손실 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows API에 정의된 해당 언어를 나타내는 세 문자로 된 코드를 가져옵니다.</summary>
        <value>Windows API에 정의된 해당 언어를 나타내는 세 문자로 된 코드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 Windows API 방법으로 동일한 값을 반환 `GetLocaleInfo` LOCALE_SABBREVLANGNAME 값을 사용 합니다. 예를 들어 영어 (미국) Windows API에 정의 된 세 문자로 된 코드는 "enu"입니다.  
  
> [!NOTE]
>  때 간의 통신을 처리는 일반적으로 데이터를 유지 하려면 이상의 전체를 사용 하 여 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>합니다. 언어를 사용 하 여 컨텍스트 및 데이터 손실 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 중립 문화권의 여러 속성을 표시합니다.  
  
> [!NOTE]
>  이 예제에서는 각각 이전 ZH-CHS 및 0x0004 및 0x7C04 문화권 식별자 ZH-CHT 문화권 이름을 표시합니다. 그러나 Windows Vista 응용 프로그램 ZH-CHS 및 ZH-CHT 대신 Zh-hant 이름 대신 Zh-hans 이름을 사용 해야 합니다. Zh-hans 및 Zh-hant 이름을 현재 표준 나타내고 이전 이름을 사용 하는 것에 대 한 이유가 없다면 사용 해야 합니다.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>*languagecode2*-*country/regioncode2* 형식으로 현재 <see cref="T:System.Globalization.CultureInfo" />의 이름을 포함하는 문자열을 반환합니다.</summary>
        <returns>현재 <see cref="T:System.Globalization.CultureInfo" />의 이름이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Object.ToString%2A?displayProperty=nameWithType>를 재정의합니다. 정규화 된 버전에 전달 되는 문화권 이름으로 반환 된 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 또는 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 생성자 또는 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 또는 <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> 메서드. 문자를 변환 하 여 결과 문자열을 정규화 *languagecode2* 에서 대 / 소문자 변환 하는 동안 자로 *country/regioncode2* 필요할 경우 대문자로 합니다.  
  
 에 미리 정의 된 문화권 이름이 나열 됩니다는 [국가별 언어 지원 (NLS) API 참조](http://go.microsoft.com/fwlink/?LinkId=200048) Go Global 개발자 센터에는 페이지입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" /> 언어를 나타내는 두 문자로 된 ISO 639-1 코드를 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" /> 언어를 나타내는 두 문자로 된 ISO 639-1 코드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예를 들어 영어에 대 한 2 자 약어로 "en"입니다. <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 고정 문화권에 대 한 속성 값이 "4"입니다.  
  
> [!NOTE]
>  때 간의 통신을 처리는 일반적으로 데이터를 유지 하려면 이상의 전체를 사용 하 여 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>합니다. 언어를 사용 하 여 컨텍스트 및 데이터 손실 될 수 있습니다.  
  
 ISO 639-1은 특정 문화권에 대해 두 문자 언어 코드를 정의 하지 않는 경우는 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 속성 3 개 이상의 문자와 구성 되는 문자열을 반환 합니다. 자세한 내용은 예제를 참조 합니다.  
  
   
  
## Examples  
 다음 예제에서는 문화권을 나열 된 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 속성 두 문자 언어 코드의로 구성 되어 있지 않습니다.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.CultureInfo" /> 개체에서 사용자가 선택한 문화권 설정을 사용하는지를 나타내는 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.CultureInfo" />에서 사용자가 선택한 문화권 설정을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자의 Windows 제어판의 국가 및 언어 옵션을 통해 현재 문화권과 관련 된 값의 일부를 재정의할 수도 있습니다. 예를 들어 사용자는 다른 형식으로 날짜를 표시 하 또는 문화권에 대 한 기본값 이외의 다른 통화를 사용 하도록 선택할 수도 있습니다.  
  
 경우 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 은 `true` 지정된 된 문화권의 Windows에서는 현재 culture와 일치 하 고는 <xref:System.Globalization.CultureInfo> 의 속성에 대 한 사용자 설정을 포함 하는 재정의 사용는 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 및의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 인스턴스는 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성입니다. 사용자 설정에 연결 된 culture와 호환 되지 않습니다는 <xref:System.Globalization.CultureInfo>, 예를 들어 선택한 일정의 하나가 아닌 경우는 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>는 속성의 값과 해당 메서드의 결과 정의 되지 않습니다.  
  
 이 속성을 설정 하는 경우는 <xref:System.Globalization.CultureInfo> 만들어집니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>