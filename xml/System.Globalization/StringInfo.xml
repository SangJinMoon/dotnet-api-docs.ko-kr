<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StringInfo.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58b5036f65cb27e101515e7c29074c5f48fc631dd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b5036f65cb27e101515e7c29074c5f48fc631dd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Globalization.StringInfo">
          <source>Provides functionality to split a string into text elements and to iterate through those text elements.</source>
          <target state="translated">문자열을 텍스트 요소로 분할하고 해당 텍스트 요소를 통해 반복하는 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated">유니코드 표준은 정의 결합 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> class enables you to work with a string as a series of textual elements rather than individual <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 클래스를 사용 하는 일련의 개별이 아닌 텍스트 요소의 문자열로 사용할 수 있습니다 <ph id="ph2">&lt;xref:System.Char&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> object that represents a specified string, you can do either of the following:</source>
          <target state="translated">인스턴스화하는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 지정된 된 문자열을 나타내는 개체 다음 중 하나를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Call the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> constructor and pass it the string that the <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> object is to represent as an argument.</source>
          <target state="translated">호출는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> 생성자 문자열을 전달 하는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> 개체는 인수로 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Call the default <ph id="ph1">&lt;xref:System.Globalization.StringInfo.%23ctor&gt;</ph> constructor, and assign the string that the <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> object is to represent to the <ph id="ph3">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> property.</source>
          <target state="translated">기본 호출 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.%23ctor&gt;</ph> 생성자, 문자열을 할당 하 고는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> 를 나타내기 위해 개체는는 <ph id="ph3">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>You can work with the individual text elements in a string in two ways:</source>
          <target state="translated">두 가지 방법으로 문자열의 개별 텍스트 요소를 작업할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>By enumerating each text element.</source>
          <target state="translated">각 텍스트 요소를 열거 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>To do this, you call the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> method, and then repeatedly call the <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">이 작업을 수행 하려면는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 메서드를 반복적으로 호출 하 고는 <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 메서드 반환 된 <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> 메서드가 반환 될 때까지 개체 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>By calling the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> method to retrieve an array that contains the starting index of each text element.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> 메서드를 시작 하는 각 텍스트 요소의 인덱스를 포함 하는 배열을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>You can then retrieve individual text elements by passing these indexes to the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> method.</source>
          <target state="translated">이러한 인덱스에 전달 하 여 개별 텍스트 요소를 검색 한 다음는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The following example illustrates both ways of working with the text elements in a string.</source>
          <target state="translated">다음 예제에서는 두 가지 방식을 문자열의 텍스트 요소를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>It creates two strings:</source>
          <target state="translated">두 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source><ph id="ph1">`strCombining`</ph>, which is a string of Arabic characters that includes three text elements with multiple <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">`strCombining`</ph>를 여러 개 포함 된 세 개의 텍스트 요소를 포함 하는 문자열 아랍어 문자 변수인 <ph id="ph2">&lt;xref:System.Char&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The first text element is the base character ARABIC LETTER ALEF (U+-627) followed by ARABIC HAMZA BELOW (U+-655) and ARABIC KASRA (U+0650).</source>
          <target state="translated">첫 번째 텍스트 요소가 아랍어 문자 인수 기본 문자 (U +-627) 아랍어 HAMZA 아래 뒤 (U +-655) 및 아랍어 KASRA (U + 0650).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The second text element is ARABIC LETTER HEH (U+0647) followed by ARABIC FATHA (U+-64E).</source>
          <target state="translated">두 번째 텍스트 요소가 아랍어 문자 그 (U + 0647) 아랍어 FATHA 옵니다 (U +-64E).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The third text element is ARABIC LETTTER BEH (U+0628) followed by ARABIC DAMMATAN (U+064C).</source>
          <target state="translated">세 번째 텍스트 요소가 아랍어 LETTTER BEH (U + 0628) 아랍어 DAMMATAN (U + 064 C) 나옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source><ph id="ph1">`strSurrogates`</ph>, which is a string that includes three surrogate pairs: GREEK ACROPHONIC FIVE TALENTS (U+10148) from the Supplementary Multilingual Plane, U+20026 from the Supplementary Ideographic Plane, and U+F1001 from the private user area.</source>
          <target state="translated"><ph id="ph1">`strSurrogates`</ph>를 3 개의 서로게이트 쌍을 포함 하는 문자열 변수인: 그리스어 ACROPHONIC 5 재능 (U + 10148)에서 보충 Multilingual Plane 개인 사용자 영역에서 U + F1001 고 보충 표의 평면에서 U + 20026 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>The UTF-16 encoding of each character is a surrogate pair that consists of a high surrogate followed by a low surrogate.</source>
          <target state="translated">각 문자의 utf-16 인코딩을 한 뒤에 하위 서로게이트가 high surrogate로 구성 된 서로게이트 쌍입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Each string is parsed once by the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> method and then by the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">각 문자열에서 한 번 구문 분석 되는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> 메서드 및 다음 기준는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Both methods correctly parse the text elements in the two strings and display the results of the parsing operation.</source>
          <target state="translated">두 메서드는 제대로 두 문자열의 텍스트 요소를 구문 분석 하 고 구문 분석 작업의 결과 표시 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>This example shows how to use the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Globalization.StringInfo&gt;</ph> class to manipulate a string that contains surrogate and combining characters.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> 의 메서드는 <ph id="ph3">&lt;xref:System.Globalization.StringInfo&gt;</ph> 서로게이트 및 결합 문자를 포함 하는 문자열을 조작 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Internally, the methods of the <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> class call the methods of the <ph id="ph2">&lt;see cref="T:System.Globalization.CharUnicodeInfo" /&gt;</ph> class to determine character categories.</source>
          <target state="translated">메서드를 내부적으로 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 의 메서드를 호출 하는 클래스는 <ph id="ph2">&lt;see cref="T:System.Globalization.CharUnicodeInfo" /&gt;</ph> 문자 범주를 확인 하려면 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v462](~/includes/net-v462-md.md)]</ph>, character classification is based on <bpt id="p1">[</bpt>The Unicode Standard, Version 8.0.0<ept id="p1">](http://unicode.org/versions/Unicode8.0.0)</ept>.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v462](~/includes/net-v462-md.md)]</ph>, 문자 분류 기반 <bpt id="p1">[</bpt>유니코드 표준을, 버전 8.0.0<ept id="p1">](http://unicode.org/versions/Unicode8.0.0)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Globalization.StringInfo">
          <source>For the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> through the <ph id="ph2">[!INCLUDE[net_v461](~/includes/net-v461-md.md)]</ph>, it is based on <bpt id="p1">[</bpt>The Unicode Standard, Version 6.3.0<ept id="p1">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>.</source>
          <target state="translated">에 대 한는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 통해는 <ph id="ph2">[!INCLUDE[net_v461](~/includes/net-v461-md.md)]</ph>에 기반 하는 <bpt id="p1">[</bpt>유니코드 표준을, 버전 6.3.0<ept id="p1">](http://www.unicode.org/versions/Unicode6.3.0/)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="T:System.Globalization.StringInfo">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.#ctor">
          <source>The value of the new <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> object is initialized to the empty string ("").</source>
          <target state="translated">새 값 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 개체는 빈 문자열로 초기화 됩니다 ("").</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.#ctor">
          <source>You can assign another string to it by using the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> property.</source>
          <target state="translated">다른 문자열을 사용 하 여 할당할 수는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.#ctor">
          <source>You can also instantiate a <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> object that represents a specified string in a single step by calling the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> constructor.</source>
          <target state="translated">또한 인스턴스화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 호출 하 여 단일 단계에서 지정된 된 문자열을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.#ctor(System.String)">
          <source>A string to initialize this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체를 초기화할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> class to a specified string.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 클래스의 새 인스턴스를 지정된 문자열로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.#ctor(System.String)">
          <source>This constructor assigns the value argument to the object's <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> property.</source>
          <target state="translated">이 생성자를 개체의 값 인수에 할당 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.Equals(System.Object)">
          <source>An object.</source>
          <target state="translated">개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.Equals(System.Object)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체가 지정된 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is a <ph id="ph3">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object and its <ph id="ph4">&lt;see cref="P:System.Globalization.StringInfo.String" /&gt;</ph> property equals the <ph id="ph5">&lt;see cref="P:System.Globalization.StringInfo.String" /&gt;</ph> property of this <ph id="ph6">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object; otherwise, <ph id="ph7">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수가 <ph id="ph3">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체이고 해당 <ph id="ph4">&lt;see cref="P:System.Globalization.StringInfo.String" /&gt;</ph> 속성이 <ph id="ph5">&lt;see cref="P:System.Globalization.StringInfo.String" /&gt;</ph> 개체의 <ph id="ph6">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 속성과 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph7">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetHashCode">
          <source>Calculates a hash code for the value of the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값에 대한 해시 코드를 계산합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetHashCode">
          <source>A 32-bit signed integer hash code based on the string value of this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 문자열 값에 기반한 부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetHashCode">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> is dependent on its implementation, which might change from one version of the common language runtime to another.</source>
          <target state="translated">동작은 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> 공용 언어 런타임에의 한 버전에서 변경 될 수 있습니다 하는 구현에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetHashCode">
          <source>This might happen to improve the performance of <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph>.</source>
          <target state="translated">성능을 향상 시키기 위해이 발생할 수 있습니다 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetHashCode">
          <source>To make the behavior of <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> constant, the application should override the runtime implementation of <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> with an implementation known to never change.</source>
          <target state="translated">동작을 만들기 위해 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> 상수, 응용 프로그램 재정의 해야의 런타임 구현 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetHashCode%2A&gt;</ph> 구현을 알 수를 변경 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="T:System.Globalization.StringInfo">
          <source>Gets the first text element in a specified string.</source>
          <target state="translated">지정된 문자열에 있는 첫째 텍스트 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>The string from which to get the text element.</source>
          <target state="translated">텍스트 요소를 가져올 문자열입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>Gets the first text element in a specified string.</source>
          <target state="translated">지정된 문자열에 있는 첫째 텍스트 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>A string containing the first text element in the specified string.</source>
          <target state="translated">지정된 문자열에 있는 첫째 텍스트 요소를 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 조합 정의 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>This method only returns the first text element.</source>
          <target state="translated">이 메서드는만 첫 번째 텍스트 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source>To iterate through the text elements of the string, the application should use the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> object generated by the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">문자열의 텍스트 요소를 반복 하려면 응용 프로그램을 사용할지는 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> 에 의해 생성 된 개체는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>The string from which to get the text element.</source>
          <target state="translated">텍스트 요소를 가져올 문자열입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>The zero-based index at which the text element starts.</source>
          <target state="translated">텍스트 요소가 시작되는 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>Gets the text element at the specified index of the specified string.</source>
          <target state="translated">지정된 문자열의 지정된 인덱스에 있는 텍스트 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>A string containing the text element at the specified index of the specified string.</source>
          <target state="translated">지정된 문자열의 지정된 인덱스에 있는 텍스트 요소를 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated">유니코드 표준은 정의 결합 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>This method only returns the first text element of the substring that starts at the specified index.</source>
          <target state="translated">이 메서드는 지정된 된 인덱스에서 시작 하는 부분 문자열의 첫째 텍스트 요소에만 반환 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source>To iterate through the text elements of the string, the application should use the <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> generated by the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">문자열의 텍스트 요소를 반복 하려면 응용 프로그램을 사용할지는 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator&gt;</ph> 에 의해 생성 된는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for <ph id="ph2">&lt;paramref name="str" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="str" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="T:System.Globalization.StringInfo">
          <source>Returns an enumerator that iterates through the text elements of a string.</source>
          <target state="translated">문자열의 텍스트 요소를 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The string to iterate through.</source>
          <target state="translated">반복할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>Returns an enumerator that iterates through the text elements of the entire string.</source>
          <target state="translated">전체 문자열의 텍스트 요소를 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.TextElementEnumerator" /&gt;</ph> for the entire string.</source>
          <target state="translated">전체 문자열에 대한 <ph id="ph1">&lt;see cref="T:System.Globalization.TextElementEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated">유니코드 표준은 정의 결합 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The text element enumerator is used only to read data in the string; it cannot modify the underlying string.</source>
          <target state="translated">텍스트 요소 열거자 문자열;의 데이터를 읽는 데만 사용 됩니다. 로그 분석은 내부 문자열을 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The enumerator does not have exclusive access to the string.</source>
          <target state="translated">열거자는 문자열에 대 한 단독 액세스는 없습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string.</source>
          <target state="translated">열거자에 잘못 된 상태 이면 문자열 또는 문자열에서 마지막 텍스트 요소 이후에 첫 번째 텍스트 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>When the enumerator is in an invalid state, calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">열거자가 잘못 된 상태에서 호출 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>Initially, the enumerator is positioned before the first text element in the string.</source>
          <target state="translated">처음에 열거자는 문자열의 첫 번째 텍스트 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>Therefore, after an enumerator is created or after <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first text element of the string before reading the value of <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서는 열거자를 만들거나 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> 호출 됩니다 <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 호출 하 여 열거자를 문자열의 첫 번째 텍스트 요소 값을 읽기 전에 <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>After the end of the string is passed, the enumerator is again in an invalid state and calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자는 다시 상태 및 호출에 잘못 된 문자열의 끝이 전달 된 후 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>Calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> throws an exception if the last call to <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph3">`false`</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> 마지막으로 호출 하는 경우 예외를 throw <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>The following code example demonstrates calling the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 호출은 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The string to iterate through.</source>
          <target state="translated">반복할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The zero-based index at which to start iterating.</source>
          <target state="translated">반복을 시작할 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</source>
          <target state="translated">지정된 인덱스에서 시작하여 문자열의 텍스트 요소를 반복하는 열거자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Globalization.TextElementEnumerator" /&gt;</ph> for the string starting at <ph id="ph2">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="index" /&gt;</ph>에서 시작하는 문자열에 대한 <ph id="ph1">&lt;see cref="T:System.Globalization.TextElementEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The Unicode Standard defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated">유니코드 표준은 정의 결합 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The text element enumerator is used only to read data in the string; it cannot modify the underlying string.</source>
          <target state="translated">텍스트 요소 열거자 문자열;의 데이터를 읽는 데만 사용 됩니다. 로그 분석은 내부 문자열을 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The enumerator does not have exclusive access to the string.</source>
          <target state="translated">열거자는 문자열에 대 한 단독 액세스는 없습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>The enumerator is in an invalid state if it is positioned before the first text element in the string or after the last text element in the string.</source>
          <target state="translated">열거자에 잘못 된 상태 이면 문자열 또는 문자열에서 마지막 텍스트 요소 이후에 첫 번째 텍스트 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>When the enumerator is in an invalid state, calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">열거자가 잘못 된 상태에서 호출 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>Initially, the enumerator is positioned before the first text element in the string.</source>
          <target state="translated">처음에 열거자는 문자열의 첫 번째 텍스트 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>을 실행하면 열거자가 이 위치로 복원됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>Therefore, after an enumerator is created or after <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first text element of the string before reading the value of <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">따라서는 열거자를 만들거나 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> 호출 됩니다 <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 호출 하 여 열거자를 문자열의 첫 번째 텍스트 요소 값을 읽기 전에 <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.TextElementEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>After the end of the string is passed, the enumerator is again in an invalid state and calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">열거자는 다시 상태 및 호출에 잘못 된 문자열의 끝이 전달 된 후 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source>Calling <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> throws an exception if the last call to <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph3">`false`</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Globalization.TextElementEnumerator.Current%2A&gt;</ph> 마지막으로 호출 하는 경우 예외를 throw <ph id="ph2">&lt;xref:System.Globalization.TextElementEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for <ph id="ph2">&lt;paramref name="str" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="str" /&gt;</ph>의 유효한 인덱스 범위를 벗어납니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.Globalization.StringInfo.LengthInTextElements">
          <source>Gets the number of text elements in the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 텍스트 요소 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.LengthInTextElements">
          <source>The number of base characters, surrogate pairs, and combining character sequences in this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">기본 문자, 서로게이트 쌍, 이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 문자 시퀀스 결합 수입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The string to search.</source>
          <target state="translated">검색할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>Returns the indexes of each base character, high surrogate, or control character within the specified string.</source>
          <target state="translated">지정된 문자열 내에 있는 각 기본 문자, 상위 서로게이트 또는 제어 문자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.</source>
          <target state="translated">지정된 문자열 내에 있는 각 기본 문자, 상위 서로게이트 또는 제어 문자의 인덱스(0부터 시작)가 포함되어 있는 정수의 배열입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a surrogate pair as a coded character representation for a single abstract character that consists of a sequence of two code units, where the first unit of the pair is a high surrogate and the second is a low surrogate.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 두 코드 단위의 여기서 쌍의 첫 번째 단위 high surrogate 인지 하 고 두 번째는 낮은 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 서로게이트 쌍을 정의 합니다. 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>A high surrogate is a Unicode code point in the range U+D800 through U+DBFF and a low surrogate is a Unicode code point in the range U+DC00 through U+DFFF.</source>
          <target state="translated">상위 서로게이트 유니코드 코드 포인트 U + d 800부터 U + DBFF 까지의 범위에 이며 하위 서로게이트 유니코드 코드 포인트 U + d c 00부터 U + DFFF 까지의 범위에 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>A control character is a character for which the Unicode value is U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.</source>
          <target state="translated">제어 문자는 U + 0000에서 U + 001F 또는 U + 0080 ~ U + 009f 까지의 범위에 있는 문자를 유니코드 값이 U + 007F에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme.</source>
          <target state="translated">.NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>A text element can be a base character, a surrogate pair, or a combining character sequence.</source>
          <target state="translated">텍스트 요소, 사용할 수 있습니다는 기본 문자 서로게이트 쌍 조합 문자 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a combining character sequence as a combination of a base character and one or more combining characters.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 조합 정의 문자 시퀀스는 기본 문자가 고 하나 이상의 결합 문자를 조합 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>A surrogate pair can represent a base character or a combining character.</source>
          <target state="translated">서로게이트 쌍 조합 문자 또는 기본 문자를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>If a combining character sequence is invalid, every combining character in that sequence is also returned.</source>
          <target state="translated">조합 문자 시퀀스에 유효 하지 않으면 해당 시퀀스의 모든 조합 문자도 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>Each index in the resulting array is the beginning of a text element, that is, the index of the base character or the high surrogate.</source>
          <target state="translated">결과 배열의 각 인덱스는 기본 문자 또는 상위 서로게이트의 인덱스, 즉 텍스트 요소의 시작.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The length of each element is easily computed as the difference between successive indexes.</source>
          <target state="translated">각 요소의 길이 연속 된 인덱스 간의 차이 따라 쉽게 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The length of the array will always be less than or equal to the length of the string.</source>
          <target state="translated">배열의 길이 문자열의 길이 보다 작거나는 항상 됩니다 됩니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>For example, given the string "\u4f00\u302a\ud800\udc00\u4f01", this method returns the indexes 0, 2, and 4.</source>
          <target state="translated">이 메서드는 인덱스 0, 2 및 4를 반환 하는 예를 들어 "\u4f00\u302a\ud800\udc00\u4f01" 문자열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>Equivalent Members</source>
          <target state="translated">동등한 멤버</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>Starting in version 2.0 of the .NET Framework, the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Globalization.StringInfo.LengthInTextElements%2A&gt;</ph> property provide an easy to use implementation of the functionality offered by the <ph id="ph3">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> method.</source>
          <target state="translated">.NET Framework 버전 2.0부터는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.LengthInTextElements%2A&gt;</ph> 속성에서 제공 하는 기능 사용 하기 쉬운 구현을 제공는 <ph id="ph3">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>The following code example demonstrates calling the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 호출은 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
          <source><ph id="ph1">&lt;paramref name="str" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="str" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Globalization.StringInfo.String">
          <source>Gets or sets the value of the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.String">
          <source>The string that is the value of the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값인 문자열입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.String">
          <source>When a <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> object is instantiated, its <ph id="ph2">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> property is set to one of the following values:</source>
          <target state="translated">때는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> 개체를 인스턴스화할 해당 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> 속성은 다음 값 중 하나로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.String">
          <source><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> if the default  <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> 하는 경우 기본 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.String">
          <source>You should then use the <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> property to assign the string that this <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> object rperesents.</source>
          <target state="translated">다음 사용할지는 <ph id="ph1">&lt;xref:System.Globalization.StringInfo.String%2A&gt;</ph> 속성 문자열을 할당 하려면이 <ph id="ph2">&lt;xref:System.Globalization.StringInfo&gt;</ph> rperesents 개체입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Globalization.StringInfo.String">
          <source>The string supplied as the <ph id="ph1">`value`</ph> argument to the <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> constructor.</source>
          <target state="translated">문자열 변수로 제공는 <ph id="ph1">`value`</ph> 인수에는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.%23ctor%28System.String%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.Globalization.StringInfo.String">
          <source>The value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">set 작업의 값이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="T:System.Globalization.StringInfo">
          <source>Retrieves a substring of text elements from the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에서 텍스트 요소의 부분 문자열을 검색합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>The zero-based index of a text element in this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에 있는 텍스트 요소의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>Retrieves a substring of text elements from the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object starting from a specified text element and continuing through the last text element.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에서, 지정된 텍스트 요소에서 시작하여 마지막 텍스트 요소까지 계속되는 텍스트 요소의 부분 문자열을 검색합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>A substring of text elements in this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object, starting from the text element index specified by the <ph id="ph2">&lt;paramref name="startingTextElement" /&gt;</ph> parameter and continuing through the last text element in this object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에서, <ph id="ph2">&lt;paramref name="startingTextElement" /&gt;</ph> 매개 변수에 지정된 텍스트 요소 인덱스에서 시작하여 이 개체의 마지막 텍스트 요소까지 계속되는 텍스트 요소의 부분 문자열입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>Consider a string that consists of five text elements, indexed from 0 through 4.</source>
          <target state="translated">0에서 4 사이 인덱싱된 텍스트 요소 5 개 구성 되는 문자열을 고려 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>If the <ph id="ph1">`startingTextElement`</ph> parameter is 1, the  <ph id="ph2">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> method returns a substring that consists of the text elements for which the indexes are 1, 2, 3, and 4.</source>
          <target state="translated">경우는 <ph id="ph1">`startingTextElement`</ph> 매개 변수는 1는 <ph id="ph2">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> 메서드 인덱스 1, 2, 3 및 4 인 텍스트 요소로 구성 된 부분 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
          <source>The string that is the value of the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object is the empty string ("").</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값인 문자열이 빈 문자열("")인 경우</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>The zero-based index of a text element in this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에 있는 텍스트 요소의 인덱스(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>The number of text elements to retrieve.</source>
          <target state="translated">검색할 텍스트 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>Retrieves a substring of text elements from the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object starting from a specified text element and continuing through the specified number of text elements.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에서, 지정된 텍스트 요소에서 시작하여 지정된 수의 텍스트 요소까지 계속되는 텍스트 요소의 부분 문자열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>A substring of text elements in this <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체에 있는 텍스트 요소의 부분 문자열입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>The substring consists of the number of text elements specified by the <ph id="ph1">&lt;paramref name="lengthInTextElements" /&gt;</ph> parameter and starts from the text element index specified by the <ph id="ph2">&lt;paramref name="startingTextElement" /&gt;</ph> parameter.</source>
          <target state="translated">부분 문자열은 <ph id="ph1">&lt;paramref name="lengthInTextElements" /&gt;</ph> 매개 변수에 지정된 텍스트 요소의 수로 구성되고 <ph id="ph2">&lt;paramref name="startingTextElement" /&gt;</ph> 매개 변수에 지정된 텍스트 요소 인덱스에서 시작합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>Consider a string that consists of five text elements, indexed from 0 through 4.</source>
          <target state="translated">0에서 4 사이 인덱싱된 텍스트 요소 5 개 구성 되는 문자열을 고려 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>If the <ph id="ph1">`startingTextElement`</ph> parameter is 1 and the <ph id="ph2">`lengthInTextElements`</ph> parameter is 3, the <ph id="ph3">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> method returns a substring that consists of the text elements for which the indexes are 1, 2, and 3.</source>
          <target state="translated">경우는 <ph id="ph1">`startingTextElement`</ph> 매개 변수는 1 및 <ph id="ph2">`lengthInTextElements`</ph> 매개 변수는 3의 <ph id="ph3">&lt;xref:System.Globalization.StringInfo.SubstringByTextElements%2A&gt;</ph> 메서드 인덱스 1, 2 및 3 인 텍스트 요소로 구성 된 부분 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph> is greater than or equal to the length of the string that is the value of the current <ph id="ph2">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph>가 현재 <ph id="ph2">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값인 문자열 길이보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="lengthInTextElements" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lengthInTextElements" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>The string that is the value of the current <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object is the empty string ("").</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 값인 문자열이 빈 문자열("")인 경우</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="lengthInTextElements" /&gt;</ph> specify an index that is greater than the number of text elements in this <ph id="ph4">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startingTextElement" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="lengthInTextElements" /&gt;</ph>가 이 <ph id="ph4">&lt;see cref="T:System.Globalization.StringInfo" /&gt;</ph> 개체의 텍스트 요소 수보다 큰 인덱스를 지정합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>