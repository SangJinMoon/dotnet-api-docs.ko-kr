<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ccce2910a4409725858671f177b4fdfb5609d233" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36486789" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123) 유니코드 문자 범주 수를 정의 합니다. 예를 들어 문자는 대문자, 소문자, 10 진수 숫자, 문자 번호, 단락 구분 기호, 수학 기호 또는 통화 기호도 분류할 수 있습니다. 응용 프로그램 문자 범주를 사용 하 여 구문 분석 또는 정규식을 사용한 부분 문자열을 추출 하는 등의 문자열 기반 작업을 제어 하는 데 있습니다. <xref:System.Globalization.UnicodeCategory> 열거형은 가능한 문자 범주를 정의 합니다.  
  
 사용 하면는 <xref:System.Globalization.CharUnicodeInfo> 얻으려고 클래스는 <xref:System.Globalization.UnicodeCategory> 특정 문자에 대 한 값입니다. <xref:System.Globalization.CharUnicodeInfo> 클래스 다음 유니코드 문자 값을 반환 하는 메서드를 정의 합니다.  
  
-   문자 또는 서로게이트 쌍 속해 있는 특정 범주입니다. 반환 되는 값의 멤버인는 <xref:System.Globalization.UnicodeCategory> 열거형입니다.  
  
-   숫자 값입니다. 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자, 원된 숫자, 및 스크립트 관련 숫자를 포함 하 여 숫자 문자에만 적용 됩니다.  
  
-   숫자 값입니다. 다른 숫자와 번호 매기기 시스템에 숫자를 나타내는 데 사용할 수 있는 숫자에 적용 됩니다.  
  
-   10 진수 값입니다. 10 진수 (밑수 10) 시스템의 10 진수 숫자를 나타내는 문자에만 적용 됩니다. 10 진수는 0부터 9까지 10 개의 숫자 중 하나일 수 있습니다. 이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 범주입니다.  
  
 또한는 <xref:System.Globalization.CharUnicodeInfo> 클래스는 여러 가지 다른.NET Framework 형식 및 문자 분류를 사용 하는 방법에 의해 내부적으로 사용 됩니다. 여기에는 다음이 포함됩니다.  
  
-   <xref:System.Globalization.StringInfo> 문자열의 단일 문자 대신 텍스트 요소를 사용 하는 클래스입니다.  
  
-   오버 로드는 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드를 한 문자 또는 서로게이트 쌍이 속한 범주를 결정 합니다.  
  
-   [문자 클래스](~/docs/standard/base-types/character-classes-in-regular-expressions.md) 에서 인식 <xref:System.Text.RegularExpressions.Regex>,.NET Framework의 정규식 엔진입니다.  
  
 응용 프로그램에서이 클래스를 사용 하는 경우 유지 염두에서 다음 프로그래밍 사용 시 고려 사항에서 <xref:System.Char> 유형입니다. 종류를 사용 하기 어려울 수 있습니다 및 문자열은 일반적으로 언어 콘텐츠를 나타내기 위한 것이 좋습니다.  
  
-   A <xref:System.Char> 개체는 단일 문자 항상 일치 하지 않습니다. 하지만 <xref:System.Char> 일부 문자 (예: 문자 소 클러스터 및 서로게이트 쌍) 두 개 이상의 utf-16 코드 단위의 구성, 형식은 단일 16 비트 값을 나타냅니다. 자세한 내용은의 "개체 및 유니코드 문자 Char" 참조의 <xref:System.String> 클래스입니다.  
  
-   "Character"의 개념 유연한 이기도합니다. 문자는 문자 모양으로 생각할 종종 하지만 많은 문자 모양 여러 코드 포인트를 필요 합니다. Ä 수 예를 들어 2로 나타낼 코드 포인트가 ("a" 및 결합 diaeresis 즉 U + 0308,), 또는 a 단일 코드 포인트 ("ä" 또는 U + 00A4). 일부 언어에는 많은 문자, 문자 및 언어적 콘텐츠 표시에 혼동 될 수 있는 여러 코드 포인트를 필요로 하는 문자입니다. 예를 들어 (U + 03B0, 그리스어 소문자 웁실론 dialytika 및 tonos) ΰ 있지만 해당 하는 대문자 문자가 없습니다. 원래 값을 검색 하기만 하면 이러한 값을 대문자로 표시 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>인식된 된 문자 및 속하는 특정 범주는 유니코드 표준에서 정의 되어 있으며는 유니코드 표준의 버전 간에 변경할 수 있습니다. 특정 버전의.NET Framework의 문자 분류.NET Framework 실행 되는 기본 운영 체제에 관계 없이 유니코드 표준의 단일 버전을 기반으로 합니다. 다음 표에서.NET Framework 이후 버전의 [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]는 유니코드 표준의 버전 문자를 분류 하는 데 사용 합니다.  <list type="table"><listheader><term> .NET framework 버전 </term><description> 유니코드 표준의 버전 </description></listheader><item><term> [! INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] </term><description> [유니코드 표준, 버전 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v45](~/includes/net-v45-md.md)] </term><description> [유니코드 표준, 버전 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v451](~/includes/net-v451-md.md)] </term><description> [유니코드 표준, 버전 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v452](~/includes/net-v452-md.md)] </term><description> [유니코드 표준, 버전 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v46](~/includes/net-v46-md.md)] </term><description> [유니코드 표준, 버전 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v461](~/includes/net-v461-md.md)] </term><description> [유니코드 표준, 버전 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v462](~/includes/net-v462-md.md)] </term><description> [유니코드 표준을, 버전 8.0.0] (https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list> 유니코드의 각 버전 표준에는 이전 버전 이후 변경 유니코드 문자 데이터베이스에 대 한 정보가 포함 됩니다.               유니코드 문자 데이터베이스에서 사용 되는 <see cref="T:System.Globalization.CharUnicodeInfo" /> 문자를 분류 하기 위한 클래스입니다.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the decimal digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the specified numeric character.</summary>
        <returns>The decimal digit value of the specified numeric character.  -or-  -1, if the specified character is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 정수 값으로 10 진수 숫자를 나타내는 문자를 변환 합니다. 10 진수 숫자에는 문자는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> 범주를 10 개 숫자 0부터 9까지 시스템 번호는 10 진수 (밑수 10) 중 하나를 나타낼 수 있습니다. 부터 U + 1049 (U + 0030 (숫자 0) (숫자 9), U + 0039 U + 0660 (아랍-인도어 식 숫자가 0) U + 0669 (아랍-인도어 식 숫자가 9), U + 07 C 0 NKO 자리 U + 07C 9 (NKO 자리부터 9) 및 U + 1040 (미얀마 숫자 0)를 통해 통해 등의 문자를 포함 미얀마 자리 9)입니다.  
  
 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
        <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The decimal digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 정수 값으로 10 진수 숫자를 나타내는 문자를 변환 합니다. 10 진수 숫자에는 문자는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> 범주를 10 개 숫자 0부터 9까지 시스템 번호는 10 진수 (밑수 10) 중 하나를 나타낼 수 있습니다. 부터 U + 1049 (U + 0030 (숫자 0) (숫자 9), U + 0039 U + 0660 (아랍-인도어 식 숫자가 0) U + 0669 (아랍-인도어 식 숫자가 9), U + 07 C 0 NKO 자리 U + 07C 9 (NKO 자리부터 9) 및 U + 1040 (미얀마 숫자 0)를 통해 통해 등의 문자를 포함 미얀마 자리 9)입니다.  
  
 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the specified numeric character.</summary>
        <returns>The digit value of the specified numeric character.  -or-  -1, if the specified character is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숫자 값은 숫자 문자 자리 수로 사용할 수 있는에 적용 되는 속성입니다. 숫자는 번호 매기기 시스템에 숫자를 나타내기 위해 다른 자릿수와 결합 될 수 있는 숫자 문자입니다.  
  
 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
        <param name="index">The index of the Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숫자 값은 숫자 문자 자리 수로 사용할 수 있는에 적용 되는 속성입니다. 숫자는 번호 매기기 시스템에 숫자를 나타내기 위해 다른 자릿수와 결합 될 수 있는 숫자 문자입니다.  
  
 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the numeric value associated with a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the specified character.</summary>
        <returns>The numeric value associated with the specified character.  -or-  -1, if the specified character is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숫자 값은 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자, 원된 숫자, 및 스크립트 관련 숫자를 포함 하는 숫자 문자에만 적용 되는 유니코드 문자 속성. 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> 메서드 가정 `ch` 단일 언어 문자에 해당 하 고 해당 문자가 10 진수 이면 변환할 수 있는지 확인 합니다. 그러나 일부 유니코드 표준의 표기 하 두 <xref:System.Char> 서로게이트 쌍을 형성 하는 개체입니다. 예를 들어, 코드 포인트 U + 10107 ~ U + 10133 번호 지정 시스템 게 구성 됩니다. 다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 AEGEAN 숫자 1을 나타내는 문자열을 인스턴스화합니다. 예제에서 출력으로의 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> 상위 서로게이트 또는 하위 서로게이트가 문자의 전달 되는 경우 메서드는-1을 반환 합니다.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
        <param name="index">The index of the Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
        <returns>The numeric value associated with the character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숫자 값은 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자, 원된 숫자, 및 스크립트 관련 숫자를 포함 하는 숫자 문자에만 적용 되는 유니코드 문자 속성. 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
 경우는 <xref:System.Char> 개체에서 문자 위치 `index` 은 유효한 서로게이트 쌍의 첫 번째 문자는 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> 메서드 확인 여부를 서로게이트 쌍 숫자으로 구성 하 고, 그렇지 않으면 해당 숫자 값을 반환 합니다. 예를 들어, 코드 포인트 U + 10107 ~ U + 10133 번호 지정 시스템 게 구성 됩니다. 다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 Aegean 각 번호를 나타내는 문자열을 인스턴스화합니다. 예제에서 출력으로의 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> Aegean 숫자의 상위 서로게이트 전달 되는 경우 메서드는 정확한 숫자 값을 반환 합니다. 그러나 하위 서로게이트, 전달 되는 경우에서 격리에만 하위 서로게이트 문자와-1을 반환 합니다.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the Unicode category of a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the specified character.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 유니코드 문자 범주로 구분 됩니다. 문자 범주는 해당 속성 중 하나입니다. 예를 들어, 대문자, 소문자, 10 진수 숫자, 문자 번호, 커넥터 문장 부호, 수학 기호 또는 통화 기호는 문자 수 있습니다. <xref:System.Globalization.UnicodeCategory> 클래스는 유니코드 문자 범주를 반환 합니다. 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> 메서드 가정 `ch` 단일 언어 문자에 해당 하 고 해당 범주를 반환 합니다. 즉, 서로게이트 쌍을 반환 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> 서로게이트 속한 범주 대신 합니다. 예를 들어 Ugaritic 알파벳 코드 포인트 U + 10380 U + 1039F 차지합니다. 다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드를 인스턴스화하는 Ugaritic 알파벳의 첫 번째 문자 UGARITIC 문자로 ALPA (U + 10380)을 나타내는 문자열입니다. 예제에서 출력으로의 <xref:System.Char.IsNumber%28System.Char%29> 메서드 반환 `false` 경우 상위 서로게이트 또는 하위 서로게이트가 문자의 전달 됩니다.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 동일한 항상 반환 하지 않는 <xref:System.Globalization.UnicodeCategory> 값는 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드 매개 변수로 특정 문자를 전달 하는 경우. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 유니코드 표준의 현재 버전을 반영 하도록 디자인 되었습니다. 반면에 있지만 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 일반적으로 유니코드 표준의 현재 버전을 반영 하 고, 문자의 범주는 표준의 이전 버전에 따라 반환할 수 있습니다 또는 현재 표준에서 다른 범주를 반환할 수 있습니다 이전 버전과 호환성을 유지 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
        <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 유니코드 문자 범주로 구분 됩니다. 문자 범주는 해당 속성 중 하나입니다. 예를 들어, 대문자, 소문자, 10 진수 숫자, 문자 번호, 커넥터 문장 부호, 수학 기호 또는 통화 기호는 문자 수 있습니다. <xref:System.Globalization.UnicodeCategory> 클래스는 유니코드 문자 범주를 반환 합니다. 유니코드 문자에 대 한 자세한 내용은 참조는 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
 경우는 <xref:System.Char> 개체에서 문자 위치 `index` 은 유효한 서로게이트 쌍의 첫 번째 문자는 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> 반환 하는 대신 서로게이트 쌍의 유니코드 범주를 반환 하는 메서드 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>합니다. 예를 들어 Ugaritic 알파벳 코드 포인트 U + 10380 U + 1039F 차지합니다. 다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드를 인스턴스화하는 Ugaritic 알파벳의 첫 번째 문자 UGARITIC 문자로 ALPA (U + 10380)을 나타내는 문자열입니다. 예제에서 출력으로의 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> 메서드 반환 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 이 문자를 나타내는 서로게이트 쌍을 고려의 high surrogate 전달 됩니다. 그러나 하위 서로게이트, 전달 되는 경우 격리 된 상태에서 하위 서로게이트만 고려 않으며 반환 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>합니다.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드 반환 하지 않는 경우도 동일한 <xref:System.Globalization.UnicodeCategory> 값는 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드 매개 변수로 특정 문자를 전달 하는 경우. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 유니코드 표준의 현재 버전을 반영 하도록 디자인 되었습니다. 반면에 있지만 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 일반적으로 유니코드 표준의 현재 버전을 반영 하 고, 문자의 범주는 표준의 이전 버전에 따라 반환할 수 있습니다 또는 현재 표준에서 다른 범주를 반환할 수 있습니다 이전 버전과 호환성을 유지 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 유형의 문자에 대 한 각 메서드에 의해 반환 된 값을 보여 줍니다.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>