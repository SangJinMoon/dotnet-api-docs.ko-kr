<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaProcessor2D" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaProcessor2D" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="62508-101">조작 위치, 방향 및 평균 반지름의 보외법을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-101">Implements the extrapolation of a manipulation's position, orientation, and average radius.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-102"><xref:System.Windows.Input.Manipulations.InertiaProcessor2D> 개체에는 응용 프로그램이 실제 동작을 시뮬레이션 하 여 요소의 위치, 방향 및 기타 속성을 추정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="62508-102">An <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> object enables your application to extrapolate an element's location, orientation, and other properties by simulating real-world behavior.</span></span>  
  
 <span data-ttu-id="62508-103">예를 들어, 사용자가 요소를 이동 했다가 놓으면 때 요소 수 계속 이동, 감속 및 천천히 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-103">For instance, when a user moves an element and then releases it, the element can continue moving, decelerate, and then slowly stop.</span></span> <span data-ttu-id="62508-104">관성 프로세서 관계 2-d 값 (원점, 크기 조정, 변환 및 회전)이 지정된 된 감속 속도로에 지정된 된 시간에 따라 변경 하 여이 동작을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-104">An inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.</span></span>  
  
 <span data-ttu-id="62508-105">관성 프로세서 단독으로 요소를 이동 하 고 감속 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="62508-105">An inertia processor by itself does not cause an element to move and decelerate.</span></span> <span data-ttu-id="62508-106">응용 프로그램 정보를 받아 관성 프로세서에서 응용 프로그램별 요소에 필요에 따라 값을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-106">Your application receives information from an inertia processor and applies the values as needed to an application-specific element.</span></span> <span data-ttu-id="62508-107">일반적으로 응용 프로그램 관성 프로세서에서 받은 정보를 사용 하 여 위치, 크기 또는 요소의 방향을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-107">Typically, an application uses the information received from an inertia processor to change the location, size or orientation of an element.</span></span>  
  
 <span data-ttu-id="62508-108">관성 처리는 일반적으로 조작 처리와 함께에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="62508-108">Inertia processing is typically used in conjunction with manipulation processing.</span></span> <span data-ttu-id="62508-109">자세한 내용은 <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="62508-109">For more information, see the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D> class.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaProcessor2D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62508-110"><see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-110">Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (timestamp As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(long timestamp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp"><span data-ttu-id="62508-111">100나노초 눈금으로 추정을 완료하기 위한 타임스탬프입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-111">The timestamp to complete extrapolation, in 100-nanosecond ticks.</span></span></param>
        <summary><span data-ttu-id="62508-112">지정된 타임스탬프를 사용하여 최종 추정을 완료하고 <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="62508-112">Completes final extrapolation by using the specified timestamp and raises the <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-113">타임 스탬프가 100 나노초 단위로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="62508-113">Timestamps are in 100-nanosecond units.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62508-114">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> 이벤트 검사 관성 처리에서 실행 되는 경우 그리고 있다면 참조를 호출 하 여 중지 된 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="62508-114">In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> event checks to see if inertia processing is running and if so, stops it by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> method.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="62508-115">타임스탬프 매개 변수가 초기 또는 이전 타임스탬프보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="62508-115">The timestamp parameter is less than the initial or previous timestamp.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DCompletedEventArgs ^&gt; ^ Completed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-116">보외법이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-116">Occurs when extrapolation has completed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberSignature Language="VB.NET" Value="Public Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DDeltaEventArgs ^&gt; ^ Delta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-117">보외법 원점이 변경되거나 변환, 배율 조정 또는 회전이 수행되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-117">Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-118"><xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> 이벤트 및 <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> 이벤트는 같은 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-118">The <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> event and the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> event are the same type.</span></span> <span data-ttu-id="62508-119">일반적으로 두 이벤트에 대 한 동일한 이벤트 처리기를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="62508-119">Typically, you can use the same event handler for both events.</span></span>  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ ExpansionBehavior { System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-120">관성 프로세서의 확장 동작을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-120">Gets or sets the expansion behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="62508-121">관성 프로세서의 확장 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-121">The expansion behavior of the inertia processor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginX { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-122">초기 원점의 X 좌표(좌표 단위)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-122">Gets or sets the x-coordinate for the initial origin, in coordinate units.</span></span></summary>
        <value><span data-ttu-id="62508-123">초기 원점의 X 좌표(좌표 단위)입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-123">The x-coordinate for the initial origin, in coordinate units.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-124">원점을 나타내는 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> 및 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> 속성 요소에 연결 된 모든 조작자의 평균 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-124">The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.</span></span>  
  
 <span data-ttu-id="62508-125">유효한 값에 대 한 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> 은 유한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-125">A valid value for <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> is any finite number.</span></span> <span data-ttu-id="62508-126">기본값은 0.0입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-126">The default value is 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginY { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-127">초기 원점의 Y 좌표(좌표 단위)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-127">Gets or sets the y-coordinate for the initial origin, in coordinate units.</span></span></summary>
        <value><span data-ttu-id="62508-128">초기 원점의 Y 좌표(좌표 단위)입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-128">The y-coordinate for the initial origin, in coordinate units.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-129">원점을 나타내는 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> 및 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> 속성 요소에 연결 된 모든 조작자의 평균 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-129">The origin point represented by the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> and <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> properties is the average position of all manipulators associated with an element.</span></span>  
  
 <span data-ttu-id="62508-130">유효한 값에 대 한 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> 은 유한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-130">A valid value for <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> is any finite number.</span></span> <span data-ttu-id="62508-131">기본값은 0.0입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-131">The default value is 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-132">관성이 현재 진행 중인지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="62508-132">Gets whether inertia is currently in progress.</span></span></summary>
        <value><span data-ttu-id="62508-133">관성이 현재 진행 중인지 여부를 나타내는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-133">A Boolean value indicating whether inertia is currently in progress.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62508-134">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> 확인 관성 처리가 실행 되 고,이 경우 호출 하 여 중지 하는 이벤트는 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> 메서드.</span><span class="sxs-lookup"><span data-stu-id="62508-134">In the following example, an event handler for the <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> event checks to see if inertia processing is running and, if so, stops it by calling the <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> method.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process (timestamp As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Process(long timestamp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp"><span data-ttu-id="62508-135">100나노초 눈금으로 나타낸 추정을 수행할 타임스탬프입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-135">The timestamp to perform extrapolation, in 100-nanosecond ticks.</span></span></param>
        <summary><span data-ttu-id="62508-136">지정된 시간의 조작 위치, 방향 및 평균 반지름을 추정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-136">Extrapolates the manipulation's position, orientation, and average radius at the specified time.</span></span></summary>
        <returns><span data-ttu-id="62508-137">지정된 시간의 조작 위치, 방향 및 평균 반지름입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-137">The manipulation's position, orientation, and average radius at the specified time.</span></span> <span data-ttu-id="62508-138">추정이 진행 중인 경우 <see langword="true" />이고 추정이 완료되었으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-138"><see langword="true" /> if extrapolation is in progress; otherwise, <see langword="false" /> if extrapolation has completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62508-139">타임 스탬프가 100 나노초 단위로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="62508-139">Timestamps are in 100-nanosecond units.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="62508-140">타임스탬프 매개 변수가 초기 또는 이전 타임스탬프보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="62508-140">The timestamp parameter is less than the initial or previous timestamp.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ RotationBehavior { System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-141">관성 프로세서의 회전 동작을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-141">Gets or sets the rotation behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="62508-142">관성 프로세서의 회전 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-142">The rotation behavior of the inertia processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62508-143">다음 예제에서는 <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> 관성 처리는 개체 3---1.5 시간 시작 방향에서 회전할 수 있도록 속성이 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="62508-143">In the following example, the <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> property is set to enable inertia processing to rotate an object three-and-one-half times from its starting orientation.</span></span>  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (parameters As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="62508-144">설정할 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-144">Parameters to set.</span></span></param>
        <summary><span data-ttu-id="62508-145">관성 프로세서에 대해 매개 변수를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-145">Sets parameters on the inertia processor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ TranslationBehavior { System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62508-146">관성 프로세서의 변환 동작을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="62508-146">Gets or sets the translation behavior of the inertia processor.</span></span></summary>
        <value><span data-ttu-id="62508-147">관성 프로세서의 변환 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="62508-147">The translation behavior of the inertia processor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>