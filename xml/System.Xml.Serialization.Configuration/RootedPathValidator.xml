<Type Name="RootedPathValidator" FullName="System.Xml.Serialization.Configuration.RootedPathValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d21a49f363d18db28ea6fb7469652779366c30b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36440639" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RootedPathValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RootedPathValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Configuration.RootedPathValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RootedPathValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RootedPathValidator : System::Configuration::ConfigurationValidatorBase" />
  <TypeSignature Language="F#" Value="type RootedPathValidator = class&#xA;    inherit ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d6240-101">
        <c>tempFilesLocation</c> 구성 스위치의 사용을 제어하는 규칙의 유효성을 검사합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d6240-101">Validates the rules governing the use of the <c>tempFilesLocation</c> configuration switch.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6240-102">추가 하는 경우는 `WebReference` 웹 서비스에 대 한 개체는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 웹 서비스 검색 프로세스에 의해 파일이 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-102">When adding a `WebReference` object to a Web service in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], files are created by the Web service discovery process.</span></span>  
  
 <span data-ttu-id="d6240-103">웹 서비스 클라이언트를 추가 하 여 웹 서비스 설명 (WSDL) 문서를 찾을 수 있는 위치를 확인 한 `WebReference` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-103">Web service clients learn where to find the Web service description (WSDL) document by adding a `WebReference` object.</span></span> <span data-ttu-id="d6240-104">웹 서비스 클라이언트 검색 된 문서는 디스크를 사용 하 여 다음 저장 된 `WriteAll` 메서드.</span><span class="sxs-lookup"><span data-stu-id="d6240-104">The Web service clients then save the discovered documents to the disk by using the `WriteAll` method.</span></span> <span data-ttu-id="d6240-105">예를 들어.xsd 스키마 파일 또는 서비스 설명 하는 검색 된 문서 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-105">For example, the discovered documents may be .xsd schema files or service descriptions.</span></span> <span data-ttu-id="d6240-106">클라이언트는 프로세스가 끝날 때 파일을 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-106">At the end of the process, the client deletes the files.</span></span> <span data-ttu-id="d6240-107">사용 하 여 임시 폴더에 있는 파일의 기본 위치를 변경할 수 있습니다는 `tempFilesLocation` 스위치는 `<xmlSerializer>` 다음 예제와 같이 Machine.config 구성 파일에 지정 된 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-107">You can change the default location of the files in the temporary folder by using the `tempFilesLocation` switch in the `<xmlSerializer>` element, specified in the Machine.config configuration file, as in the following example.</span></span>  
  
```  
<configuration>  
  <system.web>  
  <system.xml.serialization>  
    <xmlSerializer tempFilesLocation=".."/>  
  </system.xml.serialization>  
</configuration>  
```  
  
 <span data-ttu-id="d6240-108">값 `tempFilesLocation` 절대 경로 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-108">The value of `tempFilesLocation` must be an absolute path.</span></span> <span data-ttu-id="d6240-109">지정 된 경로, 절대 없으면는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 생성 한 <xref:System.Configuration.ConfigurationErrorsException> 구성 섹션을 참조 하는 동안 예외가 발생 했습니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-109">If the path specified is not absolute, the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] generates a <xref:System.Configuration.ConfigurationErrorsException> exception when the configuration section is referenced.</span></span>  
  
 <span data-ttu-id="d6240-110">선행 공백과 후행 공백을 제거 하는 속성의 값이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-110">The value of the property is truncated to remove leading and trailing white spaces.</span></span>  
  
 <span data-ttu-id="d6240-111">하는 경우의 값은 `tempFilesLocation` 속성은 공백이 구성 되며, 컴파일하기 위한 기본 % TMP % 위치가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-111">If value of the `tempFilesLocation` property is composed of white space, the default %TMP% location is used for the compilation.</span></span> <span data-ttu-id="d6240-112">동일한 기본 동작이 발생 하지 않으면 `tempFilesLocation` 스위치를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-112">The same default behavior occurs when no `tempFilesLocation` switch is specified.</span></span>  
  
 <span data-ttu-id="d6240-113"><xref:System.Xml.Serialization.XmlSerializer> 경로 있는지 여부를 확인 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-113">The <xref:System.Xml.Serialization.XmlSerializer> does not check to see whether the path exists.</span></span> <span data-ttu-id="d6240-114">존재 하지 않는 경우는 <xref:System.IO.DirectoryNotFoundException> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d6240-114">If it does not, a <xref:System.IO.DirectoryNotFoundException> is generated.</span></span> <span data-ttu-id="d6240-115">기본 동작은 동일는 `XmlSerializer` % TMP % 경로 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="d6240-115">This is identical to the default behavior of the `XmlSerializer` if the %TMP% path does not exist.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootedPathValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootedPathValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d6240-116">
            <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-116">Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberSignature Language="F#" Value="override this.CanValidate : Type -&gt; bool" Usage="rootedPathValidator.CanValidate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d6240-117">개체의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-117">The type of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d6240-118">개체 형식의 유효성을 검사할 수 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-118">Determines whether the type of the object can be validated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d6240-119">
            <paramref name="type" /> 매개 변수가 유효한 <see langword="true" /> 개체와 일치하면 <see langword="XMLSerializer" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-119">
              <see langword="true" /> if the <paramref name="type" /> parameter matches a valid <see langword="XMLSerializer" /> object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Validate : obj -&gt; unit" Usage="rootedPathValidator.Validate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d6240-120">개체의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-120">The value of an object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d6240-121">개체의 값이 유효한지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d6240-121">Determines whether the value of an object is valid.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6240-122">`XmlSerializer` 유효성을 검사할 개체의 매개 변수로 전달 되는 `Validate` 메서드.</span><span class="sxs-lookup"><span data-stu-id="d6240-122">The `XmlSerializer` object to validate is passed as a parameter of the `Validate` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>