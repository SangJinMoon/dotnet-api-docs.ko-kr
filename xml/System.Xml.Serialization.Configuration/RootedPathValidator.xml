<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RootedPathValidator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac576311afd538bb8339c0baf35fc0c00a336cb44c1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76311afd538bb8339c0baf35fc0c00a336cb44c1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>Validates the rules governing the use of the <bpt id="p1">&lt;c&gt;</bpt>tempFilesLocation<ept id="p1">&lt;/c&gt;</ept> configuration switch.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>tempFilesLocation<ept id="p1">&lt;/c&gt;</ept> 구성 스위치의 사용을 제어하는 규칙의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>When adding a <ph id="ph1">`WebReference`</ph> object to a Web service in the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, files are created by the Web service discovery process.</source>
          <target state="translated">추가 하는 경우는 <ph id="ph1">`WebReference`</ph> 웹 서비스에 대 한 개체는 <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, 웹 서비스 검색 프로세스에 의해 파일이 만들어집니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>Web service clients learn where to find the Web service description (WSDL) document by adding a <ph id="ph1">`WebReference`</ph> object.</source>
          <target state="translated">웹 서비스 클라이언트를 추가 하 여 웹 서비스 설명 (WSDL) 문서를 찾을 수 있는 위치를 확인 한 <ph id="ph1">`WebReference`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>The Web service clients then save the discovered documents to the disk by using the <ph id="ph1">`WriteAll`</ph> method.</source>
          <target state="translated">웹 서비스 클라이언트 검색 된 문서는 디스크를 사용 하 여 다음 저장 된 <ph id="ph1">`WriteAll`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>For example, the discovered documents may be .xsd schema files or service descriptions.</source>
          <target state="translated">예를 들어.xsd 스키마 파일 또는 서비스 설명 하는 검색 된 문서 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>At the end of the process, the client deletes the files.</source>
          <target state="translated">클라이언트는 프로세스가 끝날 때 파일을 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>You can change the default location of the files in the temporary folder by using the <ph id="ph1">`tempFilesLocation`</ph> switch in the <ph id="ph2">`&lt;xmlSerializer&gt;`</ph> element, specified in the Machine.config configuration file, as in the following example.</source>
          <target state="translated">사용 하 여 임시 폴더에 있는 파일의 기본 위치를 변경할 수 있습니다는 <ph id="ph1">`tempFilesLocation`</ph> 스위치는 <ph id="ph2">`&lt;xmlSerializer&gt;`</ph> 다음 예제와 같이 Machine.config 구성 파일에 지정 된 요소입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>The value of <ph id="ph1">`tempFilesLocation`</ph> must be an absolute path.</source>
          <target state="translated">값 <ph id="ph1">`tempFilesLocation`</ph> 절대 경로 여야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>If the path specified is not absolute, the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> generates a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationErrorsException&gt;</ph> exception when the configuration section is referenced.</source>
          <target state="translated">지정 된 경로, 절대 없으면는 <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 생성 한 <ph id="ph2">&lt;xref:System.Configuration.ConfigurationErrorsException&gt;</ph> 구성 섹션을 참조 하는 동안 예외가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>The value of the property is truncated to remove leading and trailing white spaces.</source>
          <target state="translated">선행 공백과 후행 공백을 제거 하는 속성의 값이 잘립니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>If value of the <ph id="ph1">`tempFilesLocation`</ph> property is composed of white space, the default %TMP% location is used for the compilation.</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">`tempFilesLocation`</ph> 속성은 공백이 구성 되며, 컴파일하기 위한 기본 % TMP % 위치가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>The same default behavior occurs when no <ph id="ph1">`tempFilesLocation`</ph> switch is specified.</source>
          <target state="translated">동일한 기본 동작이 발생 하지 않으면 <ph id="ph1">`tempFilesLocation`</ph> 스위치를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> does not check to see whether the path exists.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 경로 있는지 여부를 확인 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>If it does not, a <ph id="ph1">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> is generated.</source>
          <target state="translated">존재 하지 않는 경우는 <ph id="ph1">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.Configuration.RootedPathValidator">
          <source>This is identical to the default behavior of the <ph id="ph1">`XmlSerializer`</ph> if the %TMP% path does not exist.</source>
          <target state="translated">기본 동작은 동일는 <ph id="ph1">`XmlSerializer`</ph> % TMP % 경로 없는 경우.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)">
          <source>The type of the object.</source>
          <target state="translated">개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)">
          <source>Determines whether the type of the object can be validated.</source>
          <target state="translated">개체 형식의 유효성을 검사할 수 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="type" /&gt;</ph> parameter matches a valid <ph id="ph3">&lt;see langword="XMLSerializer" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="type" /&gt;</ph> 매개 변수가 유효한 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 개체와 일치하면 <ph id="ph3">&lt;see langword="XMLSerializer" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)">
          <source>The value of an object.</source>
          <target state="translated">개체의 값입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)">
          <source>Determines whether the value of an object is valid.</source>
          <target state="translated">개체의 값이 유효한지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)">
          <source>The <ph id="ph1">`XmlSerializer`</ph> object to validate is passed as a parameter of the <ph id="ph2">`Validate`</ph> method.</source>
          <target state="translated"><ph id="ph1">`XmlSerializer`</ph> 유효성을 검사할 개체의 매개 변수로 전달 되는 <ph id="ph2">`Validate`</ph> 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>