<Type Name="LinqDataSourceValidationException" FullName="System.Web.UI.WebControls.LinqDataSourceValidationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1e981f63ff767e56cdf9c314c24269af58c7913" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36580789" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit LinqDataSourceValidationException extends System.Exception implements class System.Runtime.Serialization.ISerializable, class System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceValidationException" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceValidationException&#xA;Inherits Exception&#xA;Implements IDynamicValidatorException" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceValidationException : Exception, System::Web::DynamicData::IDynamicValidatorException" />
  <TypeSignature Language="F#" Value="type LinqDataSourceValidationException = class&#xA;    inherit Exception&#xA;    interface IDynamicValidatorException&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicValidatorException</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="14ea9-101">
        <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤에서 값을 삽입, 업데이트 또는 삭제하기 전에 새 값 또는 수정된 값의 유효성을 검사하는 중에 발생한 예외를 설명합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="14ea9-101">Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-102"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 클래스 형식 변환 및 속성 setter 예외 오류를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-102">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class contains type conversion and property setter exceptions.</span></span> <span data-ttu-id="14ea9-103">에 포함 된 모든 유효성 검사 중에 throw 된 예외는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-103">All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span> <span data-ttu-id="14ea9-104">반복 하 여 각 유효성 검사 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-104">You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.</span></span>  
  
 <span data-ttu-id="14ea9-105">일반적으로에서 예외를 처리 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-105">You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events.</span></span> <span data-ttu-id="14ea9-106">유효성 검사 예외가 throw 되 면는 `Exception` 의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, 또는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 개체에 포함 되어는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-106">If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> object.</span></span> <span data-ttu-id="14ea9-107">예외가 throw 되는 `Exception` 속성 포함 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-107">If no exception is thrown, the `Exception` property contains `null`.</span></span>  
  
 <span data-ttu-id="14ea9-108">유효성 검사 예외를 처리 하려면 만들기에 대 한 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-108">To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="14ea9-109">이벤트 처리기에서 확인 여부는 `Exception` 이벤트 인수 클래스의 속성 값이 아닌 다른 포함 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-109">In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`.</span></span> <span data-ttu-id="14ea9-110">경우는 `Exception` 속성이 null이 아닌 하나 이상의 유효성 검사 예외가 발생 하 고에서 각 유효성 검사 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-110">If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span>  
  
 <span data-ttu-id="14ea9-111">값 속성의 형식과 일치 하지 않는 경우 유효성 검사 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-111">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="14ea9-112">예를 들어 숫자가 아닌 문자를 사용 하 여 정수 속성을 업데이트 하려는 유효성 검사 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-112">For example, trying to update an integer property by using non-numeric characters causes a validation exception.</span></span> <span data-ttu-id="14ea9-113">LINQ to SQL 클래스 예상된 범위 또는 패턴 내에 있는 값이 속성에 포함 되도록 하는 사용자 지정된 유효성 검사 조건을 포함할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-113">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14ea9-114">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-114">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="14ea9-115">사용 하 여 유효성 검사 예외 메시지를 표시 한 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-115">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="14ea9-116">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-116">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="14ea9-117">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-117">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-118">오류를 설명 하는 시스템 제공 메시지는 현재 시스템 문화권을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-118">The system-supplied message that describes the error takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="14ea9-119">다음 표에서는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 클래스의 인스턴스에 대한 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-119">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="14ea9-120">속성</span><span class="sxs-lookup"><span data-stu-id="14ea9-120">Property</span></span>|<span data-ttu-id="14ea9-121">값</span><span class="sxs-lookup"><span data-stu-id="14ea9-121">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="14ea9-122">`null`.</span><span class="sxs-lookup"><span data-stu-id="14ea9-122">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="14ea9-123">시스템이 제공하는 지역화된 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-123">A system-supplied localized description.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="14ea9-124">@FSHO2@오류를 설명하는 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-124">The message that describes the error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14ea9-125">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-125">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-126">다음 표에서는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 클래스의 인스턴스에 대한 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-126">The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span>  
  
|<span data-ttu-id="14ea9-127">속성</span><span class="sxs-lookup"><span data-stu-id="14ea9-127">Property</span></span>|<span data-ttu-id="14ea9-128">값</span><span class="sxs-lookup"><span data-stu-id="14ea9-128">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="14ea9-129">`null`.</span><span class="sxs-lookup"><span data-stu-id="14ea9-129">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="14ea9-130">`message`에 지정된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-130">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LinqDataSourceValidationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="14ea9-131">serialize된 개체 데이터를 보유하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-131">The object that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="14ea9-132">소스 또는 대상에 대한 컨텍스트 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-132">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14ea9-133">serialize된 데이터를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-133">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-134">이 생성자는 역직렬화 스트림을 통해 전송 되는 예외 개체를 다시 구성 하는 동안 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-134">This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary&lt;string,Exception&gt; innerExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; innerExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerExceptions As IDictionary(Of String, Exception))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ innerExceptions);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * System.Collections.Generic.IDictionary&lt;string, Exception&gt; -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerExceptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerExceptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="14ea9-135">@FSHO2@오류를 설명하는 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-135">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerExceptions">
          <span data-ttu-id="14ea9-136">유효성 검사 예외의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-136">The collection of validation exceptions.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14ea9-137">오류를 설명하는 지정된 메시지와 내부 예외에 대한 참조 컬렉션을 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-137">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified message that describes the error, and a collection of references to inner exceptions.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceValidationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceValidationException : string * Exception -&gt; System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="new System.Web.UI.WebControls.LinqDataSourceValidationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="14ea9-138">@FSHO2@오류를 설명하는 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-138">The message that describes the error.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="14ea9-139">현재 예외의 원인인 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-139">The exception that is the cause of the current exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14ea9-140">지정된 오류 메시지 및 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-140">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> class with a specified error message and a reference to the inner exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-141">일반적으로 사용 하지 것입니다이 생성자에 저장 되므로 유효성 검사 예외는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 속성 하지는 <xref:System.Exception.InnerException%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-141">You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="linqDataSourceValidationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="14ea9-142">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-142">The object that holds the serialized object data for the exception that is being thrown.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="14ea9-143">소스 또는 대상에 대한 컨텍스트 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-143">Context information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14ea9-144">예외에 대한 정보를 가져와 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-144">Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-145"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A> 에 대 한 예외에 대 한 정보를 추가 하는 메서드는 <xref:System.Runtime.Serialization.SerializationInfo> 개체 serialization에 대 한 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-145">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A> method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization.</span></span> <span data-ttu-id="14ea9-146">deserialization을 수행 하는 동안 예외가 재구성 됩니다는 <xref:System.Runtime.Serialization.SerializationInfo> 스트림을 통해 전송 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-146">During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerExceptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Exception&gt; InnerExceptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; InnerExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerExceptions As IDictionary(Of String, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ InnerExceptions { System::Collections::Generic::IDictionary&lt;System::String ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerExceptions : System.Collections.Generic.IDictionary&lt;string, Exception&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicValidatorException.InnerExceptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14ea9-147">새 데이터 또는 수정된 데이터의 유효성을 검사하는 중에 발생한 하나 이상의 예외를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-147">Gets one or more exceptions that occurred when new or modified data was being validated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14ea9-148">예외를 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="14ea9-148">A collection that contains the exceptions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14ea9-149"><xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 업데이트 하기 전에 데이터 유효성 검사 하는 동안 발생 하는 모든 유효성 검사 예외를 포함 하는 컬렉션, 삽입 또는 삭제 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-149">The <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation.</span></span> <span data-ttu-id="14ea9-150">값 속성의 형식과 일치 하지 않는 경우 유효성 검사 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-150">A validation exception can occur if a value does not match the type of the property.</span></span> <span data-ttu-id="14ea9-151">예를 들어 숫자가 아닌 문자를 사용 하 여 정수 속성을 업데이트 하려고 하면 유효성 검사 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-151">For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown.</span></span> <span data-ttu-id="14ea9-152">LINQ to SQL 클래스 예상된 범위 또는 패턴 내에 있는 값이 속성에 포함 되도록 하는 사용자 지정된 유효성 검사 조건을 포함할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-152">A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14ea9-153">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-153">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="14ea9-154">사용 하 여 유효성 검사 예외 메시지를 표시 한 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="14ea9-154">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
                In e.Exception.InnerExceptions  
          Label1.Text &= innerException.Key & ": " & _   
                  innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)   
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
            e.Exception.InnerExceptions)  
        {  
            Label1.Text += innerException.Key + ": " +   
                innerException.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>