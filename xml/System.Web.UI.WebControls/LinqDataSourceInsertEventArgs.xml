<Type Name="LinqDataSourceInsertEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d8868f02d20e42dcfdc6c07a9484365616809ce" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37592216" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceInsertEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceInsertEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceInsertEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceInsertEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a1e1a-101">
        <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserting" /> 이벤트에 대한 데이터를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a1e1a-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserting" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e1a-102">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 개체에 대 한 모든 이벤트 처리기에 전달 되는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-102">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-103"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성 삽입 되는 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-103">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property contains the data that will be inserted.</span></span>  
  
 <span data-ttu-id="a1e1a-104">사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 개체 데이터 소스에서 삽입 작업이 실행 되기 전에 데이터를 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-104">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object to examine the data before the insert operation is executed in the data source.</span></span> <span data-ttu-id="a1e1a-105">수 다음 데이터 유효성 검사, 데이터 클래스에서 유효성 검사 오류를 검사 또는 업데이트 하기 전에 값을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-105">You can then validate the data, examine validation errors from the data class, or change a value before the update.</span></span> <span data-ttu-id="a1e1a-106">또한 삽입 작업을 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-106">You can also cancel the insert operation.</span></span>  
  
 <span data-ttu-id="a1e1a-107">데이터 소스를 나타내는 개체 데이터를 삽입 하기 전에 유효성 검사 예외를 throw 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 의 인스턴스를 포함 하는 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-107">If the object that represents the data source throws a validation exception before it inserts the data, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="a1e1a-108">통해 모든 유효성 검사 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-108">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="a1e1a-109">유효성 검사 예외가 throw 되 면 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 속성에 들어 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-109">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="a1e1a-110">유효성 검사 예외를 처리 하는 예외를 다시 throw 하지 않을 경우 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-110">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e1a-111">다음 예제에 대 한 처리기를 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-111">The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-112">개체를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성은 명명 된 형식으로 캐스팅 됩니다 `Product`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-112">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="a1e1a-113">`DateModified` 의 속성을 `Product` 개체가 현재 날짜 및 시간으로 설정 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-113">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="a1e1a-114">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-114">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-115">사용 하 여 유효성 검사 예외 메시지를 표시 하는 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-115">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a1e1a-116">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-116">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceInsertEventArgs (object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceInsertEventArgs(System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs newObject" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="newObject">
          <span data-ttu-id="a1e1a-117">삽입할 데이터가 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-117">An object that contains the data to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a1e1a-118">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-118">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceInsertEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceInsertEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="a1e1a-119">삽입할 데이터의 유효성을 검사할 때 발생한 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-119">The exception that occurred when the data to insert was being validated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a1e1a-120">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> 클래스의 새 인스턴스를 초기화하고 제공된 예외를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-120">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs" /> class and specifies the provided exception.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e1a-121">삽입 작업을 수행하기 전에 데이터의 유효성을 검사할 때 throw된 예외를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-121">Gets the exception that was thrown while the data was being validated before the insert operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e1a-122">오류가 발생한 경우 해당 예외이고, 그렇지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-122">The exception, if an error occurred; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e1a-123">예외에 저장 됩니다 삽입 작업을 수행 하기 전에 유효성 검사 예외가 throw 되 면는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-123">If a validation exception is thrown before the insert operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="a1e1a-124">에 대 한 처리기에는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트를 통해 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-124">In a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e1a-125">다음 예제에 대 한 처리기를 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-125">The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-126">사용 하 여 유효성 검사 예외 메시지를 표시 하는 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-126">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e1a-127">예외가 처리되었으며 다시 throw되어서는 안 되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-127">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e1a-128">예외가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-128">
              <see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e1a-129">에 대 한 이벤트 처리기를 만들 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 삽입 작업 전에 발생 한 유효성 검사 예외를 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-129">You can create event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to examine validation exceptions that occurred before the insert operation.</span></span> <span data-ttu-id="a1e1a-130">예외를 처리 하 고 다시 throw 되도록 원하지 않는 경우 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-130">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="a1e1a-131">설정 하지 않으면 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> 속성을 `true`, 예외 호출 스택에 있는 다음 이벤트 처리기에 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-131">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e1a-132">다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-132">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-133">사용 하 여 유효성 검사 예외 메시지를 표시 하는 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-133">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message + "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a1e1a-134">삽입할 데이터가 들어 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-134">Gets the object that contains the data to insert.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a1e1a-135">삽입할 데이터가 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a1e1a-135">An object that contains the data to insert.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e1a-136"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성 데이터가 포함 된 데이터 소스에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-136">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property contains the data that will be inserted into the data source.</span></span> <span data-ttu-id="a1e1a-137">에 대 한 처리기를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 데이터 유효성 검사, 데이터를 변경 하거나 데이터 작업이 실행 되기 전에 삽입 작업을 취소 하기 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-137">Create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property in order to validate the data, change the data, or cancel the insert operation before the data operation is executed.</span></span>  
  
 <span data-ttu-id="a1e1a-138">합니다 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 형식의 개체를 반환 하는 속성 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-138">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property returns an object of type <xref:System.Object>.</span></span> <span data-ttu-id="a1e1a-139">이 개체는 데이터를 나타내는 클래스의 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-139">You can cast this object to the type of the class that represents the data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e1a-140">다음 예제에 대 한 처리기를 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-140">The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span> <span data-ttu-id="a1e1a-141">개체를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성은 명명 된 형식으로 캐스팅 됩니다 `Product`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-141">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="a1e1a-142">`DateModified` 의 속성을 `Product` 개체가 현재 날짜 및 시간으로 설정 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e1a-142">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>