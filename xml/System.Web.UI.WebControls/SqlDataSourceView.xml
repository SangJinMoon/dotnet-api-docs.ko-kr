<Type Name="SqlDataSourceView" FullName="System.Web.UI.WebControls.SqlDataSourceView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56793326c9289dc8571df36d7fa8e9d17af807b3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600727" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSourceView extends System.Web.UI.DataSourceView implements class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSourceView" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSourceView&#xA;Inherits DataSourceView&#xA;Implements IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSourceView : System::Web::UI::DataSourceView, System::Web::UI::IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 컨트롤을 지원하고 데이터 바인딩된 컨트롤에서 관계형 데이터베이스에 대해 SQL 데이터 작업을 수행하는 데 필요한 인터페이스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스는 기본적으로 사용 하도록 데이터 바인딩된 컨트롤에서 및 페이지 코드에서 프로그래밍 가능한 개체로 사용 되지 않습니다.  
  
 ASP.NET 데이터 소스 컨트롤의 데이터를 데이터 원본 뷰 개체를 나타내는 하나 이상의 목록을 포함 합니다. <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스 확장은 <xref:System.Web.UI.DataSourceView> 클래스의 기능을 정의 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 된 연결, 이므로 데이터 소스 제어에 대 한 기본 데이터 기능을 구현 합니다. <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스에 대 한 데이터 기능을 구현 하는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤을 포함 하 여는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>, <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>, <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>, 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 작업, 정렬, 필터링 및 보기에 유지 되는 설정 관리 상태입니다.  
  
 하지만 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체에서 페이지 개발자에 게 직접 노출 되지 않은 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤 속성 중 대부분은 합니다. 데이터 원본 뷰를 수행 하는 가장 기본적인 작업을 사용 하 여 원본 데이터베이스에서 데이터를 검색 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 를 검색 하는 메서드는 <xref:System.Collections.IEnumerable> 데이터 항목의 컬렉션입니다. <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스 구현 SQL 쿼리를 사용 하 여 관계형 데이터베이스에서 데이터를 검색 합니다. 유연성 및 보안에 대 한 SQL 쿼리를 매개 변수화 할 수 있습니다. 다음 데이터 검색 메서드, 속성 및 이벤트 구현한는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 직접 노출 하 고 해당 <xref:System.Web.UI.WebControls.SqlDataSource> 페이지 개발자와 다른 호출자에 게 제어:  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> 이벤트  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selected> 이벤트  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체 SQL 명령을 사용 하 여 관계형 데이터베이스의 데이터 업데이트를 지원 합니다. SQL 명령 유연성 및 보안에 대 한 매개 변수화 할 수 있습니다. 와 같은 데이터 바인딩된 컨트롤에서 <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView>, 자동으로 사용 하 여 업데이트를 수행 하도록 구성할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView>다른 컨트롤과 달리, 합니다. 다음 업데이트 메서드, 속성 및 이벤트에서 구현 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 직접 노출 하 고 해당 <xref:System.Web.UI.WebControls.SqlDataSource> 페이지 개발자와 다른 호출자에 게 제어:  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updating> 이벤트  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 이벤트  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 관계형 데이터베이스에 새 데이터 행을 삽입을 지원 합니다. 에 지정 된 SQL 명령을 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 유연성 및 보안 속성을 매개 변수화 할 수 있습니다. 와 같은 데이터 바인딩된 컨트롤에서 <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView>, 자동으로 사용 하 여 삽입을 수행 하도록 구성할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView>다른 컨트롤과 달리, 합니다. 다음 삽입 메서드, 속성 및 이벤트를 구현 하 여는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 직접 노출 하 고 해당 <xref:System.Web.UI.WebControls.SqlDataSource> 페이지 개발자와 다른 호출자에 게 제어:  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> 이벤트  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체도 관계형 데이터베이스에서 데이터 삭제를 지원 합니다. 다른 명령과 마찬가지로 SQL 명령에 지정 된 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 유연성 및 보안 속성을 매개 변수화 할 수 있습니다. 와 같은 데이터 바인딩된 컨트롤에서 <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView>, 자동으로 사용 하 여 삭제를 수행 하도록 구성할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView>다른 컨트롤과 달리, 합니다. 다음 메서드, 속성을 삭제 하 고 이벤트를 구현 하 여는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 직접 노출 하 고 해당 <xref:System.Web.UI.WebControls.SqlDataSource> 페이지 개발자와 다른 호출자에 게 제어:  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 속성  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 이벤트  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> 이벤트  
  
 데이터 검색은 데이터를 검색 하는 동안 데이터를 필터링 하는 데 사용 되는 절이 동적 더 강력 합니다. 즉, 여기서 절이 같이 유연 하 고 SQL 쿼리로 강력한 WHERE 절의 값 Web Forms 페이지에 있는 컨트롤에 표시 되는 값과 같은 변경할 수 있는 값은 바인딩할에 정적 SQL 쿼리 합니다. SQL 다시 작성 하지 않고 쿼리 설정 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 사용할 수 있습니다 모든 페이지 로드 시 속성을는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 속성 데이터 검색에 동적 필터링을 적용 합니다. 이러한 속성으로 구현 됩니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 직접 노출 하 고 해당 <xref:System.Web.UI.WebControls.SqlDataSource> 데이터 바인딩된 컨트롤 및 다른 호출자에 게 제어 합니다.  
  
 검색 하는 데이터를 정렬할 수는 <xref:System.Web.UI.WebControls.SqlDataSource> 에서 순서가 지정 하면에 대 한 데이터를 검색 하는 경우 데이터베이스는 ORDER BY 절을 추가 하거나 검색 된 후 메모리에 데이터를 정렬 하 여 제어 합니다. 에 정렬 식을 제공할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 설정 하 여는 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 의 속성은 <xref:System.Web.UI.DataSourceSelectArguments> 에 전달 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 메서드. 에 대 한 구문은 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 속성에 대 한 구문과 동일은 <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> 속성입니다. 저장된 프로시저를 사용 하 여 데이터를 검색 하는 경우 사용할 수도 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성을 지정 하는 저장된 프로시저 호출의 결과 정렬 하기 위해 사용 되는 매개 변수입니다.  
  
 둘 이상의 사용자 데이터베이스를 동시에 변경할 수, 하는 경우 동시성 충돌 가능성이 있습니다. <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤에 컨트롤 동시성을 통해는 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=nameWithType> 속성입니다. 기능에서 구현 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=nameWithType> 속성입니다.  
  
 다른 많은 웹 서버 컨트롤과 같이 <xref:System.Web.UI.WebControls.SqlDataSourceView> 구현 하는 <xref:System.Web.UI.IStateManager> 인터페이스 및 사용 하 여 뷰 페이지 요청에 대해 해당 상태를 추적 하는 상태입니다. 구현에서 <xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A> 및 속성 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>, <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>, 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A> 컨트롤의 뷰 상태 추적을 사용 하도록 설정 하려면 메서드가 제공 됩니다. 자세한 내용은 참조 [ASP.NET 상태 관리 개요](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSourceView (System.Web.UI.WebControls.SqlDataSource owner, string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.SqlDataSource owner, string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As SqlDataSource, name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSourceView(System::Web::UI::WebControls::SqlDataSource ^ owner, System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.SqlDataSource" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />가 연결된 데이터 소스 컨트롤입니다.</param>
        <param name="name">소유하고 있는 데이터 소스 컨트롤의 범위 내에 있는 데이터 소스 뷰의 고유한 이름입니다.</param>
        <param name="context">현재 <see cref="T:System.Web.HttpContext" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤을 현재 뷰의 소유자로 설정하여 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.%23ctor%2A> 생성자는 <xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A> 지정 된 데이터 원본 뷰의 새 인스턴스를 반환 하는 메서드 `name` 매개 변수입니다. <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤이 하나만와 연결 되어 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체, 한 번에 한 항상 해당 뷰 이름을 `Table`이 명명 언제나 하지만는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 하지는 <xref:System.Web.UI.WebControls.SqlDataSourceView>합니다. 재정의할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A> 다른 명명 규칙을 사용 하 여 뷰를 지원 하도록 메서드.  
  
 <xref:System.Web.HttpContext> 으로 전달 되는 개체는 `context` 매개 변수는 사용 데이터 원본 뷰 액세스 매개 변수 개체와 같은 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 컬렉션에 포함된 매개 변수가 <see langword="null" />일 때 데이터 검색 작업이 취소되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 컬렉션에 포함된 매개 변수가 <see langword="true" />일 때 검색 작업이 취소되는 경우 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public override bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanDelete { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤과 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 삭제 작업을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          작업이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete%2A> 속성에서 반환 `true` 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 속성을 설정 합니다. 모든 데이터 속성이 설정 되어 있지 않거나 올바르게 설정 되지 않은 삭제 작업이 실패할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public override bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanInsert { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체와 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 삽입 작업을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          작업이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert%2A> 속성에서 반환 `true` 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 속성을 설정 합니다. 모든 데이터 속성이 설정 되지 않은 또는 올바르게 설정 되지 않은 경우에 삽입 작업이 실패할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public override bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanPage { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체와 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 검색된 데이터의 페이징 작업을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          모든 경우에 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체 페이징을 지원 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.StartRowIndex" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.MaximumRows" />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public override bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRetrieveTotalRowCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRetrieveTotalRowCount { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤과 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 데이터 집합과 총 데이터 행 수에 대한 검색을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          모든 경우에 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체가 행 개수 검색을 지원 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤과 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 검색된 데이터에 대한 정렬된 뷰를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          정렬이 지원되는 경우에는 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanSort%2A> 속성에서 반환 `true`경우 현재 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 속성이로 설정 되는 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 값 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.SortExpression" />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public override bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanUpdate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤과 연결된 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 개체가 업데이트 작업을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          작업이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate%2A> 속성에서 반환 `true` 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 속성을 설정 합니다. 모든 데이터 속성이 설정 되어 있지 않거나 올바르게 설정 되지 않은 삭제 작업이 실패할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>작업 시간 동안 내부 데이터베이스의 행 데이터가 변경된 경우 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 컨트롤이 업데이트 및 삭제를 수행하는 방법을 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.ConflictOptions" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성에 이전 및 새 값에 대 한 매개 변수 적용 되었는지 여부를 결정은 `Update` 메서드. 예를 들어, 즉 명령으로 지정 된는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 속성에서 반환은 <xref:System.Data.DataSet> 열이 포함 된 개체 `Name` 및 `Number`, 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성이로 설정 되어는 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 값에 대 한 매개 변수를 생성 됩니다 `Name` 및 `Number` 업데이트 작업에 대 한 합니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성이로 설정 되어는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값 매개 변수가 대해 만들어진 `Name`, `Number`, `original_Name`, 및 `original_Number`합니다. (원래 값에 대 한 정확한 이름은 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>.) 그런 다음 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체 인지 여부를 확인 메서드는에 지정 된는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 속성에 일치 하는 매개 변수가 있습니다.  
  
 동시성 제어는 데이터 저장소가 데이터 읽기 및 여러 클라이언트가 액세스 하 고 동일한 데이터를 조작 하는 경우 저장소에서 변경 방법을 제어 하는 데 사용 하는 방법. 예를 들어 하나의 클라이언트 데이터 읽고는 사용자에 게 제공 하는 동안 다른 클라이언트가 동일한 데이터를 읽는 다른 사용자에 게 제공 합니다. 두 사용자가 데이터를 업데이트 하는 데이터 저장소에 제출 하는 경우 두 클라이언트 모두 동일한 데이터에 대해 서로 다른 값을 업데이트할 수 없기 때문에 예기치 않은 결과가 발생할 수 있습니다. 충돌로 간주 됩니다. 설정 하 여는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성을는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값을 업데이트 작업을 비교할 수 충돌을 감지 하 고 처리할 필요에 따라 데이터 원본에 이전 및 새 값입니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">선택한 값이 <see cref="T:System.Web.UI.ConflictOptions" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see cref="T:System.Collections.IDictionary" /> 작업에서 삭제할 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />의 개체 또는 행 키 값입니다.</param>
        <param name="oldValues">
          <see cref="T:System.Collections.IDictionary" /> 속성이 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 값으로 설정된 경우에만 계산되는 행 값이 포함된 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" />입니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 컬렉션에 지정된 매개 변수와 지정된 <paramref name="keys" /> 및 <paramref name="oldValues" /> 컬렉션의 값을 사용하여 삭제 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스에서 삭제되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 메서드 호출의 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A> 전달 하는 메서드는 `keys` 및 `oldValues` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우  
  
 \- 또는 -  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 속성이 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 값으로 설정되고 전달된 <paramref name="oldValues" /> 매개 변수가 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 속성은 <see langword="false" />입니다.</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />에서 내부 데이터베이스의 데이터를 삭제하는 데 사용하는 SQL 문자열을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />에서 데이터를 삭제하는 데 사용하는 SQL 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터베이스 제품마다 다양한 SQL을 사용하기 때문에 SQL 문자열의 구문은 현재 사용 중인 ADO.NET 공급자(<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성으로 식별 가능)에 따라 달라집니다.  
  
 SQL 문자열이 매개 변수가 있는 쿼리나 명령인 경우 매개 변수의 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 달라집니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=nameWithType>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 클래스 매개 변수의 자리 표시자는 `'@parameterName'`합니다. 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=nameWithType> 또는 <xref:System.Data.OleDb?displayProperty=nameWithType>, 매개 변수의 자리 표시자는 `'?'`합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 기본 데이터베이스에서는 저장된 프로시저를 지원 하는 경우 SQL 문자열 또는 저장된 프로시저의 이름이 될 수 있습니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Northwind 데이터베이스의 Orders 테이블에서 주문을 삭제 하는 텍스트입니다. 데이터는 Orders 테이블에서 검색 되어에 표시 되는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 렌더링는 **삭제** 자동으로 단추 때는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 속성이 `true` 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 컬렉션과 호출은 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 메서드 때는 **삭제** 단추를 클릭 합니다. 마지막으로,이 예에서는 데이터를 삭제 하기 때문에 이벤트 처리기 수행할 삭제 작업 전에 디스크에 데이터베이스를 백업 하려고 추가 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 속성의 텍스트가 SQL 문과 저장 프로시저의 이름 중 어느 것인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">선택한 값이 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삭제 작업이 완료된 경우 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted> 삭제 작업이 완료 된 후의 값을 확인 하는 이벤트 출력 매개 변수입니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 속성에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 매개 변수가 있는 SQL 쿼리를 포함 하는 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter> SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.  
  
 매개 변수 이름은 영향을 받을 수는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 속성; 구체적으로, 기본 키를 식별 하는 이름을 키와 같은 지정 된 사용 하 여는 `DataKeyNames` 또는 삭제에는 데이터 바인딩된 컨트롤의 속성 및 업데이트는 시나리오는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값과 집합이 `oldValues` 해당 데이터 메서드에 전달 됩니다. 형식 문자열의 각 매개 변수 이름에 적용 되는 경우에 `oldValues` 컬렉션입니다.  
  
 ADO.NET 공급자에서 매개 변수의 순서에 따라는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 컬렉션 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=nameWithType> 및 <xref:System.Data.Odbc?displayProperty=nameWithType> 공급자 매개 변수가 있는 SQL 쿼리는 매개 변수가 표시 되는 순서에 따라 컬렉션의 매개 변수를 연결 합니다. <xref:System.Data.SqlClient?displayProperty=nameWithType> 는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 하 고, 매개 변수의 이름을 SQL 쿼리의 자리 표시자와 비교 하 여 컬렉션의 매개 변수를 연결 합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 주문을 Northwind 데이터베이스에서 삭제 하는 텍스트입니다. 데이터는 Orders 테이블에서 검색 하 고에 표시 하는 처음에 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 명시적으로 선언 해야는 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 속성과 호출은 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 와 같은 데이터 바인딩된 컨트롤을 사용 하는 경우 메서드는 <xref:System.Web.UI.WebControls.DropDownList> (컨트롤과 달리와 같은 <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView>는 자동으로 채울는 매개 변수 및 호출 된 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 데이터 소스 제어에서 메서드). 이 예제는 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 이벤트 개인에 게 위임 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 명시적으로 호출 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 의 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삭제 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting> 매개 변수 값의 유효성을 검사 하거나 하기 전에 매개 변수 값을 변경 하려면 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤이 삭제 작업을 수행 합니다.  
  
 이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 따라서 취소할 수 없습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 직접 호출 하 여 작업은 <xref:System.Data.Common.DbCommand.Cancel%2A> 에서 메서드는 <xref:System.Data.Common.DbCommand> 의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 개체입니다. 하지만 설정 하 여 작업을 취소 수는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 를 `true`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 이벤트 삭제 작업이 발생 하기 전에 발생 합니다. 이 예제에서는 Northwind 데이터베이스에서 데이터를 삭제 하기 때문에 프로그램 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 처리기 삭제 작업을 수행 하기 전에 디스크에 데이터베이스를 백업할 수 있도록에 추가 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDelete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteDelete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see cref="T:System.Collections.IDictionary" /> 작업에서 삭제할 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />의 개체 또는 행 키 값입니다.</param>
        <param name="oldValues">
          <see cref="T:System.Collections.IDictionary" /> 속성이 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 값으로 설정된 경우에만 계산되는 행 값이 포함된 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" />입니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 컬렉션에 지정된 매개 변수와 지정된 <paramref name="keys" /> 및 <paramref name="oldValues" /> 컬렉션의 값을 사용하여 삭제 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스에서 삭제되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스는 상속 된 구현 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 메서드는 데이터베이스에서 데이터를 삭제 합니다. 페이지 개발자와 데이터 바인딩된 컨트롤 작성자는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A> 메서드 직접; 대신 사용 하 여 공개적으로 노출 된 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 메서드.  
  
 에 포함 된 값의 `keys` 컬렉션 평가 되 고 포함 된 모든 값과 병합는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 컬렉션입니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값, 값에 포함 된는 `oldValues` 컬렉션으로 지정 된는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 속성 고 병합 됩니다.  
  
 삭제 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting> 이벤트입니다. 이 이벤트는 매개 변수의 값을 확인 하 고 삭제 하기 전에 전처리를 수행할 수를 처리할 수 있습니다.  
  
 삭제 작업을 수행 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체는 <xref:System.Data.Common.DbCommand> 를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 속성을 빌드한 다음 실행의 <xref:System.Data.Common.DbCommand> 기본 데이터베이스에 대 한 개체입니다. 삭제 작업이 완료 된 후의 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted> 이벤트입니다. 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우  
  
 \- 또는 -  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 속성이 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 값으로 설정되고 전달된 <paramref name="oldValues" /> 매개 변수가 없는 경우</exception>
        <exception cref="T:System.Web.HttpException">현재 사용자에게 데이터베이스에 액세스할 수 있는 올바른 권한이 없는 경우  
  
 \- 또는 -  
  
 컨트롤의 인스턴스가 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 컨트롤이고 <see cref="P:System.Web.UI.WebControls.AccessDataSource.DataFile" /> 속성에 지정된 경로에 대한 액세스가 거부된 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 속성은 <see langword="false" />입니다.  
  
 \- 또는 -  
  
 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 컨트롤의 인스턴스를 사용하기 전에 디자이너가 디자인 타임 상대 경로를 올바르게 매핑하지 않은 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected override int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteInsert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteInsert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">삽입 데이터베이스 작업을 수행하기 위해 <see cref="T:System.Collections.IDictionary" /> 속성과 함께 사용되는 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 값입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 속성이 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 컬렉션에 지정된 매개 변수 및 지정된 <paramref name="values" /> 컬렉션의 값을 사용하여 삽입 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스로 삽입되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스는 상속 된 구현 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 메서드는 데이터베이스에 데이터를 삽입 합니다. 페이지 개발자와 데이터 바인딩된 컨트롤 작성자는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A> 메서드 직접; 대신 사용 하 여 공개적으로 노출 된 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드.  
  
 삽입 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting> 이벤트입니다. 이 이벤트는 매개 변수의 값을 확인 하 고 삽입 하기 전에 전처리를 수행할 수를 처리할 수 있습니다.  
  
 삽입 작업을 수행 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체는 <xref:System.Data.Common.DbCommand> 를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> 속성을 빌드한 다음 실행에서 <xref:System.Data.Common.DbCommand> 기본 데이터베이스에 대 한 개체입니다. 삽입 완료 된 후의 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted> 이벤트입니다. 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우</exception>
        <exception cref="T:System.Web.HttpException">현재 사용자에게 데이터베이스에 액세스할 수 있는 올바른 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 속성은 <see langword="false" />입니다.</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ExecuteSelect (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Collections::IEnumerable ^ ExecuteSelect(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">데이터에 대해 기본 데이터 검색 이상의 작업을 요청하는 데 사용되는 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 개체입니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 문자열과 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 컬렉션에 있는 매개 변수를 사용하여 내부 데이터베이스에서 데이터를 검색합니다.</summary>
        <returns>데이터 행의 <see cref="T:System.Collections.IEnumerable" /> 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스는 상속 된 구현 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 메서드는 데이터베이스에서 데이터를 검색 합니다. 페이지 개발자와 데이터 바인딩된 컨트롤 작성자는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 메서드 직접; 대신 사용 하 여 공개적으로 노출 된 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 메서드.  
  
 데이터 검색을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting> 이벤트입니다. 이 이벤트는 매개 변수의 값을 검사 하 고 데이터를 검색 하기 전에 모든 전처리를 수행할 수를 처리할 수 있습니다.  
  
 작업을 수행 하기는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 개체는 <xref:System.Data.Common.DbCommand> 를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>, 기본 데이터베이스에 대해 실행 합니다. 작업이 완료 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSource.Selected> 이벤트입니다. 모든 반환 값, 오류 코드를 검사 하려면이 이벤트를 처리 하 고 후 처리를 수행할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 메서드가 반환 되는 <xref:System.Data.DataView> 경우 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 로 설정 되어 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>, 또는 <xref:System.Data.IDataReader> 개체를 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 로 설정 된 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>합니다. 닫기는 <xref:System.Data.IDataReader> 끝나면 데이터를 읽는 개체입니다.  
  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 로 설정 된 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 캐싱을 사용 하 고, <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 데이터를 검색 하 고 데이터 작업 중에 데이터 캐시를 저장 합니다. 캐시 또는 생성 된 경우 삭제 된 새로 고침의 조합에 의해 지정 된 캐싱 동작에 따라는 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 속성입니다.  
  
> [!IMPORTANT]
>  Windows 인증에서 클라이언트 가장을 사용 하는 첫 번째 사용자 데이터에 액세스 하는 경우 데이터 캐시 됩니다. 다른 사용자가 동일한 데이터를 요청 하는 경우 데이터 캐시에서 검색 됩니다. 데이터에 대 한 사용자의 액세스를 확인 하려면 데이터베이스에 다른 호출 하 여 데이터를 검색 되지 않습니다. 여러 사용자가 데이터에 액세스할 수를 예상 하는 경우 각 검색 데이터베이스의 보안 구성으로 확인 하려면 데이터에 캐싱을 사용 하지 마십시오.  
  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 로 설정 된 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 지정 제공 된 함께 평가 되 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 데이터 검색 작업 동안 데이터의 목록에 결과 필터를 적용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 메서드에 전달된 <paramref name="arguments" />는 검색된 데이터를 페이징 또는 정렬할 수 있도록 데이터 검색 중에 데이터 소스가 일부 추가 작업을 수행해야 하지만 데이터 소스 컨트롤이 필요한 기능을 지원하지 않음을 나타내는 경우  
  
 \- 또는 -  
  
 캐싱이 활성화되었지만 데이터 소스의 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> 속성이 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" />으로 설정되지 않은 경우  
  
 \- 또는 -  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" /> 속성이 설정되어 있지만 <see cref="P:System.Data.SqlClient.SqlCommand.CommandType" />이 <see cref="F:System.Data.CommandType.StoredProcedure" />로 설정되지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException">데이터 소스에서 데이터베이스에 연결할 수 없는 경우  
  
 \- 또는 -  
  
 캐싱이 활성화되었지만 내부 캐시 및 명령 형식이 일치하지 않는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteUpdate (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteUpdate(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">업데이트 데이터베이스 작업을 수행하기 위해 <see cref="T:System.Collections.IDictionary" /> 속성과 함께 사용할 기본 키의 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />입니다. 쿼리에 연결된 키가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 속성이 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <param name="values">업데이트 데이터베이스 작업을 수행하기 위해 <see cref="T:System.Collections.IDictionary" /> 속성과 함께 사용할 값의 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />가 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <param name="oldValues">데이터베이스의 원래 값을 나타내는 <see cref="T:System.Collections.IDictionary" />입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 속성이 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 컬렉션에 지정된 매개 변수, 지정된 <paramref name="keys" />, <paramref name="values" /> 및 <paramref name="oldValues" /> 컬렉션의 값을 사용하여 업데이트 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스에서 업데이트되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스는 상속 된 구현 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 메서드는 데이터베이스의 데이터를 업데이트 합니다. 페이지 개발자와 데이터 바인딩된 컨트롤 작성자는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 메서드 직접; 대신 사용 하 여 공개적으로 노출 된 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 메서드.  
  
 에 포함 된 값의 `keys` 및 `values` 컬렉션 평가 되 고 포함 된 모든 값과 병합는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 컬렉션입니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성이로 설정 되어 <xref:System.Web.UI.ConflictOptions.CompareAllValues>에 포함 된 값의 `oldValues` 컬렉션으로 지정 된는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 고 병합 됩니다.  
  
 업데이트 작업을 수행 하기 전에 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updating> 이벤트입니다. 매개 변수의 값을 확인 하 고 업데이트 하기 전에 전처리를 수행 하려면이 이벤트를 처리할 수 있습니다.  
  
 작업을 수행 하기는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 빌드는 <xref:System.Data.Common.DbCommand> 를 사용 하 여 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 텍스트와 모든 관련 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 속성을 빌드한 다음 실행에서 <xref:System.Data.Common.DbCommand> 기본 데이터베이스에 대 한 개체입니다. 작업이 완료 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 를 발생 시키는 메서드는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updated> 이벤트입니다. 모든 반환 값과 오류 코드를 검사 하 고 사후 처리를 수행 하려면이 이벤트를 처리할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우  
  
 \- 또는 -  
  
 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 속성이 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 값으로 설정되고 전달된 <paramref name="oldValues" /> 매개 변수가 없는 경우</exception>
        <exception cref="T:System.Web.HttpException">현재 사용자에게 데이터베이스에 액세스할 수 있는 올바른 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 속성은 <see langword="false" />입니다.</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" /> 메서드가 호출될 때 적용되는 필터링 식을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 메서드를 사용하여 데이터가 검색될 때 적용되는 필터링 식을 나타내는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 사용 되는 구문에서 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 속성은 형식 문자열 스타일 구문입니다. 매개 변수를 포함할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 속성입니다. 매개 변수 형식의 문자열 또는 문자 이면 매개 변수를 작은따옴표로 묶어야 합니다. 매개 변수가 숫자 형식인 경우에 인용 부호를 필요 하지 않습니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 에 있는 자리 표시자에 대 한 계산 되는 매개 변수를 포함 하는 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> 데이터 필터링을 지원 하는 컨트롤의 경우에만 `DataSet` 모드입니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 속성은 뷰 상태에 저장 합니다.  
  
> [!IMPORTANT]
>  클라이언트에서 수신 하는 모든 필터 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값은 필터 식으로 대체 하 고에 적용 됩니다는 <xref:System.Data.DataView> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성으로 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하는 보안 조치입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 Northwind 데이터베이스에서 데이터를 검색 하 고 사용 하 여 필터링 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 속성입니다. <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 의 속성은 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤에는 언제 든 지 적용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 데이터를 검색할 메서드를 실행 합니다. 이 예제는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 속성에 포함 된 필터 매개 변수에 대 한 자리 표시자 포함는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 컬렉션입니다. 이 예제에서 필터 매개 변수는는 <xref:System.Web.UI.WebControls.ControlParameter> 에 바인딩되는 개체는 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> 속성은 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 때문에 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤에 해당 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> 속성이로 설정 `true`, 변경 되는 <xref:System.Web.UI.WebControls.DropDownList> 선택 하면 서버에 게시 하는 페이지 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 새 필터와 데이터 소스 컨트롤에 바인딩됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />가 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 모드일 때 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> 속성이 설정되어 있는 경우 </exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필터 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering> 하기 전에 필터 매개 변수 값에 대해 유효성 검사 작업을 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 필터 작업을 수행 하는 개체입니다. 취소할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 설정 하 여 메서드는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> 개체를 `true`합니다. 경우에 이벤트가 발생 된 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 속성을 설정 합니다.  
  
> [!IMPORTANT]
>  클라이언트에서 수신 하는 모든 필터 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값은 필터 식으로 대체 하 고에 적용 됩니다는 <xref:System.Data.DataView> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성으로 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하는 보안 조치입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 문자열의 모든 매개 변수 자리 표시자와 연결된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에 있는 모든 매개 변수 자리 표시자와 연결된 매개 변수 집합을 포함하는 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 컬렉션에 지정 된 매개 변수와 연결 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 속성입니다. 에 지정 된 매개 변수 자리 표시자는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 순서에 따라 평가 되 고의 매개 변수 개체와 일치 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 컬렉션 때는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 메서드를 호출 합니다.  
  
> [!IMPORTANT]
>  클라이언트에서 수신 하는 모든 필터 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값은 필터 식으로 대체 하 고에 적용 됩니다는 <xref:System.Data.DataView> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성으로 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하는 보안 조치입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 Northwind 데이터베이스에서 데이터를 검색 하 고 사용 하 여 필터링 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 속성입니다. <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 의 속성은 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤에는 언제 든 지 적용 되는 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 데이터를 검색할 메서드를 실행 합니다. 이 예제는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 속성에 포함 된 필터 매개 변수에 대 한 자리 표시자 포함는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 컬렉션입니다. 또한 filter 매개 변수는는 <xref:System.Web.UI.WebControls.ControlParameter> 에 바인딩되는 개체는 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> 의 속성은 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 때문에 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤에 해당 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> 속성이로 설정 `true`, 변경 되는 <xref:System.Web.UI.WebControls.DropDownList> 선택 하면 서버에 대 한 정보를 게시 하는 페이지 및 <xref:System.Web.UI.WebControls.GridView> 함께 데이터 소스 제어에 다시 바인딩하려면 컨트롤의 새 필터입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">삽입 데이터베이스 작업을 수행하는 데 사용할 <see cref="T:System.Collections.IDictionary" /> 속성에 대한 매개 변수의 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />가 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 컬렉션에 지정된 매개 변수 및 지정된 <paramref name="values" /> 컬렉션의 값을 사용하여 삽입 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스로 삽입되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> 메서드 호출의 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A> 전달 하는 메서드는 `values` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 속성은 <see langword="false" />입니다.</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체에서 내부 데이터베이스로 데이터를 삽입하는 데 사용하는 SQL 문자열을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />에서 데이터를 삽입하는 데 사용하는 SQL 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터베이스 제품마다 다양한 SQL을 사용하기 때문에 SQL 문자열의 구문은 현재 사용 중인 ADO.NET 공급자(<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성으로 식별 가능)에 따라 달라집니다. SQL 문자열이 매개 변수가 있는 쿼리나 명령인 경우 매개 변수의 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 달라집니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=nameWithType>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 클래스 매개 변수의 자리 표시자는 `'@parameterName'`합니다. 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=nameWithType> 또는 <xref:System.Data.OleDb?displayProperty=nameWithType>, 매개 변수의 자리 표시자는 `'?'`합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 속성 수 SQL 문자열 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 코드 예제에 사용 하 여 데이터베이스에 데이터를 삽입 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 합니다. 두 번째 코드 예제에 표시를 Microsoft SQL Server에서 데이터를 검색 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 사항을 볼 수는 <xref:System.Web.UI.WebControls.GridView> 및 형태로 새 레코드를 삽입 합니다.  
  
 사용 하 여 데이터베이스에 데이터를 삽입 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 합니다. 에 테이블의 현재 데이터가 표시 됩니다는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 값을 입력 하 여 새 레코드를 추가할 수는 <xref:System.Web.UI.WebControls.TextBox> 컨트롤과 클릭 한 다음는 **삽입** 단추입니다. 때는 **삽입** 단추를 클릭 하면, 지정 된 값 데이터베이스에 삽입 되 고 <xref:System.Web.UI.WebControls.DropDownList> 가 새로 고쳐집니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 다음 코드 예제에 표시를 SQL Server에서 데이터를 검색 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 사항을 볼 수는 <xref:System.Web.UI.WebControls.GridView> 및 형태로 새 레코드를 삽입 합니다.  
  
 데이터에 표시 되는 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤과의 선택된 된 행은 <xref:System.Web.UI.WebControls.GridView> 에 표시 됩니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 서로 다른 데이터를 사용 하 여 연결 된 하나, 소스 제어는 <xref:System.Web.UI.WebControls.DetailsView> 에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 의 선택된 된 행 되도록 하는 속성은 <xref:System.Web.UI.WebControls.GridView> 은 표시 합니다.  
  
 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 레코드를 삽입 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 바인딩된 열과 호출에서 값을 사용 하 여 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드. <xref:System.Web.UI.WebControls.DetailsView> 에서 올바른 매개 변수를 유추할 수 <xref:System.Web.UI.WebControls.BoundField> 개체 및에 대 한 매개 변수는 <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 양방향 데이터 바인딩을 구문이 사용 되는 경우 개체입니다. 이 예제에 추가 매개 변수 추가 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 저장된 프로시저에서 반환 되는 기본 키를 처리 하는 이벤트 처리기입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 속성의 텍스트가 SQL 문과 저장 프로시저의 이름 중 어느 것인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나입니다. 값은 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 표시를 Microsoft SQL Server에서 데이터를 검색 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 사항을 볼 수는 <xref:System.Web.UI.WebControls.GridView> 및 형태로 새 레코드를 삽입 합니다.  
  
 <xref:System.Web.UI.WebControls.GridView> 컨트롤에 데이터 집합을 표시 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에는 특정 행에 대 한 세부 정보가 표시 됩니다. 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 설정 저장된 프로시저 이름을 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 속성을 설정 하 여 저장 프로시저로 식별 되 고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> 속성을는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 값입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">선택한 값이 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted> 삽입 작업이 완료 된 후의 값을 확인 하는 이벤트 출력 매개 변수입니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 Microsoft SQL Server에서 데이터를 검색 하 고에 표시 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. 또한이 예제에서는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 정보를 표시 하는 <xref:System.Web.UI.WebControls.GridView>, 형태로 새 레코드를 삽입 하 고 있습니다.  
  
 데이터에 표시 되는 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤과의 선택된 된 행은 <xref:System.Web.UI.WebControls.GridView> 에 표시 됩니다는 <xref:System.Web.UI.WebControls.DetailsView>합니다. <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 서로 다른 데이터를 사용 하 여 연결 된 하나, 소스 제어는 <xref:System.Web.UI.WebControls.DetailsView> 에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 의 선택된 된 행 되도록 하는 속성은 <xref:System.Web.UI.WebControls.GridView> 은 표시 합니다.  
  
 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 레코드를 삽입 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 바인딩된 열과 호출에서 값을 사용 하 여 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드. <xref:System.Web.UI.WebControls.DetailsView> 에서 올바른 매개 변수를 유추할 수 <xref:System.Web.UI.WebControls.BoundField> 개체 및에 대 한 매개 변수는 <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 양방향 데이터 바인딩을 구문이 사용 되는 경우 개체입니다. 이 예제에 추가 매개 변수 추가 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 저장된 프로시저에서 반환 되는 기본 키를 처리 하는 이벤트 처리기입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting> 매개 변수 값의 유효성을 검사 하거나 하기 전에 매개 변수 값을 변경 하려면 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤 삽입 작업을 수행 합니다.  
  
 이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 직접 호출 하 여 데이터베이스 작업을 취소할 수 없습니다 따라서는 <xref:System.Data.Common.DbCommand.Cancel%2A> 에서 메서드는 <xref:System.Data.Common.DbCommand> 의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 개체입니다. 그러나 설정 하 여 데이터베이스 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 를 `true`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 Microsoft SQL Server에서 데이터를 검색에 표시 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. 또한이 예제에서는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 정보를 표시 하는 <xref:System.Web.UI.WebControls.GridView>, 형태로 새 레코드를 삽입 하 고 있습니다.  
  
 데이터에 표시 되는 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤과의 선택된 된 행은 <xref:System.Web.UI.WebControls.GridView> 에 표시 됩니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 서로 다른 데이터를 사용 하 여 연결 된 하나, 소스 제어는 <xref:System.Web.UI.WebControls.DetailsView> 에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 의 선택된 된 행 되도록 하는 속성은 <xref:System.Web.UI.WebControls.GridView> 은 표시 합니다.  
  
 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 레코드를 삽입 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 바인딩된 열과 호출에서 값을 사용 하 여 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드. <xref:System.Web.UI.WebControls.DetailsView> 에서 올바른 매개 변수를 유추할 수 <xref:System.Web.UI.WebControls.BoundField> 개체 및에 대 한 매개 변수는 <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 양방향 데이터 바인딩을 구문이 사용 되는 경우 개체입니다. 이 예제에 추가 매개 변수 추가 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 저장된 프로시저에서 반환 되는 기본 키를 처리 하는 이벤트 처리기입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 속성에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 매개 변수가 있는 SQL 쿼리를 포함 하는 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter> SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.  
  
 ADO.NET 공급자에서 매개 변수의 순서에 따라는 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> 컬렉션 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=nameWithType> 및 <xref:System.Data.Odbc?displayProperty=nameWithType> 공급자 매개 변수가 있는 SQL 쿼리에 표시 되는 매개 변수 순서에 따라 컬렉션의 매개 변수를 연결 합니다. <xref:System.Data.SqlClient?displayProperty=nameWithType> 는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
   
  
## Examples  
 사용 하 여 데이터베이스에 데이터를 삽입 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 및 간단한 Web Forms 페이지. 에 테이블의 현재 데이터가 표시 됩니다는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 값을 입력 하 여 새 레코드를 추가할 수는 <xref:System.Web.UI.WebControls.TextBox> 컨트롤과 클릭 한 다음는 **삽입** 단추입니다. 때는 **삽입** 단추를 클릭 하면, 지정 된 값 데이터베이스에 삽입 되 고 <xref:System.Web.UI.WebControls.DropDownList> 가 새로 고쳐집니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체가 해당 뷰 상태의 변경 내용을 저장하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          데이터 소스 뷰에서 해당 상태를 저장하도록 표시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">복원할 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 상태를 나타내는 개체입니다.</param>
        <summary>데이터 소스 뷰를 이전에 저장된 뷰 상태로 복원합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 주로 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 인프라 하며 사용자 코드에서 직접 사용할 수 없습니다.  그러나 컨트롤 개발자가 사용자 지정 서버 컨트롤에서 해당 뷰 상태를 복원 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다. 자세한 내용은 참조 [ASP.NET 상태 관리 개요](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)합니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A> 메서드 복원에 대 한 뷰 상태 정보는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 에서 저장 된 이전 페이지 요청에서 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 또는 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 메서드에 전달된 모든 매개 변수의 이름에 적용할 서식 문자열을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 또는 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 메서드에 전달된 모든 <paramref name="oldValues" /> 매개 변수의 이름에 적용된 서식 문자열을 나타내는 문자열입니다. 기본값은 "{0}"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 형식 문자열이으로 식별 하는 것과 같은 기본 키에 적용 되는 `DataKeyNames` 되거나 삭제 된 데이터 바인딩 컨트롤의 속성 업데이트 시나리오 및 위치는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 속성이로 설정 되는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값 및 설정 `oldValues` 해당 데이터 메서드에 전달 됩니다. 형식 문자열의 각 매개 변수 이름에 적용 되는 경우에 `oldValues` 컬렉션입니다. 자세한 내용은 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=nameWithType>을 참조하세요.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" /> 컨트롤이 삭제 작업을 완료한 후에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" /> 컨트롤이 삭제 작업을 시도하기 바로 전에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 하기 전에 발생 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 작업도 발생 하지 않습니다. 이 예제에서는 Northwind 데이터베이스에서 데이터를 삭제 하기 때문에 프로그램 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 처리기를 추가 하는 delete를 수행 하기 전에 디스크에 데이터베이스를 백업 하려고 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFiltering">
      <MemberSignature Language="C#" Value="protected virtual void OnFiltering (System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFiltering(class System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFiltering (e As SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFiltering(System::Web::UI::WebControls::SqlDataSourceFilteringEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" /> 컨트롤이 선택 작업의 결과를 필터링하기 전에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnInserted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" /> 컨트롤이 삽입 작업을 완료한 후에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에 표시를 Microsoft SQL Server에서 데이터를 검색 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 사항을 볼 수는 <xref:System.Web.UI.WebControls.GridView> 및 형태로 새 레코드를 삽입 합니다.  
  
 데이터에 표시 되는 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤과의 선택된 된 행은 <xref:System.Web.UI.WebControls.GridView> 에 표시 됩니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 서로 다른 데이터를 사용 하 여 연결 된 하나, 소스 제어는 <xref:System.Web.UI.WebControls.DetailsView> 에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 의 선택된 된 행 되도록 하는 속성은 <xref:System.Web.UI.WebControls.GridView> 은 표시 합니다.  
  
 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 레코드를 삽입 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 바인딩된 열과 호출에서 값을 사용 하 여 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드. <xref:System.Web.UI.WebControls.DetailsView> 에서 올바른 매개 변수를 유추할 수 <xref:System.Web.UI.WebControls.BoundField> 개체 및에 대 한 매개 변수는 <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 양방향 데이터 바인딩을 구문이 사용 되는 경우 개체입니다. 이 예제에 추가 매개 변수 추가 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 저장된 프로시저에서 반환 되는 기본 키를 처리 하는 이벤트 처리기입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnInserting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" /> 컨트롤이 삽입 작업을 시도하기 전에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에 표시를 Microsoft SQL Server에서 데이터를 검색 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤에서 선택한 행의 세부 사항을 볼 수는 <xref:System.Web.UI.WebControls.GridView> 및 형태로 새 레코드를 삽입 합니다.  
  
 데이터에 표시 되는 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤과의 선택된 된 행은 <xref:System.Web.UI.WebControls.GridView> 에 표시 됩니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 서로 다른 데이터를 사용 하 여 연결 된 하나, 소스 제어는 <xref:System.Web.UI.WebControls.DetailsView> 에 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 의 선택된 된 행 되도록 하는 속성은 <xref:System.Web.UI.WebControls.GridView> 은 표시 합니다.  
  
 자동으로 생성 된 클릭 **삽입** 의 단추는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤의 <xref:System.Web.UI.WebControls.DetailsView> 새 레코드를 삽입 하는 데 사용 되는 다른 사용자 인터페이스를 보여 줍니다. 이 예제에서는 저장된 프로시저를 사용 하 여 레코드를 삽입 하 고 삽입된 된 행의 기본 키를 반환 합니다. 레코드를 삽입 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 바인딩된 열과 호출에서 값을 사용 하 여 컬렉션의 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 메서드. <xref:System.Web.UI.WebControls.DetailsView> 에서 올바른 매개 변수를 유추할 수 <xref:System.Web.UI.WebControls.BoundField> 개체 및에 대 한 매개 변수는 <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 양방향 데이터 바인딩을 구문이 사용 되는 경우 개체입니다. 이 예제에 추가 매개 변수 추가 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 저장된 프로시저에서 반환 되는 기본 키를 처리 하는 이벤트 처리기입니다.  
  
 마지막으로, 하 여 데이터를 삽입 한 후는 <xref:System.Web.UI.WebControls.DetailsView> 제어 데이터베이스에는 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 처리 하기 위해 이벤트 처리기가 호출는 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 이벤트, 삽입된 된 행의 기본 키의 값이 표시 됩니다, 그리고 및 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 는 의메서드<xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 새로 고치려면 명시적으로 호출 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelected">
      <MemberSignature Language="C#" Value="protected virtual void OnSelected (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelected(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelected (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelected(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" /> 컨트롤이 데이터 검색 작업을 완료한 후에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelecting">
      <MemberSignature Language="C#" Value="protected virtual void OnSelecting (System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelecting(class System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelecting (e As SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelecting(System::Web::UI::WebControls::SqlDataSourceSelectingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" /> 컨트롤이 데이터 검색 작업을 시도하기 전에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdated (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdated(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdated (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdated(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" /> 컨트롤이 업데이트 작업을 완료한 후에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에 표시 하 고의 ODBC 데이터베이스에서 검색 된 데이터를 업데이트 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. 레코드를 업데이트 한 후의 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 알림 전자 메일 메시지를 보내는 위치는 후 처리 단계를 수행 하는 이벤트 처리기 이벤트를 처리 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 파생된 클래스에서 메서드를 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdating (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdating(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdating (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdating(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" /> 컨트롤이 업데이트 작업을 시도하기 바로 전에 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 Microsoft SQL Server 데이터베이스에서 검색 된 데이터를 표시 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.DropDownList> 제어 하 고 사용 하 여 레코드 업데이트는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다. 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Data.Common.DbTransaction> 사용 하는 경우 트랜잭션 컨텍스트를 추가 하는 개체는 <xref:System.Web.UI.WebControls.SqlDataSource> 데이터를 업데이트 하는 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 파생된 클래스에서 호출 해야는 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 메서드는 기본 클래스 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParameterPrefix">
      <MemberSignature Language="C#" Value="protected virtual string ParameterPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ParameterPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ ParameterPrefix { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>매개 변수가 있는 SQL 쿼리에 있는 매개 변수 자리 표시자의 접두사를 지정하는 데 사용되는 문자열을 가져옵니다.</summary>
        <value>"@" 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL 쿼리 및 명령의 매개 변수화 할 수, 쿼리 실행 시 바인딩된 값에 대 한 자리 표시자를 포함 한다는 점에서 합니다. ADO.NET 공급자에 대 한 설정에 따라는 <xref:System.Web.UI.WebControls.SqlDataSource> 으로 식별 되는 컨트롤의 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성을 매개 변수에 의해 평가 되에서 별칭 또는 순서에 의해는 <xref:System.Web.UI.WebControls.ParameterCollection> 개체입니다.  
  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 설정 되어 있지 않거나로 설정 되는 <xref:System.Data.SqlClient?displayProperty=nameWithType>, 매개 변수 별칭으로 평가 되며 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 속성 매개 변수 접두사를 추가 하는 데 사용 됩니다는 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 각 속성 <xref:System.Web.UI.WebControls.Parameter> 개체에 <xref:System.Web.UI.WebControls.ParameterCollection> 데이터 중 검색 또는 데이터 조작 작업입니다. 경우는 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성이로 설정 되는 <xref:System.Data.OleDb?displayProperty=nameWithType> 또는 <xref:System.Data.Odbc?displayProperty=nameWithType>, 매개 변수 순서에 따라 평가 됩니다 및 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 및 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 속성은 무시 됩니다.  
  
 확장 하는 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView> 클래스를 재정의할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 이외의 다른 접두사를 제공 하는 속성은 `"@"` 문자열, 필요한 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseUnsupportedCapabilityError">
      <MemberSignature Language="C#" Value="protected internal override void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RaiseUnsupportedCapabilityError(valuetype System.Web.UI.DataSourceCapabilities capability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RaiseUnsupportedCapabilityError (capability As DataSourceCapabilities)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RaiseUnsupportedCapabilityError(System::Web::UI::DataSourceCapabilities capability);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="System.Web.UI.DataSourceCapabilities" />
      </Parameters>
      <Docs>
        <param name="capability">뷰가 지원하는 기능과 비교되는 <see cref="T:System.Web.UI.DataSourceCapabilities" /> 값 중 하나입니다.</param>
        <summary>
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 작업에 대해 요청된 기능을 뷰에서 지원하고 <see cref="M:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError(System.Web.UI.DataSourceView)" /> 메서드에서 호출하는 기능과 비교합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError%2A> 메서드를 사용 하는 데이터 원본 뷰에서 요소로 표시 되는 데이터 바인딩된 컨트롤에서 요청 하는 기능을 각각 검사는 <xref:System.Web.UI.DataSourceSelectArguments> 에 전달 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 메서드를 이러한 기능을 비교 하 고 기능에서 지 원하는 데이터 원본 뷰. 으로 표현 되는 기능에 대 한는 <xref:System.Web.UI.DataSourceSelectArguments> 개체 및 데이터 원본 뷰에서 지원 되지 않습니다는 <xref:System.NotSupportedException> 예외가 발생 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">데이터 소스에서 선택된 <paramref name="capability" />를 활성화하지 않는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지가 서버에 포스트백된 이후에 발생한 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 컨트롤에 대한 뷰 상태의 변경 사항을 저장합니다.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 뷰 상태의 변경 사항이 포함된 개체를 반환하고, 그렇지 않으면 개체와 연결된 뷰 상태가 없는 경우에는 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 메서드는 주로 컨트롤 개발자가 사용 됩니다.  
  
 뷰 상태는 서버 컨트롤에 대 한 속성 값의 누적 된 것입니다. 이러한 값에 자동으로 배치 되는 <xref:System.Web.UI.Control.ViewState%2A> 인스턴스 서버 컨트롤에 대 한 속성의는 <xref:System.Web.UI.StateBag> 클래스입니다. <xref:System.Web.UI.Control.ViewState%2A> 저장 상태 서버 컨트롤 수명 주기 단계 후에 문자열 개체 그런 다음 서버 컨트롤은 유지에 대 한 값입니다.  
  
 HTML에 저장 된 변수로 저장 상태 서버 컨트롤 수명 주기 단계 후에 유지 되는 문자열 개체 클라이언트에 반환 뷰 상태가 저장 되 면 `Hidden` 요소입니다. 사용자 지정 서버 컨트롤을 만들 경우 재정의 하 여 효율성을 개선할 수 있습니다는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 메서드 및 수정 된 `ViewState` 서버 컨트롤에 대 한 속성입니다. 자세한 내용은 참조 [ASP.NET 상태 관리 개요](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">데이터에 대해 기본 데이터 검색 이상의 작업을 요청하는 데 사용되는 <see cref="T:System.Web.UI.DataSourceSelectArguments" />입니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 문자열과 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 컬렉션에 있는 매개 변수를 사용하여 내부 데이터베이스에서 데이터를 검색합니다.</summary>
        <returns>데이터 행의 <see cref="T:System.Collections.IEnumerable" /> 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 메서드 호출의 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 전달 하는 메서드는 `selectArgs` 매개 변수입니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 메서드가 반환 되는 <xref:System.Data.DataView> 경우 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 속성이로 설정 되어는 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 값 반환는 <xref:System.Data.IDataReader> 경우 개체는 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 속성이로 설정 되어는 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 값입니다. 닫기는 <xref:System.Data.IDataReader> 끝나면 데이터를 읽는 개체입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" /> 메서드에 전달된 <paramref name="selectArgs" />는 검색된 데이터를 페이징 또는 정렬할 수 있도록 데이터 검색 중에 데이터 소스가 일부 추가 작업을 수행해야 하지만 데이터 소스 컨트롤이 필요한 기능을 지원하지 않음을 나타내는 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체에서 내부 데이터베이스의 데이터를 검색하는 데 사용하는 SQL 문자열을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />에서 데이터를 검색하는 데 사용하는 SQL 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터베이스 제품마다 다양한 SQL을 사용하기 때문에 SQL 문자열의 구문은 현재 사용 중인 ADO.NET 공급자(<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성으로 식별 가능)에 따라 달라집니다. SQL 문자열이 매개 변수가 있는 쿼리나 명령인 경우 매개 변수의 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 달라집니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=nameWithType>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 클래스 매개 변수의 자리 표시자는 `'@parameterName'`합니다. 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=nameWithType> 또는 <xref:System.Data.OleDb?displayProperty=nameWithType>, 매개 변수의 자리 표시자는 `'?'`합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 속성 수 SQL 문자열 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.  
  
> [!IMPORTANT]
>  보다 안전한에 대 한 SQL 문과 저장된 프로시저를 사용 하 여 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 속성입니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 텍스트에 표시 하는 Microsoft SQL Server 데이터베이스에서 데이터를 검색 하는 기본 SQL 쿼리를 한 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 두 번째 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 텍스트에 표시 하는 SQL Server 데이터베이스에서 데이터를 검색 하는 저장된 프로시저의 이름으로는 <xref:System.Web.UI.WebControls.DropDownList>합니다.  
  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 텍스트에 표시 하는 SQL Server 데이터베이스에서 데이터를 검색 하는 기본 SQL 쿼리를 한 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. <xref:System.Web.UI.WebControls.Button> 및 <xref:System.Web.UI.WebControls.TextBox> 컨트롤에서 선택한 사용자에 대 한 주소를 업데이트 하는 간단한 인터페이스로 제공 되는 <xref:System.Web.UI.WebControls.DropDownList>합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 텍스트에 표시 하는 SQL Server 데이터베이스에서 데이터를 검색 하는 저장된 프로시저의 이름으로는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 속성 수는 SQL 쿼리 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 속성의 텍스트가 SQL 쿼리와 저장 프로시저의 이름 중 어느 것인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 저장된 프로시저의 이름으로는 텍스트 및 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> 속성을는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 값에 표시 하는 Microsoft SQL Server 데이터베이스에서 데이터를 검색 하는 <xref:System.Web.UI.WebControls.DropDownList>합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">선택한 값이 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selected> 데이터 검색 작업이 완료 된 후의 값을 확인 하는 이벤트 출력 매개 변수입니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting> 매개 변수 값의 유효성을 검사 하거나 하기 전에 매개 변수 값을 변경 하려면 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSource> 데이터 검색을 수행 하는 컨트롤 작업입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 속성에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 매개 변수가 있는 SQL 쿼리를 포함 하는 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter> SQL 문자열의 매개 변수 자리 표시자에 해당 하는 개체입니다.  
  
 ADO.NET 공급자에서 매개 변수의 순서에 따라는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 컬렉션 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=nameWithType> 및 <xref:System.Data.Odbc?displayProperty=nameWithType> 공급자 매개 변수가 있는 SQL 쿼리에 표시 되는 매개 변수 순서에 따라 컬렉션의 매개 변수를 연결 합니다. <xref:System.Data.SqlClient?displayProperty=nameWithType> 는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
   
  
## Examples  
 설정 하 여 Microsoft SQL Server에서 Northwind 데이터베이스에서 데이터를 검색 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> SQL 쿼리의 속성입니다. SQL 쿼리를 매개 변수화 및 자리 표시자에는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 속성에 일치는 <xref:System.Web.UI.WebControls.ControlParameter> 개체에 추가 되는 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 컬렉션입니다. 이러한 방식으로 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤에는 <xref:System.Web.UI.WebControls.ControlParameter> 바인딩된, 기능에 대 한 필터에 표시는 역할을 <xref:System.Web.UI.WebControls.ListBox> 제어 합니다.  
  
> [!NOTE]
>  사용 하는 WHERE 절에 매개 변수가 사용 되기 때문에 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 이 코드 예제는 기능적으로 모두 사용 하 여는 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 및 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>저장 프로시저를 사용하여 데이터 검색을 수행할 때 검색된 데이터를 정렬하는 데 사용하는 저장 프로시저 매개 변수의 이름을 가져오거나 설정합니다.</summary>
        <value>저장 프로시저를 사용하여 데이터 검색을 수행할 때 검색된 데이터를 정렬하는 데 사용하는 저장 프로시저 매개 변수의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성이 확인 된는 SQL 명령이 포함 된만 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 속성은 저장된 프로시저의 이름입니다. 이 예제의 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성이 설정 되어 있으면 저장된 프로시저의 결과 정렬 하는 데 사용 되는 매개 변수의 이름을 포함 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 속성이 설정 되어 있으면 앞에 추가 되는 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성입니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IStateManager.IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />를 참조하세요.</summary>
        <value>
          데이터 소스 뷰에서 해당 상태를 저장하도록 표시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceView> 인스턴스로 캐스팅 되는 <xref:System.Web.UI.IStateManager> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (savedState As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ savedState) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">복원할 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 상태를 나타내는 개체입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />를 참조하세요.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceView> 인스턴스로 캐스팅 되는 <xref:System.Web.UI.IStateManager> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Web.UI.IStateManager.SaveViewState" />를 참조하세요.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 뷰 상태의 변경 사항이 포함된 개체를 반환하고, 그렇지 않으면 개체와 연결된 뷰 상태가 없는 경우에는 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceView> 인스턴스로 캐스팅 되는 <xref:System.Web.UI.IStateManager> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Web.UI.IStateManager.TrackViewState" />를 참조하세요.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.SqlDataSourceView> 인스턴스로 캐스팅 되는 <xref:System.Web.UI.IStateManager> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TrackViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체가 해당 뷰 상태의 변경 사항을 추적하게 되어 이러한 변경 사항이 컨트롤의 <see cref="T:System.Web.UI.StateBag" /> 개체에 저장되며 같은 페이지에서 발생하는 여러 요청에 대해 유지됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">업데이트 데이터베이스 작업을 수행하기 위해 <see cref="T:System.Collections.IDictionary" /> 속성과 함께 사용할 기본 키의 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />입니다. 쿼리에 연결된 키가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />가 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <param name="values">업데이트 데이터베이스 작업을 수행하기 위해 <see cref="T:System.Collections.IDictionary" /> 속성과 함께 사용할 값의 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />가 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <param name="oldValues">데이터베이스의 원래 값을 나타내는 <see cref="T:System.Collections.IDictionary" />입니다. 쿼리에 연결된 매개 변수가 없거나 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />가 매개 변수가 있는 SQL 쿼리가 아닌 경우 <see langword="null" />을 전달합니다.</param>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 문자열, <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 컬렉션에 지정된 매개 변수, 지정된 <paramref name="keys" />, <paramref name="values" /> 및 <paramref name="oldValues" /> 컬렉션의 값을 사용하여 업데이트 작업을 수행합니다.</summary>
        <returns>내부 데이터베이스에서 업데이트되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 메서드 호출의 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 전달 하는 메서드는 `keys`, `values`, 및 `oldValues` 매개 변수입니다. 자세한 내용은 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=nameWithType>을 참조하세요.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤에 데이터를 표시 하는 <xref:System.Web.UI.WebControls.DropDownList> 제어 및 업데이트 데이터 때는 **전송** 단추를 클릭 합니다. <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 매개 변수가 있는 SQL 문 및 두 개의 속성은 <xref:System.Web.UI.WebControls.ControlParameter> 에 매개 변수가 추가 되는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 컬렉션입니다. 때는 **전송** 단추를 클릭 하면는 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 이 이벤트는 호출 하 여 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 메서드 명시적으로 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />가 내부 데이터 소스와 연결될 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 속성은 <see langword="false" />입니다.</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 개체에서 내부 데이터베이스의 데이터를 업데이트하는 데 사용하는 SQL 문자열을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" />에서 데이터를 업데이트하는 데 사용하는 SQL 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터베이스 제품마다 다양한 SQL을 사용하기 때문에 SQL 문자열의 구문은 현재 사용 중인 ADO.NET 공급자(<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 속성으로 식별 가능)에 따라 달라집니다. SQL 문자열이 매개 변수가 있는 쿼리나 명령인 경우 매개 변수의 자리 표시자도 사용 중인 ADO.NET 공급자에 따라 달라집니다. 예를 들어 공급자는 <xref:System.Data.SqlClient?displayProperty=nameWithType>, 하는 기본 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 클래스 매개 변수의 자리 표시자는 `'@parameterName'`합니다. 그러나 공급자로 설정 된 경우는 <xref:System.Data.Odbc?displayProperty=nameWithType> 또는 <xref:System.Data.OleDb?displayProperty=nameWithType>, 매개 변수의 자리 표시자는 `'?'`합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 속성 수 SQL 문자열 또는 저장된 프로시저의 이름을 데이터 원본에서 저장된 프로시저를 지원 합니다.  
  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 속성은 뷰 상태에 저장 합니다.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 코드 예제에서는 설정 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 의 속성은 <xref:System.Web.UI.WebControls.SqlDataSource> 사용 하 여 Microsoft SQL Server 데이터베이스의 데이터를 제어 및 업데이트는 <xref:System.Web.UI.WebControls.GridView> 컨트롤입니다. 두 번째 코드 예제에 사용 하 여 ODBC 데이터베이스에 데이터를 업데이트 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다.  
  
 다음 코드 예제에서는 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 의 속성은 <xref:System.Web.UI.WebControls.SqlDataSource> 사용 하 여 SQL Server 데이터베이스의 데이터를 제어 및 업데이트는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. <xref:System.Web.UI.WebControls.GridView> 제어를 자동으로 채우려고는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 유추에서 매개 변수 컬렉션을는 <xref:System.Web.UI.WebControls.BoundField> 개체를 호출 하는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 메서드 때는 **업데이트** 편집 가능한 에서링크<xref:System.Web.UI.WebControls.GridView> 컨트롤을 선택 합니다. 이 예제에도 일부 사후 처리-레코드를 업데이트 한 후 전자 메일 메시지 알림이 전송 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 다음 코드 예제는 기능적으로 동일 이전 코드 예제를 사용 하 여 ODBC 데이터베이스에서 데이터를 업데이트 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> ODBC 용 ADO.NET 공급자 속성이 <xref:System.Data.Odbc?displayProperty=nameWithType>, 및 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> 속성은 ODBC 데이터 원본 이름 (DSN)의 이름으로 설정 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 속성의 텍스트가 SQL 문과 저장 프로시저의 이름 중 어느 것인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> 속성은 뷰 상태에 저장 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">선택한 값이 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updated> 업데이트 작업이 완료 된 후의 값을 확인 하는 이벤트 출력 매개 변수입니다. 출력 매개 변수는 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 ODBC 데이터베이스에서 검색 된 데이터 표시 및 업데이트 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. 레코드를 업데이트 한 후의 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 알림 전자 메일 메시지를 보내는 위치는 후 처리 단계를 수행 하는 이벤트 처리기 이벤트를 처리 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 속성에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 매개 변수가 있는 SQL 쿼리를 포함 하는 속성의 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 컬렉션에 포함 되어 있는 <xref:System.Web.UI.WebControls.Parameter> SQL 문자열에 있는 매개 변수 자리 표시자에 해당 하는 개체입니다.  
  
 매개 변수 이름은 영향을 받을 수는 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 속성; 구체적으로, 기본 키를 식별 하는 이름을 키와 같은 지정 된 사용 하 여는 `DataKeyNames` 속성에서 삭제 하 고 업데이트 시나리오 여기서는 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 속성이로 설정 되어는 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값 및 집합이 `oldValues` 해당 데이터 메서드에 전달 됩니다. 형식 문자열의 각 매개 변수 이름에 적용 되는 경우에 `oldValues` 컬렉션입니다.  
  
 ADO.NET 공급자에서 매개 변수의 순서에 따라는 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 컬렉션 중요할 수 있습니다. <xref:System.Data.OleDb?displayProperty=nameWithType> 및 <xref:System.Data.Odbc?displayProperty=nameWithType> 공급자 매개 변수가 있는 SQL 쿼리에 표시 되는 매개 변수 순서에 따라 컬렉션의 매개 변수를 연결 합니다. <xref:System.Data.SqlClient?displayProperty=nameWithType> 는 기본 ADO.NET 공급자는 공급자에 대 한는 <xref:System.Web.UI.WebControls.SqlDataSource> 제어 하 고, SQL 쿼리의 자리 표시자 별칭을 가진 매개 변수의 이름과 일치 하 여 컬렉션의 매개 변수를 연결 합니다. 매개 변수가 있는 SQL 쿼리 및 명령에 대 한 자세한 내용은 참조 하십시오. [SqlDataSource 컨트롤에서 매개 변수를 사용 하 여](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤에 데이터를 표시 하는 <xref:System.Web.UI.WebControls.DropDownList> 제어 및 업데이트 데이터 때는 **전송** 단추를 클릭 합니다. <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 매개 변수가 있는 SQL 문 및 두 개의 속성은 <xref:System.Web.UI.WebControls.ControlParameter> 에 매개 변수가 추가 되는 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 컬렉션입니다. 때는 **전송** 단추를 클릭 하면는 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 이 이벤트는 호출 하 여 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 메서드 명시적으로 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updating> 매개 변수 값의 유효성을 검사 하거나 하기 전에 매개 변수 값을 변경 하려면 응용 프로그램에 적용 되는 추가 초기화 작업을 수행 하는 이벤트는 <xref:System.Web.UI.WebControls.SqlDataSource> 컨트롤이 업데이트 작업을 수행 합니다.  
  
 이벤트 처리기 대리자를 호출할 때 데이터 원본에 대 한 연결 열려 아직 있지 않습니다. 직접 호출 하 여 작업을 취소할 수 없습니다 따라서는 <xref:System.Data.Common.DbCommand.Cancel%2A> 에서 메서드는 <xref:System.Data.Common.DbCommand> 의해 노출 되는 개체는 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 개체입니다. 그러나 설정 하 여 데이터베이스 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성은 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 를 `true`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 Microsoft SQL Server 데이터베이스에서 검색 된 데이터를 표시 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.DropDownList> 제어 하 고 사용 하 여 레코드 업데이트는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다. 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Data.Common.DbTransaction> 사용 하는 경우 트랜잭션 컨텍스트를 추가 하는 개체는 <xref:System.Web.UI.WebControls.SqlDataSource> 데이터를 업데이트 하는 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>