<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="baae0ccc49431af72520ecf979643419d693c7e7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>사용자가 서버에 업로드할 파일을 선택하는 데 사용할 수 있는 TextBox 컨트롤과 찾아보기 단추를 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [업로드 된 파일 저장](#saving_uploaded_files)  
  
-   [보안 고려 사항](#security_considerations)  
  
-   [메모리 제한 사항](#memory_limitations)  
  
-   [UpdatePanel 컨트롤에 파일 업로드 컨트롤 사용](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [선언 구문](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.UI.WebControls.FileUpload> 클래스 텍스트 상자 컨트롤 및 클라이언트에서 파일을 선택 하 고 웹 서버에 업로드 하는 데 사용할 수 있는 찾아보기 단추를 표시 합니다. 사용자가 로컬 컴퓨터에서 파일의 전체 경로 입력 하 여 업로드할 파일 지정 (예를 들어 **C:\MyFiles\TestFile.txt**) 컨트롤의 텍스트 상자에 있습니다. 사용자가 클릭 하 여 파일을 선택할 수는 또한는 **찾아보기** 단추를 클릭 한 다음 해당 위치를 찾는에 **파일 선택** 대화 상자.  
  
 사용 하 여는 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 속성을 사용 하 여 업로드할 클라이언트의 파일의 이름을 가져오려면는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. 이 속성을 반환 하는 파일 이름에는 클라이언트에서 파일의 경로 포함 되지 않습니다.  
  
 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 속성 get는 <xref:System.IO.Stream> 업로드할 파일을 가리키는 개체입니다. 이 속성을 사용 하 여 바이트 형식으로 파일의 내용에 액세스할 수 있습니다. 예를 들어, 사용할 수는 <xref:System.IO.Stream> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 바이트 형식으로 파일의 내용을 읽고 바이트 배열에 저장할 속성입니다. 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 파일의 모든 바이트를 검색 하는 속성입니다.  
  
 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성의 내부 가져옵니다 <xref:System.Web.HttpPostedFile> 업로드할 파일에 대 한 개체입니다. 파일에서 추가 속성에 액세스 하려면이 속성을 사용할 수 있습니다. <xref:System.Web.HttpPostedFile.ContentLength%2A> 속성 파일의 길이 가져옵니다. <xref:System.Web.HttpPostedFile.ContentType%2A> 속성 파일의 MIME 콘텐츠 형식을 가져옵니다. 또한 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성에 액세스는 <xref:System.Web.HttpPostedFile.FileName%2A> 속성은 <xref:System.Web.HttpPostedFile.InputStream%2A> 속성 및 <xref:System.Web.HttpPostedFile.SaveAs%2A> 메서드. 하지만 동일한 기능을 제공는 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 속성을는 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 속성 및 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드.  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>업로드 된 파일 저장  
 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤이 자동으로 저장 하지는 파일 서버에 업로드할 파일을 선택한 후 합니다. 명시적으로 컨트롤이 나 사용자 지정된 된 파일을 전송 하도록 허용 하는 메커니즘을 제공 해야 합니다. 예를 들어 파일을 업로드 하는 사용자가 클릭 하는 단추를 제공할 수 있습니다. 지정된 된 파일을 저장 하기 위해 작성 하는 코드를 호출 해야는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 서버에서 파일의 내용이 지정된 된 경로에 저장 합니다. 일반적으로 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드는 서버에 다시 게시를 발생 시키는 이벤트에 대 한 이벤트 처리 메서드에서 호출 됩니다. 예를 들어 파일을 전송 하는 단추를 제공 하는 경우에 click 이벤트에 대 한 이벤트 처리 메서드에 포함 된 파일을 저장 하는 코드를 포함할 수 있습니다.  
  
 호출 하기 전에 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 사용 하 여 서버에 파일을 저장는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 속성을 확인 하는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 파일을 포함 합니다. 경우는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 반환 `true`, 호출 된 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드. 반환 하는 경우 `false`를 사용자에 게 컨트롤 파일이 없습니다 메시지를 표시 합니다. 확인 하지 않습니다는 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 업로드할 파일을 여부를 확인 하려면 속성 기본적으로이 속성에 0 바이트 포함 이기 때문에 존재 합니다. 결과적으로, 경우에는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 비어는 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성이 null이 아닌 값을 반환 합니다.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>보안 고려 사항  
 호출 하는 경우는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 업로드 한 파일을 저장 하는 디렉터리의 전체 경로 지정 해야 합니다. 응용 프로그램 코드에서 경로 명시적으로 지정 하지 않으면 사용자가 파일을 업로드 하려고 할 때 예외가 throw 됩니다. 이 문제는 사용자가 응용 프로그램의 디렉터리 구조에서 임의의 위치에 쓸 수 뿐만 아니라 중요 한 루트 디렉터리에 대 한 액세스를 방지 하지 못하도록 하 여 서버에서 파일을 안전 하는 데 도움이 됩니다.  
  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드는 지정된 된 디렉터리를 업로드 한 파일을 작성 합니다. 따라서 ASP.NET 응용 프로그램 서버에서 디렉터리에 쓰기 권한이 있어야 합니다. 두 가지 방법으로 응용 프로그램 쓰기 액세스를 얻을 수 있습니다. 명시적으로 응용 프로그램이 실행 되 고 있는, 업로드 한 파일을 저장할 디렉터리에서 계정에 대 한 쓰기 액세스를 부여할 수 있습니다. 또는 ASP.NET 응용 프로그램에 부여 되는 신뢰 수준을 높일 수 있습니다. 응용 프로그램에 대 한 실행 디렉터리에 대 한 쓰기를 가져오려는 응용 프로그램을 부여 해야 합니다는 <xref:System.Web.AspNetHostingPermission> 신뢰 수준을 설정 하는 개체는 <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> 값입니다. 신뢰 수준의 늘리면 서버에서 리소스에 대 한 응용 프로그램의 액세스를 증가 합니다. 참고가 아닌지 안전한 방법은 응용 프로그램의 제어권을 얻은 악의적인 사용자도 되므로이 더 높은 신뢰 수준에서 실행할 수 있습니다. 실행할 응용 프로그램에 필요한 최소 권한 가진 사용자의 컨텍스트에서 ASP.NET 응용 프로그램을 실행 하는 것이 좋습니다. ASP.NET 응용 프로그램의 보안에 대 한 자세한 내용은 참조 [웹 응용 프로그램에 대 한 기본 보안 사례](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) 및 [ASP.NET 신뢰 수준과 정책 파일](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1)합니다.  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>메모리 제한 사항  
 보호 하는 한 가지 방법은 서비스 거부 공격이 사용 하 여 업로드할 수 있는 파일의 크기를 제한 하는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. 업로드할 수 있어야 하는 파일의 형식에 대 한 적절 한 크기 제한을 설정 해야 합니다. 기본 크기 제한은 4096 킬로바이트 (KB) 또는 4 메가바이트 (MB)입니다. 더 큰 파일을 설정 하 여 업로드 하도록 허용할 수 있습니다는 `maxRequestLength` 요소의 특성입니다. 전체 응용 프로그램에 대 한 최대 허용 파일 크기를 늘리려면 설정의 `maxRequestLength` Web.config 파일에는 특성입니다. 지정된 된 페이지에 대 한 최대 허용 파일 크기를 늘리려면 설정는 `maxRequestLength` 내 특성의 `location` Web.config의 요소입니다. 예를 들어 참조 [위치 요소 (ASP.NET 설정 스키마)](http://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5)합니다.  
  
 큰 파일을 업로드할 때 사용자 수 또한는 다음과 같은 오류 메시지가 나타납니다.  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 사용자가이 오류 메시지를 발생의 값 늘리기는 `memoryLimit` 특성에 요소는 Web.config 응용 프로그램에 대 한 파일입니다. `memoryLimit` 특성 작업자 프로세스에서 사용할 수 있는 메모리의 최대 크기를 지정 합니다. 작업자 프로세스를 초과 하는 경우는 `memoryLimit` amount를 대체할 새 프로세스가 만들어짐 및 모든 현재 요청은 새 프로세스에 다시 할당 됩니다.  
  
 제어 하려면 설정 요청 처리 되는 동안 메모리에 또는 서버에 저장 된 업로드할 파일을 일시적으로 인지는 `requestLengthDiskThreshold` 요소의 특성입니다. 이 특성을 사용 하면 입력된 스트림 버퍼의 크기를 관리할 수 있습니다. 기본값은 256 바이트입니다. 에 지정 하는 값을 지정한 값을 초과할 수 없습니다는 `maxRequestLength` 특성입니다.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>UpdatePanel 컨트롤에 파일 업로드 컨트롤 사용  
 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 부분 페이지 렌더링 하는 동안 비동기 포스트백 시나리오 아니라 포스트백 시나리오에만 사용할 수 있도록 설계 됩니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 내부는 <xref:System.Web.UI.UpdatePanel> 컨트롤에 있는 컨트롤을 사용 하 여 파일을 업로드 해야 합니다는 <xref:System.Web.UI.PostBackTrigger> 패널에 대 한 개체입니다. <xref:System.Web.UI.UpdatePanel> 컨트롤이는 포스트백을 통해 전체 페이지를 업데이트 하는 대신 페이지의 선택한 영역을 업데이트 하는 데 사용 됩니다. 자세한 내용은 참조 [UpdatePanel 컨트롤 개요](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) 및 [부분 페이지 렌더링 개요](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)합니다.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 소스 코드를 Visual Studio 웹 사이트 프로젝트는이 항목에 수반: [다운로드](http://go.microsoft.com/fwlink/?LinkId=191897)합니다.  
  
 이 섹션에는 다음 4 개의 예제에서는 포함 됩니다.  
  
-   첫 번째 예제를 만드는 방법을 보여는 <xref:System.Web.UI.WebControls.FileUpload> 코드에 지정 된 경로에 파일을 저장 하 합니다.  
  
-   두 번째 예제를 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 응용 프로그램에 대 한 파일 시스템에서 지정된 된 디렉터리에 파일을 저장 하는 컨트롤입니다.  
  
-   세 번째 예제를 만드는 방법을 보여는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 지정 된 경로에 파일을 저장 하 고 업로드할 수 있는 파일의 크기를 제한 합니다.  
  
-   네 번째 예제를 만드는 방법을 보여는 <xref:System.Web.UI.WebControls.FileUpload> 지정된 된 경로에 파일을 저장 하 고 업로드할.xls 또는.doc 파일 이름 확장명을 가진 파일만 허용 하는 컨트롤입니다.  
  
> [!CAUTION]
>  이러한 예제에는 기본 구문을 보여 주는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 있지만 보여 모든 필수 오류 검사 파일을 저장 하기 전에 완료 해야 하는 합니다. 자세한 예제는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>를 참조하십시오.  
  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 코드에 지정 된 경로에 파일을 저장 하 합니다. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 하는 서버에서 지정된 된 경로에 파일을 저장 합니다.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 응용 프로그램에 대 한 파일 시스템에서 지정된 된 디렉터리에 파일을 저장 하는 컨트롤입니다. <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> 속성은 현재 실행 중인 서버 응용 프로그램에 대 한 루트 디렉터리의 실제 파일 시스템 경로 가져오는 데 사용 됩니다. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 하는 서버에서 지정된 된 경로에 파일을 저장 합니다.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 코드에 지정 된 경로에 파일을 저장 하 합니다. 컨트롤을 5로 업로드할 수 있는 파일의 크기를 제한 합니다. <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성을 사용 하는 기본 액세스 <xref:System.Web.HttpPostedFile.ContentLength%2A> 속성 및 파일의 크기를 반환 합니다. 업로드할 파일의 크기는 2MB 보다 작은 경우의 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 하는 서버에서 지정된 된 경로에 파일을 저장 합니다. 응용 프로그램 코드에서 최대 파일 크기 설정을 검사 하는 것 외에도 설정할 수 있습니다는 `maxRequestLength` 응용 프로그램에 대 한 구성 파일에 허용 되는 최대 크기를 요소의 특성입니다.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 코드에 지정 된 경로에 파일을 저장 하 합니다. 이 예제에 업로드할.xls 또는.doc 파일 이름 확장명을 가진 파일만이 있습니다. <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> 메서드는 업로드할 파일의 확장명을 반환 합니다. 파일에 있는 경우.xls 또는.doc 파일 이름 확장명는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 하는 서버에서 지정된 된 경로에 파일을 저장 합니다.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> 의 새 인스턴스를 초기화 하는 생성자는 <xref:System.Web.UI.WebControls.FileUpload> 클래스입니다. <xref:System.Web.UI.WebControls.FileUpload> 컨트롤이 자동으로 저장 하지는 파일 서버에 업로드할 파일을 선택한 후 합니다. 명시적으로 컨트롤이 나 사용자 지정된 된 파일을 전송 하도록 허용 하는 메커니즘을 제공 해야 합니다. 예를 들어 파일을 업로드 하는 사용자가 클릭 하는 단추를 제공할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는의 새 인스턴스를 초기화 하는 <xref:System.Web.UI.WebControls.FileUpload> 클래스입니다. 참고가 예제이에서는 생성자 구문을 보여 주는 하지만 만든 후 컨트롤에 기능을 추가 하지 않습니다.  
  
 이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.WebControls.FileUpload> 클래스입니다.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">클라이언트에서 HTML 콘텐츠를 렌더링하는 데 사용되는 출력 스트림을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 렌더링할 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤의 HTML 특성 및 스타일을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> 메서드는 주로 컨트롤 개발자가 적절 한 특성을 삽입 하 고 스타일을 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> 에 대 한 출력 스트림에 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> 메서드 재정의 <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업로드 시 여러 파일을 선택할 수 있는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>
          여러 파일을 선택할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤을 사용하여 지정된 파일의 바이트 배열을 가져옵니다.</summary>
        <value>지정된 파일의 내용이 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤에 자동으로 파일을 읽을 클라이언트에서. 명시적으로 컨트롤이 나 사용자 지정된 된 파일을 전송 하도록 허용 하는 메커니즘을 제공 해야 합니다. 예를 들어 사용자는 해당 파일을 업로드 하기 위해 클릭할 수 있는 단추를 제공할 수 있습니다. 지정된 된 파일을 저장 하기 위해 작성 하는 코드에서 호출할 수는 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 속성 파일의 내용을 반환 합니다.  
  
 호출 하기 전에 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 속성을 사용할지는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 되었는지 확인 하는 속성은 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤에 업로드할 파일을 포함 합니다. 경우는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 반환 `true`, 호출 된 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 속성입니다. 반환 하는 경우 `false`를 사용자에 게 컨트롤 파일이 없습니다 메시지를 표시 합니다. 파일이 있는지 확인 하려면 오류 처리 코드를 제공 하지 않으면 존재 하지 않는 파일을 저장 하려는 시도가 발생 한 <xref:System.Web.HttpException> 예외입니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. 사용자가 클릭할 때는 **업로드 파일** 단추는 파일의 내용을 페이지에서 텍스트 상자에 바이트 형식으로 표시 됩니다. 사용 하 여이 예제는 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 속성 전체 파일을 업로드 합니다.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">전체 파일을 읽지 못한 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Stream" /> 컨트롤을 사용하여 업로드할 파일을 가리키는 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 개체를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FileUpload" />를 사용하여 업로드할 파일을 가리키는 <see cref="T:System.IO.Stream" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 속성 get는 <xref:System.IO.Stream> 를 사용 하 여 업로드할 파일을 가리키는 개체는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. 사용 하 여는 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 파일의 내용에 액세스 하는 속성입니다. 예를 들어, 사용할 수는 <xref:System.IO.Stream> 바이트 형식으로 파일의 내용을 읽고 바이트 배열에 저장 하려면이 속성에서 반환 되는 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 속성 파일의 내용을 바이트 배열로 읽을을 사용 합니다. 사용자가 클릭할 때는 **업로드 파일** 단추는 파일의 내용을 페이지에서 텍스트 상자에 바이트 형식으로 표시 됩니다.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤을 사용하여 업로드할 클라이언트의 파일 이름을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FileUpload" />를 사용하여 업로드할 클라이언트의 파일 이름을 지정하는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤을 사용하여 업로드할 클라이언트의 파일 이름을 가져옵니다. 파일 이름을 지정 하는 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 클라이언트에 있는 파일의 경로 포함 하지 않는 속성을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 코드에 지정 된 경로에 파일을 저장 하 합니다. <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 업로드할 파일의 이름을 가져올 속성을 사용 합니다. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 클라이언트에서 파일에 동일한 이름을 사용 하 여, 메서드를 호출 하는 서버에서 지정된 된 경로에 파일을 저장 합니다. Note이 예제에서는이 컨트롤의 기본 구문을 보여 주는 하지만 파일을 저장 하기 전에 수행 해야 하는 모든 필수 오류 검사를 보여 주지 않습니다. 자세한 예제는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>를 참조하십시오.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤에 파일이 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FileUpload" />에 파일이 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 속성 나타내는 값을 가져옵니다 여부는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤에 업로드할 파일을 포함 합니다. 이 속성을 사용 하 여 업로드할 파일을 파일에 대 한 작업을 수행 하기 전에 존재 하는지 확인 합니다. 예를 들어 호출 하기 전에 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 는 디스크에 사용 하 여 파일을 저장 하는 메서드는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 파일이 있는지 확인 하는 속성입니다. 경우 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 반환 `true`, 호출 된 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드. 반환 하는 경우 `false`를 사용자에 게 컨트롤 파일이 없습니다 메시지를 표시 합니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 오류 검사를 수행 하는 컨트롤입니다. 파일을 저장 하기 전에 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 메서드를 호출 하는 컨트롤에 업로드할 파일을 포함 되어 있는지 확인 합니다. 또한는 <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> 메서드는 경로 있는 동일한 이름의 파일이 이미 발생 하는지 여부를 확인 합니다. 업로드할 파일의 이름 앞에 밑줄 문자 앞에 그렇지 않으면는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 합니다. 이렇게 하면 기존 파일을을 덮어쓰지 않습니다.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>임의의 파일이 업로드되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          파일이 업로드되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 또한이 메서드 반환 `false` (0 바이트) 하는 빈 파일을 업로드 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" /> 개체입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.Control.PreRender" /> 컨트롤에 대해 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> 메서드 알립니다는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤을 렌더링 콘텐츠와 뷰 상태를 저장 하기 전에 필요한 모든 사전 렌더링 단계를 수행 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤을 사용하여 업로드된 파일의 내부 <see cref="T:System.Web.HttpPostedFile" /> 개체를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.FileUpload" />를 사용하여 업로드된 파일의 <see cref="T:System.Web.HttpPostedFile" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성의 내부 가져옵니다 <xref:System.Web.HttpPostedFile> 를 사용 하 여 업로드 된 파일에 대 한 개체는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤입니다. 업로드 된 파일에서 추가 속성에 액세스 하려면이 속성을 사용 합니다.  
  
 사용할 수는 <xref:System.Web.HttpPostedFile.ContentLength%2A> 파일의 길이 가져올 속성입니다. 사용할 수는 <xref:System.Web.HttpPostedFile.ContentType%2A> MIME 가져올 속성을 콘텐츠 형식 파일입니다. 또한 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성에 액세스는 <xref:System.Web.HttpPostedFile.FileName%2A> 속성은 <xref:System.Web.HttpPostedFile.InputStream%2A> 속성 및 <xref:System.Web.HttpPostedFile.SaveAs%2A> 메서드. 하지만 동일한 기능을 제공는 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 속성을는 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 속성 및 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 제어 합니다. 사용자가 클릭할 때는 **업로드 파일** 단추는 파일의 내용을 페이지에서 텍스트 상자에 바이트 형식으로 표시 됩니다. 사용 하 여이 예제는 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 속성에 액세스는 <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> 속성입니다. <xref:System.Web.HttpPostedFile.ContentLength%2A> 속성 파일 내용을 바이트 배열로 복사 하기 전에 파일의 길이 확인 하는 데 사용 됩니다.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업로드된 파일의 컬렉션을 가져옵니다.</summary>
        <value>업로드된 파일의 컬렉션입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤 콘텐츠를 받는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체입니다.</param>
        <summary>클라이언트에서 렌더링할 콘텐츠를 쓰는 지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 컨트롤 콘텐츠를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.Render%2A> 메서드 보냅니다는 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤 콘텐츠를 지정 된 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> 개체는 클라이언트에서 렌더링할 콘텐츠를 기록 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">업로드된 파일을 저장할 서버의 위치에 대한 전체 경로를 지정하는 문자열입니다.</param>
        <summary>업로드된 파일의 내용을 웹 서버의 지정된 경로에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드 웹 서버에 업로드 된 파일의 내용이 지정된 된 경로에 저장 합니다.  
  
 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤이 자동으로 저장 하지는 파일 서버에 업로드할 파일을 선택한 후 합니다. 명시적으로 컨트롤이 나 사용자 지정된 된 파일을 전송 하도록 허용 하는 메커니즘을 제공 해야 합니다. 예를 들어 파일을 업로드 하는 사용자가 클릭 하는 단추를 제공할 수 있습니다. 지정된 된 파일을 저장 하기 위해 작성 하는 코드를 호출 해야는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 서버에서 파일의 내용이 지정된 된 경로에 저장 합니다. 일반적으로 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드는 서버에 다시 게시를 발생 시키는 이벤트에 대 한 이벤트 처리 메서드에서 호출 됩니다. 예를 들어 파일을 전송 하는 단추를 제공 하는 경우 서버에 파일을 저장 하는 코드 click 이벤트에 대 한 이벤트 처리 메서드 내에 포함 됩니다.  
  
 호출 하는 경우는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 업로드 한 파일을 저장 하는 서버에서 디렉터리의 전체 경로 지정 해야 합니다. 응용 프로그램 코드에서 경로 명시적으로 지정 하지 않는 경우는 <xref:System.Web.HttpException> 사용자가 파일을 업로드 하는 경우 예외가 throw 됩니다. 이 문제는 서버에서 파일을 업로드 하는 파일을 저장할 경로 지정 하려면 사용자가 허용 하지 않도록 보안을 유지 하기 하는 데 도움이 됩니다.  
  
 호출 하기 전에 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 사용할지는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 되었는지 확인 하는 속성은 <xref:System.Web.UI.WebControls.FileUpload> 컨트롤에 업로드할 파일을 포함 합니다. 경우는 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 반환 `true`, 호출 된 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드. 반환 하는 경우 `false`를 사용자에 게 컨트롤 파일이 없습니다 메시지를 표시 합니다. 파일이 있는지 확인 하려면 오류 처리 코드를 제공 하지 않으면 존재 하지 않는 파일을 저장 하려는 시도가 발생 한 <xref:System.Web.HttpException> 예외입니다.  
  
 에 대 한 호출에 대 한는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 작동 하도록 하는 ASP.NET 응용 프로그램 디렉터리에 대 한 쓰기 액세스 서버에 있어야는 합니다. 두 가지 방법으로 응용 프로그램 쓰기 액세스를 얻을 수 있습니다. 명시적으로 응용 프로그램이 실행 되 고 있는, 업로드 한 파일을 저장할 디렉터리에서 계정에 대 한 쓰기 액세스를 부여할 수 있습니다. 또는 ASP.NET 응용 프로그램에 부여 되는 신뢰 수준을 높일 수 있습니다. 응용 프로그램에 대 한 실행 디렉터리에 대 한 쓰기를 가져오려는 응용 프로그램을 부여 해야 합니다는 <xref:System.Web.AspNetHostingPermission> 신뢰 수준을 설정 하는 개체는 <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> 값입니다. 신뢰 수준의 늘리면 서버에서 리소스에 대 한 응용 프로그램의 액세스를 증가 합니다. 참고가 아닌지 안전한 방법은 응용 프로그램의 제어권을 얻은 악의적인 사용자도 되므로이 더 높은 신뢰 수준에서 실행할 수 있습니다. 실행할 응용 프로그램에 필요한 최소 권한을 가진 사용자의 컨텍스트에서 ASP.NET 응용 프로그램을 실행 하는 것이 좋습니다. ASP.NET 응용 프로그램의 보안에 대 한 자세한 내용은 참조 [웹 응용 프로그램에 대 한 기본 보안 사례](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) 및 [ASP.NET 신뢰 수준과 정책 파일](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1)합니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.FileUpload> 오류 검사를 수행 하는 컨트롤입니다. 파일 저장 되기 전에 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 메서드는 업로드할 파일이 있는지 확인 하십시오. 또한는 <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> 메서드를 호출 하는 파일이 이미 이름이 같은 경로에 있는지 확인 합니다. 업로드할 파일의 이름 앞에 있는 번호 접두사로 헤더가 있으면는 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 메서드를 호출 합니다. 이렇게 하면 기존 파일을을 덮어쓰지 않습니다.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="filename" />이 전체 경로가 아닌 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
  </Members>
</Type>