<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad4de834753cb8cf7c08131b0ca92f63c49de8d7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="cc8b0-101">
        <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> 이벤트에 대한 데이터를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cc8b0-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc8b0-102"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> 개체에 대 한 모든 이벤트 처리기에 전달 되는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-102">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-103">사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> 개체 데이터 소스에 업데이트 작업이 실행 되기 전에 데이터를 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-103">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source.</span></span> <span data-ttu-id="cc8b0-104">그런 다음 데이터 유효성 검사, 데이터 클래스에서 throw 되는 유효성 검사 예외를 검사 하거나 변경할 수 있습니다는 값을 업데이트 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-104">You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.</span></span> <span data-ttu-id="cc8b0-105">업데이트 작업을 취소할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-105">You can also cancel the update operation.</span></span>  
  
 <span data-ttu-id="cc8b0-106"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 개체를 원래 데이터 원본에서 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-106">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source.</span></span> <span data-ttu-id="cc8b0-107"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 개체 업데이트 작업 중 데이터 원본에 저장 될 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-107">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.</span></span>  
  
 <span data-ttu-id="cc8b0-108">데이터 소스를 나타내는 개체 데이터를 업데이트 하기 전에 유효성 검사 예외를 throw 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 의 인스턴스를 포함 하는 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-108">If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="cc8b0-109">통해 모든 유효성 검사 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-109">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="cc8b0-110">유효성 검사 예외가 throw 되 면는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 속성 포함 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-110">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="cc8b0-111">유효성 검사 예외를 처리 하 고 예외를 다시 throw 하지 않을 경우에 설정 된 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-111">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="cc8b0-112">기본적으로는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 원래 값을 데이터 원본에서 보기에 상태 저장 제외 하 고 웹 페이지에서 해당 <xref:System.Data.Linq.Mapping.ColumnAttribute> 특성으로 표시 되어 `UpdateCheck.Never`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-112">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`.</span></span> <span data-ttu-id="cc8b0-113">LINQ to SQL은 자동으로 데이터를 업데이트 하기 전에 데이터의 무결성을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-113">LINQ to SQL automatically checks the integrity of the data before updating the data.</span></span> <span data-ttu-id="cc8b0-114">뷰 상태에 저장 된 원래 값으로 데이터 원본에 있는 현재 값을 비교 하 여 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-114">It does this by comparing the current values in the data source with the original values stored in view state.</span></span> <span data-ttu-id="cc8b0-115">LINQ to SQL 데이터 원본에 있는 값 변경 된 경우 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-115">LINQ to SQL raises an exception if the values in the data source have changed.</span></span> <span data-ttu-id="cc8b0-116">에 대 한 처리기를 만들어 추가적인 데이터 유효성 검사를 수행할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-116">You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc8b0-117">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-117">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-118">속성을 비교 하는 방법을 설명는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성을 확인 여부의 값의 `Category` 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-118">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="cc8b0-119">이 경우는 `CategoryChanged` 에 개체의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-119">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="cc8b0-120">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-120">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-121">사용 하 여 유효성 검사 예외 메시지를 표시 한 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-121">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cc8b0-122">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-122">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="cc8b0-123">업데이트할 데이터의 유효성을 검사할 때 발생한 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-123">The exception that occurred when validating the data to update.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cc8b0-124">지정된 예외를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-124">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class with the specified exception.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">
          <span data-ttu-id="cc8b0-125">
            <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 속성에 지정된 형식이며 데이터 소스에서 검색한 초기 값이 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-125">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the initial values that were retrieved from the data source.</span>
          </span>
        </param>
        <param name="newObject">
          <span data-ttu-id="cc8b0-126">
            <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 속성에 지정되어 있으며 데이터 소스에 저장될 값이 들어 있는 형식의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-126">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the values that will be saved in the data source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cc8b0-127">
            <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-127">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cc8b0-128">업데이트 작업을 수행하기 전에 데이터의 유효성을 검사할 때 throw된 예외를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-128">Gets the exception that was thrown while the data was being validated before the update operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cc8b0-129">오류가 발생한 경우 해당 예외이고, 그렇지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-129">The exception, if an error occurred; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc8b0-130">업데이트 작업을 수행 하기 전에 유효성 검사 예외가 발생 하는 경우는 예외에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-130">If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="cc8b0-131">에 대 한 이벤트 처리기에는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트를 통해 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-131">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc8b0-132">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-132">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-133">사용 하 여 유효성 검사 예외 메시지를 표시 한 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-133">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cc8b0-134">예외가 처리되었으며 다시 throw되어서는 안 되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-134">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cc8b0-135">예외가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-135">
              <see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc8b0-136">에 대 한 이벤트 처리기를 만들 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 업데이트 작업 이전에 수행 된 유효성 검사 예외를 검사 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-136">You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation.</span></span> <span data-ttu-id="cc8b0-137">예외를 처리 하지 않을를 다시 throw 하는 경우이 설정의 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-137">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="cc8b0-138">설정 하지 않은 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 속성을 `true`, 예외 호출 스택에 있는 다음 이벤트 처리기에 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-138">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc8b0-139">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-139">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-140">사용 하 여 유효성 검사 예외 메시지를 표시 한 <xref:System.Web.UI.WebControls.Label> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-140">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cc8b0-141">데이터 소스에 저장될 값이 들어 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-141">Gets the object that contains the values that will be saved in the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cc8b0-142">
            <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 속성에 지정되어 있으며 저장될 데이터가 들어 있는 형식의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-142">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data to save.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc8b0-143">에 대 한 이벤트 처리기를 만들고는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트 및 검색 하 고는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성에서 데이터 유효성 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-143">Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data.</span></span> <span data-ttu-id="cc8b0-144">데이터를 변경 하거나 업데이트 작업을 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-144">You can also change the data or cancel the update operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc8b0-145">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-145">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-146">속성을 비교 하는 방법을 설명는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성을 확인 여부의 값의 `Category` 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-146">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="cc8b0-147">이 경우는 `CategoryChanged` 에 개체의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-147">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cc8b0-148">데이터 소스에서 원래 검색한 값이 들어 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-148">Gets the object that contains the values that were originally retrieved from the data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cc8b0-149">
            <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 속성에 지정된 형식이며 데이터 소스에서 검색한 데이터가 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cc8b0-149">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data that was retrieved from the data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc8b0-150">사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 데이터 원본에 있는 현재 값에 대 한 원래 값을 확인 하 고 업데이트 작업을 취소 하거나 다른 작업을 수행할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-150">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.</span></span>  
  
 <span data-ttu-id="cc8b0-151"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 보기에 유지 되는 속성에만 웹 페이지의 상태에 대 한 속성 값을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-151">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page.</span></span> <span data-ttu-id="cc8b0-152">속성은 이러한 상황에서 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-152">A property is persisted under these circumstances:</span></span>  
  
-   <span data-ttu-id="cc8b0-153">때 데이터 바인딩된 컨트롤에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-153">When it is displayed in a data-bound control.</span></span>  
  
-   <span data-ttu-id="cc8b0-154">경우는 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> 의 속성은 <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> 특성이로 설정 된 `Always` 또는 `WhenChanged`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-154">When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribute is set to `Always` or `WhenChanged`.</span></span>  
  
 <span data-ttu-id="cc8b0-155">경우는 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> 속성이 `Never` 및 데이터 바인딩된 컨트롤에는 값이 표시 되지, 웹 페이지에는 값이 저장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-155">If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page.</span></span> <span data-ttu-id="cc8b0-156">에 할당할 수 없는 경우에 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-156">In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc8b0-157">다음 예제에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-157">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="cc8b0-158">속성을 비교 하는 방법을 설명는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성을 확인 여부의 값의 `Category` 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-158">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="cc8b0-159">이 경우는 `CategoryChanged` 에 개체의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc8b0-159">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>