<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469e55d3a0574f997a8a334cced5357e542bcf9f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36378808" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an XML data source to data-bound controls.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [XML 데이터 소스](#source_of_xml_data)  
  
-   [XML 데이터 업데이트](#updating_xml_data)  
  
-   [XSL 변환을 지정합니다.](#specifying_an_xsl_transformation)  
  
-   [XPath 식을 사용 하 여 필터링](#filtering_using_an_xpath_expression)  
  
-   [캐싱](#caching)  
  
-   [추가 기능](#additional_features)  
  
-   [데이터 뷰 개체](#data_view_object)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 데이터 바인딩된 컨트롤에 대 한 XML 데이터를 제공 하는 데이터 소스 제어 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 계층 구조 형식과 표 형식 데이터를 표시 하려면 데이터 바인딩된 컨트롤에서 사용할 수 있습니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 일반적으로 읽기 전용 시나리오에서 계층적 XML 데이터를 표시 하는 데 사용 됩니다. 때문에 <xref:System.Web.UI.WebControls.XmlDataSource> 확장은 <xref:System.Web.UI.HierarchicalDataSourceControl> 계층적 데이터와 함께 작동 클래스입니다. <xref:System.Web.UI.WebControls.XmlDataSource> 제어도 구현 하는 <xref:System.Web.UI.IDataSource> 인터페이스 부서와 테이블 형식, 목록 스타일, 데이터 또는 합니다.  
  
> [!NOTE]
>  보안을 위해 어떤는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 속성 보기 상태에 저장 됩니다. 기술적으로 가능 클라이언트에서 상태 보기의 내용을 디코딩하는 것 이므로, 저장 데이터 구조 나 내용에 대 한 중요 한 정보가 노출 될 수 있습니다 정보 공개 위협이 합니다. 와 같은 정보를 저장 해야 할 경우 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성 보기에 상태를 설정 하 여 콘텐츠를 보호 하도록 암호화를 사용 하도록 설정할 수 <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> 에 `@ Page` 지시문입니다.  
  
 개발자가 사용 하 여 페이지는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 데이터 바인딩된 컨트롤을 사용 하 여 XML 데이터를 표시 합니다.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML 데이터 소스  
 <xref:System.Web.UI.WebControls.XmlDataSource> 일반적으로 지정 된 XML 파일에서 XML 데이터를 로드는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다. 데이터 소스 제어에서 사용 하 여 문자열 양식에서 직접 XML 데이터를 저장할 수도 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다. 데이터 바인딩된 컨트롤에서 표시 하기 전에 XML 데이터를 변환 하려는 경우 변환에 대 한 스타일 시트 XSL (Extensible Language) 스타일 시트를 제공할 수 있습니다. 로 표시 된 대로 XML 데이터로 일반적으로 파일에서 스타일 시트를 로드는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 있지만 속성을 저장할 수도 직접 사용 하 여 문자열 형태로 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성입니다.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>XML 데이터 업데이트  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 일반적으로 사용 데이터를 읽기 전용 시나리오에서 데이터 바인딩된 컨트롤에서 XML 데이터를 표시 하는 위치입니다. 그러나 사용할 수도 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> XML 데이터를 편집 하는 컨트롤입니다. XML 데이터를 편집 하려면 호출는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 를 검색할 메서드는 <xref:System.Xml.XmlDataDocument> 개체는 XML 데이터의 메모리 내 표현입니다. 에 의해 노출 되는 개체 모델을 사용할 수 있습니다는 <xref:System.Xml.XmlDataDocument> 및 <xref:System.Xml.XmlNode> 개체를 포함 하거나 XPath 식을 필터링을 사용 하 여 문서에서 데이터를 조작 하기 위한 것입니다. XML 데이터의 메모리 내 표현의 변경한 경우 호출 하 여 디스크에 저장할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.  
  
 편집 기능에 대 한 제한은 몇 가지는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어:  
  
-   표시 된 XML 파일에서 XML 데이터를 로드 해야는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 에서 아니라 인라인 XML에 지정 된 속성은 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
-   XSLT 변환 없음에 지정할 수는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 또는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다.  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드를 처리 하지 않을 동시 저장 작업 다른 요청에서. 둘 이상의 사용자가을 통해 XML 파일을 편집 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource>은 동일한 데이터와 실행 중인 모든 사용자가 아닙니다. 에 대 한 수 이기도 한 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 작업이 이러한 같은 동시성 문제로 인해 실패 합니다.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>XSL 변환을 지정합니다.  
 XML 데이터와 함께 수행 하는 일반적인 작업은에서 변환 하나의 XML 데이터 집합을 다른 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 제어와 XML 변환을 지원는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 데이터 바인딩된 컨트롤에 전달 되기 전에 XML 데이터에 적용할 XSL 스타일 시트를 지정 하는 속성 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 를 사용할 수 있는 속성 변환 중 XSL 스타일 시트에서 사용할 동적 XSLT 스타일 시트 인수를 제공 합니다. XPath 식을 사용 하 여 필터링을 지정 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 변환 발생 한 후 적용 됩니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트의 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 된 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>XPath 식을 사용 하 여 필터링  
 기본적으로는 <xref:System.Web.UI.WebControls.XmlDataSource> 로 식별 되는 XML 파일에 모든 XML 데이터를 로드 하는 제어는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성 또는에서 인라인으로 찾은 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성이 아니라 있습니다 XPath 식을 사용 하 여 데이터를 필터링 할 수 있습니다. <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성은 XML 데이터 로드 되 고 변환 된 후에 적용 되는 XPath 구문을 필터를 지원 합니다.  
  
<a name="caching"></a>   
## <a name="caching"></a>캐싱  
 성능 향상을 위해 캐싱을 사용할 수는 <xref:System.Web.UI.WebControls.XmlDataSource> 기본적으로 제어 합니다. 열고 페이지 요청 될 때마다 서버에서 XML 파일을 읽는 응용 프로그램의 성능을 줄일 수 있습니다. 처리 부하가 웹 서버의 메모리 소모 서버의 줄일 캐싱을 사용 하면 대부분의 경우에서 좋은 절충안입니다. <xref:System.Web.UI.WebControls.XmlDataSource> 데이터를 캐시 하는 자동으로 때는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true`, 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성은 캐시를 무효화 되기 전에 캐시 데이터를 저장 하는 시간 (초)의 수입니다. 사용할 수는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 추가 된 데이터 소스 제어의 캐싱 동작을 세밀 하 게 조정 합니다.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>추가 기능  
 다음 표에서 추가 기능에서 지원 되는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.  
  
|기능|설명|  
|----------------|-----------------|  
|정렬|지원 되지 않습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.|  
|필터링|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 적절 한 XPath 식을 사용 하 여 XML 데이터를 필터링 할 속성을 사용할 수 있습니다.|  
|페이징|지원 되지 않습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.|  
|업데이트하는 중|조작 하 여 지원 되는 <xref:System.Xml.XmlDataDocument> 직접 한 다음 호출에서 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|삭제|조작 하 여 지원 되는 <xref:System.Xml.XmlDataDocument> 직접 한 다음 호출에서 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|삽입|조작 하 여 지원 되는 <xref:System.Xml.XmlDataDocument> 직접 한 다음 호출에서 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|캐싱|기본적으로 사용할 수는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 0 (무제한)으로 설정 된 속성 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 속성이로 설정 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>합니다.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>데이터 뷰 개체  
 때문에 <xref:System.Web.UI.WebControls.XmlDataSource> 제어는 계층적 데이터를 표시 하는 데이터 바인딩된 컨트롤을 표 형식 데이터를 표시 하는 컨트롤, 데이터 소스 컨트롤이 해당 기본 XML 데이터에 대해 여러 유형의 데이터 원본 뷰 개체를 지원 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 검색 단일 명명 된 <xref:System.Web.UI.WebControls.XmlDataSourceView> 표 형식 데이터를 표시 하는 데이터 바인딩된 컨트롤 함께 사용 하는 경우 개체입니다. <xref:System.Web.UI.IDataSource.GetViewNames%2A> 메서드는이 단일 명명 된 보기를 식별 합니다. 계층적 데이터를 표시 하는 데이터 바인딩된 컨트롤 함께 사용 하면는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 검색은 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 에 전달 된 모든 고유한 계층 경로 대 한는 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> 메서드.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤 샘플 XML 파일의 XML 데이터를 표시 합니다. 두 번째 예에 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤에 XML 데이터를 표시 합니다.  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤에 XML 데이터를 표시 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 로 식별 되는 XML 파일에서 XML 데이터 로드는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤에 XML 데이터를 표시 합니다. <xref:System.Web.UI.WebControls.Repeater> 제어 XML 내의 항목을 데이터 바인딩할 XPath 데이터 바인딩 식을 사용 하 여 문서에 <xref:System.Web.UI.WebControls.XmlDataSource> 나타냅니다. 에 대 한 자세한 내용은 `XPath` 및 `XPathSelect` 데이터 바인딩 구문 참조는 <xref:System.Web.UI.XPathBinder> 클래스입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the length of time, in seconds, that the data source control caches data it has retrieved.</summary>
        <value>시간 (초)의 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤 데이터 검색 작업의 결과 캐시 합니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 은 다음과 같은 경우 자동으로 데이터를 캐시 제어:  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성은 `true`로 설정됩니다.  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성 캐시는 캐시를 무효화 하기 전에 데이터를 저장 하는 시간 (초)의 수를 나타내는 0 보다 큰 값으로 설정 됩니다.  
  
 변경 된 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성 또는 XML 데이터를 포함 하는 파일의 내용을 인해 캐시가 무효화 됩니다.  
  
 기본적으로는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성이 무제한 캐시를 나타내는 0으로 설정 되 고 종속 된 XML 파일이 변경 될 때까지 데이터 원본의 데이터를 캐시 합니다.  
  
 캐시의 동작은 기간의 조합에 의해 제한 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> 제어 첫 번째 데이터 검색 작업에 데이터를 캐시, 메모리에서 지정 된 시간에 보유 한 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, 경과 되 후 무효화 합니다. 다음 동작에에 캐시 한 다음 새로 고쳐집니다. 경우 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, 데이터 소스 제어의 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 이후 작업이 발생할 때마다 캐시를 보유 하는 시간 창을 다시 설정 합니다. 작업이 없을 한 번에 대 한 같은 경우에 캐시가 만료 되기까지의 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 마지막 데이터 검색 이후입니다.  
  
   
  
## Examples  
 캐싱을 사용 하는 경우 사용 하도록 설정 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 XML 파일에 포함 된 데이터를 표시 합니다. 캐싱을 사용 하 고 때는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터가 캐시 된 데이터 소스 제어 하는 시간 (초)의 수로 설정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cache expiration policy that is combined with the cache duration to describe the caching behavior of the cache that the data source control uses.</summary>
        <value>
          <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 값 중 하나입니다. 기본 캐시 만료 정책 설정이 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 캐시의 동작의 조합에 의해 제한 된 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> 첫 번째 데이터 검색 작업에 데이터를 캐시, 메모리에서 지정 된 시간에 보유 한 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, 경과 되 후 무효화 합니다. 다음 동작에에 캐시 한 다음 새로 고쳐집니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, 데이터 소스 제어의 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 이후 작업이 발생할 때마다 캐시를 보유 하는 시간 창을 다시 설정 합니다. 경우에 활동이 한 번에 대 한 같음 캐시가 만료 되기까지의 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 마지막 데이터 검색 이후입니다.  
  
   
  
## Examples  
 캐싱을 사용 하는 경우 사용 하도록 설정 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 XML 파일에 포함 된 데이터를 표시 합니다. 캐싱을 사용 하 고 때는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터가 캐시 된 데이터 소스 제어 하는 시간 (초)의 수로 설정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the cache key for the data source control from view state, or adds the cache key to view state.</summary>
        <value>캐시 키 또는 캐시 키 뷰 상태에 없는 경우 빈 문자열 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> 속성에 대 한 캐시 키를 수동으로 만들 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다. 컨트롤 데이터를 포함 하는 파일을 지정 하는 대신에 XML 또는 XSLT 데이터를 포함 하는 개체를 할당 하는 경우에 이것이 필요 합니다. 컨트롤에 데이터를 할당 하는 경우 캐시 키를 생성 하는 데이터 사용 되지 않습니다. 대신 수동으로 생성 해야 고유한 캐시 키 데이터 개체를 업데이트 하려는 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a user-defined key dependency that is linked to all data cache objects created by the data source control. All cache objects explicitly expire when the key expires.</summary>
        <value>만든 모든 캐시 개체를 식별 하는 키의 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 제어 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안는 <xref:System.Web.UI.WebControls.XmlDataSource> 대신 기본 데이터 파일에서 캐시에서 데이터를 검색 합니다. 캐시가 만료 되는 기본 파일에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성에서 만든 모든 캐시 항목 간의 종속성을 만들려면는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤과 키입니다. 프로그래밍 방식으로 키를 만료 시켜 언제 든 지 모든 캐시 항목을 무효화할 수 있습니다.  
  
 만드는 데 사용 하는 속성이 있기 때문에 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, 수 여러 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 동일한 XML 파일에서 동일한 데이터를 로드 하 고 파일을 변환 하 고 시나리오에서 동일한 같은 캐시를 사용할 수 있습니다 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a block of XML data that the data source control binds to.</summary>
        <value>인라인 XML 데이터 문자열을 하는 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에 바인딩합니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 선언적 시나리오에서는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성의 여러 줄로 된 내부 속성으로 지정 된 <xref:System.Web.UI.WebControls.XmlDataSource> 개체입니다. 내부 속성은 하면 어떤 방식으로든에서 XML 데이터 형식을 지정 하 고 패딩 인용 문자 등의 문자 패딩 문제를 무시 하기 때문에 XML 데이터와 호환 됩니다.  
  
 모두는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 설정는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성이 우선 및 XML 파일의 데이터에 지정 된 XML 데이터 대신 사용 되는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성에는 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하 고 값을 변경 하면 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, 캐시를 무효화 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤에 포함 된 인라인 XML 데이터를 표시 하는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을는 <xref:System.Web.UI.WebControls.TreeView> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the file name of an XML file that the data source binds to.</summary>
        <value>실제 절대 경로 또는 데이터가 포함 된 XML 파일의 상대 경로는 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤이 나타내는입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 설정는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성이 우선 및 XML 파일의 데이터에 지정 된 XML 데이터 대신 사용 되는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성에는 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하 고 값을 변경 하면 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, 캐시를 무효화 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 인 파일에 포함 된 XML 데이터를 표시 하도록 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control has data caching enabled.</summary>
        <value>
          <see langword="true" /> 데이터 소스 제어를 위해 데이터 캐싱을 사용 하는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 데이터를 자동으로 캐시 하는 컨트롤 때는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true`합니다. 기본적으로는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성이 무제한 캐시를 나타내는 0으로 설정 되 고 종속 된 XML 파일이 변경 될 때까지 데이터 원본의 데이터를 캐시 합니다. 설정 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성을 0 보다 큰 값으로 캐시 데이터를 새로운 집합을 검색 하기 전에 많은 초 동안 저장 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성이 설정 되어 있으면 캐시 항목 변환 인수 목록에서 매개 변수 변경 될 때 자동으로 무효화 되지 않습니다. 설정 하 여 캐시를 무효화 하는 코드를 작성 해야 하는 경우에 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성입니다.  
  
   
  
## Examples  
 캐싱을 사용 하는 경우 사용 하도록 설정 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 XML 파일에 포함 된 데이터를 표시 합니다. 캐싱을 사용 하 고 때는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터가 캐시 된 데이터 소스 제어 하는 시간 (초)의 수로 설정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">An XPath expression that identifies a node from which the current hierarchical view is built.</param>
        <summary>Gets the data source view object for the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control. The <paramref name="viewPath" /> parameter can be an XPath expression.</summary>
        <returns>Returns an <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> object that represents a single view of the data starting with the data node identified by <paramref name="viewPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> 를 검색할 메서드는 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다. 지정 하는 경우 `viewPath` 값은 <xref:System.Web.UI.WebControls.XmlDataSource> 으로 식별 된 노드에서 보기를 나타내는 데이터 원본 뷰 개체를 반환 하는 컨트롤 `viewPath`, 모든 자식 노드 함께 합니다. 설정한 경우 `viewPath` 를 <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Web.UI.WebControls.XmlDataSource> 검사 제어는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 데이터 원본 뷰를 구성 하는 루트 노드를 확인 합니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성이 설정 되어는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 같은 데이터 원본 뷰를 반환 하 여 방식으로 `viewPath` 식이 사용 됩니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성이 설정 되어 있지는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 XML 데이터에 있는 모든 데이터 노드 뷰를 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads the XML data into memory, either directly from the underlying data storage or from the cache, and returns it in the form of an <see cref="T:System.Xml.XmlDataDocument" /> object.</summary>
        <returns>An <see cref="T:System.Xml.XmlDataDocument" /> object that represents the XML specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property or in the file identified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property, with any transformations and <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> queries applied.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 직접 액세스 하는 기본 XML 데이터의 메모리 내 표현 메서드.  
  
 반환 된 조작할 수 있습니다 <xref:System.Xml.XmlDataDocument> 개체와 호출 후 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 로 지정 된 XML 파일에 변경 내용을 유지 하는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다. 몇 가지 요구 사항을 충족 해야는 <xref:System.Xml.XmlDataDocument> 개체를 성공적으로 저장할 수 있습니다. 자세한 내용은 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드를 참조하세요.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 예에 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 두 번째 예에 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다.  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 사용 하 여 메모리에서 데이터 조작 되는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 선택할 때마다는 <xref:System.Web.UI.WebControls.TreeView> 노드를 다음 XML 파일에 저장 됩니다. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 표시 하는 데이터 새로 고침을 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 앞의 예제 데이터 사용 하 여 메모리에서 조작 됩니다 처럼는 <xref:System.Xml.XmlDataDocument> 검색는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 표시 하는 데이터 새로 고침을 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 다음 코드 예제에서는 XML 파일에는 다음과 같은 데이터에 있습니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not have the correct permissions for the Web resource.</exception>
        <exception cref="T:System.NotSupportedException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, it is not an HTTP-based URL.  \- or -  A design-time relative path was not mapped correctly by the designer before using the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.  \- or -  Both caching and client impersonation are enabled. The <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not support caching when client impersonation is enabled.</exception>
        <exception cref="T:System.Web.HttpException">Access is denied to the path specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> event before the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control performs an XSLT transformation on its XML data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 변환 된 XML 데이터 컨트롤을 표시 합니다. XML 변환으로 표시 하는 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 제어에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임에 개체입니다. 코드 예제에서는 전달 하는 방법을 보여 줍니다는 <xref:System.Xml.Xsl.XsltArgumentList> 개체를 처리 하 여 데이터 소스 제어는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 메서드의 이름으로 식별 되는 사용자 지정 이벤트 처리기를 사용 하 여 이벤트에 대 한 설정에서 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 메서드.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 다음 스타일 시트를 사용 하 여 XML 변환을 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 파생된 클래스에서 호출 해야는 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 등록 된 대리자에는 기본 클래스의 메서드는 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the XML data currently held in memory by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control to disk if the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property is set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동안는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어는 읽기 전용 데이터 바인딩 시나리오에서 일반적으로 사용, 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 기본 XML 데이터 파일에 XML 데이터를 편집 합니다. 이러한 시나리오에서는 XML 데이터에서 XML 파일에서 로드 되는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다. 수정 된 <xref:System.Xml.XmlDataDocument> 사용 하 여 메모리에는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 호출 하 여 XML 데이터 파일을 저장 하십시오는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드. 다음 조건이 충족 되 면이 편집 가능한 XML 시나리오를 사용할 수 있습니다.  
  
-   XML 데이터를 가리키는 XML 파일에서 로드 되는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성에 지정 된 인라인 XML 데이터에서가 아니라는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
-   에 지정 된 XSLT 변환이 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 또는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드를 처리 하지 않을 동시 저장 작업 다른 요청에서. 둘 이상의 사용자가을 통해 XML 파일을 편집 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 하 고은 동일한 데이터와 실행 중인 모든 사용자가 아닙니다. 에 대 한 수 이기도 한 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 작업이 이러한 같은 동시성 문제로 인해 실패 합니다.  
  
   
  
## Examples  
 이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다. 첫 번째 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 두 번째 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다.  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 사용 하 여 메모리에서 데이터 조작 되는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 선택할 때마다는 <xref:System.Web.UI.WebControls.TreeView> 노드를 다음 XML 파일에 저장 됩니다. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 표시 하는 데이터 새로 고침을 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 앞의 예제 데이터 사용 하 여 메모리에서 조작 됩니다 처럼는 <xref:System.Xml.XmlDataDocument> 에서 검색 한 개체는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 표시 하는 데이터 새로 고침을 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 다음 코드 예제에서는 XML 파일에는 다음과 같은 데이터에 있습니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML data was loaded using the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property instead of the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.  \- or -  A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not have the correct permissions for the Web resource.</exception>
        <exception cref="T:System.NotSupportedException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, it is not an HTTP-based URL.  \- or -  A design-time relative path was not mapped correctly by the designer before using the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</exception>
        <exception cref="T:System.Web.HttpException">Access is denied to the path specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>
          <see langword="true" /> 컬렉션의 컬렉션의 경우 <see cref="T:System.Collections.IList" /> 개체이 고, 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.XmlDataSource> 인스턴스로 캐스팅 되는 <xref:System.ComponentModel.IListSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>An object implementing <see cref="T:System.Collections.IList" /> that can be bound to a data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.XmlDataSource> 인스턴스로 캐스팅 되는 <xref:System.ComponentModel.IListSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">The name of the view to retrieve. If <see cref="F:System.String.Empty" /> is specified, the default view for the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control is retrieved.</param>
        <summary>Gets the named data source view associated with the data source control.</summary>
        <returns>Returns the named <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> object associated with the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>An object implementing <see cref="T:System.Collections.ICollection" /> containing names representing the list of view objects associated with the <see cref="T:System.Web.UI.IDataSource" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 <xref:System.Web.UI.WebControls.XmlDataSource> 인스턴스로 캐스팅 되는 <xref:System.Web.UI.IDataSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a block of Extensible Stylesheet Language (XSL) data that defines an XSLT transformation to be performed on the XML data managed by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</summary>
        <value>인라인에 포함 된 데이터에서 수행 해야 하는 XML 변환을 정의 하는 XSL의 문자열은 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 또는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 선언적 시나리오에서는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성의 여러 줄로 된 내부 속성으로 지정 된 <xref:System.Web.UI.WebControls.XmlDataSource> 개체입니다. 내부 속성 XSL 스타일 시트 데이터와 호환 되므로 스타일 시트의에서 서식을 지정 하 고 인용 문자 채우기와 같은 문자 패딩 문제를 무시할 수 있습니다.  
  
 모두는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 설정는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성이 우선 및 XSL 스타일 시트 파일 (.xsl)의 데이터에 지정 된 스타일 시트 요소 대신 사용 되는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성. XPath 식을 사용 하 여 설정 된 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 XML 데이터 변환 된 후 적용 됩니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성에는 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하 고 값을 변경 하면 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, 캐시를 무효화 합니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트의 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 된 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> 변환 된 XML 데이터 컨트롤을 표시 합니다. 변환을 수행 하는 스타일 시트에서 인라인으로 정의 되는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 데이터 소스 컨트롤의 속성입니다.  
  
  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a list of XSLT arguments that are used with the style sheet defined by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> or <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> properties to perform a transformation on the XML data.</summary>
        <value>
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> XSLT 매개 변수 및 개체에서 로드할 때 XML 데이터에 적용할 수를 포함 하는 개체는 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 제어 합니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성 때는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> XSLT 변환을 XML 데이터에 적용 되는 시간에 XSLT 매개 변수를 사용할 수 있도록 이벤트가 발생 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성이 설정 되어 있으면 캐시 항목 변환 인수 목록에서 매개 변수 변경 될 때 자동으로 무효화 되지 않습니다. 설정 하 여 캐시를 무효화 하는 코드를 작성 해야 하는 경우에 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 와 <xref:System.Web.UI.WebControls.TreeView> 변환 된 XML 데이터 컨트롤을 표시 합니다. XML 변환으로 표시 하는 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 제어에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임에 개체입니다. 코드 예제에서는 전달 하는 방법을 보여 줍니다.는 <xref:System.Xml.Xsl.XsltArgumentList> 처리 하 여 데이터 소스 제어에는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 사용자 지정 이벤트 처리기를 사용 하 여 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 데이터의 변환과 다음 스타일 시트와 함께 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the file name of an Extensible Stylesheet Language (XSL) file (.xsl) that defines an XSLT transformation to be performed on the XML data managed by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</summary>
        <value>실제 절대 경로 또는에 포함 된 데이터에서 수행 해야 하는 XML 변환을 정의 하는 XSL 스타일 시트 파일의 상대 경로 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 또는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 설정는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성이 우선 및 XSL 스타일 시트 파일 (.xsl)의 데이터에 지정 된 스타일 시트 요소 대신 사용 되는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성. XPath 식을 사용 하 여 설정 된 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 XML 데이터 변환 된 후 적용 됩니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성에는 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하 고 값을 변경 하면 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, 캐시를 무효화 합니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트의 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 된 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 및 <xref:System.Web.UI.WebControls.TreeView> 표시할 컨트롤을 Web form에 XML 데이터를 변환 합니다. 로 표시 하는 스타일 시트를 사용 하 여 변환이 수행 된는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 선택적으로 사용 하 여 스타일 시트에 대 한 변환 인수를 제공할 수 있습니다는 <xref:System.Xml.Xsl.XsltArgumentList>합니다. 자세한 내용은 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 변환을 수행 하는 XSL 스타일 시트의 구조는 다음과 같습니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the style sheet that is defined by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> property or identified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> property is applied to XML data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 설정 하는 이벤트는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을는 <xref:System.Xml.Xsl.XsltArgumentList> 하기 전에 개체는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 XML 변환을 수행 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 보호로 <xref:System.Web.UI.WebControls.TreeView> 변환 된 XML 데이터 컨트롤을 표시 합니다. XML 변환으로 표시 하는 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 제어에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임 시. 코드 예제에서는 전달 하는 방법을 보여 줍니다.는 <xref:System.Xml.Xsl.XsltArgumentList> 개체를 처리 하 여 데이터 소스 제어는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 사용자 지정 이벤트 처리기를 사용 하 여 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 데이터의 변환과 다음 스타일 시트와 함께 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies an XPath expression to be applied to the XML data contained by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property or by the XML file indicated by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</summary>
        <value>에 포함 된 데이터 필터링에 사용 될 수 있는 XPath 식을 나타내는 문자열입니다는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 속성 또는로 지정 된 XML 파일을 여는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath 데이터 바인딩 식에 대 한 자세한 내용은 참조 하십시오. [테이블 형식 컨트롤을 바인딩하는 XmlDataSource 컨트롤](http://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤 <xref:System.Web.UI.WebControls.Repeater> XPath 식을 사용 하 여 필터링 된 XML 데이터를 표시 하는 컨트롤입니다. 이 예제에서는 XPath 구문을 XML 데이터를 필터링 하는 데 사용 때는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 데이터 소스 컨트롤의 속성을 설정 하 고 또한의 요소를 바인딩하는 <xref:System.Web.UI.WebControls.Repeater> XML 데이터에 컨트롤 템플릿을 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 코드 예제에서 XML 파일에는 다음과 같은 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
      </Docs>
    </Member>
  </Members>
</Type>