<Type Name="EntityDataSource" FullName="System.Web.UI.WebControls.EntityDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a85a1b4d3aa7d6422b1bb3d8e7c0ecf4e98bcdcf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36583095" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EntityDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource, System.Web.UI.WebControls.IQueryableDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource, class System.Web.UI.WebControls.IQueryableDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.EntityDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource, IQueryableDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource, System::Web::UI::WebControls::IQueryableDataSource" />
  <TypeSignature Language="F#" Value="type EntityDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource&#xA;    interface IQueryableDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IQueryableDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("EntitySetName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.EntityDataSourceDesigner, System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.EntityDataSource), "EntityDataSource.ico")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET 응용 프로그램의 데이터 바인딩된 컨트롤에 대한 EDM(엔터티 데이터 모델)을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 사용할 수는 <xref:System.Web.UI.WebControls.EntityDataSource> EDM에서 데이터를 검색 및 표시, 편집 및 거의 없거나 전혀 없이 코드를 사용 하 여 웹 페이지에서 데이터를 정렬 하는 데이터 바인딩된 컨트롤 함께 제어 합니다. 자세한 내용은 참조 [EntityDataSource 웹 서버 컨트롤 개요](http://msdn.microsoft.com/library/1f09af00-9578-4744-a029-765710a3c83f)합니다.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:EntityDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    CommandText="string"  
    ConnectionString="string"  
    ContextType="typed ObjectContext"  
    ContextTypeName="string"  
    DefaultContainerName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    EntitySetName="string"  
    EntityTypeFilter="string"  
    GroupBy="string"  
    Include="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnException="IDynamicDataSource.Exception event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    StoreOriginalValuesInViewState="True|False"  
    Where="string"  
>  
        <CommandParameters />  
        <DeleteParameters />  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <UpdateParameters />  
        <WhereParameters />  
</asp:EntityDataSource>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityDataSource (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityDataSource(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.EntityDataSource : System.Data.EntityClient.EntityConnection -&gt; System.Web.UI.WebControls.EntityDataSource" Usage="new System.Web.UI.WebControls.EntityDataSource connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">EDM(엔터티 데이터 모델)에 대한 <see cref="T:System.Data.EntityClient.EntityConnection" />입니다.</param>
        <summary>제공된 연결로 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.EntityDataSource.OrderByParameters" /> 컬렉션의 값에 따라 ORDER BY 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 ORDER BY 절을 만들면 <see langword="true" />이고, 만들지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 로 설정 되어 `true`, 컨트롤에서 매개 변수에서 ORDER BY 절을 자동으로 생성는 <xref:System.Web.UI.WebControls.ParameterCollection> 에 할당 된는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 속성. 이를 명시적으로 ORDER BY 절을 지정할 필요가 없습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 속성입니다.  
  
 설정 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 속성을 `true`, 값을 명시적으로 할당 하지 해야는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 자동으로 ORDER BY 절을 생성 하 고 값이 사용 하는 `OrderByDropDownList` 매개 변수의 값을 설정 합니다.  
  
```  
<asp:DropDownList AutoPostBack="true" ID="OrderByDropDownList" runat="server">  
    <asp:ListItem Value="TotalDue"></asp:ListItem>  
    <asp:ListItem Value="OrderDate"></asp:ListItem>  
</asp:DropDownList>  
  
<asp:EntityDataSource ID="EntityDataSourceWithAutoGenOrderBy" runat="server"   
ConnectionString="name=AdventureWorksEntities"   
DefaultContainerName="AdventureWorksEntities"   
EntitySetName="SalesOrderHeaders"   
Select="it.SalesOrderID, it.TotalDue, it.OrderDate"  
AutoGenerateOrderByClause="True">  
<OrderByParameters>  
    <asp:ControlParameter  
    ControlID="OrderByDropDownList"/>  
</OrderByParameters>  
</asp:EntityDataSource>  
```  
  
 다음 예제에서는 자동으로 ORDER BY 절을 생성 하 고 사용는 `DefaultValue` 특성에는 `Parameter` 매개 변수의 값을 설정할 요소입니다.  
  
```  
<asp:EntityDataSource ID="EntityDataSourceWithAutoGenOrderBy" runat="server"   
ConnectionString="name=AdventureWorksEntities"   
DefaultContainerName="AdventureWorksEntities"   
EntitySetName="SalesOrderHeaders"   
Select="it.SalesOrderID, it.TotalDue, it.OrderDate"  
AutoGenerateOrderByClause="True">  
<OrderByParameters>  
    <asp:Parameter  
    DefaultValue="TotalDue"/>  
</OrderByParameters>  
</asp:EntityDataSource>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" /> 속성이 <see langword="true" />로 설정되고 <see cref="P:System.Web.UI.WebControls.EntityDataSource.OrderBy" /> 속성이 null이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.EntityDataSource.WhereParameters" /> 컬렉션에 정의된 값을 기준으로 WHERE 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 WHERE 절을 만들면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 엔터티 형식 속성을 식으로 연결 하 여 쿼리 결과 필터링 하려면 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 속성입니다. 때는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 로 설정 되어 `true`, 컨트롤이 자동으로 생성 한 `WHERE` 절에 매개 변수에서는 <xref:System.Web.UI.WebControls.ParameterCollection> 의 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 속성. <xref:System.Web.UI.WebControls.Parameter.Name%2A> 각 매개 변수에 속성이 쿼리 결과에 포함 된 엔터티 형식 속성 이름과 일치 해야 합니다. 설정 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 속성을 `true`를 명시적으로 할당 하지 해야는 `WHERE` 절을는 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다.  
  
## <a name="example"></a>예제  
 다음 예제에서는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 속성이 `true`합니다. 따라서는 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 속성에 대 한 쿼리 결과에 포함 된 엔터티 형식 속성 이름과 일치 합니다. 쿼리는 SalesOrderHeader 엔터티 형식의 SalesOrderID 및 TotalDue 속성을 선택 합니다. 자동으로 생성 된 `WHERE` 절 TotalDue 값 TotalDueList 목록 상자 컨트롤에서 선택한 값을 비교 하 여 쿼리 결과 필터링 합니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeaderWithAutoParam" runat="server"   
   ConnectionString="name=AdventureWorksEntities"   
   DefaultContainerName="AdventureWorksEntities"   
   EntitySetName="SalesOrderHeaders"   
   Select="it.SalesOrderID, it.TotalDue"  
    AutoGenerateWhereClause="True">  
    <WhereParameters>  
        <asp:ControlParameter ControlID="TotalDueList"   
           Name="TotalDue" PropertyName="SelectedValue" DbType="Decimal" />  
    </WhereParameters>  
</asp:EntityDataSource>  
```  
  
## <a name="example"></a>예제  
 기본적으로 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 속성은 `false`로 설정됩니다. 즉, 제공 해야는 `WHERE` 절. 다음 예제에서는 `WHERE` 절은 `Where="it.TotalDue < @totalDueParam"` totalDueParam 매개 변수 이름입니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeaderWithOutAutoParam" runat="server"   
   ConnectionString="name=AdventureWorksEntities"   
   DefaultContainerName="AdventureWorksEntities"   
   EntitySetName="SalesOrderHeaders"   
   Where="it.TotalDue < @totalDueParam"   
    Select="it.SalesOrderID, it.TotalDue">  
    <WhereParameters>  
        <asp:ControlParameter ControlID="TotalDueList"   
           Name="totalDueParam" PropertyName="SelectedValue" DbType="Decimal" />  
    </WhereParameters>  
</asp:EntityDataSource>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" /> 속성이 <see langword="true" />로 설정되고 <see cref="P:System.Web.UI.WebControls.EntityDataSource.Where" /> 속성이 null이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 런타임에 데이터의 섹션 탐색을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>사용자가 데이터 통해 페이징할 수 있으면 <see langword="true" />이고, 페이징할 수 없으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 자동으로 쿼리에 의해 반환 된 데이터를 통한 페이징을 지원 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 속성은 데이터 컨트롤에 바인딩된 쿼리에 의해 반환 되는 데이터에 대 한 페이징 사용 되는지 여부를 나타내는 부울 속성입니다. 이 속성이로 설정 된 경우 `true`, <xref:System.Web.UI.WebControls.EntityDataSource> 적절 한 쿼리 작성기 메서드를 추가 하는 컨트롤의 <xref:System.Data.Objects.ObjectQuery%601> 에 제공 된 정보를 기반으로 <xref:System.Web.UI.WebControls.EntityDataSourceView> 데이터 바인딩된 컨트롤에 의해 합니다.  
  
 값은 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 속성 결정 여부는 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanPage%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceView> 데이터 소스를 지 원하는 컨트롤은 `true` 또는 `false`합니다.  
  
 프로젝션 페이징을 사용을 정의할 때 결과 정렬 하는 기준인 속성을 정의 해야 합니다. 즉, 설정 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성을 프로젝션을 정의 하 고 있는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 로 설정 `true`를 설정 해야는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 순서를 정의 하거나 설정 하려면 속성은 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 속성을 `true` 주문 추가 매개 변수를 여는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 컬렉션입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤이 런타임에 데이터 정렬을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>사용자가 데이터를 정렬할 수 있으면 <see langword="true" />이고, 정렬할 수 없으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤이 자동으로 쿼리에 의해 반환 되는 데이터 정렬을 지원 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.AutoSort%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 데이터 컨트롤에 바인딩되는 쿼리에 의해 반환 되는 데이터 정렬을 사용할지 여부를 나타내는 부울 속성입니다. 이 속성이로 설정 된 경우 `true`, <xref:System.Web.UI.WebControls.EntityDataSource> 적절 한 쿼리 작성기 메서드를 추가 하는 컨트롤의 <xref:System.Data.Objects.ObjectQuery%601> 에 제공 된 정보를 기반으로 <xref:System.Web.UI.WebControls.EntityDataSourceView> 데이터 바인딩된 컨트롤에 의해 합니다.  
  
 값은 <xref:System.Web.UI.WebControls.EntityDataSource.AutoSort%2A> 속성 결정 여부는 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanSort%2A> 및 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanRetrieveTotalRowCount%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceView> 데이터 소스를 지 원하는 컨트롤은 `true` 또는 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection CommandParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection CommandParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.CommandParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ CommandParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.CommandParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리에 대한 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>쿼리 명령에 전달되는 매개 변수가 들어 있는 <see cref="T:System.Web.UI.WebControls.ParameterCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.CommandParameters%2A> 속성은 사용에 대 한 액세스는 <xref:System.Web.UI.WebControls.ParameterCollection> Entity SQL 쿼리를 사용 하 여 지정 된 명시적으로 전달 되는 매개 변수는 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 제품 개체의 컬렉션을 반환 하는 Entity SQL 명령 텍스트를 제공 합니다.  
  
```  
<asp:EntityDataSource ID="ProductDataSource" runat="server"   
    CommandText="SELECT value p FROM Products AS p  
        WHERE p.ProductID  
        BETWEEN @OrderIdMin AND @OrderIdMax"  
    ConnectionString="name=AdventureWorksEntities"   
    DefaultContainerName="AdventureWorksEntities" >  
    <CommandParameters>  
        <asp:ControlParameter Name="OrderIdMin"   
            ControlID="ProductIdMin" Type="Int32"/>  
        <asp:ControlParameter Name="OrderIdMax"   
            ControlID="ProductIdMax" Type="Int32" />  
    </CommandParameters>  
</asp:EntityDataSource>  
  
```  
  
 다음 예제에서는 프로젝션 된 일련의 열을 반환합니다.  
  
```  
<asp:EntityDataSource ID="ProductDataSource" runat="server"   
    CommandText="SELECT p.ProductID, p.ProductName, p.UnitsOnOrder  
         FROM Products AS p   
         WHERE p.ProductID BETWEEN @OrderIDMin AND @OrderIDMax"   
         ContextTypeName="AdventureWorksModel. AdventureWorksEntities">  
    <CommandParameters>  
        <asp:ControlParameter Name="OrderIDMin"   
               ControlID="ProductIDMinTextBox" Type="Int32"/>  
        <asp:ControlParameter Name="OrderIDMax"   
               ControlID="ProductIDMaxTextBox" Type="Int32" />  
    </CommandParameters>  
</asp:EntityDataSource>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandText : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리를 정의하는 Entity SQL 명령을 가져오거나 설정합니다.</summary>
        <value>Entity SQL 쿼리인 <see langword="string" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤을 사용 하면 사용자 지정 Entity SQL 식을 사용 하는 쿼리를 지정할 수 있습니다. SELECT 문과 마찬가지로 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 업데이트할 수 없는 원본 데이터를 예측 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 속성 할당 되어, 업데이트, 삽입 및 삭제 기능이 비활성화 됩니다. 이 경우, 메서드 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanDelete%2A>, <xref:System.Web.UI.WebControls.EntityDataSourceView.CanInsert%2A>, 및 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanUpdate%2A> 관련 <xref:System.Web.UI.WebControls.EntityDataSourceView> 제어 모든 반환 `false`합니다.  
  
 때는 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 속성이 설정 되어 있으면 예외가 발생 될 때는 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 메서드는 데이터 바인딩된 컨트롤에서는 <xref:System.Web.UI.WebControls.EntityDataSource> 으로 제어 값 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A>, <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A>, 또는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 로 설정 된 `true`합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 속성의 프로젝션을 반환 하는 쿼리로 설정 됩니다 (예를 들어 "`SELECT p.ProductID, p. Name FROM AdventureWorksEntities.Products AS p`"), 즉 <xref:System.Data.Common.DbDataRecord> 반환 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 제공 된 Entity SQL 명령 제품 개체의 컬렉션을 반환합니다.  
  
```  
<asp:EntityDataSource ID="ProductDataSource" runat="server"   
    CommandText="SELECT value p FROM Products AS p  
        WHERE p.ProductID  
        BETWEEN @OrderIdMin AND @OrderIdMax"  
    ConnectionString="name=AdventureWorksEntities"   
    DefaultContainerName="AdventureWorksEntities" >  
    <CommandParameters>  
        <asp:ControlParameter Name="OrderIdMin"   
            ControlID="ProductIdMin" Type="Int32"/>  
        <asp:ControlParameter Name="OrderIdMax"   
            ControlID="ProductIdMax" Type="Int32" />  
    </CommandParameters>  
</asp:EntityDataSource>  
  
```  
  
 다음 예제에서는 프로젝션 된 일련의 열을 반환합니다.  
  
```  
<asp:EntityDataSource ID="ProductDataSource" runat="server"   
    CommandText="SELECT p.ProductID, p.ProductName, p.UnitsOnOrder  
          FROM Products AS p   
          WHERE p.ProductID BETWEEN @OrderIDMin AND @OrderIDMax"   
          ContextTypeName="AdventureWorksModel. AdventureWorksEntities">  
    <CommandParameters>  
        <asp:ControlParameter Name="OrderIDMin"   
                ControlID="ProductIDMinTextBox" Type="Int32"/>  
        <asp:ControlParameter Name="OrderIDMax"   
                ControlID="ProductIDMaxTextBox" Type="Int32" />  
    </CommandParameters>  
</asp:EntityDataSource>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리를 실행하는 데 사용되는 연결 문자열을 가져오거나 설정합니다.</summary>
        <value>쿼리에 대한 연결 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 응용 프로그램 구성 파일 요소에 저장 된 명명 된 EDM 연결 문자열에서 컨트롤을 초기화할 수 있습니다. EDM 엔터티 데이터 모델 마법사를 사용 하 여 만들어질 때 응용 프로그램 구성 파일에 명명된 된 EDM 연결이 만들어집니다. 명명 된 EDM 연결 문자열은 응용 프로그램 구성 파일에서 발견 되 면 연결이 EntityDataSource 디자이너의 데이터 소스 구성 마법사에 옵션으로 표시 됩니다. 자세한 내용은 참조 [데이터 소스 구성 마법사 (EntityDataSource 컨트롤)](http://msdn.microsoft.com/library/263976a5-2406-47c0-8919-c6af6e76d78e)합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 속성이 지정 되지 않은 두는 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 및 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 만들 컨트롤을에 대 한 속성을 설정 해야 합니다는 <xref:System.Data.Objects.ObjectContext>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of EntityDataSourceContextCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextCreatedEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" />가 엔터티 데이터 개체로 작업하는 데 사용되는 <see cref="T:System.Data.Objects.ObjectContext" /> 작성을 완료할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 액세스 하려면이 이벤트를 처리는 <xref:System.Data.Objects.ObjectContext> 에서 사용 하는 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 하는 쿼리를 실행 하 고 변경 내용을 추적 합니다. 이 컨텍스트 개체를 저장 하 고 외부 후속 작업에 사용할 수는 <xref:System.Web.UI.WebControls.EntityDataSource>합니다. <xref:System.Data.Objects.ObjectContext> 에서 가져온는 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs> 에서 반환 하는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 이벤트입니다. 자세한 내용은 참조 [개체 컨텍스트 수명 주기 관리 (EntityDataSource)](http://msdn.microsoft.com/library/67bc2486-112c-47c3-b23f-0297f7ac2160)합니다. 개체 컨텍스트에 대 한 자세한 내용은 참조 하십시오. [Id 확인, 상태 관리 및 변경 내용 추적](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)합니다.  
  
 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 이벤트 할당할 수 있습니다는 <xref:System.Data.Objects.ObjectContext> 외부 연속 작업에 대 한 변수를 만든는 <xref:System.Web.UI.WebControls.EntityDataSource>합니다. <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs.Context%2A?displayProperty=nameWithType> 에서 작성 된 컨텍스트를 포함 하는 속성은 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 이벤트입니다. 사용자 중의 컨텍스트를 할당 하지 않습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 에 포함 된 이벤트, 컨텍스트 인스턴스가 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs.Context%2A?displayProperty=nameWithType> 하 여 만든 페이지입니다는 <xref:System.Web.UI.WebControls.EntityDataSource> 기반는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A?displayProperty=nameWithType>, <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A?displayProperty=nameWithType>, 또는 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A?displayProperty=nameWithType> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of EntityDataSourceContextCreatingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextCreatingEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" />가 엔터티 데이터 개체 작업에 사용되는 <see cref="T:System.Data.Objects.ObjectContext" />를 만들 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 이벤트를 직접 제공 하려면 <xref:System.Data.Objects.ObjectContext> 새 대신 <xref:System.Data.Objects.ObjectContext> 생성 합니다. 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 이벤트 처리 되지 않거나 처리기를 제공 하지 않습니다는 <xref:System.Data.Objects.ObjectContext>, <xref:System.Web.UI.WebControls.EntityDataSource> 해당 구성에 따라 컨텍스트를 만듭니다. 경우는 <xref:System.Data.Objects.ObjectContext> 에 제공 되는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 이벤트를 동일한 인스턴스에 할당 되는 `Context` 후속 이벤트의 이벤트 개체의 속성입니다. 자세한 내용은 참조 [개체 컨텍스트 수명 주기 관리 (EntityDataSource)](http://msdn.microsoft.com/library/67bc2486-112c-47c3-b23f-0297f7ac2160)합니다. 개체 컨텍스트에 대 한 자세한 내용은 참조 하십시오. [Id 확인, 상태 관리 및 변경 내용 추적](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)합니다.  
  
   
  
## Examples  
 만드는 방법을 보여 주는 다음 예제는 <xref:System.Data.Objects.ObjectContext> 의 변수는 <xref:System.Web.UI.Page> 개체에 할당 하는 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs.Context%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs> 개체입니다.  
  
```csharp  
public partial class _Default : System.Web.UI.Page  
    {  
        AdventureWorksModel.AdventureWorksEntities objCtx =  
            new AdventureWorksModel.AdventureWorksEntities();  
  
        protected void EntityDataSource2_ContextCreating(object sender,   
            EntityDataSourceContextCreatingEventArgs e)  
        {  
            e.Context = objCtx;  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of EntityDataSourceContextDisposingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextDisposingEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectContext" />가 삭제되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 방지 하기 위해이 이벤트를 처리는 <xref:System.Data.Objects.ObjectContext> 에서 사용 하는 <xref:System.Web.UI.WebControls.EntityDataSource> 삭제 되 고에서 제어 합니다. 단일 사용 하려는 경우에 이렇게 <xref:System.Data.Objects.ObjectContext> 의 인스턴스 또는 여러 컨트롤을 사용 하 여 페이지에서 인스턴스는 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤입니다. 방지 하기 위해는 <xref:System.Data.Objects.ObjectContext> 설정의 삭제 되지는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs> 개체를 `true`합니다. 자세한 내용은 참조 [개체 컨텍스트 수명 주기 관리 (EntityDataSource)](http://msdn.microsoft.com/library/67bc2486-112c-47c3-b23f-0297f7ac2160)합니다. 개체 컨텍스트에 대 한 자세한 내용은 참조 하십시오. [Id 확인, 상태 관리 및 변경 내용 추적](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)합니다.  
  
   
  
## Examples  
 기존 변경 하지 않으려면 <xref:System.Data.Objects.ObjectContext> 나중에 참조할 취소에 대 한 인스턴스 멤버는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 다음 코드에 의해 표시 된 것 처럼 이벤트입니다.  
  
```csharp  
protected void EntityDataSource2_ContextDisposing(object sender,   
    EntityDataSourceContextDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextType">
      <MemberSignature Language="C#" Value="public Type ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ContextType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextType : Type with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectContext" />에서 사용하는 형식화된 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Data.Objects.ObjectContext" />에서 파생되는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext> 에서 사용 하는 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤에서 액세스할 수는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextType%2A> 속성입니다. 자세한 내용은 참조 [개체 컨텍스트 수명 주기 관리 (EntityDataSource)](http://msdn.microsoft.com/library/67bc2486-112c-47c3-b23f-0297f7ac2160)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectContext" /> 컨트롤에서 사용하는 형식화된 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />의 정규화된 이름을 가져오거나 설정합니다.</summary>
        <value>형식의 정규화된 이름인 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤의 형식화 된 정규화 된 형식 이름을 지정 하는 문자열은 <xref:System.Data.Objects.ObjectContext> 에서 사용 하는 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 합니다. 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 속성이 지정 되지 않은 두는 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 및 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 만들 컨트롤을에 대 한 속성을 설정 해야 합니다는 <xref:System.Data.Objects.ObjectContext>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.EntityDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.EntityDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As EntityDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::EntityDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.EntityDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.EntityDataSourceView" Usage="entityDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.EntityDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 컨트롤에 연결된 <see cref="T:System.Web.UI.WebControls.EntityDataSourceView" />의 새 인스턴스를 만듭니다.</summary>
        <returns>데이터 바인딩된 컨트롤에 대한 인터페이스로 사용되는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 보기를 제공 하려면이 메서드는 파생된 클래스에서 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 컨테이너 이름을 가져오거나 설정합니다.</summary>
        <value>기본 컨테이너 이름인 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 속성이 지정 되지 않은 두는 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 및 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 만들 컨트롤을에 대 한 속성을 설정 해야 합니다는 <xref:System.Data.Objects.ObjectContext>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체가 데이터 소스에서 삭제된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 후에 이벤트가 발생는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드가 성공적으로 호출한에 <xref:System.Data.Objects.ObjectContext> 개체 삭제 합니다. <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체 삭제 된 개체에 액세스 하는 데 사용 됩니다. 이 개체는는 <xref:System.Data.EntityState.Detached> 상태입니다.  
  
 개체를 삭제할 때 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 이벤트가 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 개체가 설정 반환 된 <xref:System.Exception>, 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 속성이로 설정 되어 `null`합니다. 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삭제 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>삭제 작업 중에 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 4 또는 이전 버전을 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되 고 게시 하는 동안 자동으로 유지 됩니다. ASP.NET 4.5를 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되지 않으며 각 HTTP 요청에 대 한 값을 설정 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체가 데이터 소스에서 삭제되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 이벤트가 발생 하기 전에 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드가 호출 되는 <xref:System.Data.Objects.ObjectContext> 개체를 삭제 하려면. <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체를 삭제할 개체에 액세스 하는 데 사용 됩니다. 이 개체의 속성을 완벽 하 게 설정할 수 있습니다. 개체를 식별 하는 데 필요한 속성에 대해서만 설정 해야 합니다.  
  
 삭제 되는 개체를 중지 하려면 다음 설정의 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체를 `true`합니다.  
  
 준비 개체를 삭제 하는 경우 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 이벤트가 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체가 설정 반환 된 <xref:System.Exception>합니다.  
  
 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤을 통해 개체를 삭제할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 삭제 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 경우에 설정할 수 없습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 속성을 사용할 수 있습니다.  
  
 A `false` 에 할당 된 값은 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 강제로 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanDelete%2A> 관련 된 속성 <xref:System.Web.UI.WebControls.EntityDataSourceView> 반환할 개체 `false`합니다. 때는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 속성이로 설정 되어 `false`, <xref:System.NotSupportedException> 데이터 바인딩된 컨트롤을 호출 하는 경우 발생는 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.EntityDataSourceView>합니다.  
  
 업데이트 가능성에 대 한 조건 중 하나라도 충족 되지 않는 경우와 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.EntityDataSource> 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFlattening">
      <MemberSignature Language="C#" Value="public bool EnableFlattening { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableFlattening" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableFlattening" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableFlattening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableFlattening { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableFlattening : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableFlattening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>래퍼 생성을 해제할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>속성이 수정되면 <see langword="True" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 초기화 하는 <xref:System.Web.UI.WebControls.EntityDataSource> 제어를 사용 하 여는 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 속성을는 <xref:System.Web.UI.WebControls.EntityDataSource> 개체에 결과에서 각 엔터티 인스턴스를 래핑하는 <xref:System.ComponentModel.ICustomTypeDescriptor> 형식입니다. 자세한 내용은 참조 [평면화 개체 (EntityDataSource)](http://msdn.microsoft.com/library/08a30ef3-1132-4ac4-856c-5ed3d65eaf16)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤을 통해 개체를 추가할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 삽입 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 경우에 설정할 수 없습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 속성이 `true`합니다.  
  
 A `false` 에 할당 된 값은 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 강제로 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanInsert%2A> 관련 된 속성 <xref:System.Web.UI.WebControls.EntityDataSourceView> 반환할 개체 `false`합니다. 때는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 속성이로 설정 되어 `false`, <xref:System.NotSupportedException> 데이터 바인딩된 컨트롤을 호출 하는 경우 발생는 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.EntityDataSourceView>합니다.  
  
 업데이트 가능성에 대 한 조건 중 하나라도 충족 되지 않는 경우와 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.EntityDataSource> 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤을 통해 개체를 수정할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 업데이트 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 경우에 설정할 수 없습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 속성이 `true`합니다.  
  
 A `false` 에 할당 된 값은 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanUpdate%2A> 관련 된 속성 <xref:System.Web.UI.WebControls.EntityDataSourceView> 반환할 개체 `false`합니다. 때는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 속성이로 설정 되어 `false`, <xref:System.NotSupportedException> 데이터 바인딩된 컨트롤을 호출 하는 경우 발생는 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.EntityDataSourceView>합니다.  
  
 설정의 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 속성을 `true` 업데이트 가능성을 보장 하지 않습니다.  
  
 업데이트 가능성에 대 한 조건 중 하나라도 충족 되지 않는 경우와 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.EntityDataSource> 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySetName">
      <MemberSignature Language="C#" Value="public string EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EntitySetName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntitySetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntitySetName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤에서 사용하는 엔터티 집합의 이름을 가져오거나 설정합니다.</summary>
        <value>엔터티 집합 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 컨트롤에서 액세스할 수 있는 개체 형식의 엔터티 집합을 지정 하는 데 사용 합니다. 값은 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 속성은 컨트롤에서 사용 되는 기본 SELECT 문입니다. 에 제공 되는 Entity SQL 식으로는 쿼리를 지정 하는 경우에 설정이 필요 하지 않습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 속성입니다. 자세한 내용은 참조 [사용자 지정 명령 텍스트 (EntityDataSource)](http://msdn.microsoft.com/library/d42e90d0-1443-474e-8940-53f504d6fc91)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTypeFilter">
      <MemberSignature Language="C#" Value="public string EntityTypeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntityTypeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityTypeFilter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntityTypeFilter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntityTypeFilter : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 파생 형식에 대한 결과만으로 쿼리를 제한하는 식을 가져오거나 설정합니다.</summary>
        <value>필터 식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤 특정 파생 된 형식으로 반환 해야 합니다는 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 도이 파생 형식의 이름을 지정 하려면 속성을 설정 해야 합니다. 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 속성 지정 다형 결과 생성할 수 있는 엔터티 집합은 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 데이터를 편집할 수 있게 되기를 속성이 필요 합니다. 적용과 같은 결과가 <xref:System.Data.Objects.ObjectQuery%601.OfType%60%601?displayProperty=nameWithType> 메서드는 <xref:System.Data.Objects.ObjectQuery%601?displayProperty=nameWithType>합니다. 데이터 바인딩은 읽기 전용 이면 하면 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 속성이 필요 하지 않습니다. 이 경우 엔터티 집합에 대 한 기본 엔터티 형식의 속성이 쿼리에서 반환 된 개체의 속성이 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member GetView : string -&gt; System.Web.UI.DataSourceView&#xA;override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="entityDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">검색할 뷰의 이름입니다. <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤은 한 개의 뷰만 지원하기 때문에 <c>viewName</c>은 무시됩니다.</param>
        <summary>데이터 소스 컨트롤과 연결된 명명된 데이터 소스 뷰를 가져옵니다.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.EntityDataSourceView" /> 컨트롤과 연결된 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 하나의 데이터 원본 뷰를 지원 합니다. 모든 데이터 원본 뷰 개체와 마찬가지로 <xref:System.Web.UI.WebControls.EntityDataSourceView> 개체 데이터 소스 제어와 연결 된 해당 기능을 정의 기본 데이터베이스에서 데이터를 검색 하는 데 필요한 되며 정렬, 같은 작업을 수행 하는 모든 작업 수행 삽입, 삭제 및 업데이트 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="abstract member GetViewNames : unit -&gt; System.Collections.ICollection&#xA;override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="entityDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤과 연결된 뷰 개체 목록을 나타내는 이름의 컬렉션을 가져옵니다.</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> 컨트롤과 연결된 뷰의 이름이 들어 있는 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤의 기본 데이터에 대해 하나의 뷰만 지원 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.GetViewNames%2A> 메서드를 문자열로이 한 개 뷰 이름의 단일 요소 컬렉션을 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 결과를 그룹화하는 방법을 지정하는 Entity SQL 식을 가져오거나 설정합니다.</summary>
        <value>GROUP BY 절입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public string Include { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Include" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Include" />
      <MemberSignature Language="VB.NET" Value="Public Property Include As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Include { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Include : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Include" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 결과에 포함할 관련 개체를 지정하는 식을 가져오거나 설정합니다.</summary>
        <value>쿼리 결과에 반환할 쉼표로 구분된 쿼리 경로 목록입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤 특정 쿼리 개체와 함께 반환 된 개체 되는 정의 하는 쿼리 경로는 쉼표로 구분 된 목록을 지정 합니다. 각 문자열의 쉼표로 구분 된 값에 별도 호출으로 수정 되지 않은 상태로 전달 됩니다는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 의 메서드는 <xref:System.Data.Objects.ObjectQuery%601> 에서 실행 되는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]합니다. 이 쿼리는 의해 규제를 받는 데이터의 원본을 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 속성은에 적용 된 인수는 <xref:System.Data.Objects.ObjectQuery%601> 실행 하기 전에.  
  
 문자열에 제공 되는 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 속성에 전달 되는 문자열로 같은 형식을 사용는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 방식의 <xref:System.Data.Objects.ObjectQuery%601>합니다. 쿼리 경로 사용 하 여 관련된 개체를 자동으로 로드 하는 방법의 예 참조 [하는 방법: 도형 결과를 쿼리 경로 사용 하 여](http://msdn.microsoft.com/library/100bf7f5-00ba-4c17-8e27-7a8a14831093)합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 속성은 쿼리 경로 지정 하는 데 사용, 관련된 엔터티 속성을 읽기 전용 데이터 바인딩에 사용할 수 있습니다. 쿼리 경로에 관련된 개체를 명시적으로 포함 되지 않는 경우 속성 설명자 데이터 바인딩에 사용할 수 있지만 속성 자체는 null 값을 반환 합니다. 이 경우 관련된 개체는 해당 값을 표시 하려면 명시적으로 로드 되어야 합니다. 자세한 내용은 참조 [관련 개체 로드](http://msdn.microsoft.com/library/452347d2-7b3b-44cd-9001-231299a28cb1)합니다.  
  
   
  
## Examples  
 다음 XML 태그를 반환 하는 쿼리 경로 정의 `SalesOrderHeader` 관련 된 개체는 반환 된 `Contact` 개체입니다. 각 `SalesOrderHeader`, 관련 `SalesOrderDetail` 및 `Address` 개체도 반환 합니다.  
  
```  
<asp:EntityDataSource ID="ContactDataSource" runat="server"   
    AutoGenerateWhereClause="True" ConnectionString="name=AdventureWorksEntities"   
    DefaultContainerName="AdventureWorksEntities" EnableDelete="True"   
    EnableInsert="True" EnableUpdate="True" EntitySetName="Contact"   
    Include="SalesOrderHeader.SalesOrderDetail, SalesOrderHeader.Address">  
    <WhereParameters>  
        <asp:ControlParameter ControlID="customerId" Name="ContactID"   
            PropertyName="Text" />  
    </WhereParameters>  
</asp:EntityDataSource>  
```  
  
 이전 XML 예제는 다음 <xref:System.Data.Objects.ObjectQuery%601> 라는 `customers`:  
  
```  
ObjectQuery<Contact> customers =  
      context.Contact  
       .Where("it.ContactID = @ContactID",  
         new ObjectParameter("ContactID", customerId))  
        .Include("SalesOrderHeader.SalesOrderDetail")  
        .Include("SalesOrderHeader.Address");  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스에서 새 개체가 만들어진 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 개체 데이터가 데이터 원본에 유지 되 면 오류가 발생 한 경우 또는 데이터 원본에서 추가 된 개체를 만들 때 이벤트가 발생 합니다. <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 개체 추가 된 개체에 액세스 하는 데 사용 됩니다.  
  
 이 개체의 속성에는 모든 데이터 원본에서 생성 된 값을 포함 하 여 데이터 원본에서 반환 된 값을 포함 합니다.  
  
 개체는 데이터 원본에 유지 될 때 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 이벤트는 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 개체가 설정 반환 된 <xref:System.Exception>합니다. 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스에 새 개체가 유지되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 새 개체를 데이터 원본에 유지 되기 전에 이벤트가 발생 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 이벤트를 사용 하면 수정 또는 추가 되는 개체를 확인 하거나 다른 개체를 추가 하거나 작업을 취소 합니다. 추가 될 개체가 액세스할 수 있습니다는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체입니다. 사용자가에 올바른 엔터티 형식에 설정 된 다른 개체를 제공 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 속성입니다.  
  
 추가 될 개체를 중지 하려면 다음 설정의 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체를 `true`합니다.  
  
 새 개체를 만들 때 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 이벤트가 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체가 설정 반환 된 <xref:System.Exception>합니다.  
  
 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>삽입 작업 중에 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 4 또는 이전 버전을 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되 고 게시 하는 동안 자동으로 유지 됩니다. ASP.NET 4.5를 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되지 않으며 각 HTTP 요청에 대 한 값을 설정 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="abstract member LoadControlState : obj -&gt; unit&#xA;override this.LoadControlState : obj -&gt; unit" Usage="entityDataSource.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">상태 정보를 포함하는 <see cref="T:System.Object" />입니다.</param>
        <summary>유지해야 하는 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤에 있는 속성의 상태를 로드합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInit : EventArgs -&gt; unit&#xA;override this.OnInit : EventArgs -&gt; unit" Usage="entityDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.Page.LoadComplete" /> 이벤트 처리기를 <see cref="T:System.Web.UI.Page" /> 컨트롤이 포함된 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤에 추가합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnload : EventArgs -&gt; unit&#xA;override this.OnUnload : EventArgs -&gt; unit" Usage="entityDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.Control.Unload" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 결과를 정렬하는 방법을 지정하는 Entity SQL 식을 가져오거나 설정합니다.</summary>
        <value>ORDER BY 절입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 Entity SQL 쿼리 식을 나타내는 문자열입니다. 이 문자열은 수정 하지 않고로 전달 된 <xref:System.Data.Objects.ObjectQuery%601> 에서 실행 되는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]합니다. 이 쿼리는 의해 규제를 받는 데이터의 원본을 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 합니다. 문자열에 제공 되는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 속성에 전달 되는 문자열로 같은 형식을 사용는 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 방식의 <xref:System.Data.Objects.ObjectQuery%601>합니다. 쿼리 결과 정렬 하는 절을 사용 하는 방법의 예 참조 [하는 방법: 데이터 정렬](http://msdn.microsoft.com/library/c05f2506-cb9d-4ebc-822b-300042ad53e7)합니다.  
  
   
  
## Examples  
 .Aspx 파일에 다음 예에서 XML 태그는 컨트롤에서 값을 검색 하 고에 대 한 매개 변수로 전달 된 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"   
  ConnectionString="name=AdventureWorksEntities"   
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"   
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"   
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""   
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">  
  <WhereParameters>  
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"   
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />  
  </WhereParameters>  
</asp:EntityDataSource>  
  
```  
  
 이전 XML 예제는 다음과 같습니다 <xref:System.Data.Objects.ObjectQuery%601> 라는 `onlineOrders`:  
  
```  
ObjectQuery<SalesOrderHeader> onlineOrders =  
      context.SalesOrderHeader  
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",  
         new ObjectParameter("ordercost", orderCost))  
        .OrderBy("it.TotalDue DESC");  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ORDER BY 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>ORDER BY 절을 만드는 데 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 로 설정 되어 `true`, 컨트롤에서 매개 변수에서 ORDER BY 절을 자동으로 생성는 <xref:System.Web.UI.WebControls.ParameterCollection> 에 할당 된는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 속성. 이를 명시적으로 ORDER BY 절을 지정할 필요가 없습니다는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 속성입니다. ORDER BY 절에서 생성은 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 속성을 사용 하려면는 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 속성 컬렉션에서 매개 변수가 쿼리에서 반환 되는 항목의 단일 속성을 식별 합니다.  
  
   
  
## Examples  
 다음 예제에서는 자동으로 ORDER BY 절을 생성 하 고 값이 사용 하는 `orderByDropDownList` 매개 변수의 값을 설정 합니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"   
    ConnectionString="name=AdventureWorksEntities"  
    DefaultContainerName="AdventureWorksEntities" EnableDelete="True"   
    EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"   
    Where="it.OnlineOrderFlag = true" AutoGenerateOrderByClause="True">  
    <OrderByParameters>  
        <asp:ControlParameter Name="OrderByParameter"   
            ControlID="orderByDropDownList" Type="String" />  
    </OrderByParameters>  
</asp:EntityDataSource>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; QueryCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.QueryCreatedEventArgs&gt; QueryCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.QueryCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCreated As EventHandler(Of QueryCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::Web::UI::WebControls::QueryCreatedEventArgs ^&gt; ^ QueryCreated;" />
      <MemberSignature Language="F#" Value="member this.QueryCreated : EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; " Usage="member this.QueryCreated : System.EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IQueryableDataSource.QueryCreated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.EntityDataSource" />가 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤을 구성하는 동안 지정된 엔터티 SQL 쿼리를 만든 이후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 참조 [LINQ 쿼리 EntityDataSource 적용](http://msdn.microsoft.com/library/cb70db56-9f9d-4b79-98fe-f03dd5ad1e38)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="abstract member SaveControlState : unit -&gt; obj&#xA;override this.SaveControlState : unit -&gt; obj" Usage="entityDataSource.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>유지해야 하는 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 컨트롤에 있는 속성의 상태를 저장합니다.</summary>
        <returns>상태 정보를 포함하는 <see cref="T:System.Object" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 결과에 포함할 속성을 정의하는 프로젝션을 가져오거나 설정 합니다.</summary>
        <value>ORDER BY 절을 만드는 데 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤 Entity SQL 쿼리 문을 나타내는 문자열을 포함 합니다. 그러면 지정된 된 쿼리에 의해 반환 된 개체의 속성 집합을 예상할 수 있습니다.  
  
 이 문자열은 수정 하지 않고로 전달 된 <xref:System.Data.Objects.ObjectQuery%601> 에서 실행 되는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]합니다. 이 쿼리는 의해 규제를 받는 데이터의 원본을 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 합니다. 문자열에 제공 되는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성에 전달 되는 문자열로 같은 형식을 사용는 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 방식의 <xref:System.Data.Objects.ObjectQuery%601>합니다. 절을 사용 하 여 쿼리에 대 한 프로젝션을 정의 하는 방법의 예 참조 [하는 방법: 익명 형식 개체를 반환 하는 쿼리 실행](http://msdn.microsoft.com/library/3b264025-e911-4d73-90ce-992d2b9d189d)합니다.  
  
 프로젝션 된 데이터에 대 한 업데이트가 지원 되지 않습니다. 즉, 사용 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성을 데이터 바인딩에 프로젝션을 지정 업데이트를 지원 하지 않습니다.  
  
 프로젝션 페이징을 사용을 정의할 때 결과 정렬 하는 기준인 속성을 정의 해야 합니다. 즉, when 설정한는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성을 프로젝션 정의 되었으며 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 로 설정 `true`를 설정 해야는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 순서를 정의 하거나 설정 하려면 속성은 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 속성을 `true` 주문 추가 매개 변수를 여는 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 컬렉션입니다.  
  
 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 경우에 설정할 수 없습니다 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A>, <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A>, 또는 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 를 사용할 수 있습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성의 프로젝션을 반환 하는 쿼리로 설정 됩니다 (예를 들어 `SELECT p.ProductID, p. Name FROM AdventureWorksEntities.Products AS p`), 즉 <xref:System.Data.Common.DbDataRecord> 반환 됩니다.  
  
   
  
## Examples  
 다음 XML 태그를 사용 하 여는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성을 프로젝션 제품 종류의 속성 중 여섯 개를 사용 하 여 지정 합니다.  
  
```  
<asp:EntityDataSource ID="ProductDataSource" runat="server"   
    ConnectionString="name=AdventureWorksEntities"   
    DefaultContainerName="AdventureWorksEntities"   
    EntitySetName="Product" OrderBy="it.[ProductID]"   
    Select="it.[ProductID], it.[Name], it.[ListPrice],   
    it.[Size], it.[Style], it.[Weight]">  
</asp:EntityDataSource>  
  
```  
  
 이전 XML 예제는 다음 <xref:System.Data.Objects.ObjectQuery%601> 라는 `products`:  
  
```  
ObjectQuery<Product> products = context.Product  
    .Select(it.[ProductID], it.[Name], it.[ListPrice],   
      it.[Size], it.[Style], it.[Weight])  
    .OrderBy("it.[ProductID]");  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.EntityDataSource.Select" /> 속성이 <see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />의 쿼리 프로젝션 및 값을 지정하면 <see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableDelete" /> 또는 <see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableInsert" />는 <see langword="true" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of EntityDataSourceSelectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceSelectedEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리가 실행된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 이벤트는 쿼리가 실행 된 데이터 반환 된 후 발생 합니다. 쿼리를 준비 또는 실행 중 오류가 발생 한 경우에 발생 합니다.  
  
 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Results%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 개체에 포함 되어는 <xref:System.Collections.IEnumerable> 쿼리에서 반환 되는 개체입니다. 처리는 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 반환 된 엔터티를 검색 하 고 저장할 이벤트는 <xref:System.Web.UI.Control.ViewState%2A>합니다. 페이지에 개체 변경 내용을 유지 하려면이 작업을 수행 합니다.  
  
 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.TotalRowCount%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 개체 페이징에 데이터 바인딩된 컨트롤에 의해 전달 된 값에 관계 없이 모든 페이지의 총 개체 수를 보여 줍니다. <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.TotalRowCount%2A> 페이징이 활성화 된 경우와 같이만 데이터 바인딩된 컨트롤에서 필요한 경우를 검색 합니다.  
  
 쿼리 준비 하거나, 실행할 때 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 이벤트가 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Exception%2A> 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 개체가 설정 반환 된 <xref:System.Exception>, 및 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Results%2A> 속성이로 설정 되어 `null`합니다. 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of EntityDataSourceSelectingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceSelectingEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리가 생성 및 실행되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 이벤트는 쿼리 생성 및 실행 되기 전에 발생 합니다. 처리는 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 의 구성을 수정 하는 이벤트는 <xref:System.Web.UI.WebControls.EntityDataSource> 또는 읽거나 쿼리 생성 및 실행 되기 전에 데이터 바인딩된 컨트롤에서 인수를 변경 합니다.  
  
 설정의 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs> 개체를 `true` 쿼리를 취소 하 합니다. SELECT 작업이 취소 되 면 데이터 바인딩된 컨트롤에 데이터가 반환 됩니다.  
  
 경우 `AllowPaging` 로 설정 된 `true` 데이터 바인딩된 컨트롤에는 <xref:System.Web.UI.WebControls.EntityDataSource> 호출는 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> 및 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 쿼리 작성기 메서드를 <xref:System.Data.Objects.ObjectQuery%601> 의 값을 사용 하는 <xref:System.Web.UI.DataSourceSelectArguments.StartRowIndex%2A> 및 <xref:System.Web.UI.DataSourceSelectArguments.MaximumRows%2A> 의 속성 <xref:System.Web.UI.DataSourceSelectArguments> 개체입니다.  
  
 경우 `AllowSorting` 로 설정 된 `true` 데이터 바인딩된 컨트롤에는 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 의 <xref:System.Web.UI.DataSourceSelectArguments> 개체 수를 변경할 때의 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 이벤트를 처리 합니다. WHERE 등의 다른 쿼리 연산자 또는 ORDER BY, 페이지 태그에 지정 된 다음에 적용 됩니다는 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 이벤트가 발생 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프로젝션을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>프로젝션을 만드는 데 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마찬가지로 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 의 메서드는 <xref:System.Data.Objects.ObjectQuery%601> 클래스, 매개 변수에서 정의 된 프로젝션에 전달 될 수는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성입니다. <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤 지정는 <xref:System.Web.UI.WebControls.ParameterCollection> 쿼리의 SELECT 문에 제공 하는 매개 변수를 포함 하 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 속성 명명 된 인수를 사용 하 여에 제공 되는 문자열에 지정 된 매개 변수를 참조는 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 속성입니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 속성이 설정 되지 않은, 매개 변수 대체 단어가 이루어집니다. 모든 매개 변수 이름은 SELECT 문에서 접두사로 "`@"` 기호`,` 에 일치 하는 이름이 있어야는 <xref:System.Web.UI.WebControls.ParameterCollection>합니다. 매개 변수에 대해 null 값이 허용 되지 않습니다는 <xref:System.Web.UI.WebControls.ParameterCollection>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터를 업데이트 또는 삭제하기 전에 다른 프로세스에서 변경하지 않았음을 확인하기 위해 데이터 소스의 데이터를 뷰 상태에 저장해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>값이 뷰 상태에 저장되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변경 내용을 추적 하려면 때 업데이트 및 삭제 작업을 사용할 수는 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤에 로드 된 개체의 원래 값에 대 한 정보를 저장 해야는 <xref:System.Web.UI.PageStatePersister.ControlState%2A>합니다. 뷰 상태에이 필수 정보를 저장 합니다. 페이지 크기가 늘어납니다. 뷰 상태에 원래 값을 설정 하 여 저장을 비활성화할 수는 <xref:System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState%2A> 속성을 `false`합니다. 이 작업을 수행 하는 경우는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] 업데이트 된 개체의 동시성을 추적할 수 없습니다. 자세한 내용은 참조 [업데이트 데이터 (EntityDataSource)](http://msdn.microsoft.com/library/ca153eec-6817-4c1d-b262-efd6d35b0246)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged">
      <MemberSignature Language="C#" Value="void IQueryableDataSource.RaiseViewChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.System#Web#UI#WebControls#IQueryableDataSource#RaiseViewChanged" />
      <MemberSignature Language="VB.NET" Value="Sub RaiseViewChanged () Implements IQueryableDataSource.RaiseViewChanged" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged() = System::Web::UI::WebControls::IQueryableDataSource::RaiseViewChanged;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>매개 변수 개체가 변경되었고 데이터 바인딩 컨트롤을 새로 고쳐야 함을 데이터 바인딩 컨트롤에 알립니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="abstract member TrackViewState : unit -&gt; unit&#xA;override this.TrackViewState : unit -&gt; unit" Usage="entityDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>서버 컨트롤의 뷰 상태 변경 사항 추적 작업을 실행하여 서버 컨트롤의 <see cref="T:System.Web.UI.StateBag" /> 개체에 변경 사항이 저장되도록 합니다. 이 개체는 <see cref="P:System.Web.UI.Control.ViewState" /> 속성을 통해 액세스할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 <xref:System.Web.UI.Control.TrackViewState%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체에 대한 변경 사항이 데이터 소스에 유지된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 이벤트는 데이터 원본에 수정된 된 개체에 대 한 변경 내용은 보관 또는 변경 내용을 적용할 때 오류가 발생 한 경우 발생 합니다. <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 개체 수정 된 개체에 액세스 하는 데 사용 됩니다.  
  
 이 개체의 속성 모든 서버에서 생성 된 값을 포함 하 여 데이터 원본에서 반환 된 값을 포함 합니다.  
  
 변경 내용이 데이터 원본에 유지 되는 동안 오류가 발생 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 이벤트가 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 개체가 설정 반환 된 <xref:System.Exception>합니다. 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>업데이트 작업 중에 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 4 또는 이전 버전을 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되 고 게시 하는 동안 자동으로 유지 됩니다. ASP.NET 4.5를 대상으로 하는 웹 응용 프로그램에 대 한 속성 값 뷰 상태에 저장 되지 않으며 각 HTTP 요청에 대 한 값을 설정 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체에 대한 변경 사항이 데이터 소스에 유지되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 이벤트는 개체의 속성에 대 한 변경 데이터 원본에 유지 되기 전에 발생 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 이벤트를 사용 하면 수정 하거나 개체에 대 한 변경 내용을 확인, 다른 개체를 제공 또는 변경 내용이 유지 되기 전에 작업을 취소할 수 있습니다. 수정 된 개체에 액세스할 수는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체입니다. 사용자가에 올바른 엔터티 형식에 설정 된 다른 개체를 제공 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 속성입니다.  
  
 처리는 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 수정 해야 하는 경우 이벤트는 <xref:System.Data.Objects.ObjectStateEntry> 동시성 제어에 대 한 다른 원래 값을 설정 하는 개체에 대 한 합니다. 자세한 내용은 참조 [변경 내용을 저장 하 고 동시성 관리](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)합니다.  
  
 변경 내용을 계속 남아 있지을 중지 하려면는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체를 `true`합니다.  
  
 개체를 인스턴스화하는 동안 오류가 발생 하는 경우 속성을 수정할는 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 이벤트가 및 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 속성의는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 개체가 설정 반환 된 <xref:System.Exception>합니다.  
  
 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 설정 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성을 `true`합니다. 이렇게 하면 예외가 다시 발생 하지 않습니다. 값을 지정 하는 경우 `false` 에 대 한는 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 속성에는 <xref:System.Web.UI.WebControls.EntityDataSource> 다시 예외를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 결과를 필터링하는 방법을 지정하는 Entity SQL 식을 가져오거나 설정합니다.</summary>
        <value>WHERE 절입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤은 Entity SQL 쿼리 조건자 인 절을 나타내는 문자열입니다. 이 문자열은 수정 하지 않고로 전달 된 <xref:System.Data.Objects.ObjectQuery%601> 에서 실행 되는 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]합니다. 이 쿼리는 의해 규제를 받는 데이터의 원본을 <xref:System.Web.UI.WebControls.EntityDataSource> 제어 합니다. 문자열에 제공 되는 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성에 전달 되는 문자열로 같은 형식을 사용는 <xref:System.Data.Objects.ObjectQuery%601.Where%2A> 방식의 <xref:System.Data.Objects.ObjectQuery%601>합니다. 절을 사용 하 여 쿼리를 필터링 하는 방법의 예 참조 [하는 방법: 데이터 필터링](http://msdn.microsoft.com/library/776f8556-3350-4572-804a-b1513515c1b2)합니다.  
  
 엔터티 형식 속성을 식으로 연결 하 여 쿼리 결과 필터링 하려면 정보에 대 한 참조는 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 속성입니다.  
  
   
  
## Examples  
 .Aspx 파일에 다음 예에서 XML 태그는 컨트롤에서 값을 검색 하 고에 대 한 매개 변수로 전달 된 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"   
  ConnectionString="name=AdventureWorksEntities"   
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"   
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"   
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""   
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">  
  <WhereParameters>  
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"   
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />  
  </WhereParameters>  
</asp:EntityDataSource>  
  
```  
  
 이전 XML 예제는 다음 <xref:System.Data.Objects.ObjectQuery%601> 라는 `onlineOrders`:  
  
```  
ObjectQuery<SalesOrderHeader> onlineOrders =  
      context.SalesOrderHeader  
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",  
         new ObjectParameter("ordercost", orderCost))  
        .OrderBy("it.TotalDue DESC");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>WHERE 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>WHERE 절을 만드는 데 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마찬가지로 <xref:System.Data.Objects.ObjectQuery%601.Where%2A> 의 메서드는 <xref:System.Data.Objects.ObjectQuery%601> 클래스에 할당 된 조건자에 매개 변수 전달 될 수는 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다. <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 의 속성은 <xref:System.Web.UI.WebControls.EntityDataSource> 컨트롤 지정는 <xref:System.Web.UI.WebControls.ParameterCollection> 쿼리의 WHERE 절에 제공할 매개 변수를 포함 하는 합니다. <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 속성 명명 된 인수를 사용 하 여에 제공 되는 문자열에 지정 된 매개 변수를 참조는 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다.  
  
 경우는 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 속성이 설정 되지 않은, 매개 변수 대체 단어가 이루어집니다. WHERE 절에 모든 매개 변수 이름 앞에 있는 기호 "`@"` 에 일치 하는 이름이 있어야는 <xref:System.Web.UI.WebControls.ParameterCollection>합니다. 매개 변수에 대해 null 값이 허용 되지 않습니다는 <xref:System.Web.UI.WebControls.ParameterCollection>합니다.  
  
   
  
## Examples  
 .Aspx 파일에 다음 예에서 XML 태그는 컨트롤에서 값을 검색 하 고에 대 한 매개 변수로 전달 된 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 속성입니다.  
  
```  
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"   
  ConnectionString="name=AdventureWorksEntities"   
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"   
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"   
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""   
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">  
  <WhereParameters>  
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"   
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />  
  </WhereParameters>  
</asp:EntityDataSource>  
  
```  
  
 이전 XML 예제는 다음 <xref:System.Data.Objects.ObjectQuery%601> 라는 `onlineOrders`:  
  
```  
ObjectQuery<SalesOrderHeader> onlineOrders =  
      context.SalesOrderHeader  
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",  
         new ObjectParameter("ordercost", orderCost))  
        .OrderBy("it.TotalDue DESC");  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>