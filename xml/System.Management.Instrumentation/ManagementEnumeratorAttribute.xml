<Type Name="ManagementEnumeratorAttribute" FullName="System.Management.Instrumentation.ManagementEnumeratorAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c9b5a40f06af19a84c1b03a2207e87bfb7ee2816" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36554912" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManagementEnumeratorAttribute : System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEnumeratorAttribute extends System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEnumeratorAttribute&#xA;Inherits ManagementNewInstanceAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEnumeratorAttribute sealed : System::Management::Instrumentation::ManagementNewInstanceAttribute" />
  <TypeSignature Language="F#" Value="type ManagementEnumeratorAttribute = class&#xA;    inherit ManagementNewInstanceAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementNewInstanceAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The ManagementEnumerator attribute marks a method that returns all the instances of a WMI class.  Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 static 및 public 이어야 합니다. WMI 클래스의 모든 인스턴스 컬렉션을 반환 해야 합니다. 컬렉션의 모든 형식 변환할 수 <xref:System.Collections.IEnumerable>합니다.  
  
   
  
## Examples  
 다음 예제에서는 열거자 특성을 사용 하 여 클래스의 인스턴스를 열거 하는 데 사용 되는 메서드를 표시 하는 방법을 보여 줍니다. Enumerate 메서드에서 사용 하는 경우에 <xref:System.Diagnostics.Process> 모든 컴퓨터에서 실행 중인 프로세스를 검색 하는 클래스입니다.  
  
```csharp  
[ManagementEnumerator]  
public static IEnumerable Enumerate()  
{  
   Process[] rgProcesses = Process.GetProcesses();  
   for (int i = 0; i < rgProcesses.Length; i++)  
   {  
      yield return new ProcessProvider(rgProcesses[i]);  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEnumeratorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEnumeratorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEnumeratorAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Type Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Schema" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema" />
      <MemberSignature Language="VB.NET" Value="Public Property Schema As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Schema { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schema : Type with get, set" Usage="System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</summary>
        <value>A <see cref="T:System.Type" /> 메서드가로 표시 하는 출력의 유형을 나타내는 값은 <see cref="ManagementEnumerator" /> 특성을 출력 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 형식이 <xref:System.Object?displayProperty=nameWithType>, 출력 형식의 값으로 처리 해야 하는 다음 <xref:System.Object?displayProperty=nameWithType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>