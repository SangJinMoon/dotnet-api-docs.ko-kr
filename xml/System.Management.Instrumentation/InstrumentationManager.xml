<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5515b-101">분리된 공급자에 사용되는 수명 및 모델을 관리하는 메서드를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span></span>  
  
 <span data-ttu-id="5515b-102">참고: WMI .NET 라이브러리는 이제 최종 상태로 간주되며 이러한 라이브러리에 영향을 주는 보안 관련 문제에 대해 추가 개발, 개선 기능 또는 업데이트를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="5515b-103">[MI API](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)는 모든 새 개발에 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5515b-104">분리 된 공급자 응용 프로그램에 의해 호스팅됩니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="5515b-105">WMI 클래스의 인스턴스를 사용할 수 있도록 응용 프로그램에서 사용할 수 두 가지 방법: 게시/해지 또는 콜백 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="5515b-106">콜백 메서드에서 사용 하 여 <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> 및 <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5515b-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="5515b-107">게시/해지 모델 WMI 인프라는 콜백 메서드에서 직접 작성 해야 하는 방법에 대 한 기본 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="5515b-108">이 열거형을 포함 하 고 메서드를 바인딩합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="5515b-109">이 모델에서는 응용 프로그램 인스턴스를 만드는 하 고에 게시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="5515b-110">응용 프로그램은 클래스 키 속성은 적용 되도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="5515b-111">응용 프로그램 인스턴스를 삭제 해야 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="5515b-112">콜백 모델에서 WMI 인프라는 응용 프로그램을 열거, 바인딩 및 공급자의 기능을 구현 하는 데 필요한 다른 모든 메서드를 처리 하는 메서드가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="5515b-113">이 기능에 대 한 응용 프로그램으로 호출 하 고 존재 하지 않는 것 이거나 제대로 구현 되지 않은 경우 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="5515b-114">응용 프로그램 인프라와 해당 WMI 클래스의 형식을 호출 하 여 등록 <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> 문서를 나타내고은 더 이상 호출 하 여 노출 하는 WMI 클래스를 원하는 수 <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5515b-115">다음 예제에는 게시/revoke 모델을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="5515b-116">라우터 클래스의 두 인스턴스가 생성 및 게시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="5515b-117">나중에 해지 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="5515b-118">다음 예제에서는 등록의 콜백 메서드를 사용 하 여 RouterNew 클래스를 노출 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5515b-119">게시할 공급자를 구현하는 클래스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-119">An instance of the class that implements the provider to publish.</span></span></param>
        <summary><span data-ttu-id="5515b-120">공급자의 인스턴스를 WMI 인프라 내에서 사용할 수 있게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-120">Makes an instance of a provider available within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="5515b-121">등록할 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-121">The assembly to register.</span></span></param>
        <summary><span data-ttu-id="5515b-122">WMI 인프라에 어셈블리를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-122">Registers an assembly with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="5515b-123">클래스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-123">The type of the class.</span></span></param>
        <summary><span data-ttu-id="5515b-124">WMI 인프라에 클래스를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-124">Registers a class with the WMI infrastructure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5515b-125">해지할 공급자를 구현하는 클래스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-125">An instance of the class that implements the provider to revoke.</span></span></param>
        <summary><span data-ttu-id="5515b-126">현재 사용 가능한 공급자의 인스턴스를 사용하고 WMI 인프라 내에서 사용할 수 없게 합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="5515b-127">등록을 취소할 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-127">The registered assembly to unregister.</span></span></param>
        <summary><span data-ttu-id="5515b-128">WMI 인프라에 현재 등록되어 있는 어셈블리의 등록을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-128">Unregisters an assembly currently registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="5515b-129">등록을 취소할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-129">The registered type to unregister.</span></span></param>
        <summary><span data-ttu-id="5515b-130">WMI 인프라에 등록되어 있는 클래스의 등록을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="5515b-130">Unregisters a class registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>