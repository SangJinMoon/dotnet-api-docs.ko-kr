<Type Name="ManagementEntityAttribute" FullName="System.Management.Instrumentation.ManagementEntityAttribute">
  <TypeSignature Language="C#" Value="public sealed class ManagementEntityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEntityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEntityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEntityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEntityAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3471c-101">ManagementEntity 특성은 클래스가 WMI 공급자를 통해 노출되는 관리 정보를 제공함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-101">The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.</span></span>  
  
 <span data-ttu-id="3471c-102">참고: WMI .NET 라이브러리는 이제 최종 상태로 간주되며 이러한 라이브러리에 영향을 주는 보안 관련 문제에 대해 추가 개발, 개선 기능 또는 업데이트를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="3471c-103">[MI API](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)는 모든 새 개발에 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3471c-104">이 특성으로 표시 된 클래스는 공용 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-104">The class marked by this attribute must be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3471c-105">다음 예제에서는 클래스를 표시 하려면 ManagementEntity 특성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-105">The following example shows how to use the ManagementEntity attribute to mark a class.</span></span>  
  
```  
// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  
// provider.  
  
    [ManagementEntity(Name = "MortgageCalc")]  
    public class MortgageCalcWMIProvider  
    {  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEntityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEntityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3471c-106"><see cref="T:System.Management.ManagementEntityAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-106">Initializes a new instance of the <see cref="T:System.Management.ManagementEntityAttribute" /> class.</span></span> <span data-ttu-id="3471c-107">이것이 기본 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-107">This is the default constructor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3471c-108">이 생성자는 name 매개 변수를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-108">This constructor does not take a name parameter.</span></span> <span data-ttu-id="3471c-109">사용 하 여 이름을 지정 하지 않는 경우는 <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> 매개 변수, 연결된 된 WMI 클래스의 이름을 기본값으로 설정 됩니다 특성 사용된 클래스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-109">If you do not specify a name by using the <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> parameter, the name of the associated WMI class will default to the name of the attributed class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="External">
      <MemberSignature Language="C#" Value="public bool External { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool External" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberSignature Language="VB.NET" Value="Public Property External As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool External { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3471c-110">클래스가 현재 어셈블리 외부에 구현된 공급자의 WMI 클래스를 나타내는지 여부를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-110">Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly.</span></span></summary>
        <value><span data-ttu-id="3471c-111">클래스가 외부 WMI 클래스를 나타내면 부울 값 true이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-111">A boolean value that is true if the class represents an external WMI class and false otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3471c-112">이 추상 기존 WMI 클래스를 확장 하는 클래스를 구현 하는 공급자를 구현할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-112">This is used when implementing providers that implement classes that extend existing abstract WMI classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3471c-113">WMI 클래스의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-113">Gets or sets the name of the WMI class.</span></span></summary>
        <value><span data-ttu-id="3471c-114">WMI 클래스의 이름을 포함하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-114">A string that contains the name of the WMI class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3471c-115">이 속성을 설정 하 여 WMI 클래스의 이름을 지정 하지 않으면, WMI 클래스 특성 사용된 클래스의 이름으로 기본적 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-115">If you do not specify the name of the WMI class by setting this property, the WMI class will default to the name of the attributed class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3471c-116">다음 예제에서는 이름 매개 변수를 사용 하는 MortgageCalcWMIProvider 클래스에 의해 표시 되는 WMI 클래스의 이름을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-116">In the following example, the Name parameter is used to set the name of the WMI class represented by the MortgageCalcWMIProvider class.</span></span> <span data-ttu-id="3471c-117">MortgageCalculator 이름을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-117">It sets the name to MortgageCalculator.</span></span> <span data-ttu-id="3471c-118">매개 변수가 않습니다 이름을 사용 경우 해당 C# 클래스 이름 MortgageCalcWMIProvider이 경우 이름으로 사용 됩니다는 WMI 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-118">If the Name parameter is not used, the corresponding C# class name, MortgageCalcWMIProvider in this case, is used as the WMI class name.</span></span>  
  
```  
[ManagementEntity(Name = "MortgageCalculator")]  
public class MortgageCalcWMIProvider  
{  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singleton">
      <MemberSignature Language="C#" Value="public bool Singleton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Singleton" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberSignature Language="VB.NET" Value="Public Property Singleton As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Singleton { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3471c-119">연결된 클래스가 singleton WMI 클래스를 나타내는지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-119">Specifies whether the associated class represents a singleton WMI class.</span></span></summary>
        <value><span data-ttu-id="3471c-120">클래스가 singleton WMI 클래스를 나타내면 부울 값 true이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-120">A boolean value that is true if the class represents a singleton WMI class and false otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3471c-121">WMI 클래스는 단일 항목을 단일 인스턴스가 될 수 있습니다 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-121">A singleton WMI class is one for which there can only ever be a single instance.</span></span> <span data-ttu-id="3471c-122">WMI 클래스의 단일 인스턴스만 적이 만들어졌는지 확인 하는 논리를 코딩할 수 있지만이 매개 변수 특성이 쉽고 일치 작업을 게 만들기 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-122">Although you could code the logic to ensure that only a single instance of a WMI class is ever created, this parameter attribute is provided to make the task easy and consistent.</span></span>  
  
 <span data-ttu-id="3471c-123">단일 WMI 클래스를 사용할 때는 클라이언트 응용 프로그램 특수 구문을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-123">When working with singleton WMI classes, client applications must use special syntax.</span></span> <span data-ttu-id="3471c-124">자세한 내용은 참조는 Describing MSDN online library에서 인스턴스 개체 경로 항목을 [ http://www.msdn.com ](http://www.msdn.com/)합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-124">For more information, see the Describing an Instance Object Path topic in the MSDN online library at [http://www.msdn.com](http://www.msdn.com/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3471c-125">다음 코드 조각에는 C# 클래스를 singleton WMI 클래스에 해당 함을 나타내는 단일 매개 변수를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-125">The following code snippet demonstrates how to use the Singleton parameter to indicate that a C# class corresponds to a singleton WMI class.</span></span>  
  
```  
[ManagementEntity(Singleton=true)]  
public class SingletonSample  
```  
  
 <span data-ttu-id="3471c-126">단일 항목 클래스를 구현 하는 공급자의 전체 작업 예제를 참조 하십시오. [하는 방법: 기본 분리 공급자 만들기](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300)합니다.</span><span class="sxs-lookup"><span data-stu-id="3471c-126">For a complete, working example of a provider that implements a singleton class, see [How to: Create a Basic Decoupled Provider](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>