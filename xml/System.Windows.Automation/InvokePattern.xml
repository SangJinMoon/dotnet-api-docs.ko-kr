<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e681ddcf10259e196472652f43fd9c565e76db9c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36570366" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <TypeSignature Language="F#" Value="type InvokePattern = class&#xA;    inherit BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7d70b-101">활성화되었을 때 상태를 유지하지 않고 명확한 단일 작업을 시작하거나 수행하는 컨트롤을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7d70b-101">Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d70b-102">지원을 제어 <xref:System.Windows.Automation.InvokePattern> 동일한 동작이 다른 컨트롤 패턴을 통해 노출 되지 않으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-102">Controls support <xref:System.Windows.Automation.InvokePattern> if the same behavior is not exposed through another control pattern.</span></span> <span data-ttu-id="7d70b-103">예를 들어 경우는 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 메서드가 동일한 작업을 수행 된 <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> 또는 <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> 메서드, 컨트롤이 지원 하지 것입니다 <xref:System.Windows.Automation.InvokePattern>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-103">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control will not support <xref:System.Windows.Automation.InvokePattern>.</span></span>  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]<span data-ttu-id="7d70b-104"> 확인란 및 라디오 단추 상태를 유지 하는 등의 컨트롤을 나타내는 요소는 대신 지원 <xref:System.Windows.Automation.TogglePattern> 또는 <xref:System.Windows.Automation.SelectionItemPattern>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-104"> elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <xref:System.Windows.Automation.TogglePattern> or <xref:System.Windows.Automation.SelectionItemPattern>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; unit" Usage="invokePattern.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7d70b-105">요청을 보내 컨트롤을 활성화하고 해당하는 명확한 단일 작업을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-105">Sends a request to activate a control and initiate its single, unambiguous action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d70b-106">에 대 한 호출이 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 차단 하지 않고 즉시 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-106">Calls to <xref:System.Windows.Automation.InvokePattern.Invoke%2A> should return immediately without blocking.</span></span> <span data-ttu-id="7d70b-107">그러나이 동작은 전적으로 의존는 [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] 공급자 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-107">However, this behavior is entirely dependent on the [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] provider implementation.</span></span> <span data-ttu-id="7d70b-108">시나리오에서를 호출 하는 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 별도 차단 문제 (예: 모달 대화 상자)를 사용 하면 스레드 도우미 메서드를 호출 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-108">In scenarios where calling <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d70b-109">다음 예제에서는 <xref:System.Windows.Automation.InvokePattern> 컨트롤에서 컨트롤 패턴은 가져온 및 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-109">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7d70b-110">이 요소는 <see cref="T:System.Windows.Automation.InvokePattern" /> 컨트롤 패턴을 지원하지 않으며 숨겨져 있거나 차단되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-110">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</span>
          </span>
        </exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="7d70b-111">요소가 활성화되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-111">The element is not enabled.</span>
          </span>
          <span data-ttu-id="7d70b-112">UI 자동화 공급자가 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> 속성의 자체 처리를 구현했을 때 발생할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-112">Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvokedEvent : System.Windows.Automation.AutomationEvent" Usage="System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7d70b-113">컨트롤이 호출되거나 활성화될 때 발생하는 이벤트를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-113">Identifies the event raised when a control is invoked or activated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d70b-114">이 식별자는 UI 자동화 클라이언트 응용 프로그램에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-114">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="7d70b-115">UI 자동화 공급자의 해당 필드를 사용 해야 <xref:System.Windows.Automation.InvokePatternIdentifiers>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-115">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="7d70b-116"><xref:System.Windows.Automation.InvokePattern.InvokedEvent> 식별자에 대 한 매개 변수로 전달 되 <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-116">The <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier is passed as a parameter to <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d70b-117">다음 예제에서는 이벤트 처리기는 이벤트를 식별 이벤트로 비교 하 여는 <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> 으로 이벤트 인수에는 <xref:System.Windows.Automation.InvokePattern.InvokedEvent> 식별자 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-117">In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier field.</span></span>  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pattern : System.Windows.Automation.AutomationPattern" Usage="System.Windows.Automation.InvokePattern.Pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7d70b-118">
            <see cref="T:System.Windows.Automation.InvokePattern" /> 컨트롤 패턴을 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d70b-118">Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d70b-119">이 식별자는 UI 자동화 클라이언트 응용 프로그램에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-119">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="7d70b-120">UI 자동화 공급자의 해당 필드를 사용 해야 <xref:System.Windows.Automation.InvokePatternIdentifiers>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-120">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="7d70b-121">패턴 식별자를 같은 메서드에 전달 <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> 지정 된 위치에서 원하는 컨트롤 패턴을 검색할 <xref:System.Windows.Automation.AutomationElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-121">The pattern identifier is passed to methods such as <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> to retrieve the control pattern of interest from the specified <xref:System.Windows.Automation.AutomationElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d70b-122">다음 예제에서는 <xref:System.Windows.Automation.InvokePattern> 컨트롤에서 컨트롤 패턴은 가져온 및 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d70b-122">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>