<Type Name="PrintSystemJobInfo" FullName="System.Printing.PrintSystemJobInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69a58e72356102d1b0320ad7f31ad35caf6a7cb2" />
    <Meta Name="ms.sourcegitcommit" Value="6fc53860cd2661bb7bde6e4b2858fcda4ec4c889" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/10/2018" />
    <Meta Name="ms.locfileid" Value="34007437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintSystemJobInfo : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintSystemJobInfo extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintSystemJobInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintSystemJobInfo&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintSystemJobInfo : System::Printing::PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>인쇄 작업을 자세히 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 공용 생성자가 없습니다. 에 대 한 참조를 가져오려면는 <xref:System.Printing.PrintSystemJobInfo> 개체를 가져오려면 static <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> 메서드 또는 다음 중 하나 <xref:System.Printing.PrintQueue> 인스턴스 메서드: <xref:System.Printing.PrintQueue.GetJob%2A>, <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A>, 또는 <xref:System.Printing.PrintQueue.AddJob%2A>합니다.  
  
 프린터에서 인쇄 작업 정보 등 여부는 작업이 완료 되 면 전달 되어야 합니다는 <xref:System.Printing.PrintSystemJobInfo> 응용 프로그램이 해당 속성을 읽기 전에 개체 (<xref:System.Printing.PrintSystemJobInfo.IsCompleted%2A>). <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드는이 기능을 제공 합니다.  
  
 응용 프로그램의 값을 변경 하는 경우 마찬가지로,는 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> 속성을 변경 써야 하는 인쇄 큐 유틸리티 컴퓨터에 있습니다. <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드는이 기능을 제공 합니다.  
  
 클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 추가 쓰기 가능한 속성에는 다음의 재정의 구현 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 및 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드.  
  
> [!CAUTION]
>  내에서 클래스는 <xref:System.Printing> Windows 서비스 또는 ASP.NET 응용 프로그램 또는 서비스 내에서 사용 하기 위해 네임 스페이스를 사용할 수 없습니다. 이러한 응용 프로그램 종류 중 하나에서 이러한 클래스를 사용 하는 동안 예기치 않은 문제가 발생할 수 있습니다, 그리고 감소와 같은 서비스 성능 및 런타임 예외입니다.  
  
 Windows Forms 응용 프로그램에서 인쇄 하는 경우 참조는 <xref:System.Drawing.Printing> 네임 스페이스입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인쇄 작업을 취소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업을 취소 하려면이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체의 속성에 대한 변경 내용을 이 개체가 나타내는 실제 인쇄 작업에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> 속성은 쓸 수 있습니다. 클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 추가 쓰기 가능한 속성을 재정의 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 및 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드를 직접 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Printing.PrintSystemJobInfo Get (System.Printing.PrintQueue printQueue, int jobIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Printing.PrintSystemJobInfo Get(class System.Printing.PrintQueue printQueue, int32 jobIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Printing::PrintSystemJobInfo ^ Get(System::Printing::PrintQueue ^ printQueue, int jobIdentifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
        <Parameter Name="jobIdentifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printQueue">인쇄 작업을 호스팅하는 인쇄 대기열입니다.</param>
        <param name="jobIdentifier">인쇄 작업의 숫자 ID입니다.</param>
        <summary>지정된 <see cref="T:System.Printing.PrintSystemJobInfo" />의 지정된 작업에 대한 <see cref="T:System.Printing.PrintQueue" />를 가져옵니다.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" />에 해당하는 <paramref name="jobIdentifier" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수도 있습니다는 <xref:System.Printing.PrintQueue.GetJob%2A?displayProperty=nameWithType> 같은 목적을 위해 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HostingPrintQueue">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueue HostingPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintQueue HostingPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintQueue As PrintQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueue ^ HostingPrintQueue { System::Printing::PrintQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업을 호스팅하는 인쇄 대기열을 가져옵니다.</summary>
        <value>인쇄 작업을 소유하는 인쇄 대기열을 나타내는 <see cref="T:System.Printing.PrintQueue" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public System.Printing.PrintServer HostingPrintServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintServer ^ HostingPrintServer { System::Printing::PrintServer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 인쇄 대기열을 호스팅하는 인쇄 서버를 가져옵니다.</summary>
        <value>인쇄 작업을 소유하는 <see cref="T:System.Printing.PrintServer" />의 호스팅 인쇄 서버(대개 컴퓨터)를 나타내는 <see cref="T:System.Printing.PrintQueue" /> 값입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>
          <see cref="T:System.Printing.PrintSystemJobInfo" />에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBlocked">
      <MemberSignature Language="C#" Value="public bool IsBlocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBlocked" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsBlocked" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBlocked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBlocked { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 차단되어 인쇄가 진행되지 않는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 차단되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 완료되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 완료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleted">
      <MemberSignature Language="C#" Value="public bool IsDeleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체가 나타내는 인쇄 작업이 인쇄 대기열에서 삭제되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 삭제되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사실이 보일 수 있지만 개체 삭제 된 것으로 자체 상태를 보고 수 있지만 보관 해야 하는 처음에 다음에 유의 <xref:System.Printing.PrintSystemJobInfo> 개체만 *나타냅니다* 실제 인쇄 작업 합니다. 작업을 삭제 인쇄 대기열에서 자동으로 삭제할는 <xref:System.Printing.PrintSystemJobInfo> 응용 프로그램의 개체입니다. 마찬가지로, 개체에서 제거 되지 않습니다 <xref:System.Printing.PrintJobInfoCollection> 나타내는 인쇄 작업을 삭제 하기 전에 만든입니다. 예를 들어 경우는 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> 인쇄 작업이 삭제 되기 전에 메서드가 실행 될, 반환 된 컬렉션에 포함 됩니다는 <xref:System.Printing.PrintSystemJobInfo> 인쇄 작업을 나타내는 개체입니다. 인쇄 작업 삭제 될 때이 개체 컬렉션에서 제거 되지 않습니다. 그러나 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> 을 다시 실행, 반환 된 컬렉션에는 삭제 된 인쇄 작업을 나타내는 멤버가 포함 됩니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleting">
      <MemberSignature Language="C#" Value="public bool IsDeleting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 인쇄 대기열에서 삭제되고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 삭제되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류 조건이 인쇄 작업과 관련되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          오류 조건이 인쇄 작업과 관련되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 오프라인 상태인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 오프라인 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값이 모두에 전파는 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.IsOffline%2A> 호스트 하는 속성 <xref:System.Printing.PrintQueue>합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperOut">
      <MemberSignature Language="C#" Value="public bool IsPaperOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperOut" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaperOut" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperOut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperOut { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 인쇄 작업에 필요한 용지 크기 및 종류가 없는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터에 필요한 용지가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 일시 중지되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 일시 중지되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전체 인쇄 큐를 일시 중지할 수도 있습니다. 예를 들어 값 <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A?displayProperty=nameWithType> 수 `false` 경우에 값은 <xref:System.Printing.PrintQueue.IsPaused%2A?displayProperty=nameWithType> 속성은 `true`합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="IsPrinted">
      <MemberSignature Language="C#" Value="public bool IsPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 인쇄되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 인쇄되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 인쇄되고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 인쇄 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRestarted">
      <MemberSignature Language="C#" Value="public bool IsRestarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRestarted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRestarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRestarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRestarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 다시 시작되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 인쇄 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업을 다시 시작 되 면 전체에서 인쇄 합니다. 사용 하 여와 대조적은 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> 메서드를 일시 중지 된 지점에서 작업을 다시 시작 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="IsRetained">
      <MemberSignature Language="C#" Value="public bool IsRetained { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetained" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRetained" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRetained As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRetained { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 후 인쇄 작업이 대기열에 저장되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 저장되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 인쇄 작업 인쇄 큐에 유지는 <xref:System.Printing.PrintQueue.KeepPrintedJobs%2A> 속성의는 <xref:System.Printing.PrintQueue> 개체로 설정 됩니다 `true` 큐의 속성으로 커밋된 경우에 <xref:System.Printing.PrintQueue.Commit%2A> 의 메서드는 <xref:System.Printing.PrintQueue>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpooling">
      <MemberSignature Language="C#" Value="public bool IsSpooling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpooling" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsSpooling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpooling As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpooling { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 스풀링 중인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 작업이 스풀링 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserInterventionRequired">
      <MemberSignature Language="C#" Value="public bool IsUserInterventionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserInterventionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsUserInterventionRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserInterventionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserInterventionRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 사용자 작업이 필요한지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          사용자 작업이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값에 모두 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.NeedUserIntervention%2A> 호스트 하는 속성 <xref:System.Printing.PrintQueue>합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobIdentifier">
      <MemberSignature Language="C#" Value="public int JobIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobIdentifier As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobIdentifier { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 ID 번호를 가져옵니다.</summary>
        <value>인쇄 작업을 식별하는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 어떤 번호 지정 시스템을 사용 하는 인쇄 서버 및 인쇄 서버 인지는 컴퓨터 또는 인쇄 서버 장비의 운영 체제에 의해 결정 됩니다. 예를 들어 Microsoft Windows xp 운영 체제에서는 이러한 방식으로: 인쇄 서버 켜져, 모든 인쇄 대기열이 비어 있으면 모든 사용자가 서버에서 모든 큐로 전송한 첫 번째 인쇄 작업 ID 번호 2 할당 됩니다. 서버에서 각 후속 작업 한 값이 할당 된 해당 서버에서 이전 인쇄 작업이 보다 큽니다.  
  
 인쇄 큐 인쇄 작업에 대 한 해당 수에 영향을 주지: 경우 해당 순서에 따라 QueueA, 주지 않습니다, 및 QueueA, 보내는 작업 한 후 QueueA 2 및 4, 작업이 많고 주지 않습니다 작업 3입니다.  
  
 작업 수에 할당 된 후 수는 바뀌지 다른 작업도 모두 인쇄 하거나 취소 되는 경우에 또는 서버가 다시 시작 합니다. 첫 번째 새 작업 한 값이 할당 된 작업이 이미 있는 하나 이상의 큐에서 서버를 다시 시작할 때, 하는 경우 서버 시작 될 때 큐에 있는 번호가 가장 큰 작업 보다 큽니다. 그러나를 다시 시작 될 때까지 인쇄 서버 숫자 들을 다시 사용 하지 않습니다. 인쇄 하기 전에 번호가 가장 큰 작업 취소 되는 경우에 다음 작업을 가져옵니다 숫자를 하나 더 높은 합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobName">
      <MemberSignature Language="C#" Value="public string JobName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobName" />
      <MemberSignature Language="VB.NET" Value="Public Property JobName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ JobName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 이름을 가져오거나 설정합니다.</summary>
        <value>인쇄 작업의 <see cref="T:System.String" /> 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobSize">
      <MemberSignature Language="C#" Value="public int JobSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobSize" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 크기(바이트)를 가져옵니다.</summary>
        <value>인쇄 작업의 크기(바이트)를 나타내는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobStatus JobStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobStatus JobStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStatus As PrintJobStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobStatus JobStatus { System::Printing::PrintJobStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 현재 상태를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Printing.PrintJobStatus" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법을 사용 하면 개별적으로 같은 각 상태 속성을 확인할 필요가 <xref:System.Printing.PrintSystemJobInfo.IsPrinting%2A> 및 <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A>합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobattributes)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobattributes)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream JobStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream JobStream" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ JobStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 <see cref="T:System.IO.Stream" />에 대한 참조를 가져옵니다.</summary>
        <value>인쇄 작업을 포함하는 <see cref="T:System.IO.Stream" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 8 및 이후 버전의 운영 체제에서.NET Framework 4.5부터이 스트림에 기록 된 데이터 형식 이어야 합니다 XPS는 패키지 스트림과 같은 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPages">
      <MemberSignature Language="C#" Value="public int NumberOfPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPages" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPages As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPages { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 페이지 수를 가져옵니다.</summary>
        <value>인쇄 작업의 페이지 수를 나타내는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 페이지는 문서 또는 다른 인쇄 미디어의 시트에의 한 쪽입니다.  
  
 다음 표에서이 속성 값을 사용 하는 시트의 개수 양면 인쇄 (이중)에 대 한 인쇄 작업이 호출 되는 여부, 여러--인쇄할 페이지를 요청 하는지 또는 둘 다에 대해를 호출 하는지 여부에 따라 미치는 영향이 보여 줍니다.  
  
### <a name="how-duplexing-and-multipage-printing-affect-printing"></a>양면 및 여러 페이지 인쇄 인쇄에 미치는 영향  
  
|양면 인쇄|장에 페이지|NumberOfPages의 값|용지 물리적 시트의 개수|  
|---------------|---------------------|----------------------------|----------------------------------------|  
|아니요|1|문서에는 페이지 수와 같습니다.|문서에는 페이지 수와 같습니다.|  
|예|1|문서에는 페이지 수와 같습니다.|페이지 ÷ (반올림) 2를 문서화 합니다.|  
|아니요|다중|문서 페이지 (반올림) 장에 ÷ 페이지입니다.|문서 페이지 (반올림) 장에 ÷ 페이지입니다.|  
|예|다중|문서 페이지 (반올림) 장에 ÷ 페이지입니다.|[문서 페이지 개수가 시트 ÷ 페이지] ÷ 2 (반올림).|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintTicket.Duplexing" />
        <altmember cref="P:System.Printing.PrintTicket.PagesPerSheet" />
      </Docs>
    </Member>
    <Member MemberName="NumberOfPagesPrinted">
      <MemberSignature Language="C#" Value="public int NumberOfPagesPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPagesPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPagesPrinted As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPagesPrinted { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이미 인쇄된 페이지 수를 가져옵니다.</summary>
        <value>이미 인쇄된 페이지 수를 나타내는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Printing.PrintSystemJobInfo.Resume" />이 실행될 때까지 작업의 인쇄를 중단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다른 작업이 큐에 있는 경우 현재 작업 일시 중지 되 면 인쇄를 시작 합니다.  
  
 호스팅 <xref:System.Printing.PrintQueue> 역시 <xref:System.Printing.PrintQueue.Pause%2A> 및 <xref:System.Printing.PrintQueue.Resume%2A> 메서드. 인쇄 큐가 일시 중지 되 면 개별 작업을 다시 시작 않을 해당 작업의 인쇄를 다시 시작 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PositionInPrintQueue">
      <MemberSignature Language="C#" Value="public int PositionInPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionInPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.PositionInPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PositionInPrintQueue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PositionInPrintQueue { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 대기열에서의 인쇄 작업의 위치를 가져옵니다.</summary>
        <value>인쇄 대기열에서의 인쇄 작업의 위치를 나타내는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobPriority Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Priority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Priority As PrintJobPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobPriority Priority { System::Printing::PrintJobPriority get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 대기열의 다른 작업을 기준으로 인쇄 작업의 우선 순위를 나타내는 숫자가 아닌 표현을 가져옵니다.</summary>
        <value>인쇄 작업의 우선 순위를 <see cref="T:System.Printing.PrintJobPriority" />, <see cref="F:System.Printing.PrintJobPriority.Maximum" />, <see cref="F:System.Printing.PrintJobPriority.Minimum" /> 또는 <see cref="F:System.Printing.PrintJobPriority.Default" />으로 나타내는 <see cref="F:System.Printing.PrintJobPriority.None" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체의 속성을 이 개체가 나타내는 실제 인쇄 작업의 값과 일치하도록 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 변경 내용을 <xref:System.Printing.PrintSystemJobInfo> 개체를 사용 하 여 실제 인쇄 작업에 기록 되어야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드. 커밋되지 않은 모든 변경 내용은 손실 되는 경우는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드를 실행 합니다.  
  
 클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 있는 추가 속성을 재정의 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 자신만의 구현입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인쇄 작업을 처음부터 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수 있습니다는 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> 메서드를 일시 중지 된 지점에서 시작, 일시 중지 된 인쇄 작업을 다시 시작 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>일시 중지된 인쇄 작업의 인쇄를 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호스팅 <xref:System.Printing.PrintQueue> 역시 <xref:System.Printing.PrintQueue.Pause%2A> 및 <xref:System.Printing.PrintQueue.Resume%2A> 메서드. 인쇄 큐가 일시 중지 되 면 개별 작업을 다시 시작를 재시작 하지 인쇄 작업의 인쇄 합니다.  
  
   
  
## Examples  
 다음 예제에서는 일시 중지 된 인쇄 작업을 다시 시작 하려면이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public int StartTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StartTimeOfDay { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 이른 시간을 가져옵니다.</summary>
        <value>UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 이른 시간을 지정하는 <see cref="T:System.Int32" />입니다. 최대값은 1439입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값이 각각에 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 호스트 하는 속성 <xref:System.Printing.PrintQueue> 작업 시간에는 큐에 들어갑니다. 경우 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 변경 되 면 다음 모든 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A?displayProperty=nameWithType> 값 미만의 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 의 값으로 변경 되 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>합니다.  
  
 작업이 큐에 추가 되는 새 지정할 수 있습니다 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 통해 값은 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]되 고 이전의 있지 않으면, <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>합니다.  
  
 가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 올바른 시간을 가져올을 60의 배수를 뺍니다. 예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다. 경우 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 960 16:00 (오후 4시)를 의미 하는 반환 (때문에 960/60 = 16). 이 값 태평양 표준시를 변환 하려면 (8 * 60 =) 480 빼야 분입니다.  
  
 또한 기억해 야 시간 24 시간 후 0을 통해 롤업 하는 (즉 1439 분 후에;). 경우 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 120 오전 2시 utc에서를 의미 하는 반환 합니다. 이것으로 태평양 표준시 변환 하려면 빼야 480 분-360에서 결과입니다. 의미 있는 양수 값을 가져오려면 1440 1080 (오후 6시) 태평양 표준시의 최종 값은 하루에 있는 총 분에 음수 값을 추가 합니다.  
  
 참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 시간대 조정 하는 데 도움이 되는 방법에 대 한 합니다.  
  
 프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단 하는 과정의 일환으로이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="Submitter">
      <MemberSignature Language="C#" Value="public string Submitter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Submitter" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Submitter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Submitter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Submitter { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업을 전송한 사용자의 이름을 가져옵니다.</summary>
        <value>인쇄 작업을 전송한 사용자를 식별하는 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeJobSubmitted">
      <MemberSignature Language="C#" Value="public DateTime TimeJobSubmitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeJobSubmitted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeJobSubmitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeJobSubmitted As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeJobSubmitted { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업이 전송된 날짜와 시간을 가져옵니다.</summary>
        <value>인쇄 작업이 전송된 날짜와 시간이 포함된 <see cref="T:System.DateTime" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSinceStartedPrinting">
      <MemberSignature Language="C#" Value="public int TimeSinceStartedPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeSinceStartedPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeSinceStartedPrinting As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TimeSinceStartedPrinting { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업의 인쇄가 시작된 이후 경과한 시간(밀리초)을 가져옵니다.</summary>
        <value>인쇄 작업이 시작된 이후 경과한 시간(밀리초)을 나타내는 <see cref="T:System.Int32" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public int UntilTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int UntilTimeOfDay { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 늦은 시간을 가져옵니다.</summary>
        <value>UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 작업을 인쇄할 수 있는 가장 늦은 시간을 지정하는 <see cref="T:System.Int32" />입니다. 최대값은 1439입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값이 각각에 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 호스트 하는 속성 <xref:System.Printing.PrintQueue> 작업 시간에는 큐에 들어갑니다. 경우 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 변경 되 면 다음 모든 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A?displayProperty=nameWithType> 값 보다 최신인 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 의 값으로 변경 되 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>합니다.  
  
 작업이 큐에 추가 되는 새 지정할 수 있습니다 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 통해 값은 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]되 고 보다 이후 있지 않으면, <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>합니다.  
  
 가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 올바른 시간을 가져올을 60의 배수를 뺍니다. 예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다. 경우 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 960 16:00 (오후 4시)를 의미 하는 반환 (때문에 960/60 = 16). 이 값 태평양 표준시를 변환 하려면 (8 * 60 =) 480 빼야 분입니다.  
  
 또한 기억해 야 시간 24 시간 후 0을 통해 롤업 하는 (즉 1439 분 후에;). 경우 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 120 오전 2시 utc에서를 의미 하는 반환 합니다. 이것으로 태평양 표준시 변환 하려면 빼야 480 분-360에서 결과입니다. 의미 있는 양수 값을 가져오려면 1440 1080 (오후 6시) 태평양 표준시의 최종 값은 하루에 있는 총 분에 음수 값을 추가 합니다.  
  
 참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 시간대 조정 하는 데 도움이 되는 방법에 대 한 합니다.  
  
 프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단 하는 과정의 일환으로이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      </Docs>
    </Member>
  </Members>
</Type>