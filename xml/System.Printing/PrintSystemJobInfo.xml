<Type Name="PrintSystemJobInfo" FullName="System.Printing.PrintSystemJobInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="986a0c28ce1f86b2b42a40b908c6f6cc5d891370" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintSystemJobInfo : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintSystemJobInfo extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintSystemJobInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintSystemJobInfo&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintSystemJobInfo : System::Printing::PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="65885-101">인쇄 작업을 자세히 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="65885-101">Defines a print job in detail.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-102">이 클래스는 공용 생성자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-102">This class has no public constructor.</span></span> <span data-ttu-id="65885-103">에 대 한 참조를 가져오려면는 <xref:System.Printing.PrintSystemJobInfo> 개체를 가져오려면 static <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> 메서드 또는 다음 중 하나 <xref:System.Printing.PrintQueue> 인스턴스 메서드: <xref:System.Printing.PrintQueue.GetJob%2A>, <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A>, 또는 <xref:System.Printing.PrintQueue.AddJob%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-103">To get a reference to a <xref:System.Printing.PrintSystemJobInfo> object, use the static <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> method or one of the following <xref:System.Printing.PrintQueue> instance methods: <xref:System.Printing.PrintQueue.GetJob%2A>, <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A>, or <xref:System.Printing.PrintQueue.AddJob%2A>.</span></span>  
  
 <span data-ttu-id="65885-104">프린터에서 인쇄 작업 정보 등 여부는 작업이 완료 되 면 전달 되어야 합니다는 <xref:System.Printing.PrintSystemJobInfo> 응용 프로그램이 해당 속성을 읽기 전에 개체 (<xref:System.Printing.PrintSystemJobInfo.IsCompleted%2A>).</span><span class="sxs-lookup"><span data-stu-id="65885-104">Many print job properties, such as whether a job is completed, must be passed from the printer to the <xref:System.Printing.PrintSystemJobInfo> object before your application reads the corresponding property (<xref:System.Printing.PrintSystemJobInfo.IsCompleted%2A>).</span></span> <span data-ttu-id="65885-105"><xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드는이 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-105">The <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> method provides this functionality.</span></span>  
  
 <span data-ttu-id="65885-106">응용 프로그램의 값을 변경 하는 경우 마찬가지로,는 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> 속성을 변경 써야 하는 인쇄 큐 유틸리티 컴퓨터에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-106">Similarly, when your application changes the value of the <xref:System.Printing.PrintSystemJobInfo.JobName%2A> property, the change must be written to the print queue utility on the computer.</span></span> <span data-ttu-id="65885-107"><xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드는이 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-107">The <xref:System.Printing.PrintSystemJobInfo.Commit%2A> method provides this functionality.</span></span>  
  
 <span data-ttu-id="65885-108">클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 추가 쓰기 가능한 속성에는 다음의 재정의 구현 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 및 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="65885-108">If you derive a class from <xref:System.Printing.PrintSystemJobInfo> that has additional writable properties, then you must implement an override of the <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> and <xref:System.Printing.PrintSystemJobInfo.Commit%2A> methods.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="65885-109">내에서 클래스는 <xref:System.Printing> Windows 서비스 또는 ASP.NET 응용 프로그램 또는 서비스 내에서 사용 하기 위해 네임 스페이스를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-109">Classes within the <xref:System.Printing> namespace are not supported for use within a Windows service or ASP.NET application or service.</span></span> <span data-ttu-id="65885-110">이러한 응용 프로그램 종류 중 하나에서 이러한 클래스를 사용 하는 동안 예기치 않은 문제가 발생할 수 있습니다, 그리고 감소와 같은 서비스 성능 및 런타임 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-110">Attempting to use these classes from within one of these application types may produce unexpected problems, such as diminished service performance and run-time exceptions.</span></span>  
  
 <span data-ttu-id="65885-111">Windows Forms 응용 프로그램에서 인쇄 하는 경우 참조는 <xref:System.Drawing.Printing> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-111">If you want to print from a Windows Forms application, see the <xref:System.Drawing.Printing> namespace.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-112">인쇄 작업을 취소합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-112">Cancels the print job.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-113">다음 예제에는 인쇄 작업을 취소 하려면이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-113">The following example shows how to use this method to cancel print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-114">
            <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체의 속성에 대한 변경 내용을 이 개체가 나타내는 실제 인쇄 작업에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-114">Writes any changes to the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" /> object to the actual print job that the object represents.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-115">만 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> 속성은 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-115">Only the <xref:System.Printing.PrintSystemJobInfo.JobName%2A> property is writable.</span></span> <span data-ttu-id="65885-116">클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 추가 쓰기 가능한 속성을 재정의 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 및 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드를 직접 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-116">If you derive a class from <xref:System.Printing.PrintSystemJobInfo> that has additional writable properties, you must override the <xref:System.Printing.PrintSystemJobInfo.Commit%2A> and <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> methods with implementations of your own.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Printing.PrintSystemJobInfo Get (System.Printing.PrintQueue printQueue, int jobIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Printing.PrintSystemJobInfo Get(class System.Printing.PrintQueue printQueue, int32 jobIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Printing::PrintSystemJobInfo ^ Get(System::Printing::PrintQueue ^ printQueue, int jobIdentifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
        <Parameter Name="jobIdentifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printQueue">
          <span data-ttu-id="65885-117">인쇄 작업을 호스팅하는 인쇄 대기열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-117">The print queue hosting the print job.</span>
          </span>
        </param>
        <param name="jobIdentifier">
          <span data-ttu-id="65885-118">인쇄 작업의 숫자 ID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-118">A numerical ID for the print job.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65885-119">지정된 <see cref="T:System.Printing.PrintSystemJobInfo" />의 지정된 작업에 대한 <see cref="T:System.Printing.PrintQueue" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-119">Gets the <see cref="T:System.Printing.PrintSystemJobInfo" /> for the specified job in the specified <see cref="T:System.Printing.PrintQueue" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="65885-120">
            <see cref="T:System.Printing.PrintSystemJobInfo" />에 해당하는 <paramref name="jobIdentifier" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-120">The <see cref="T:System.Printing.PrintSystemJobInfo" /> that corresponds to the <paramref name="jobIdentifier" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-121">사용할 수도 있습니다는 <xref:System.Printing.PrintQueue.GetJob%2A?displayProperty=nameWithType> 같은 목적을 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="65885-121">You can also use the <xref:System.Printing.PrintQueue.GetJob%2A?displayProperty=nameWithType> method for the same purpose.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HostingPrintQueue">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueue HostingPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintQueue HostingPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintQueue As PrintQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueue ^ HostingPrintQueue { System::Printing::PrintQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-122">인쇄 작업을 호스팅하는 인쇄 대기열을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-122">Gets the print queue that is hosting the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-123">인쇄 작업을 소유하는 인쇄 대기열을 나타내는 <see cref="T:System.Printing.PrintQueue" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-123">A <see cref="T:System.Printing.PrintQueue" /> value that represents the print queue that owns the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-124">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-124">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public System.Printing.PrintServer HostingPrintServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintServer ^ HostingPrintServer { System::Printing::PrintServer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-125">인쇄 작업의 인쇄 대기열을 호스팅하는 인쇄 서버를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-125">Gets the print server that is hosting the print queue for the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-126">인쇄 작업을 소유하는 <see cref="T:System.Printing.PrintServer" />의 호스팅 인쇄 서버(대개 컴퓨터)를 나타내는 <see cref="T:System.Printing.PrintQueue" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-126">A <see cref="T:System.Printing.PrintServer" /> value that represents the hosting print server (usually a computer) for the <see cref="T:System.Printing.PrintQueue" /> that owns the print job.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="65885-127">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-127">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65885-128">
            <see cref="T:System.Printing.PrintSystemJobInfo" />에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-128">Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintSystemJobInfo" /> and optionally, releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBlocked">
      <MemberSignature Language="C#" Value="public bool IsBlocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBlocked" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsBlocked" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBlocked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBlocked { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-129">인쇄 작업이 차단되어 인쇄가 진행되지 않는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-129">Gets a value that indicates whether the print job is blocked and therefore, not printing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-130">인쇄 작업이 차단되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-130">
              <see langword="true" /> if the print job is blocked; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-131">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-131">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-132">인쇄 작업이 완료되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-132">Gets a value that indicates whether the print job is finished.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-133">인쇄 작업이 완료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-133">
              <see langword="true" /> if the print job is finished; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-134">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-134">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleted">
      <MemberSignature Language="C#" Value="public bool IsDeleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-135">
            <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체가 나타내는 인쇄 작업이 인쇄 대기열에서 삭제되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-135">Gets a value that indicates whether the print job, which is represented by the <see cref="T:System.Printing.PrintSystemJobInfo" /> object, was deleted from the print queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-136">인쇄 작업이 삭제되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-136">
              <see langword="true" /> if the print job was deleted; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-137">사실이 보일 수 있지만 개체 삭제 된 것으로 자체 상태를 보고 수 있지만 보관 해야 하는 처음에 다음에 유의 <xref:System.Printing.PrintSystemJobInfo> 개체만 *나타냅니다* 실제 인쇄 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-137">It may seem paradoxical at first that an object can report its own status as deleted, but keep in mind that the <xref:System.Printing.PrintSystemJobInfo> object only *represents* a real print job.</span></span> <span data-ttu-id="65885-138">작업을 삭제 인쇄 대기열에서 자동으로 삭제할는 <xref:System.Printing.PrintSystemJobInfo> 응용 프로그램의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-138">Deleting the latter from its print queue does not automatically dispose of the <xref:System.Printing.PrintSystemJobInfo> object in your application.</span></span> <span data-ttu-id="65885-139">마찬가지로, 개체에서 제거 되지 않습니다 <xref:System.Printing.PrintJobInfoCollection> 나타내는 인쇄 작업을 삭제 하기 전에 만든입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-139">Similarly, the object is not removed from any <xref:System.Printing.PrintJobInfoCollection> that was created before the print job it represents was deleted.</span></span> <span data-ttu-id="65885-140">예를 들어 경우는 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> 인쇄 작업이 삭제 되기 전에 메서드가 실행 될, 반환 된 컬렉션에 포함 됩니다는 <xref:System.Printing.PrintSystemJobInfo> 인쇄 작업을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-140">For example, if the <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> method is run before the print job was deleted, the returned collection will include a <xref:System.Printing.PrintSystemJobInfo> object that represents the print job.</span></span> <span data-ttu-id="65885-141">인쇄 작업 삭제 될 때이 개체 컬렉션에서 제거 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-141">This object is not removed from the collection when the print job is deleted.</span></span> <span data-ttu-id="65885-142">그러나 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> 을 다시 실행, 반환 된 컬렉션에는 삭제 된 인쇄 작업을 나타내는 멤버가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="65885-142">But if <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> is then run again, the returned collection will have no members that represent the deleted print jobs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-143">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-143">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleting">
      <MemberSignature Language="C#" Value="public bool IsDeleting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-144">인쇄 작업이 인쇄 대기열에서 삭제되고 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-144">Gets a value that indicates whether the print job is being deleted from the print queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-145">인쇄 작업이 삭제되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-145">
              <see langword="true" /> if the print job is being deleted; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-146">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-146">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-147">오류 조건이 인쇄 작업과 관련되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-147">Gets a value that indicates whether an error condition is associated with the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-148">오류 조건이 인쇄 작업과 관련되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-148">
              <see langword="true" /> if an error condition is associated with the print job; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-149">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-149">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-150">프린터가 오프라인 상태인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-150">Gets a value that indicates whether the printer is offline.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-151">프린터가 오프라인 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-151">
              <see langword="true" /> if the printer is offline; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-152">이 값이 모두에 전파는 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.IsOffline%2A> 호스트 하는 속성 <xref:System.Printing.PrintQueue>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-152">This value is propagated to all the <xref:System.Printing.PrintSystemJobInfo> objects from the <xref:System.Printing.PrintQueue.IsOffline%2A> property of the hosting <xref:System.Printing.PrintQueue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-153">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-153">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperOut">
      <MemberSignature Language="C#" Value="public bool IsPaperOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperOut" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaperOut" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperOut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperOut { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-154">프린터에 인쇄 작업에 필요한 용지 크기 및 종류가 없는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-154">Gets a value that indicates whether the printer has run out of the paper size and type that the print job requires.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-155">프린터에 필요한 용지가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-155">
              <see langword="true" /> if the printer has run out of the required paper; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-156">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-156">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-157">인쇄 작업이 일시 중지되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-157">Gets a value that indicates whether the print job is paused.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-158">인쇄 작업이 일시 중지되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-158">
              <see langword="true" /> if the print job is paused; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-159">전체 인쇄 큐를 일시 중지할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-159">The entire print queue can also be paused.</span></span> <span data-ttu-id="65885-160">예를 들어 값 <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A?displayProperty=nameWithType> 수 `false` 경우에 값은 <xref:System.Printing.PrintQueue.IsPaused%2A?displayProperty=nameWithType> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-160">For example, the value of <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A?displayProperty=nameWithType> can be `false` even when the value of the <xref:System.Printing.PrintQueue.IsPaused%2A?displayProperty=nameWithType> property is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-161">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-161">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="IsPrinted">
      <MemberSignature Language="C#" Value="public bool IsPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-162">인쇄 작업이 인쇄되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-162">Gets a value that indicates whether the print job printed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-163">인쇄 작업이 인쇄되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-163">
              <see langword="true" /> if the print job has printed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-164">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-164">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-165">인쇄 작업이 인쇄되고 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-165">Gets a value that indicates whether the print job is being printed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-166">프린터가 인쇄 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-166">
              <see langword="true" /> if the printer is printing; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-167">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-167">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRestarted">
      <MemberSignature Language="C#" Value="public bool IsRestarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRestarted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRestarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRestarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRestarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-168">인쇄 작업이 다시 시작되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-168">Gets a value that indicates whether the print job has been restarted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-169">프린터가 인쇄 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-169">
              <see langword="true" /> if the printer is printing; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-170">작업을 다시 시작 되 면 전체에서 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-170">When a job is restarted, it prints in its entirety.</span></span> <span data-ttu-id="65885-171">사용 하 여와 대조적은 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> 메서드를 일시 중지 된 지점에서 작업을 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-171">Contrast restarting with using the <xref:System.Printing.PrintSystemJobInfo.Resume%2A> method, which resumes a job at the point it was paused.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="IsRetained">
      <MemberSignature Language="C#" Value="public bool IsRetained { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetained" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRetained" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRetained As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRetained { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-172">인쇄 후 인쇄 작업이 대기열에 저장되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-172">Gets a value that indicates whether the print job was saved in the queue after it printed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-173">인쇄 작업이 저장되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-173">
              <see langword="true" /> if the print job was saved; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-174">경우 인쇄 작업 인쇄 큐에 유지는 <xref:System.Printing.PrintQueue.KeepPrintedJobs%2A> 속성의는 <xref:System.Printing.PrintQueue> 개체로 설정 됩니다 `true` 큐의 속성으로 커밋된 경우에 <xref:System.Printing.PrintQueue.Commit%2A> 의 메서드는 <xref:System.Printing.PrintQueue>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-174">A print queue retains printed jobs if the <xref:System.Printing.PrintQueue.KeepPrintedJobs%2A> property of the <xref:System.Printing.PrintQueue> object is set to `true` and if the properties of the queue have been committed with the <xref:System.Printing.PrintQueue.Commit%2A> method of the <xref:System.Printing.PrintQueue>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpooling">
      <MemberSignature Language="C#" Value="public bool IsSpooling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpooling" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsSpooling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpooling As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpooling { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-175">인쇄 작업이 스풀링 중인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-175">Gets a value that indicates whether the print job is being spooled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-176">인쇄 작업이 스풀링 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-176">
              <see langword="true" /> if the print job is being spooled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-177">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-177">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserInterventionRequired">
      <MemberSignature Language="C#" Value="public bool IsUserInterventionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserInterventionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsUserInterventionRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserInterventionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserInterventionRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-178">프린터에 사용자 작업이 필요한지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-178">Gets a value that indicates whether the printer needs user intervention.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-179">사용자 작업이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-179">
              <see langword="true" /> if user intervention is needed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-180">이 값에 모두 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.NeedUserIntervention%2A> 호스트 하는 속성 <xref:System.Printing.PrintQueue>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-180">This value propagates to all <xref:System.Printing.PrintSystemJobInfo> objects from the <xref:System.Printing.PrintQueue.NeedUserIntervention%2A> property of the hosting <xref:System.Printing.PrintQueue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-181">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-181">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobIdentifier">
      <MemberSignature Language="C#" Value="public int JobIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobIdentifier As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobIdentifier { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-182">인쇄 작업의 ID 번호를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-182">Gets the identification number for the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-183">인쇄 작업을 식별하는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-183">An <see cref="T:System.Int32" /> that identifies the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-184">어떤 번호 지정 시스템을 사용 하는 인쇄 서버 및 인쇄 서버 인지는 컴퓨터 또는 인쇄 서버 장비의 운영 체제에 의해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="65885-184">Which numbering system is used is determined by the operating system of the print server and whether the print server is a computer or a print server appliance.</span></span> <span data-ttu-id="65885-185">예를 들어 운영 체제에 대 한 [!INCLUDE[TLA#tla_whistler](~/includes/tlasharptla-whistler-md.md)] 이런 방식에서에서는: 인쇄 서버 켜져, 모든 인쇄 대기열이 비어 있으면 모든 사용자가 서버에서 모든 큐로 전송한 첫 번째 인쇄 작업 ID 번호 2 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="65885-185">For example, the operating system for [!INCLUDE[TLA#tla_whistler](~/includes/tlasharptla-whistler-md.md)] determines the numbering in this way: when a print server is turned on, if all its print queues are empty, the first print job submitted on the server by any user and to any queue is assigned ID number 2.</span></span> <span data-ttu-id="65885-186">서버에서 각 후속 작업 한 값이 할당 된 해당 서버에서 이전 인쇄 작업이 보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="65885-186">Each subsequent job on the server is assigned a number that is one greater than the previous print job on that server.</span></span>  
  
 <span data-ttu-id="65885-187">인쇄 큐 인쇄 작업에 대 한 해당 수에 영향을 주지: 경우 해당 순서에 따라 QueueA, 주지 않습니다, 및 QueueA, 보내는 작업 한 후 QueueA 2 및 4, 작업이 많고 주지 않습니다 작업 3입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-187">The print queue for the print job has no effect on its number: if jobs are sent to QueueA, QueueB, and QueueA, in that order, then QueueA has jobs 2 and 4, and QueueB has job 3.</span></span>  
  
 <span data-ttu-id="65885-188">작업 수에 할당 된 후 수는 바뀌지 다른 작업도 모두 인쇄 하거나 취소 되는 경우에 또는 서버가 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-188">After a job is assigned a number, the number never changes, even if other jobs finish printing or are canceled, or if the server is restarted.</span></span> <span data-ttu-id="65885-189">첫 번째 새 작업 한 값이 할당 된 작업이 이미 있는 하나 이상의 큐에서 서버를 다시 시작할 때, 하는 경우 서버 시작 될 때 큐에 있는 번호가 가장 큰 작업 보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="65885-189">If there are already jobs in one or more queues when the server is restarted, the first new job is assigned a number that is one greater than the highest numbered job that was in the queue when the server started.</span></span> <span data-ttu-id="65885-190">그러나를 다시 시작 될 때까지 인쇄 서버 숫자 들을 다시 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-190">However, until it restarts, a print server does not reuse a number.</span></span> <span data-ttu-id="65885-191">인쇄 하기 전에 번호가 가장 큰 작업 취소 되는 경우에 다음 작업을 가져옵니다 숫자를 하나 더 높은 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-191">Even if the highest numbered job is canceled before it is printed, the next job gets a number that is one higher.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-192">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-192">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobName">
      <MemberSignature Language="C#" Value="public string JobName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobName" />
      <MemberSignature Language="VB.NET" Value="Public Property JobName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ JobName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-193">인쇄 작업의 이름을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-193">Gets or sets a name for the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-194">인쇄 작업의 <see cref="T:System.String" /> 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-194">A <see cref="T:System.String" /> name for the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-195">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-195">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobSize">
      <MemberSignature Language="C#" Value="public int JobSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobSize" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int JobSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-196">인쇄 작업의 크기(바이트)를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-196">Get the size, in bytes, of the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-197">인쇄 작업의 크기(바이트)를 나타내는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-197">An <see cref="T:System.Int32" /> that states the size, in bytes, of the print job.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobStatus JobStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobStatus JobStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStatus As PrintJobStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobStatus JobStatus { System::Printing::PrintJobStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-198">인쇄 작업의 현재 상태를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-198">Gets the current status of the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-199">
            <see cref="T:System.Printing.PrintJobStatus" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-199">A <see cref="T:System.Printing.PrintJobStatus" /> value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-200">이 방법을 사용 하면 개별적으로 같은 각 상태 속성을 확인할 필요가 <xref:System.Printing.PrintSystemJobInfo.IsPrinting%2A> 및 <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-200">This method gives you a means to avoid individually checking each of the status properties, such as <xref:System.Printing.PrintSystemJobInfo.IsPrinting%2A> and <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-201">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-201">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobattributes)]
 [!code-csharp[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobattributes)]
 [!code-vb[DiagnoseProblematicPrintJob#SpotTroubleUsingJobAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream JobStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream JobStream" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JobStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ JobStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-202">인쇄 작업의 <see cref="T:System.IO.Stream" />에 대한 참조를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-202">Gets a reference to the <see cref="T:System.IO.Stream" /> of the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-203">인쇄 작업을 포함하는 <see cref="T:System.IO.Stream" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-203">A <see cref="T:System.IO.Stream" /> that contains the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-204">Windows 8 및 이후 버전의 운영 체제에서.NET Framework 4.5부터이 스트림에 기록 된 데이터 형식 이어야 합니다 XPS는 패키지 스트림과 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-204">Starting with the .NET Framework 4.5 on Windows 8 and later versions of the operating system, data written to this stream must be in XPS format as a package stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPages">
      <MemberSignature Language="C#" Value="public int NumberOfPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPages" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPages As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPages { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-205">인쇄 작업의 페이지 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-205">Gets the number of pages in the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-206">인쇄 작업의 페이지 수를 나타내는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-206">An <see cref="T:System.Int32" /> that states the number of pages in the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-207">페이지는 문서 또는 다른 인쇄 미디어의 시트에의 한 쪽입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-207">A page is one side of a sheet of paper or other print media.</span></span>  
  
 <span data-ttu-id="65885-208">다음 표에서이 속성 값을 사용 하는 시트의 개수 양면 인쇄 (이중)에 대 한 인쇄 작업이 호출 되는 여부, 여러--인쇄할 페이지를 요청 하는지 또는 둘 다에 대해를 호출 하는지 여부에 따라 미치는 영향이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-208">The following table shows how the value of this property, and the number of sheets used, is affected by whether the print job calls for two-sided printing (duplexing), whether it calls for multiple pages-per-sheet, or whether it calls for both.</span></span>  
  
### <a name="how-duplexing-and-multipage-printing-affect-printing"></a><span data-ttu-id="65885-209">양면 및 여러 페이지 인쇄 인쇄에 미치는 영향</span><span class="sxs-lookup"><span data-stu-id="65885-209">How duplexing and multipage printing affect printing</span></span>  
  
|<span data-ttu-id="65885-210">양면 인쇄</span><span class="sxs-lookup"><span data-stu-id="65885-210">Duplexing</span></span>|<span data-ttu-id="65885-211">장에 페이지</span><span class="sxs-lookup"><span data-stu-id="65885-211">Pages per sheet</span></span>|<span data-ttu-id="65885-212">NumberOfPages의 값</span><span class="sxs-lookup"><span data-stu-id="65885-212">Value of NumberOfPages</span></span>|<span data-ttu-id="65885-213">용지 물리적 시트의 개수</span><span class="sxs-lookup"><span data-stu-id="65885-213">Number of physical sheets of paper</span></span>|  
|---------------|---------------------|----------------------------|----------------------------------------|  
|<span data-ttu-id="65885-214">아니요</span><span class="sxs-lookup"><span data-stu-id="65885-214">No</span></span>|<span data-ttu-id="65885-215">1</span><span class="sxs-lookup"><span data-stu-id="65885-215">1</span></span>|<span data-ttu-id="65885-216">문서에는 페이지 수와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-216">Identical to the number of pages in the document.</span></span>|<span data-ttu-id="65885-217">문서에는 페이지 수와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-217">Identical to the number of pages in the document.</span></span>|  
|<span data-ttu-id="65885-218">예</span><span class="sxs-lookup"><span data-stu-id="65885-218">Yes</span></span>|<span data-ttu-id="65885-219">1</span><span class="sxs-lookup"><span data-stu-id="65885-219">1</span></span>|<span data-ttu-id="65885-220">문서에는 페이지 수와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="65885-220">Identical to the number of pages in the document.</span></span>|<span data-ttu-id="65885-221">페이지 ÷ (반올림) 2를 문서화 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-221">Document pages ÷ 2 (rounded up).</span></span>|  
|<span data-ttu-id="65885-222">아니요</span><span class="sxs-lookup"><span data-stu-id="65885-222">No</span></span>|<span data-ttu-id="65885-223">다중</span><span class="sxs-lookup"><span data-stu-id="65885-223">Multiple</span></span>|<span data-ttu-id="65885-224">문서 페이지 (반올림) 장에 ÷ 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-224">Document pages ÷ Pages per sheet (rounded up).</span></span>|<span data-ttu-id="65885-225">문서 페이지 (반올림) 장에 ÷ 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-225">Document pages ÷ Pages per sheet (rounded up).</span></span>|  
|<span data-ttu-id="65885-226">예</span><span class="sxs-lookup"><span data-stu-id="65885-226">Yes</span></span>|<span data-ttu-id="65885-227">다중</span><span class="sxs-lookup"><span data-stu-id="65885-227">Multiple</span></span>|<span data-ttu-id="65885-228">문서 페이지 (반올림) 장에 ÷ 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-228">Document pages ÷ Pages per sheet (rounded up).</span></span>|<span data-ttu-id="65885-229">[문서 페이지 개수가 시트 ÷ 페이지] ÷ 2 (반올림).</span><span class="sxs-lookup"><span data-stu-id="65885-229">[Document pages ÷ Pages per sheet] ÷ 2 (rounded up).</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintTicket.Duplexing" />
        <altmember cref="P:System.Printing.PrintTicket.PagesPerSheet" />
      </Docs>
    </Member>
    <Member MemberName="NumberOfPagesPrinted">
      <MemberSignature Language="C#" Value="public int NumberOfPagesPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPagesPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfPagesPrinted As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfPagesPrinted { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-230">이미 인쇄된 페이지 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-230">Gets the number of pages that have already printed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-231">이미 인쇄된 페이지 수를 나타내는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-231">An <see cref="T:System.Int32" /> that states the number of pages that have already printed.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-232">
            <see cref="M:System.Printing.PrintSystemJobInfo.Resume" />이 실행될 때까지 작업의 인쇄를 중단합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-232">Halts printing of the job until <see cref="M:System.Printing.PrintSystemJobInfo.Resume" /> runs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-233">다른 작업이 큐에 있는 경우 현재 작업 일시 중지 되 면 인쇄를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-233">If another job is in the queue, it begins printing when the current job is paused.</span></span>  
  
 <span data-ttu-id="65885-234">호스팅 <xref:System.Printing.PrintQueue> 역시 <xref:System.Printing.PrintQueue.Pause%2A> 및 <xref:System.Printing.PrintQueue.Resume%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="65885-234">The hosting <xref:System.Printing.PrintQueue> also has <xref:System.Printing.PrintQueue.Pause%2A> and <xref:System.Printing.PrintQueue.Resume%2A> methods.</span></span> <span data-ttu-id="65885-235">인쇄 큐가 일시 중지 되 면 개별 작업을 다시 시작 않을 해당 작업의 인쇄를 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-235">If the print queue is paused, resuming an individual job does not cause that job to resume printing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PositionInPrintQueue">
      <MemberSignature Language="C#" Value="public int PositionInPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionInPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.PositionInPrintQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PositionInPrintQueue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PositionInPrintQueue { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-236">인쇄 대기열에서의 인쇄 작업의 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-236">Gets the print job's place in the print queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-237">인쇄 대기열에서의 인쇄 작업의 위치를 나타내는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-237">An <see cref="T:System.Int32" /> that states the print job's place in the queue.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobPriority Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Priority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Priority As PrintJobPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobPriority Priority { System::Printing::PrintJobPriority get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-238">인쇄 대기열의 다른 작업을 기준으로 인쇄 작업의 우선 순위를 나타내는 숫자가 아닌 표현을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-238">Gets a non-numerical expression that represents the priority of the print job relative to other jobs in the print queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-239">인쇄 작업의 우선 순위를 <see cref="T:System.Printing.PrintJobPriority" />, <see cref="F:System.Printing.PrintJobPriority.Maximum" />, <see cref="F:System.Printing.PrintJobPriority.Minimum" /> 또는 <see cref="F:System.Printing.PrintJobPriority.Default" />으로 나타내는 <see cref="F:System.Printing.PrintJobPriority.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-239">A <see cref="T:System.Printing.PrintJobPriority" /> that represents the priority of the print job as <see cref="F:System.Printing.PrintJobPriority.Maximum" />, <see cref="F:System.Printing.PrintJobPriority.Minimum" />, <see cref="F:System.Printing.PrintJobPriority.Default" />, or <see cref="F:System.Printing.PrintJobPriority.None" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-240">
            <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체의 속성을 이 개체가 나타내는 실제 인쇄 작업의 값과 일치하도록 업데이트합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-240">Updates the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" /> object so that their values match the values of the actual print job that the object represents.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-241">속성 변경 내용을 <xref:System.Printing.PrintSystemJobInfo> 개체를 사용 하 여 실제 인쇄 작업에 기록 되어야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="65885-241">Any changes that you make to the properties of a <xref:System.Printing.PrintSystemJobInfo> object must be written to the actual print job by using the <xref:System.Printing.PrintSystemJobInfo.Commit%2A> method.</span></span> <span data-ttu-id="65885-242">커밋되지 않은 모든 변경 내용은 손실 되는 경우는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-242">Any changes that you have not committed are lost when the <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> method runs.</span></span>  
  
 <span data-ttu-id="65885-243">클래스를 파생 하는 경우 <xref:System.Printing.PrintSystemJobInfo> 있는 추가 속성을 재정의 해야 합니다는 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 자신만의 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-243">If you derive a class from <xref:System.Printing.PrintSystemJobInfo> that has additional properties, then you must override the <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> method with an implementation of your own.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-244">인쇄 작업을 처음부터 다시 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-244">Restarts a print job from the beginning.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-245">사용할 수 있습니다는 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> 메서드를 일시 중지 된 지점에서 시작, 일시 중지 된 인쇄 작업을 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-245">Optionally, you can use the <xref:System.Printing.PrintSystemJobInfo.Resume%2A> method, which restarts a paused print job, starting at the point it was paused.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65885-246">일시 중지된 인쇄 작업의 인쇄를 다시 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-246">Resumes the printing of a paused print job.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-247">호스팅 <xref:System.Printing.PrintQueue> 역시 <xref:System.Printing.PrintQueue.Pause%2A> 및 <xref:System.Printing.PrintQueue.Resume%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="65885-247">The hosting <xref:System.Printing.PrintQueue> also has <xref:System.Printing.PrintQueue.Pause%2A> and <xref:System.Printing.PrintQueue.Resume%2A> methods.</span></span> <span data-ttu-id="65885-248">인쇄 큐가 일시 중지 되 면 개별 작업을 다시 시작를 재시작 하지 인쇄 작업의 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-248">If the print queue is paused, resuming an individual job does not resume the printing of the print job.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-249">다음 예제에서는 일시 중지 된 인쇄 작업을 다시 시작 하려면이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-249">The following example shows how to use this method to resume a paused print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public int StartTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int StartTimeOfDay { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-250">GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 이른 시간을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-250">Gets the earliest time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-251">UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 이른 시간을 지정하는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-251">An <see cref="T:System.Int32" /> specifying the earliest possible start time for the print job, expressed as the number of minutes after midnight (UTC).</span>
          </span>
          <span data-ttu-id="65885-252">최대값은 1439입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-252">The maximum value is 1439.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-253">이 값이 각각에 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 호스트 하는 속성 <xref:System.Printing.PrintQueue> 작업 시간에는 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="65885-253">This value is propagated to each <xref:System.Printing.PrintSystemJobInfo> object from the <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> property of the hosting <xref:System.Printing.PrintQueue> at the time the job enters the queue.</span></span> <span data-ttu-id="65885-254">경우 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 변경 되 면 다음 모든 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A?displayProperty=nameWithType> 값 미만의 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> 의 값으로 변경 되 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-254">If <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> is changed, then any <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A?displayProperty=nameWithType> value that is earlier than <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType> is changed to the value of <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="65885-255">작업이 큐에 추가 되는 새 지정할 수 있습니다 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 통해 값은 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]되 고 이전의 있지 않으면, <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-255">After the job is added to the queue, it can be given a new <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> value through the [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], provided that it is not earlier than <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="65885-256">가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 올바른 시간을 가져올을 60의 배수를 뺍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-256">If you are not in the UTC time zone, you must add or subtract multiples of 60 to get the correct time for your time zone.</span></span> <span data-ttu-id="65885-257">예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-257">For example, if you are in the Pacific Time Zone of North America and daylight savings time is not in effect, then your local time is 8 hours earlier than UTC.</span></span> <span data-ttu-id="65885-258">경우 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 960 16:00 (오후 4시)를 의미 하는 반환 (때문에 960/60 = 16).</span><span class="sxs-lookup"><span data-stu-id="65885-258">If <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> returns 960, that means 16:00 (4:00 PM) in UTC (because 960/60 = 16).</span></span> <span data-ttu-id="65885-259">이 값 태평양 표준시를 변환 하려면 (8 \* 60 =) 480 빼야 분입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-259">To convert this to Pacific Time, you must subtract 480 (= 8 \* 60) minutes.</span></span>  
  
 <span data-ttu-id="65885-260">또한 기억해 야 시간 24 시간 후 0을 통해 롤업 하는 (즉 1439 분 후에;).</span><span class="sxs-lookup"><span data-stu-id="65885-260">You also must remember that time rolls over to zero after 24 hours (that is; after the 1439th minute).</span></span> <span data-ttu-id="65885-261">경우 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 120 오전 2시 utc에서를 의미 하는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-261">If <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> returns 120, that means 2:00 AM in UTC.</span></span> <span data-ttu-id="65885-262">이것으로 태평양 표준시 변환 하려면 빼야 480 분-360에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-262">To convert this to Pacific Time, you must subtract 480 minutes, which results in -360.</span></span> <span data-ttu-id="65885-263">의미 있는 양수 값을 가져오려면 1440 1080 (오후 6시) 태평양 표준시의 최종 값은 하루에 있는 총 분에 음수 값을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-263">To get a positive value that has meaning, add the negative number to the total minutes in a day, 1440, resulting in a final value of 1080 (6:00 PM) Pacific Time.</span></span>  
  
 <span data-ttu-id="65885-264">참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 시간대 조정 하는 데 도움이 되는 방법에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-264">See <xref:System.TimeZone>, <xref:System.TimeSpan>, and <xref:System.DateTime> for methods that help make time-zone adjustments.</span></span>  
  
 <span data-ttu-id="65885-265">프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-265">If the printer is always available, then this property returns 0 in all time zones.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-266">다음 예제에는 인쇄 작업 문제를 진단 하는 과정의 일환으로이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-266">The following example shows how to use this property as part of the process of diagnosing a problematic print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="Submitter">
      <MemberSignature Language="C#" Value="public string Submitter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Submitter" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Submitter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Submitter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Submitter { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-267">인쇄 작업을 전송한 사용자의 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-267">Gets the name of the user who submitted the print job.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-268">인쇄 작업을 전송한 사용자를 식별하는 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-268">A <see cref="T:System.String" /> that identifies the user who submitted the print job.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="65885-269">다음 예제에는 인쇄 작업 문제를 진단할 때이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-269">The following example shows how to use this property when diagnosing a problem with a print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeJobSubmitted">
      <MemberSignature Language="C#" Value="public DateTime TimeJobSubmitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeJobSubmitted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeJobSubmitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeJobSubmitted As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeJobSubmitted { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-270">인쇄 작업이 전송된 날짜와 시간을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-270">Gets the date and time that the print job is submitted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-271">인쇄 작업이 전송된 날짜와 시간이 포함된 <see cref="T:System.DateTime" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-271">A <see cref="T:System.DateTime" /> object containing the date and time that the print job is submitted.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSinceStartedPrinting">
      <MemberSignature Language="C#" Value="public int TimeSinceStartedPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeSinceStartedPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeSinceStartedPrinting As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TimeSinceStartedPrinting { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-272">인쇄 작업의 인쇄가 시작된 이후 경과한 시간(밀리초)을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-272">Gets the time, in milliseconds, since the print job started printing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-273">인쇄 작업이 시작된 이후 경과한 시간(밀리초)을 나타내는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-273">An <see cref="T:System.Int32" /> that represents the time, in milliseconds, since the print job started.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public int UntilTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int UntilTimeOfDay { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65885-274">GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 인쇄 작업의 인쇄를 시작할 수 있는 가장 늦은 시간을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-274">Gets the last time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65885-275">UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 작업을 인쇄할 수 있는 가장 늦은 시간을 지정하는 <see cref="T:System.Int32" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-275">An <see cref="T:System.Int32" /> that specifies the last time that the job can print, expressed as the number of minutes after midnight (UTC).</span>
          </span>
          <span data-ttu-id="65885-276">최대값은 1439입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65885-276">The maximum value is 1439.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65885-277">이 값이 각각에 전파 <xref:System.Printing.PrintSystemJobInfo> 에서 개체는 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 호스트 하는 속성 <xref:System.Printing.PrintQueue> 작업 시간에는 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="65885-277">This value is propagated to each <xref:System.Printing.PrintSystemJobInfo> object from the <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> property of the hosting <xref:System.Printing.PrintQueue> at the time the job enters the queue.</span></span> <span data-ttu-id="65885-278">경우 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 변경 되 면 다음 모든 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A?displayProperty=nameWithType> 값 보다 최신인 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> 의 값으로 변경 되 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-278">If <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> is changed, then any <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A?displayProperty=nameWithType> value that is later than <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType> is changed to the value of <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="65885-279">작업이 큐에 추가 되는 새 지정할 수 있습니다 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 통해 값은 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]되 고 보다 이후 있지 않으면, <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-279">After the job is added to the queue, it can be given a new <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> value through the [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], provided that it is not later than <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="65885-280">가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 올바른 시간을 가져올을 60의 배수를 뺍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-280">If you are not in the UTC time zone, you must add or subtract multiples of 60 to get the correct time for your time zone.</span></span> <span data-ttu-id="65885-281">예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-281">For example, if you are in the Pacific Time Zone of North America and daylight savings time is not in effect, then your local time is 8 hours earlier than UTC.</span></span> <span data-ttu-id="65885-282">경우 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 960 16:00 (오후 4시)를 의미 하는 반환 (때문에 960/60 = 16).</span><span class="sxs-lookup"><span data-stu-id="65885-282">If <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> returns 960, that means 16:00 (4:00 PM) in UTC (because 960/60 = 16).</span></span> <span data-ttu-id="65885-283">이 값 태평양 표준시를 변환 하려면 (8 \* 60 =) 480 빼야 분입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-283">To convert this to Pacific Time, you must subtract 480 (= 8 \* 60) minutes.</span></span>  
  
 <span data-ttu-id="65885-284">또한 기억해 야 시간 24 시간 후 0을 통해 롤업 하는 (즉 1439 분 후에;).</span><span class="sxs-lookup"><span data-stu-id="65885-284">You also must remember that time rolls over to zero after 24 hours (that is; after the 1439th minute).</span></span> <span data-ttu-id="65885-285">경우 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 120 오전 2시 utc에서를 의미 하는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-285">If <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> returns 120, that means 2:00 AM in UTC.</span></span> <span data-ttu-id="65885-286">이것으로 태평양 표준시 변환 하려면 빼야 480 분-360에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="65885-286">To convert this to Pacific Time, you must subtract 480 minutes, which results in -360.</span></span> <span data-ttu-id="65885-287">의미 있는 양수 값을 가져오려면 1440 1080 (오후 6시) 태평양 표준시의 최종 값은 하루에 있는 총 분에 음수 값을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-287">To get a positive value that has meaning, add the negative number to the total minutes in a day, 1440, resulting in a final value of 1080 (6:00 PM) Pacific Time.</span></span>  
  
 <span data-ttu-id="65885-288">참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 시간대 조정 하는 데 도움이 되는 방법에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-288">See <xref:System.TimeZone>, <xref:System.TimeSpan>, and <xref:System.DateTime> for methods that help make time-zone adjustments.</span></span>  
  
 <span data-ttu-id="65885-289">프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="65885-289">If the printer is always available, then this property returns 0 in all time zones.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65885-290">다음 예제에는 인쇄 작업 문제를 진단 하는 과정의 일환으로이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="65885-290">The following example shows how to use this property as part of the process of diagnosing a problematic print job.</span></span>  
  
 [!code-cpp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      </Docs>
    </Member>
  </Members>
</Type>