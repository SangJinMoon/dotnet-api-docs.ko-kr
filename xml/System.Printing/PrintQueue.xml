<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c894ae6d0e5d41543a1fb6b97dfb6d69132b4f98" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30470797" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>프린터 및 인쇄 작업을 관리합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 속성은 <xref:System.Printing.PrintQueue> 특성은 컴퓨터에서 실행 되는 인쇄 큐 유틸리티의 개체 나타내지만 다른 기능이 나 프린터 자체의 상태입니다. 예를 들어 <xref:System.Printing.PrintQueue.NumberOfJobs%2A> 인쇄 큐의 특징은 있지만 <xref:System.Printing.PrintQueue.Location%2A> 프린터의 속성입니다. 방법으로 전달 해야 하는 사용자 개입이 필요한 지 여부와 같은 프린터의 속성 중 상당수는 <xref:System.Printing.PrintQueue.Refresh%2A> 메서드를 프린터 자체에 <xref:System.Printing.PrintQueue> 개체입니다. 해당 하는 속성 하기 전에이 작업이 필요 합니다 (<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>) 프로그램에서 읽혀집니다. 프로그램의 여러 속성의 값을 변경 하는 경우 마찬가지로, 한 <xref:System.Printing.PrintQueue> 개체를 컴퓨터에는 실제 인쇄 큐 유틸리티를 써야 합니다 변경 합니다. 이 작업을 수행는 <xref:System.Printing.PrintQueue.Commit%2A> 메서드.  
  
> [!CAUTION]
>  내에서 클래스는 <xref:System.Printing> Windows 서비스 또는 ASP.NET 응용 프로그램 또는 서비스 내에서 사용 하기 위해 네임 스페이스를 사용할 수 없습니다. 이러한 응용 프로그램 종류 중 하나에서 이러한 클래스를 사용 하는 동안 예기치 않은 문제가 발생할 수 있습니다, 그리고 감소와 같은 서비스 성능 및 런타임 예외입니다.  
  
 Windows Forms 응용 프로그램에서 인쇄 하는 경우 참조는 <xref:System.Drawing.Printing> 네임 스페이스입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintQueue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" /> 및 큐 이름을 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 포함 하지 않는 생성자는 <xref:System.Printing.PrintSystemDesiredAccess> 매개 변수 기본값으로 <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> 액세스 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="printSchemaVersion">사용할 Print Schema의 버전입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름 및 인쇄 스키마 버전을 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 포함 하지 않는 생성자는 <xref:System.Printing.PrintSystemDesiredAccess> 매개 변수 기본값으로 <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> 액세스 합니다.  
  
 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista와 함께 릴리스된 버전은 "1".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="propertyFilter">초기화할 속성 값을 지정하는 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 값 배열입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름 및 초기화할 <see cref="T:System.Printing.PrintServer" /> 값 배열을 사용하여 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 포함 하지 않는 생성자는 <xref:System.Printing.PrintSystemDesiredAccess> 매개 변수 기본값으로 <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> 액세스 합니다.  
  
 와 생성자를 사용 하는 `propertyFilter` 매개 변수 성능이 향상 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="desiredAccess">프로그램에 필요한 인쇄 큐의 액세스 형식을 지정하는 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> 값 중 하나입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름 및 원하는 액세스를 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" />가 <see cref="T:System.Printing.PrintServer" /> 개체가 아니라 <see cref="T:System.Printing.PrintQueue" /> 개체에만 적용될 수 있는 값인 경우(예: 예를 들어, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />을 입력합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="propertyFilter">초기화할 속성 이름의 배열입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름 및 초기화할 속성 이름 배열을 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 포함 하지 않는 생성자는 <xref:System.Printing.PrintSystemDesiredAccess> 매개 변수 기본값으로 <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> 액세스 합니다.  
  
 와 생성자를 사용 하는 `propertyFilter` 매개 변수 성능이 향상 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="printSchemaVersion">사용할 Print Schema의 버전입니다.</param>
        <param name="desiredAccess">프로그램에 필요한 인쇄 큐의 액세스 형식을 지정하는 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> 값 중 하나입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름, 인쇄 스키마 버전 및 원하는 액세스를 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista와 함께 릴리스된 버전은 "1".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" />가 <see cref="T:System.Printing.PrintServer" /> 개체가 아니라 <see cref="T:System.Printing.PrintQueue" /> 개체에만 적용될 수 있는 값인 경우(예: 예를 들어, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />을 입력합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="propertyFilter">초기화할 속성을 지정하는 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 값 배열입니다.</param>
        <param name="desiredAccess">프로그램에 필요한 인쇄 큐의 액세스 형식을 지정하는 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> 값 중 하나입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름, 초기화할 <see cref="T:System.Printing.PrintServer" /> 값 배열 및 원하는 액세스로 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 생성자를 사용 하는 `propertyFilter` 매개 변수 성능이 향상 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" />가 <see cref="T:System.Printing.PrintServer" /> 개체가 아니라 <see cref="T:System.Printing.PrintQueue" /> 개체에만 적용될 수 있는 값인 경우(예: 예를 들어, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />을 입력합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">인쇄 큐를 호스팅하는 인쇄 서버입니다.</param>
        <param name="printQueueName">인쇄 대기열의 이름입니다.</param>
        <param name="propertyFilter">초기화할 속성 이름의 배열입니다.</param>
        <param name="desiredAccess">프로그램에 필요한 인쇄 큐의 액세스 형식을 지정하는 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> 값 중 하나입니다.</param>
        <summary>지정한 <see cref="T:System.Printing.PrintQueue" />, 큐 이름, 속성 필터 및 원하는 액세스를 사용하여 <see cref="T:System.Printing.PrintServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 생성자를 사용 하는 `propertyFilter` 매개 변수 성능이 향상 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" />가 <see cref="T:System.Printing.PrintServer" /> 개체가 아니라 <see cref="T:System.Printing.PrintQueue" /> 개체에만 적용될 수 있는 값인 경우(예: 예를 들어, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />을 입력합니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>큐에 새 인쇄 작업을 삽입합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 큐 일시 중지 시키거나 오류 상태에는 작업이 인쇄 큐의 위쪽에 도달 하면 이것이 인쇄 기능입니다.  
  
 다른 방법으로에 인쇄할 수 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 포함는 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> 대화 상자를 닫고 다 열려 있지 않아도 사용할 수 있는 메서드를 <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> 및 <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> 의 메서드는 <xref:System.Windows.Xps.XpsDocumentWriter>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>콘텐츠가 <see cref="T:System.Byte" /> 배열인 새로운 인쇄 작업(일반적으로 이름이 지정됨)을 큐에 삽입합니다.</summary>
        <returns>인쇄 작업 및 그 상태를 나타내는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 스풀 파일을 자동으로 포함 되지 않는에 장치 관련 정보를 쓸 수는 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] 스풀러 합니다. 스풀 파일 인지 확인 해야 하는 물론, [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] 또는 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]합니다. 사용 하려는 경우는 <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]를 사용할 수 있습니다는 <xref:System.Printing.PrintQueueStream> 이 메서드 대신 클래스입니다.  
  
 후의 <xref:System.Printing.PrintQueue.AddJob%2A> 작성 해야 메서드를 호출는 <xref:System.Byte> 배열을 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> 속성은 <xref:System.Printing.PrintSystemJobInfo> 에서 반환 하는 <xref:System.Printing.PrintQueue.AddJob%2A> 없는 인쇄 작업은 생성 또는 합니다. 이 배열이 프린터가 작동 하 고 일시 중지 되지 않은 경우 인쇄 하는 기능입니다.  
  
> [!CAUTION]
>  경우는 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> 와 닫혀 있지 않으면 <xref:System.IO.Stream.Close%2A> 스레드가 종료 되기 전에 <xref:System.Printing.PrintQueue.AddJob%2A> 호출 됩니다는 <xref:System.InvalidOperationException> 스풀러 스레드 제어할 수 있으므로 해당 스레드가 종료 될 때 throw 되는 <xref:System.IO.Stream> 개체입니다.  
  
 인쇄 큐에서 [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], 작업에 이름이 "인쇄 시스템 문서"입니다. 사용 하 여 작업에 다른 이름을 지정 하는 <xref:System.Printing.PrintQueue.AddJob%28System.String%29> 오버 로드 합니다.  
  
 다른 방법으로에 인쇄할 수 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 포함는 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> 대화 상자를 닫고 다 열려 있지 않아도 사용할 수 있는 메서드를 <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> 및 <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> 의 메서드는 <xref:System.Windows.Xps.XpsDocumentWriter>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Printing.PrintQueue.AddJob> 보내려고는 <xref:System.Byte> 인쇄 큐에는 배열입니다. 이 코드를 검색 하 고 일반 텍스트를 인쇄할 수 있는 프린터 에서만 작동 합니다. 그 중 일부를 할 수 없습니다.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">인쇄 작업의 이름입니다.</param>
        <summary>콘텐츠가 <see cref="T:System.Byte" /> 배열인 새 인쇄 작업을 큐에 삽입합니다.</summary>
        <returns>인쇄 작업 및 그 상태를 나타내는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 스풀 파일을 자동으로 포함 되지 않는에 장치 관련 정보를 쓸 수는 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] 스풀러 합니다. 스풀 파일 인지 확인 해야 하는 물론, [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] 또는 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]합니다. 사용 하려는 경우는 <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]를 사용할 수 있습니다는 <xref:System.Printing.PrintQueueStream> 이 메서드 대신 클래스입니다.  
  
 후의 <xref:System.Printing.PrintQueue.AddJob%2A> 작성 해야 메서드를 호출는 <xref:System.Byte> 배열을 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> 속성은 <xref:System.Printing.PrintSystemJobInfo> 에서 반환 하는 <xref:System.Printing.PrintQueue.AddJob%2A> 없는 인쇄 작업은 생성 또는 합니다. 이 배열이 프린터가 작동 하 고 일시 중지 되지 않은 경우 인쇄 하는 기능입니다.  
  
> [!CAUTION]
>  경우는 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> 와 닫혀 있지 않으면 <xref:System.IO.Stream.Close%2A> 스레드가 종료 되기 전에 <xref:System.Printing.PrintQueue.AddJob%2A> 호출 됩니다는 <xref:System.InvalidOperationException> 스풀러 스레드 제어할 수 있으므로 해당 스레드가 종료 될 때 throw 되는 <xref:System.IO.Stream> 개체입니다.  
  
 다른 방법으로에 인쇄할 수 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 포함는 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> 대화 상자를 닫고 다 열려 있지 않아도 사용할 수 있는 메서드를 <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> 및 <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> 의 메서드는 <xref:System.Windows.Xps.XpsDocumentWriter>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Printing.PrintQueue.AddJob%28System.String%29> 에 파일을 읽을 수는 <xref:System.Byte> 배열 하 고 인쇄 큐로 보내는 합니다. 이 코드에서는 c: 드라이브의 루트에서 test.txt 라는 파일 이라고 가정 합니다. 이 코드를 검색 하 고 일반 텍스트를 인쇄할 수 있는 프린터 에서만 작동 합니다. 그 중 일부를 할 수 없습니다.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">인쇄하고 있는 문서의 경로와 이름입니다.</param>
        <param name="printTicket">인쇄 작업의 설정입니다.</param>
        <summary>큐에 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 문서에 대한 새 인쇄 작업을 삽입하고, 지정된 이름과 설정을 부여합니다.</summary>
        <returns>인쇄 작업 및 그 상태를 나타내는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 <xref:System.Printing.PrintQueue.AddJob%28System.String%29>을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">인쇄 작업의 이름입니다.</param>
        <param name="documentPath">인쇄하고 있는 문서의 경로와 이름입니다.</param>
        <param name="fastCopy">
          페이지 단위 진행 상태 피드백을 사용하지 않으며 파일이 유효한 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]인지 유효성을 검사하지 않고 빠르게 스풀링하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 문서에 대한 새 인쇄 작업을 큐로 삽입하고 지정된 이름을 할당한 후 유효성 검사를 수행하는지 여부를 지정합니다.</summary>
        <returns>인쇄 작업 및 그 상태를 나타내는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `fastCopy` 은 `true`, 프린터 이어야 합니다는 [인쇄 개요](~/docs/framework/wpf/advanced/printing-overview.md)합니다. 그렇지 않을 경우는 <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> 메서드에서 예외를 throw 합니다.  
  
 경우 `fastCopy` 은 `false`, 다음 XPSDrv 프린터를 사용할 필요는 없습니다. [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] 파일 큐에 추가 되 고 프린터의 페이지 설명 언어 PCL 또는 포스트 스크립트 등으로 변환 됩니다. 그러나 이런이 종류의 인쇄에 대 한 호출을 사용 하면 [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]합니다. 에 대 한 호출 [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] 호출 스레드가 단일 스레드 아파트 있어야 (<xref:System.Threading.ApartmentState.STA>) 대신 다중 스레드 아파트 (<xref:System.Threading.ApartmentState.MTA>)의 기본값 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 이상. (참조에 대 한 자세한 스레드 및 아파트 상태를 [관리 / 관리 되지 않는 스레딩](http://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5), 및 <xref:System.Threading.ApartmentState>.) 이 작업을 수행 하는 방법은 두 가지가 있습니다.  
  
-   가장 간단한 방법은 추가 하는 것은 <xref:System.STAThreadAttribute> (즉, "`[System.STAThreadAttribute()]`") 응용 프로그램의 첫 번째 줄 바로 위에 `Main` 메서드 (일반적으로 "`static void Main(string[] args)`").  
  
-   필요한 경우 프로그램 `Main` 스레드의 아파트 상태를 <xref:System.Threading.ApartmentState.MTA>, 호출을 유지할 수 있습니다 <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> 아파트 상태가 설정 되는 별도 스레드에서 <xref:System.Threading.ApartmentState.STA> 와 <xref:System.Threading.Thread.SetApartmentState%2A>합니다. 다음 예제에서는이 두 번째 방법을 보여 줍니다.  
  
> [!NOTE]
>  적용할 수 없습니다는 <xref:System.STAThreadAttribute> 제외 하 고 모든 메서드에 `Main` 을 사용할 수 없는 <xref:System.Threading.Thread.SetApartmentState%2A> 에 대 한는 `Main` 스레드입니다.  
  
 다른 방법으로에 인쇄할 수 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 포함는 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> 대화 상자를 닫고 다 열려 있지 않아도 사용할 수 있는 메서드를 <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> 및 <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> 의 메서드는 <xref:System.Windows.Xps.XpsDocumentWriter>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> 인쇄 모든 일괄 처리 하는 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 디렉터리의 파일입니다.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">인쇄하고 있는 문서의 경로와 이름입니다.</param>
        <param name="documentPath">인쇄하고 있는 문서의 경로와 이름입니다.</param>
        <param name="fastCopy">
          페이지 단위 진행 상태 피드백을 사용하지 않으며 파일이 유효한 [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]인지 유효성을 검사하지 않고 빠르게 스풀링하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <param name="printTicket">인쇄 작업의 설정입니다.</param>
        <summary>[!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 문서에 대한 새 인쇄 작업을 큐로 삽입하고 지정된 이름과 설정을 할당한 후 유효성 검사를 수행하는지 여부를 지정합니다.</summary>
        <returns>인쇄 작업 및 그 상태를 나타내는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>분당 페이지 수로 측정되는 프린터의 속도를 가져옵니다.</summary>
        <value>분당 인쇄되는 평균 페이지 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)의 버전을 가져옵니다.</summary>
        <value>버전의는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 사용에서 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista와 함께 릴리스된 버전은 1입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 대한 설명을 가져오거나 설정합니다.</summary>
        <value>프린터에 대한 설명입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 주석으로 처리는 Windows 일반 인쇄 대화 상자와 창 프린터 목록에서 사용자에 게 표시 됩니다. 프린터의 이름, 모델 또는; 위치에도 볼 수 있는 위치 속성에 포함 되지 않은 정보를 제공할 수 있습니다. 예를 들어, "Reserved 급여 부서 오후 3 시와 오후 4 시 사이 대 한 합니다." (의 <xref:System.Printing.PrintQueue.Description%2A> 속성을 사용 하면 응용 프로그램에서 표시 하지 않는 한 사용자가 볼 수 있는 정보를 저장 합니다.)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintQueue" /> 개체의 현재 속성을 인쇄 서버에 있는 실제 인쇄 큐에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프로그램의 속성에 수행 하는 변경 내용을 <xref:System.Printing.PrintQueue> 개체 실제로 적용 하려면이 실행 될 때까지 <xref:System.Printing.PrintQueue.Commit%2A> 메서드.  
  
 메서드를 사용 하려면는 <xref:System.Printing.PrintQueue> 개체를 사용 하 여 만들어야 <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> 권한.  
  
   
  
## Examples  
 다음 예제에서는 두 인쇄 티켓을 병합 하는 동안이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">일부 속성을 커밋할 수 없는 경우</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">일부 속성을 커밋할 수 없는 경우  
  
 \- 또는 -  
  
 <see cref="T:System.Printing.PrintQueue" /> 개체가 부족한 권한으로 생성된 경우</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">페이지에서 장치가 인쇄할 수 있는 영역의 크기를 포함하는 개체에 대한 참조입니다. 이 데이터 형식에는 public 생성자가 없기 때문에 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만들고 Windows 공용 인쇄 대화 상자를 열고 미디어의 인쇄 허용 영역 및 크기에 대한 정보를 나타내는 <see langword="ref" />(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수를 반환합니다.</summary>
        <returns>XPS 데이터를 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다. <paramref name="documentImageableArea" /> 매개 변수는 메서드에 의해 초기화되는 <see langword="ref" />[Visual Basic의 경우 <see langword="ByRef" />] 매개 변수이므로 두 번째 반환 항목을 나타냅니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 프린터 그립 용지를 각 페이지 가장자리 주위 토너가 공간의 인치 분기 및 프린터를 통해 이동 필요 합니다. 그렇지 않으면 토너 용지 흐름 메커니즘을 생일 것입니다. 인쇄할 수 있는 영역이 "영역의."  
  
 형식 <xref:System.Printing.PrintDocumentImageableArea> public 생성자가 없습니다. 따라서 변수 `documentImageableArea` 선언 이어야 하며에 할당 된 `null` 메서드에 전달 된 후에 합니다. 이 메서드를 표시 한 <xref:System.Windows.Controls.PrintDialog> 사용자의 입력을 요구 합니다. 사용자가 프린터, 용지 크기 및 방향을 선택 하 고 대화 상자를 닫은 후 `documentImageableArea` 포인트 실제 개체 및 해당 속성에 초기화 됩니다.  
  
 반환 값은 사용자를 취소 하거나 대화 상자를 닫습니다, `null`합니다. 반환 값을에 대 한 검사 해야 하는 결과적으로 `null` 응용 프로그램에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">XPS 문서를 인쇄할 인쇄 큐입니다.</param>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만들고 지정한 인쇄 큐에 연결합니다.</summary>
        <returns>XPS 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는이 메서드를 만드는 데는 <xref:System.Windows.Xps.XpsDocumentWriter>합니다.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="height" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">XPS 문서의 너비입니다.</param>
        <param name="height">XPS 문서의 높이입니다.</param>
        <summary>지정된 크기를 사용하여 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만듭니다.</summary>
        <returns>XPS 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 표시 한 <xref:System.Windows.Controls.PrintDialog> 사용자의 입력을 요구 합니다. 반환 값은 사용자를 취소 하거나 대화 상자를 닫습니다, `null`합니다. 반환 값을에 대 한 검사 해야 하는 결과적으로 `null` 응용 프로그램에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">인쇄 작업의 이름입니다. 이 이름이 Windows 인쇄 사용자 인터페이스에 나타납니다.</param>
        <param name="documentImageableArea">페이지에서 장치가 인쇄할 수 있는 영역의 크기를 포함하는 개체에 대한 참조입니다. 이 데이터 형식에는 public 생성자가 없기 때문에 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만들고 Windows 공용 인쇄 대화 상자를 열고(작업 설명을 표시하고) 미디어의 인쇄 허용 영역 및 크기에 대한 정보를 나타내는 <see langword="ref" />(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수를 반환합니다.</summary>
        <returns>XPS 데이터를 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다. <paramref name="documentImageableArea" /> 매개 변수는 메서드에 의해 초기화되는 <see langword="ref" />[Visual Basic의 경우 <see langword="ByRef" />] 매개 변수이므로 두 번째 반환 항목을 나타냅니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 프린터 그립 용지를 각 페이지 가장자리 주위 토너가 공간의 인치 분기 및 프린터를 통해 이동 필요 합니다. 그렇지 않으면 토너 용지 흐름 메커니즘을 생일 것입니다. 인쇄할 수 있는 영역이 "영역의."  
  
 형식 <xref:System.Printing.PrintDocumentImageableArea> public 생성자가 없습니다. 따라서 변수 `documentImageableArea` 선언 이어야 하며에 할당 된 `null` 메서드에 전달 된 후에 합니다. 이 메서드를 표시 한 <xref:System.Windows.Controls.PrintDialog> 사용자의 입력을 요구 합니다. 사용자가 프린터, 용지 크기 및 방향을 선택 하 고 대화 상자를 닫은 후 `documentImageableArea` 포인트는 실제 개체 및 해당 속성에 초기화 됩니다.  
  
 반환 값은 사용자를 취소 하거나 대화 상자를 닫습니다, `null`합니다. 반환 값을에 대 한 검사 해야 하는 결과적으로 `null` 응용 프로그램에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">페이지에서 장치가 인쇄할 수 있는 영역의 크기를 포함하는 개체에 대한 참조입니다. 이 데이터 형식에는 public 생성자가 없기 때문에 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="pageRangeSelection">모든 페이지를 인쇄할지 사용자가 지정한 범위만 인쇄할지 지정하는 값입니다.</param>
        <param name="pageRange">인쇄되는 페이지 범위입니다.</param>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만들고 Windows 공용 인쇄 대화 상자를 대화 상자에서 페이지 범위와 인쇄 작업 설명을 입력하고 미디어의 인쇄 허용 영역 및 크기에 대한 정보를 나타내는 <see langword="ref" />(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수를 반환합니다.</summary>
        <returns>XPS 데이터를 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다. <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> 및 <paramref name="pageRange" /> 매개 변수는 모두 사용자가 초기화하고 대화 상자가 닫힐 때 반환되는 <see langword="ref" />[Visual Basic의 경우 <see langword="ByRef" />] 매개 변수이므로, 그 각각이 추가로 반환된 항목을 나타냅니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 프린터 그립 용지를 각 페이지 가장자리 주위 토너가 공간의 인치 분기 및 프린터를 통해 이동 필요 합니다. 그렇지 않으면 토너 용지 흐름 메커니즘을 생일 것입니다. 인쇄할 수 있는 영역이 "영역의."  
  
 형식 <xref:System.Printing.PrintDocumentImageableArea> public 생성자가 없습니다. 따라서 변수 `documentImageableArea` 선언 이어야 하며에 할당 된 `null` 메서드에 전달 된 후에 합니다. 이 메서드를 표시 한 <xref:System.Windows.Controls.PrintDialog> 사용자의 입력을 요구 합니다. 사용자 등 프린터, 용지 크기, 방향 및 페이지 범위를 선택 하 여 대화 상자에서 그의 인쇄 작업을 구성 합니다. 대화 상자를 닫을 때 `pageRangeSelection` 및 `pageRange` 값을 갖고 및 `documentImageableArea` 속성이 초기화 되는 실제 개체를 가리킵니다.  
  
 반환 값은 사용자를 취소 하거나 대화 상자를 닫습니다, `null`합니다. 반환 값을에 대 한 검사 해야 하는 결과적으로 `null` 응용 프로그램에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">인쇄 작업의 이름입니다. 이 이름이 Windows 인쇄 사용자 인터페이스에 나타납니다.</param>
        <param name="documentImageableArea">페이지에서 장치가 인쇄할 수 있는 영역의 크기를 포함하는 개체에 대한 참조입니다. 이 데이터 형식에는 public 생성자가 없기 때문에 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="pageRangeSelection">모든 페이지를 인쇄할지 사용자가 지정한 범위만 인쇄할지 지정하는 값입니다.</param>
        <param name="pageRange">인쇄되는 페이지 범위입니다.</param>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 개체를 만들고 Windows 공용 인쇄 대화 상자를 열고 대화 상자에서 페이지 범위를 입력하고 미디어의 인쇄 허용 영역 및 크기에 대한 정보를 나타내는 <see langword="ref" />(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수를 반환합니다.</summary>
        <returns>XPS 데이터를 스트림에 쓰는 <see cref="T:System.Windows.Xps.XpsDocumentWriter" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다. <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> 및 <paramref name="pageRange" /> 매개 변수는 모두 사용자가 초기화하고 대화 상자가 닫힐 때 반환되는 <see langword="ref" />[Visual Basic의 경우 <see langword="ByRef" />] 매개 변수이므로, 그 각각이 추가로 반환된 항목을 나타냅니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 프린터 그립 용지를 각 페이지 가장자리 주위 토너가 공간의 인치 분기 및 프린터를 통해 이동 필요 합니다. 그렇지 않으면 토너 용지 흐름 메커니즘을 생일 것입니다. 인쇄할 수 있는 영역이 "영역의."  
  
 형식 <xref:System.Printing.PrintDocumentImageableArea> public 생성자가 없습니다. 따라서 변수 `documentImageableArea` 선언 이어야 하며에 할당 된 `null` 메서드에 전달 된 후에 합니다. 이 메서드를 표시 한 <xref:System.Windows.Controls.PrintDialog> 사용자의 입력을 요구 합니다. 사용자 등 프린터, 용지 크기, 방향 및 페이지 범위를 선택 하 여 대화 상자에서 그의 인쇄 작업을 구성 합니다. 대화 상자를 닫을 때 `pageRangeSelection` 및 `pageRange` 값을 갖고 및 `documentImageableArea` 속성이 초기화 되는 실제 개체를 가리킵니다.  
  
 반환 값은 사용자를 취소 하거나 대화 상자를 닫습니다, `null`합니다. 반환 값을에 대 한 검사 해야 하는 결과적으로 `null` 응용 프로그램에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인쇄 작업의 구성 설정이 들어 있는 개체를 가져옵니다.</summary>
        <value>현재 인쇄 작업의 설정을 갖고 있는 <see cref="T:System.Printing.PrintJobSettings" /> 값입니다. 이러한 설정에는 작업 설명과 작업의 <see cref="T:System.Printing.PrintTicket" />에 대한 참조가 포함됩니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Printing.PrintQueue" />와 연결된 기본 프린터 옵션을 가져오거나 설정합니다.</summary>
        <value>인쇄 큐의 기본 <see cref="T:System.Printing.PrintTicket" />이며 인쇄 큐에서 오류가 발생한 경우에는 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 <xref:System.Printing.PrintTicket> 같은 인쇄 작업 옵션을 지정 <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A>, <xref:System.Printing.PrintTicket.Duplexing%2A>, <xref:System.Printing.PrintTicket.Stapling%2A>, 등입니다.  
  
 각 <xref:System.Printing.PrintQueue> 자체 유지 관리 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>합니다.  
  
 정상 작업에서에서 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 속성에서 반환 된 <xref:System.Printing.PrintTicket>합니다.  경우는 <xref:System.Printing.PrintQueue> 잘못 된 상태를 감지 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 반환 `null`합니다.  경우 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 반환 `null`, 응용 프로그램이이 인쇄 큐에서 오류가 발생 한 알림 대화 상자가 표시 되 고 인쇄 작업의 출력을 다른 인쇄 큐로 보낸 다시 시작 해야 합니다.  
  
 가져오거나 설정할는 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 속성 유효성을 검사 하지 않습니다는 <xref:System.Printing.PrintTicket>합니다.  <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> 유효성을 검사할 메서드를 사용할 수는 <xref:System.Printing.PrintTicket>합니다.  
  
   
  
## Examples  
 다음 예에서는 프린터의 기능을 테스트 하 고 인쇄 작업을 구성을 활용 하기 위해이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에 추가된 각각의 새 인쇄 작업에 지정된 기본 우선 순위를 가져오거나 설정합니다.</summary>
        <value>큐에 추가된 인쇄 작업의 기본 우선 순위입니다. 가능한 값의 범위는 1부터 99까지입니다. 기본값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인쇄 큐에 입력 되 면 사용자가 인쇄 작업의 우선 순위를 변경할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐의 설명을 가져옵니다.</summary>
        <value>인쇄 큐의 설명입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 큐를 만들면 기본 설명이 생성 큐 이름, 모델 및 위치를 쉼표로 구분 하 여 구성 된 세 부분 문자열입니다. 대비는 <xref:System.Printing.PrintQueue.Description%2A> 된 속성의 <xref:System.Printing.PrintQueue.Comment%2A> 일반 인쇄 대화 상자와 프린터 및 팩스 목록을 사용자에 게 표시 되는 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐의 전체 이름을 가져옵니다.</summary>
        <value>인쇄 큐의 전체 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의이 값은 동일 로컬 인쇄 서버의 인쇄 대기열에 <xref:System.Printing.PrintQueue.Name%2A>, 그렇지 않으면 전체 UNC (Universal Naming Convention) 이름이 포함 됩니다.  
  
 <xref:System.Printing.PrintQueue> 개체에 쓰기 가능한 <xref:System.Printing.PrintQueue.Name%2A> 및 <xref:System.Printing.PrintQueue.ShareName%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 두 인쇄 티켓을 병합 하는 동안이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">큐에 있는 작업의 번호입니다.</param>
        <summary>지정한 ID 번호의 인쇄 작업을 가져옵니다.</summary>
        <returns>작업의 속성 및 상태를 지정하는 <see cref="T:System.Printing.PrintSystemJobInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수도 있습니다는 <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> 같은 목적을 위해 메서드.  
  
   
  
## Examples  
 다음 예제에는 인쇄 작업 문제를 진단할 때이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>컬러 인쇄 기능이 있는지, 양면 인쇄 기능이 있는지 여부 등 프린터 또는 장치의 기능을 식별하는 <see cref="T:System.Printing.PrintCapabilities" /> 개체를 가져옵니다. </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>프린터 기능을 식별하는 <see cref="T:System.Printing.PrintCapabilities" /> 개체를 가져옵니다.</summary>
        <returns>양면 복사, 자동 스테이플링 등 프린터에서 가능한 작업을 지정하는 <see cref="T:System.Printing.PrintCapabilities" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 두 인쇄 티켓을 병합 하는 동안이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> 개체를 검색할 수 없는 경우</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 기능을 얻을 수 있는 권한입니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">인쇄 기능을 보고할 기준을 제공하는 인쇄 티켓입니다.</param>
        <summary>프린터 기능을 식별하는 <see cref="T:System.Printing.PrintCapabilities" /> 개체를 가져옵니다.</summary>
        <returns>양면 복사, 자동 스테이플링 등 프린터에서 가능한 작업을 지정하는 <see cref="T:System.Printing.PrintCapabilities" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> 매개 변수는 생성 하는 기준으로 사용 되는 <xref:System.Printing.PrintCapabilities> 개체입니다. 예를 들어 프린터 미디어 형식 A와 b 입력된 함 1에서에서만 입력된 함 2에서에서 미디어 유형을 C를 지원 합니다. 경우는 `printTicket` 매개 변수 입력된 함 1을 지정 하면 <xref:System.Printing.PrintCapabilities> 반환 된 개체에 3 개의 미디어 형식을 모두를 포함 하지만 형식 C "제한"으로 보고할 수 경우는 `printTicket` 입력된 함 2, 매개 변수를 지정 하면 <xref:System.Printing.PrintCapabilities> 반환 된 개체에 3 개의 미디어 형식을 모두를 포함 하지만 유형 A와 B "제한" 보고할 참조는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 제약 조건에 대 한 자세한 내용은 합니다.  
  
 경우 `printTicket` 은 `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> 개체를 검색할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" />이 제대로 구성되지 않은 경우</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 기능을 얻을 수 있는 권한입니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)를 따르는 XML 스트림으로 프린터 기능을 지정하는 <see cref="T:System.IO.MemoryStream" /> 개체를 가져옵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 되는 XML 스키마의 일부가 "PrintCapabilities," 라고 합니다.는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 시스템입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)를 따르는 XML 스트림으로 프린터 기능을 지정하는 <see cref="T:System.IO.MemoryStream" /> 개체를 가져옵니다.</summary>
        <returns>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397) 시스템의 일부인 XML 스키마 “PrintCapabilities”를 사용하여 프린터 기능을 지정하는 <see cref="T:System.IO.MemoryStream" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">인쇄 기능을 검색할 수 없는 경우</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 기능을 얻을 수 있는 권한입니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">인쇄 기능을 보고할 기준을 제공하는 인쇄 티켓입니다.</param>
        <summary>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)를 따르는 XML 형식으로 프린터 기능을 지정하는 <see cref="T:System.IO.MemoryStream" /> 개체를 가져옵니다.</summary>
        <returns>[인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397) 시스템의 일부인 XML 스키마 “PrintCapabilities”를 사용하여 프린터 기능을 지정하는 <see cref="T:System.IO.MemoryStream" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> 매개 변수는 인쇄 기능 XML을 생성 하는 기준으로 사용 합니다. 예를 들어 프린터 미디어 형식 A와 b 입력된 함 1에서에서만 입력된 함 2에서에서 미디어 유형을 C를 지원 합니다. 경우는 `printTicket` 매개 변수가 입력된 함 1을 지정 하면 인쇄 기능 반환 되는 XML 모두 3 개의 미디어 형식을 포함 그러나 형식 C "제한"으로 보고 됩니다 경우는 `printTicket` 입력된 함 2, 매개 변수를 지정 하면 인쇄 기능 반환 되는 XML 모두 3 개의 미디어 형식을 포함 그러나 유형 A와 B "제한"을 보고 합니다 참조는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 제약 조건에 대 한 자세한 내용은 합니다.  
  
 경우 `printTicket` 은 `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">인쇄 기능을 검색할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" />이 제대로 구성되지 않은 경우</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 기능을 얻을 수 있는 권한입니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>큐의 각 작업에 대한 <see cref="T:System.Printing.PrintSystemJobInfo" /> 개체를 포함하는 컬렉션을 만듭니다.</summary>
        <returns>
          <see cref="T:System.Printing.PrintJobInfoCollection" /> 개체의 <see cref="T:System.Printing.PrintSystemJobInfo" />을 반환합니다. 큐의 각 작업마다 컬렉션이 하나씩 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 큐의 모든 작업에 동일한 작업을 수행할 때이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 지정되지 않은 용지 문제가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          지정되지 않은 용지 문제가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 <xref:System.Printing.PrintQueue> 개체에는 <xref:System.Printing.PrintQueue.IsPaperJammed%2A> 및 <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 토너가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          현재 프린터에 토너가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 프린터 제조업체를 나타내는 토너 부족이 신호를 사용할 수 있습니다. 다른 사용자 임을 나타내기 위해 토너 카트리지 있고 올바르게 삽입 사용 하는 동안 사용할 수 있습니다 <xref:System.Printing.PrintQueue.IsTonerLow%2A> 나타내려면 토너 부족 합니다.  
  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐를 제어하는 인쇄 서버를 가져오거나 설정합니다(protected).</summary>
        <value>인쇄 큐를 호스팅하는 <see cref="T:System.Printing.PrintServer" />의 이름 및 기타 속성입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에서 파생 된 클래스에 의해서만 <xref:System.Printing.PrintQueue> 속성의 setter 이므로 `protected`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>신뢰 수준이 더 높은 부분 신뢰 모드에서 큐가 작동하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          큐가 부분 신뢰 모드에서 작동 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Printing.PrintQueue.InPartialTrust%2A> 속성은 `true`, 프로그램을 만들 수 없습니다는 <xref:System.Printing.PrintQueue> 는 사용자가 프린터에 대 한 전체 인쇄 권한이 없는 경우이 프린터를 나타내는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>
          <see cref="T:System.Printing.PrintQueue" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터와의 양방향 통신이 가능한지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터에서 양방향 통신을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 장치가 사용 중인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          장치가 사용 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 중인 반드시 인쇄 작업을 처리 하는 것입니다. 장치가 조합 프린터/팩스/복사기 이면 다음 인스턴스가 될 수 있습니다 수 팩스 있거나 복사 합니다. 비교는 <xref:System.Printing.PrintQueue.IsProcessing%2A> 속성입니다.  
  
 장치는이 의미의 신호를 지원 하지 않습니다 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서와 프린터 구성이 일치하지 않을 때 큐에 문서가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          큐에 일치하지 않는 구성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에서 프린터로 직접 인쇄하는지 문서를 먼저 스풀링한 후 인쇄하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          큐에서 프린터로 직접 인쇄하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 공통 인쇄 대화 상자를 사용할 때만이 속성을 설정할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터 덮개가 열려 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          덮개가 열려 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램의 사용자 인터페이스에서 인쇄 큐가 숨겨져 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          Windows 사용자 인터페이스에서 인쇄 큐가 숨겨져 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하지 자동으로 숨길 수 인쇄 대기열이이 속성을 설정 하면 `true`합니다. 프로그램은 프로그램 인터페이스에서 큐의 모든 목록에 나타나지 않도록 작업을 수행 해야 합니다.  
  
 Windows 사용자 인터페이스 예: 프린터 및 팩스 목록에서에서 인쇄 큐를 숨길 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터나 장치에 오류 조건이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          장치에 오류 조건이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 자체 초기화를 수행하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 초기화 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 데이터 또는 신호를 보내거나 받는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 데이터나 신호를 보내거나 받고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인쇄 작업에서 프린터에 수동으로 용지를 공급해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터에 수동으로 용지를 공급해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 오프라인 상태인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 오프라인이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터의 메모리 부족 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터의 메모리가 부족하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 작업에 필요한 크기의 용지를 프린터에 다시 로드해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터에 용지를 다시 로드해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터의 출력 영역에서 오버플로가 발생할 위험이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터의 출력 영역이 꽉 찼으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 용지가 프린터에 걸렸는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          용지가 걸렸으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐가 일시 중지되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인쇄 큐가 일시 중지되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 인쇄 작업을 삭제하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 작업을 삭제하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 절전 모드인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 절전 모드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>작업을 인쇄하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          작업을 인쇄하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 인쇄 작업을 처리하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 인쇄 작업을 처리하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 프린터 제조업체 지원 덜 구체적인 대신이 신호 <xref:System.Printing.PrintQueue.IsBusy%2A>합니다.  
  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 다른 네트워크 사용자에게 표시되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 다른 네트워크 사용자에게 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 동시에 둘 이상의 인쇄 작업을 지원할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 큐에서 여러 인쇄 작업을 지원할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄하는 응용 프로그램에서 Windows 스풀러로 더 빠르게 데이터를 전달할 수 있는 EMF(Enhanced Meta File)를 인쇄 큐에서 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 EMF 인쇄를 사용할 수 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 오류 상태인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 오류 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>네트워크의 다른 컴퓨터에서 프린터를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 공유 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 Windows 일반 인쇄 대화 상자와만 설정할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터 토너 부족 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 토너 부족 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 <xref:System.Printing.PrintQueue> 개체에는 <xref:System.Printing.PrintQueue.HasToner%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐가 작업이 추가되도록 기다리는 상태인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          큐가 작업을 기다리고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터를 예열하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터를 예열하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터의 드라이버가 [인쇄 개요](~/docs/framework/wpf/advanced/printing-overview.md)에 따라 작성되어 페이지 설명 언어로 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          <see langword="true" /> 프린터를 사용 하는 경우는 [인쇄 개요](~/docs/framework/wpf/advanced/printing-overview.md), 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터 언어 파일을 인쇄한 후 삭제하지 않고 큐에 저장하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          큐에 프린터 언어 파일이 저장되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터의 실제 위치를 가져오거나 설정합니다.</summary>
        <value>프린터의 실제 위치입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 가능한 인쇄 큐의 하위 집합을 나열 하려면이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에서 사용할 수 있는 [인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)의 허용되는 가장 최근 버전 번호를 가져옵니다.</summary>
        <value>가장 최근 버전 번호는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 큐를 사용할 수 있는 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 버전의는 [Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista와 함께 릴리스된는 1입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>두 <see cref="T:System.Printing.PrintTicket" />을 병합한 후 그 결과로 얻게 되는 <see cref="T:System.Printing.PrintTicket" />이 유효하고 프린터가 지원하지 않는 인쇄 기능을 요청하지 않도록 보장합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">첫 번째 인쇄 티켓입니다.</param>
        <param name="deltaPrintTicket">두 번째 인쇄 티켓입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
        <summary>두 <see cref="T:System.Printing.PrintTicket" />을 병합한 후 그 결과로 얻게 되는 <see cref="T:System.Printing.PrintTicket" />이 유효하고 프린터가 지원하지 않는 인쇄 기능을 요청하지 않도록 보장합니다.</summary>
        <returns>병합된 <see cref="T:System.Printing.ValidationResult" />을 포함하고 실행 가능성을 보장하기 위해 해당 설정 중 변경해야 하는 설정이 있는지 여부를 나타내는 <see cref="T:System.Printing.PrintTicket" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 통해를 생성합니다. 즉, 한 티켓을 인쇄 기능을 요청 하지 않는 프린터 지원 하지 않습니다. 두 입력된에 대 한 인쇄 티켓 않은지 먼저 확인 하는 메서드는 [인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)합니다. 하거나 유효 하지 않으면 예외가 throw 됩니다.  
  
 두 티켓 다음 병합 됩니다. 특정 속성에 대 한 다른 값이 있는 경우 다음 병합 된 결과 티켓 처음 사용 하 여 델타 티켓의 값입니다.  
  
 병합 된 티켓은 프린터의 실제 기능에 대해 확인 합니다. 있으면 티켓에 대 한 설정을 프린터의 기능을와 호환 되지 않습니다. 다음 프린터 드라이버 논리를 사용 하 여 해당 설정을 변경 하려고 합니다. 일반적으로 설정에 대 한 사용자 또는 프린터의 기본 값을 대체합니다. 대체 값의 드라이버의 소스 없는과 동일한 티켓이 `basePrintTicket`, 다음 병합 된 티켓 입력 티켓 두 모두와 다른 설정이 포함 될 수 있습니다. 설정을 변경 하려면 프린터 드라이버에 경우이 팩트에서 보고 되는 <xref:System.Printing.ValidationResult.ConflictStatus%2A> 속성은 <xref:System.Printing.ValidationResult>합니다.  
  
 병합 및 확인 하기 위해 인쇄 큐의 기본 설정에 따라 설정 해야 합니다. `basePrintTicket` 에 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 또는 <xref:System.Printing.PrintQueue.UserPrintTicket%2A>합니다.  
  
 `deltaPrintTicket` 매개 변수 수 `null`있으며이 경우는 `basePrintTicket` 유효성 검사, 가능성을 확인 및 수 있는 변경 내용으로 반환 합니다.  
  
 이 오버 로드와 <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>모두는 `deltaPrintTicket` 및 <xref:System.Printing.PrintTicket> 에 <xref:System.Printing.ValidationResult> 작업 차원 범위의 반환 하는 합니다. 다른 범위를 지정 하려면이 방법의 다른 오버 로드를 사용 합니다.  
  
   
  
## Examples  
 두 인쇄 티켓을 병합 하 고 응답할이 메서드를 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Printing.ValidationResult> 반환 하는 합니다.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">입력 인쇄 티켓 중 적어도 하나가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Printing.PrintQueueException">유효성 검사, 병합기 및 실행 가능성 확인 작업이 실패한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">첫 번째 인쇄 티켓입니다.</param>
        <param name="deltaPrintTicket">두 번째 인쇄 티켓입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
        <param name="scope">
          <c>deltaPrintTicket</c>의 범위와 <see cref="T:System.Printing.ValidationResult" />에서 반환된 인쇄 티켓의 범위가 페이지인지, 문서인지, 전체 작업인지 나타내는 값입니다.</param>
        <summary>두 <see cref="T:System.Printing.PrintTicket" />을 병합한 후 그 결과로 얻게 되는 <see cref="T:System.Printing.PrintTicket" />이 유효하고 프린터가 지원하지 않는 인쇄 기능을 요청하지 않으며 지정된 범위로 제한되도록 보장합니다.</summary>
        <returns>병합된 <see cref="T:System.Printing.ValidationResult" />을 포함하고 실행 가능성을 보장하기 위해 해당 설정 중 변경해야 하는 설정이 있는지 여부를 나타내는 <see cref="T:System.Printing.PrintTicket" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 통해를 생성합니다. 즉, 한 티켓을 인쇄 기능을 요청 하지 않는 프린터 지원 하지 않습니다. 두 입력된에 대 한 인쇄 티켓 않은지 먼저 확인 하는 메서드는 [인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397)합니다. 하거나 유효 하지 않으면 예외가 throw 됩니다.  
  
 두 티켓 다음 병합 됩니다. 특정 속성에 대 한 다른 값이 있는 경우 다음 병합 된 결과 티켓 처음 사용 하 여 델타 티켓의 값입니다.  
  
 병합 된 티켓은 프린터의 실제 기능에 대해 확인 합니다. 있으면 티켓에 대 한 설정을 프린터의 기능을와 호환 되지 않습니다. 다음 프린터 드라이버 논리를 사용 하 여 해당 설정을 변경 하려고 합니다. 일반적으로 설정에 대 한 사용자 또는 프린터의 기본 값을 대체합니다. 대체 값의 드라이버의 소스 없는과 동일한 티켓이 `basePrintTicket`, 다음 병합 된 티켓 입력 티켓 두 모두와 다른 설정이 포함 될 수 있습니다. 설정을 변경 하려면 프린터 드라이버에 경우이 팩트에서 보고 되는 <xref:System.Printing.ValidationResult.ConflictStatus%2A> 속성은 <xref:System.Printing.ValidationResult>합니다.  
  
 병합 및 확인 하기 위해 인쇄 큐의 기본 설정에 따라 설정 해야 합니다. `basePrintTicket` 에 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 또는 <xref:System.Printing.PrintQueue.UserPrintTicket%2A>합니다.  
  
 `deltaPrintTicket` 매개 변수 수 `null`있으며이 경우는 `basePrintTicket` 유효성 검사, 가능성을 확인 및 수 있는 변경 내용으로 반환 합니다.  
  
 경우는 `scope` 인쇄 티켓 반환에 작업은는 <xref:System.Printing.ValidationResult> 포함 될 수 있습니다 [인쇄 스키마](http://go.microsoft.com/fwlink/?LinkId=186397) 작업, 문서 및 페이지 접두사와 함께 매개 변수입니다. 경우는 `scope` 이 문서에서 작업당 설정 `deltaPrintTicket` 무시 됩니다 하 고 반환 된 티켓 문서와 매개 변수를 포함할 수 있으며 페이지 앞에 추가 합니다. 경우는 `scope` 페이지에서 다음 작업당 설정 및 문서별 설정에는 `deltaPrintTicket` 무시 되 고 반환 된 티켓 페이지 접두사만 매개 변수를 포함할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">입력 인쇄 티켓 중 적어도 하나가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="scope" /> 매개 변수에 유효한 <see cref="T:System.Printing.PrintTicketScope" /> 값이 없는 경우</exception>
        <exception cref="T:System.Printing.PrintQueueException">유효성 검사, 병합기 및 실행 가능성 확인 작업이 실패한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐의 이름을 가져오거나 설정합니다.</summary>
        <value>인쇄 대기열의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 개체에는 읽기 전용 <xref:System.Printing.PrintQueue.FullName%2A> 속성과 쓰기 가능한 <xref:System.Printing.PrintQueue.ShareName%2A> 속성입니다.  
  
 로컬 인쇄 서버에 있는 큐에 대 한 <xref:System.Printing.PrintQueue.Name%2A> 및 <xref:System.Printing.PrintQueue.FullName%2A> 동일 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 가능한 인쇄 큐의 하위 집합을 나열 하려면이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터에 사용자 개입이 필요한지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터에 사용자 개입이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐에 있는 전체 작업 수를 가져옵니다.</summary>
        <value>큐에 있는 작업 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터가 현재 페이지를 인쇄할 수 없는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          프린터가 현재 페이지를 인쇄할 수 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프린터가이 의미의 신호를 지원 하지 않는 경우 속성은 항상 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인쇄 큐를 일시 중지합니다. 인쇄 큐는 <see cref="M:System.Printing.PrintQueue.Resume" />을 실행할 때까지 일시 중지 상태를 유지합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">프린터를 일시 중지할 수 없는 경우</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인쇄 작업을 취소하는 중인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          인쇄 작업을 취소하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>동일한 인쇄 서버에서 호스팅되고 동일한 실제 프린터를 사용하는 여러 인쇄 큐 사이의 상대적인 우선 순위를 가져오거나 설정합니다.</summary>
        <value>인쇄 큐의 우선 순위입니다. 가능한 값의 범위는 1부터 99까지입니다. 기본값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 비교는 <xref:System.Printing.PrintQueue.DefaultPriority%2A> 속성이 큐에서 인쇄 작업의 상대적 우선 순위에 대 한 설정 되어 만들어져야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인쇄 큐에서 모든 작업을 제거합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">큐에서 일부 인쇄 작업을 제거할 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 큐의 속성을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Printing.PrintQueueAttributes" /> 열거형 값의 비트 조합입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에 대한 프린터 드라이버를 가져오거나 설정합니다.</summary>
        <value>큐에 사용되는 <see cref="T:System.Printing.PrintDriver" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에서 사용되는 포트를 가져오거나 설정합니다.</summary>
        <value>인쇄 큐에 할당된 <see cref="T:System.Printing.PrintPort" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에서 사용되는 인쇄 처리기를 가져오거나 설정합니다.</summary>
        <value>WinPrint, ModiPrint 등과 같이 큐에서 사용되는 <see cref="T:System.Printing.PrintProcessor" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터의 상태를 나타내는 값을 가져옵니다. 값으로는 "warming up", "initializing", "printing" 및 기타 문자열이 있습니다.</summary>
        <value>현재 <see cref="T:System.Printing.PrintQueueStatus" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 설문 조사의 일부분으로이 속성을 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>프린터와 컴퓨터에서 실행되는 인쇄 큐 유틸리티의 값으로 <see cref="T:System.Printing.PrintQueue" /> 개체의 속성을 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 프로그램 변경은 <xref:System.Printing.PrintQueue> 개체의 속성 손실 되는 경우 <xref:System.Printing.PrintQueue.Refresh%2A> 프린터와 인쇄 큐를 기록한 하지 않는 한 실행 <xref:System.Printing.PrintQueue.Commit%2A>합니다.  
  
   
  
## Examples  
 다음 예제에서는이 메서드는 설문 조사의 일환으로 사용 하는 방법을 가능한 오류 상태에 대 한 모든 프린터를 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">일부 속성을 새로 고칠 수 없는 경우</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>일시 중지된 인쇄 큐를 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 일시 중지 된 인쇄 큐를 다시 시작 하려면이 메서드를 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">프린터를 다시 시작할 수 없는 경우</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>큐에 먼저 입력되었거나 우선 순위가 더 높은 인쇄 작업의 스풀링이 완전히 완료되지 않아도 스풀링 프로세스가 완료된 다른 작업을 먼저 인쇄할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          작업의 스풀링이 완료되지 않아도 스풀링 프로세스가 완료된 다른 작업을 먼저 인쇄할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>각 인쇄 작업의 시작 부분에 삽입되는 파일의 경로 및 파일 이름을 가져오거나 설정합니다.</summary>
        <value>구분 파일의 경로 및 파일 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 일반적으로 단일 페이지 파일을 쉽게 다른 인쇄 작업의 출력을 구분 하는 데 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프린터를 공유할 때 네트워크에서 사용자에게 표시되는 프린터의 이름을 가져오거나 설정합니다.</summary>
        <value>공유 프린터의 공개 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> 개체에는 읽기 전용 <xref:System.Printing.PrintQueue.FullName%2A> 속성과 쓰기 가능한 <xref:System.Printing.PrintQueue.Name%2A> 속성입니다. 인쇄 서버의 로컬 큐의 경우 이러한 속성이 동일한 값을 갖습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 프린터가 작업을 인쇄하는 가장 이른 시간을 가져오거나 설정합니다.</summary>
        <value>UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 프린터를 사용할 수 있는 가장 이른 시간입니다. 최대값은 1439입니다. [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] 프린터 추가 마법사를 사용하여 처음 프린터를 설치하면 기본적으로 항상 프린터를 사용할 수 있는 상태로 설정되며 이 속성은 모든 시간대에서 0을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 정확한 시간을 가져오거나 설정 하는 60의 배수를 뺍니다. 예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다. 설정 하려면 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> 표준 시간대에서 오전 12 시를로 설정 하면 UTC 오전 8 시 (8 * 60 =) 480 변수인 합니다. 또한 기억해 야 시간 24 시간 후 0을 통해 롤업 하는 (즉 1439 분 후에;). 표준 시간대에서 오후 6 시를 설정 하려면 설정한 UTC 오전 2 시에는 (= 2 * 60) 120 자입니다. 참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 유용한 시간대 메서드를 조작 하기 위한 클래스입니다.  
  
 프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예에서는 현재 프린터를 사용할 수 있는지 여부를 확인 하려면이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>GMT(그리니치 표준시)라고도 하는 UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 프린터가 작업을 인쇄하는 가장 늦은 시간을 가져오거나 설정합니다.</summary>
        <value>UTC(협정 세계시) 자정 이후의 시간(분)으로 표현된, 하루 중에 더 이상 프린터를 사용할 수 없게 되는 시간입니다. 최대값은 1439입니다. [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] 프린터 추가 마법사를 사용하여 처음 프린터를 설치하면 기본적으로 항상 프린터를 사용할 수 있는 상태로 설정되며 이 속성은 모든 시간대에서 0을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가 아닌 UTC 표준 시간대에 추가 하거나 표준 시간대에 대 한 정확한 시간을 가져오거나 설정 하는 60의 배수를 뺍니다. 예를 들어 북미 지역의 태평양 표준시 시간대 및 일광 절약 시간제에 있는 경우은 적용 되지 않습니다, 현지 시간 UTC 보다 8 시간 전입니다. 설정 하려면 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> 표준 시간대에서 오전 12 시를로 설정 하면 UTC 오전 8 시 (8 * 60 =) 480 변수인 합니다. 또한 기억해 야 24 시간 (1439 분) 후 0 시간 롤오버 합니다. 표준 시간대에서 오후 6 시를 설정 하려면 설정한 UTC 오전 2 시에는 (= 2 * 60) 120 자입니다. 참조 <xref:System.TimeZone>, <xref:System.TimeSpan>, 및 <xref:System.DateTime> 유용한 시간대 메서드를 조작 하기 위한 클래스입니다.  
  
 프린터를 항상 사용할 수 있는,이 속성이 모든 표준 시간대에 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예에서는 현재 프린터를 사용할 수 있는지 여부를 확인 하려면이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인쇄 작업에 대한 자세한 정보가 포함된 현재 사용자의 기본 <see cref="T:System.Printing.PrintTicket" /> 개체를 가져오거나 설정합니다.</summary>
        <value>현재 사용자인 경우 <see cref="T:System.Printing.PrintTicket" />이고 사용자 <see cref="T:System.Printing.PrintTicket" />이 지정되어 있지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 사용자는 자신의 기본 가질 수 <xref:System.Printing.PrintTicket>합니다.  
  
 이 속성이 `null`일 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 두 인쇄 티켓을 병합 하는 동안이 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>