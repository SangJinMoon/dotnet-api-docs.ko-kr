<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryFailPoint.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac561e44bc871caa29f826e0555271beb6a45d2de1c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e44bc871caa29f826e0555271beb6a45d2de1c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">작업을 실행하기 전에 메모리 리소스가 충분한지 확인합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class is intended for use in advanced development.</source>
          <target state="translated">이 클래스 고급 개발에 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Creating an instance of the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class creates a memory gate.</source>
          <target state="translated">인스턴스를 만들지는 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 클래스 메모리 게이트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">메모리 게이트 많은 양의 메모리를 필요로 하는 활동을 시작 하기 전에 리소스가 충분 한지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Failing the check results in an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception being thrown.</source>
          <target state="translated">로 인해 검사에 실패 한 <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">이 예외는 작업을 시작할 수 없게 되지 않으며 리소스 부족으로 인해 오류의 가능성을 줄여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This enables you decrease performance to avoid an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">이 사용 하도록이 설정 하면 성능이 저하 될 방지 하기 위해 프로그램 <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> 예외 및 상태 손상을 부적절 한 코드에서 임의의 위치에서 예외 처리에서 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>By throwing an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">throw 하 여 프로그램 <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> 예외를 응용 프로그램와 구분할 수는 작업을 완료할 수 되지 않는 예상 부분적으로 완료 된 작업을 응용 프로그램 상태 손상 되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or recycling the process.</source>
          <target state="translated">이렇게 하면 응용 프로그램을 현재 언로드 필요할 수 있는 비관적 에스컬레이션 정책에의 빈도 줄일 수 있습니다. <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 프로세스를 재생 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 충분 한 메모리 및 연속 된 가상 주소 공간 힙, 모든 가비지 수집에서 사용할 수 있는 스왑 파일의 크기를 늘릴 수 있는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method to ensure that resources associated with <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> are released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 메모리의 장기 가용성에 대 한 게이트 하지만 호출자의 수명 동안 보장 하지는 항상 사용 해야는 <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> 리소스 연관 메서드가 <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To use a memory gate, you must create a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">메모리 게이트를 사용 하려면 만들어야는 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 개체 하 고 메모리 양 (MB)의 수를 지정 합니다. 다음 작업을 사용 하는 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If enough memory is not available, an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception is thrown.</source>
          <target state="translated">충분 한 메모리를 사용할 수 없는 경우는 <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">생성자의 매개 변수는 양의 정수 여야 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A negative value raises an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">음수 값을 발생 한 <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> operates at a granularity of 16 MB.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 16MB의 세분성에서 작동합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">16 MB 보다 작은 모든 값은 16MB로 되며 다른 값으로 16MB의 가장 큰 배수로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> enables an application to slow itself to avoid running out of memory in a corrupting manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 응용을 프로그램의 메모리 부족으로 인 한 손상을 방지 하기 위해 자체적으로 성능을 저하 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>It should be used within a lexical scope.</source>
          <target state="translated">어휘 범위 내에서 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The following example launches threads to process items in a work queue.</source>
          <target state="translated">다음 예제에서는 작업 큐에서 항목을 처리 하는 스레드를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Before each thread is launched, the available memory resources are checked using <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">사용 가능한 메모리 리소스를 사용 하 여 검사 각 스레드를 시작 하기 전에 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If an exception is thrown, the main method waits until memory is available before launching the next thread.</source>
          <target state="translated">예외가 throw 되 면 main 메서드는 다음 스레드를 시작 하기 전에 사용 가능한 메모리를 대기 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>for calling unmanaged code.</source>
          <target state="translated">비관리 코드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">보안 동작: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">필요한 메모리 크기(MB)입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This must be a positive value.</source>
          <target state="translated">양수여야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">성공적으로 실행하는 데 필요한 메모리 양을 지정하여 <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">작업 항목을 처리 하려면 응용 프로그램에서 사용 된 메모리 양이 실험적으로 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>To estimate the amount of memory your application needs to process a request, consider using the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">응용 프로그램 요청을 처리 하는 데 필요한 메모리 양을 예측을 사용 하 여 고려는 <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> 메서드를 작업 항목을 처리 하는 메서드를 호출 후 및 하기 전에 사용 가능한 메모리의 양을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class for a code example that dynamically determines the value for the <ph id="ph2">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 클래스에 대 한 값을 동적으로 결정 하는 코드 예제는 <ph id="ph2">`sizeInMegabytes`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The following example demonstrates how to determine the amount of memory a method requires when executing.</source>
          <target state="translated">다음 예제에서는 메서드를 실행할 때 필요한 메모리 양을 결정 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The specified memory size is negative.</source>
          <target state="translated">지정된 메모리 크기가 음수인 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">게이트로 보호되는 코드의 실행을 시작하는 데 필요한 메모리가 부족한 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> 사용을 마치면 <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> 메서드를 사용하면 <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>를 사용할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> was occupying.</source>
          <target state="translated">호출한 후 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>에 대 한 모든 참조를 해제 해야는 <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 차지한 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Dispose 메서드를 구현<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph>에 대한 마지막 참조를 해제하기 전에 반드시 <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>를 호출하십시오.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이렇게 하지 않으면 가비지 수집기가 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> 개체의 <ph id="ph2">`Finalize`</ph> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> object.</source>
          <target state="translated">가비지 수집기에서 <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>The garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> method when the current object is ready to be finalized.</source>
          <target state="translated">가비지 컬렉션이 <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> 현재 개체가 종료 될 때 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>