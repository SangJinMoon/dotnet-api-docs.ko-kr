<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e44bc871caa29f826e0555271beb6a45d2de1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>작업을 실행하기 전에 메모리 리소스가 충분한지 확인합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 클래스 고급 개발에 사용이 됩니다.  
  
 인스턴스를 만들지는 <xref:System.Runtime.MemoryFailPoint> 클래스 메모리 게이트를 만듭니다. 메모리 게이트 많은 양의 메모리를 필요로 하는 활동을 시작 하기 전에 리소스가 충분 한지 확인 합니다. 로 인해 검사에 실패 한 <xref:System.InsufficientMemoryException> 예외가 throw 됩니다. 이 예외는 작업을 시작할 수 없게 되지 않으며 리소스 부족으로 인해 오류의 가능성을 줄여 줍니다. 이 사용 하도록이 설정 하면 성능이 저하 될 방지 하기 위해 프로그램 <xref:System.OutOfMemoryException> 예외 및 상태 손상을 부적절 한 코드에서 임의의 위치에서 예외 처리에서 발생할 수 있습니다.  
  
> [!IMPORTANT]
>  이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다. 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 throw 하 여 프로그램 <xref:System.InsufficientMemoryException> 예외를 응용 프로그램와 구분할 수는 작업을 완료할 수 되지 않는 예상 부분적으로 완료 된 작업을 응용 프로그램 상태 손상 되었을 수 있습니다. 이렇게 하면 응용 프로그램을 현재 언로드 필요할 수 있는 비관적 에스컬레이션 정책에의 빈도 줄일 수 있습니다. <xref:System.AppDomain> 프로세스를 재생 합니다.  
  
 <xref:System.Runtime.MemoryFailPoint> 충분 한 메모리 및 연속 된 가상 주소 공간 힙, 모든 가비지 수집에서 사용할 수 있는 스왑 파일의 크기를 늘릴 수 있는지 여부를 확인 합니다.  <xref:System.Runtime.MemoryFailPoint> 메모리의 장기 가용성에 대 한 게이트 하지만 호출자의 수명 동안 보장 하지는 항상 사용 해야는 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 리소스 연관 메서드가 <xref:System.Runtime.MemoryFailPoint> 해제 됩니다.  
  
 메모리 게이트를 사용 하려면 만들어야는 <xref:System.Runtime.MemoryFailPoint> 개체 하 고 메모리 양 (MB)의 수를 지정 합니다. 다음 작업을 사용 하는 합니다. 충분 한 메모리를 사용할 수 없는 경우는 <xref:System.InsufficientMemoryException> 예외가 throw 됩니다.  
  
 생성자의 매개 변수는 양의 정수 여야 합니다. 음수 값을 발생 한 <xref:System.ArgumentOutOfRangeException> 예외입니다.  
  
 <xref:System.Runtime.MemoryFailPoint> 16MB의 세분성에서 작동합니다. 16 MB 보다 작은 모든 값은 16MB로 되며 다른 값으로 16MB의 가장 큰 배수로 처리 됩니다.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> 응용을 프로그램의 메모리 부족으로 인 한 손상을 방지 하기 위해 자체적으로 성능을 저하 수 있습니다.  어휘 범위 내에서 사용 해야 합니다.  다음 예제에서는 작업 큐에서 항목을 처리 하는 스레드를 시작 합니다.  사용 가능한 메모리 리소스를 사용 하 여 검사 각 스레드를 시작 하기 전에 <xref:System.Runtime.MemoryFailPoint>합니다.  예외가 throw 되 면 main 메서드는 다음 스레드를 시작 하기 전에 사용 가능한 메모리를 대기 합니다.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">필요한 메모리 크기(MB)입니다. 양수여야 합니다.</param>
        <summary>성공적으로 실행하는 데 필요한 메모리 양을 지정하여 <see cref="T:System.Runtime.MemoryFailPoint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업 항목을 처리 하려면 응용 프로그램에서 사용 된 메모리 양이 실험적으로 확인할 수 있습니다.  응용 프로그램 요청을 처리 하는 데 필요한 메모리 양을 예측을 사용 하 여 고려는 <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> 메서드를 작업 항목을 처리 하는 메서드를 호출 후 및 하기 전에 사용 가능한 메모리의 양을 확인 합니다. 참조는 <xref:System.Runtime.MemoryFailPoint> 클래스에 대 한 값을 동적으로 결정 하는 코드 예제는 `sizeInMegabytes` 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 메서드를 실행할 때 필요한 메모리 양을 결정 하는 방법을 보여 줍니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.MemoryFailPoint> 클래스입니다.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">지정된 메모리 크기가 음수인 경우</exception>
        <exception cref="T:System.InsufficientMemoryException">게이트로 보호되는 코드의 실행을 시작하는 데 필요한 메모리가 부족한 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.MemoryFailPoint" />에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 사용을 마치면 <xref:System.Runtime.MemoryFailPoint>를 호출합니다. <xref:System.Runtime.MemoryFailPoint.Dispose%2A> 메서드를 사용하면 <xref:System.Runtime.MemoryFailPoint>를 사용할 수 없게 됩니다. 호출한 후 <xref:System.Runtime.MemoryFailPoint>에 대 한 모든 참조를 해제 해야는 <xref:System.Runtime.MemoryFailPoint> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Runtime.MemoryFailPoint> 차지한 합니다. 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
> [!NOTE]
>  <xref:System.Runtime.MemoryFailPoint.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Runtime.MemoryFailPoint>를 호출하십시오. 이렇게 하지 않으면 가비지 수집기가 <xref:System.Runtime.MemoryFailPoint> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 수집기에서 <see cref="T:System.Runtime.MemoryFailPoint" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 컬렉션이 <xref:System.Runtime.MemoryFailPoint.Finalize%2A> 현재 개체가 종료 될 때 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>