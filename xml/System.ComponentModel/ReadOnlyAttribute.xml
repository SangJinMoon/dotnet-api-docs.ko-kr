<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReadOnlyAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59eea6d669eeabc3ccd29440616c2b4d7566b128d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9eea6d669eeabc3ccd29440616c2b4d7566b128d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Specifies whether the property this attribute is bound to is read-only or read/write.</source>
          <target state="translated">이 특성이 바인딩되는 속성이 읽기 전용인지 아니면 읽기/쓰기가 가능한지를 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>This class cannot be inherited</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Members that are marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`true`</ph> or that do not have a <ph id="ph3">`Set`</ph> method cannot be changed.</source>
          <target state="translated">로 표시 된 멤버는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph> 없는 또는 <ph id="ph3">`Set`</ph> 방법을 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Members that do not have this attribute or that are marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`false`</ph> are read/write, and they can be changed.</source>
          <target state="translated">이 특성이 없는 또는로 표시 되는 멤버는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`false`</ph> 읽기/쓰기 이며 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>The default is <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> class enforces the <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> in the design environment and at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> 클래스는 적용 된 <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 디자인 환경에서 및 런타임입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>When you mark a property with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`true`</ph>, the value of this attribute is set to the constant member <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.</source>
          <target state="translated">포함 하는 속성을 표시 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>, 상수 멤버로이 특성의 값은 설정 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>For a property marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`false`</ph>, the value is <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">로 표시 된 속성의 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`false`</ph>, 값이 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">따라서 코드에서이 특성의 값을 확인 하려는 경우 특성으로 지정 해야 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>특성<ept id="p1">](~/docs/standard/attributes/index.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>The following code example marks a property as read-only.</source>
          <target state="translated">다음 코드 예제에서는 읽기 전용으로 속성을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>The next code example shows how to check the value of the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> for <ph id="ph2">`MyProperty`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 값을 확인 하는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 에 대 한 <ph id="ph2">`MyProperty`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>First, the code gets a <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> with all the properties for the object.</source>
          <target state="translated">첫째, 코드를 가져옵니다는 <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> 개체에 대 한 모든 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Next, it indexes into the <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> to get <ph id="ph2">`MyProperty`</ph>.</source>
          <target state="translated">으로 인덱싱하 다음으로 <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> 가져오려는 <ph id="ph2">`MyProperty`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>Then it returns the attributes for this property and saves them in the attributes variable.</source>
          <target state="translated">다음이 속성에 대 한 특성을 반환 하 여 특성 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>The example presents two different ways of checking the value of the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>.</source>
          <target state="translated">이 예제에서는 표시의 값을 확인 하는 두 가지 방법으로 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>In the second code fragment, the example calls the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A&gt;</ph> method.</source>
          <target state="translated">이 예에서는 두 번째 코드 조각에서 호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>In the last code fragment, the example uses the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A&gt;</ph> property to check the value.</source>
          <target state="translated">이 예제에서는 마지막 코드 조각에 사용 하 여는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A&gt;</ph> 속성 값을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ReadOnlyAttribute">
          <source>If you marked a class with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>, use the following code example to check the value.</source>
          <target state="translated">로 클래스를 표시 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>, 다음 코드 예제를 사용 하 여 값을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to show that the property this attribute is bound to is read-only; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to show that the property is read/write.</source>
          <target state="translated">이 특성이 바인딩되는 속성이 읽기 전용임을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 속성이 읽기/쓰기가 가능함을 나타내면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>Members that are marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`true`</ph> or that do not have a <ph id="ph3">`Set`</ph> method cannot be changed.</source>
          <target state="translated">로 표시 된 멤버는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph> 없는 또는 <ph id="ph3">`Set`</ph> 방법을 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>Members that do not have this attribute or that are marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`false`</ph> are read/write, and they can be changed.</source>
          <target state="translated">이 특성이 없는 또는로 표시 되는 멤버는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`false`</ph> 읽기/쓰기 이며 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>The default is <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>When you mark a property with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`true`</ph>, the value of this attribute is set to the constant member <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.</source>
          <target state="translated">포함 하는 속성을 표시 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>, 상수 멤버로이 특성의 값은 설정 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>For a property marked with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`false`</ph>, the value is <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">로 표시 된 속성의 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`false`</ph>, 값이 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">따라서 코드에서이 특성의 값을 확인 하려는 경우 특성으로 지정 해야 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>The following code example marks a property as read-only.</source>
          <target state="translated">다음 코드 예제에서는 읽기 전용으로 속성을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
          <source>This code creates a new <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>, sets its value to <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph>, and binds it to the property.</source>
          <target state="translated">이 코드에서는 새 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph>, 그 값을 설정 <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph>, 속성에 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.Default">
          <source>Specifies the default value for the <ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph>, which is <ph id="ph2">&lt;see cref="F:System.ComponentModel.ReadOnlyAttribute.No" /&gt;</ph> (that is, the property this attribute is bound to is read/write).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph>의 기본값인 <ph id="ph2">&lt;see cref="F:System.ComponentModel.ReadOnlyAttribute.No" /&gt;</ph>를 지정합니다. 기본값은 이 특성이 바인딩된 속성이 읽기/쓰기가 가능함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.Default">
          <source>This <ph id="ph1">&lt;see langword="static" /&gt;</ph> field is read-only.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="static" /&gt;</ph> 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.Default">
          <source>When you mark a property with this value, this attribute is set to the constant member <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">이 특성이 상수 멤버로 설정 된 경우이 값을 갖는 속성으로 표시 하면 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.Default">
          <source>Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">따라서 특성 코드에서이 값으로 설정 되어 있는지 확인 하려는 경우 특성으로 지정 해야 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
          <source>Another object to compare to.</source>
          <target state="translated">비교할 다른 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
          <source>Indicates whether this instance and a specified object are equal.</source>
          <target state="translated">이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is equal to this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 이 인스턴스와 같으면 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>이고, 그러지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ReadOnlyAttribute" /&gt;</ph>의 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
          <source>Determines if this attribute is the default.</source>
          <target state="translated">이 특성이 기본값인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the attribute is the default value for this attribute class; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 특성이 특성 클래스의 기본값이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>Gets a value indicating whether the property this attribute is bound to is read-only.</source>
          <target state="translated">이 특성이 바인딩되는 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the property this attribute is bound to is read-only; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the property is read/write.</source>
          <target state="translated">이 특성이 바인딩되는 속성이 읽기 전용이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 속성이 읽기/쓰기이면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>The following code example checks to see whether <ph id="ph1">`MyProperty`</ph> is read-only.</source>
          <target state="translated">다음 코드 예제에서는 볼 수 있는지 여부를 <ph id="ph1">`MyProperty`</ph> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>First, the code gets the attributes for <ph id="ph1">`MyProperty`</ph> by doing the following:</source>
          <target state="translated">첫째, 코드에 대 한 특성을 가져옵니다 <ph id="ph1">`MyProperty`</ph> 다음을 수행 하 여:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>Retrieving a <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> with all the properties for the object.</source>
          <target state="translated">검색 한 <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> 개체에 대 한 모든 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>Indexing into the <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> to get <ph id="ph2">`MyProperty`</ph>.</source>
          <target state="translated">에 대 한 인덱싱을 <ph id="ph1">&lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt;</ph> 가져오려는 <ph id="ph2">`MyProperty`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>Saving the attributes for this property in the attributes variable.</source>
          <target state="translated">특성 변수에이 속성에 대 한 특성을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
          <source>Then the code sets <ph id="ph1">`myAttribute`</ph> to the value of the <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> in the <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> and checks whether the property is read-only.</source>
          <target state="translated">다음 코드 집합 <ph id="ph1">`myAttribute`</ph> 의 값에는 <ph id="ph2">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 에 <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> 속성이 읽기 전용인 지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.No">
          <source>Specifies that the property this attribute is bound to is read/write and can be modified.</source>
          <target state="translated">이 특성이 바인딩되는 속성을 읽기/쓰기가 가능하고 수정할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.No">
          <source>This <ph id="ph1">&lt;see langword="static" /&gt;</ph> field is read-only.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="static" /&gt;</ph> 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.No">
          <source>This field is the default setting for this attribute.</source>
          <target state="translated">이 필드는이 특성에 대 한 기본 설정입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.No">
          <source>When you mark a property with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`false`</ph>, the value of this attribute is set to the constant member <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.</source>
          <target state="translated">포함 하는 속성을 표시 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`false`</ph>, 상수 멤버로이 특성의 값은 설정 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.No">
          <source>Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">따라서 특성 코드에서이 값으로 설정 되어 있는지 확인 하려는 경우 특성으로 지정 해야 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.Yes">
          <source>Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer.</source>
          <target state="translated">이 특성이 바인딩되는 속성을 읽기 전용으로 표시하고 서버 탐색기에서 수정할 수 없도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.ReadOnlyAttribute.Yes">
          <source>This <ph id="ph1">&lt;see langword="static" /&gt;</ph> field is read-only.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="static" /&gt;</ph> 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.Yes">
          <source>When you mark a property with the <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id="ph2">`true`</ph>, the value of this attribute is set to the constant member <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.</source>
          <target state="translated">포함 하는 속성을 표시 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>, 상수 멤버로이 특성의 값은 설정 <ph id="ph3">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.ReadOnlyAttribute.Yes">
          <source>Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">따라서 특성 코드에서이 값으로 설정 되어 있는지 확인 하려는 경우 특성으로 지정 해야 <ph id="ph1">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>