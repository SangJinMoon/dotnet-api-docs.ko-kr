<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NestedContainer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a124ee078be65668efae6c08b17c83ac01930fb7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a124ee078be65668efae6c08b17c83ac01930fb7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.NestedContainer">
          <source>Provides the base implementation for the <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph> interface, which enables containers to have an owning component.</source>
          <target state="translated">컨테이너에 소유 구성 요소가 포함될 수 있도록 하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph> 인터페이스에 대한 기본 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> class is a simple implementation of the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> 클래스의 간단한 구현을는 <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> 인터페이스를 논리적으로 다른 구성 요소를 0 개 이상 포함 하 고 부모 구성 요소에서 소유 하는 구성 요소를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The behavior of nested containers differs from a standard <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> in a number of ways, including the following:</source>
          <target state="translated">표준에서 중첩 된 컨테이너의 동작이 서로 다름 <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> 는 여러 가지 방법으로 다음을 포함 하 여:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Site characteristics such as <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> are routed through the owning component’s site.</source>
          <target state="translated">와 같은 사이트 특성 <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> 소유 하는 구성 사이트를 통해 라우팅됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The site’s <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.</source>
          <target state="translated">사이트의 <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> 속성은 소유 하는 구성 이름 뒤에 마침표 (.) 및 하위 구성 요소의 이름을 포함 하는 정규화 된 이름입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> provides support for the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> as a service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> 에 대 한 지원을 제공는 <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> 서비스로 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>When the owning component is disposed, the container is disposed as well.</source>
          <target state="translated">해당 구성 요소가 삭제 되 면 컨테이너도 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>In addition, designers treat nested containers differently.</source>
          <target state="translated">또한 디자이너 중첩 된 컨테이너가 다른 방식으로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>A designer host is only interested in one container—the one associated with the host.</source>
          <target state="translated">디자이너 호스트는 하나의 컨테이너에 관심이-호스트와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</source>
          <target state="translated">구성 요소 추가 및 이벤트를 제거 합니다. 따라서 구성 요소에 추가 되었거나 중첩 된 컨테이너에서 제거 하는 경우에 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</source>
          <target state="translated">그러나 중첩 된 컨테이너에 서비스 흐름이 때문에 구성 변경 이벤트 발생 중첩 된 컨테이너에 구성 요소가 변경 될 때 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</source>
          <target state="translated">이벤트 추적이 일치 하지이 않을 실행 취소 기능을 밀접 하 게 연결 serialization에 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The standard undo engine uses <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> to track changes made to components.</source>
          <target state="translated">표준 실행 취소 엔진 사용 하 여 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> 구성 요소에 대 한 변경 내용을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</source>
          <target state="translated">실행 취소 엔진을 통해 참조 서비스 구성 요소의 이름을 식별할 수 없으면 해당 구성 요소에 대 한 변경 내용을 무시 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</source>
          <target state="translated">이 서비스 소유자에 있는 같은 이름의 공용 읽기 전용 속성으로 노출 되는 경우에 자동으로 포함 된 구성 요소에 대 한 변경을 인식 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Otherwise, the developer must pass component change events up to the owner.</source>
          <target state="translated">그렇지 않은 경우 개발자는 소유자 구성 요소 변경 이벤트를 전달 해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>For example, if a nested component’s <ph id="ph1">`Text`</ph> property is resurfaced on its owning component as an <ph id="ph2">`Address`</ph> property, when the <ph id="ph3">`Text`</ph> property is changed, a property change must be programmatically made for the corresponding <ph id="ph4">`Address`</ph> property or else that change will not be tracked by undo.</source>
          <target state="translated">예를 들어 중첩 된 구성 요소의 <ph id="ph1">`Text`</ph> 속성으로 소유 구성 요소에서 다시 표시 되는 <ph id="ph2">`Address`</ph> 속성는 <ph id="ph3">`Text`</ph> 속성이 변경 되는 해당 하는 것에 대 한 프로그래밍 방식으로 이루어져야 합니다 속성 변경, <ph id="ph4">`Address`</ph> 속성. 그렇지 않으면 해당 변경 내용을 실행 취소에 의해 추적 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">이 중첩 컨테이너를 소유하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>This constructor enlists in its owner's <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> event so that the nested container's <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> method will automatically be called.</source>
          <target state="translated">이 생성자의 소유자 참여 <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> 이벤트 있도록 중첩 된 컨테이너의 <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> 메서드가 자동으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> to create a site for.</source>
          <target state="translated">해당 사이트를 만들 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The name to assign to <bpt id="p1">&lt;c&gt;</bpt>component<ept id="p1">&lt;/c&gt;</ept>, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to skip the name assignment.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>component<ept id="p1">&lt;/c&gt;</ept>에 할당할 이름이거나, 이름을 할당하지 않으려면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>Creates a site for the component within the container.</source>
          <target state="translated">컨테이너에서 구성 요소에 대한 사이트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The newly created <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>.</source>
          <target state="translated">새로 만든 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>If the <ph id="ph1">`name`</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> is added to the nested container without an identifying name.</source>
          <target state="translated">경우는 <ph id="ph1">`name`</ph> 매개 변수는 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> 식별 이름 없이 중첩 된 컨테이너에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source><ph id="ph1">&lt;paramref name="component" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="component" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>Releases the resources used by the nested container.</source>
          <target state="translated">중첩 컨테이너에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> references.</source>
          <target state="translated">경우는 <ph id="ph1">`disposing`</ph> 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Finalize 메서드를 재정의<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the service to retrieve.</source>
          <target state="translated">검색할 서비스의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>Gets the service object of the specified type, if it is available.</source>
          <target state="translated">가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that implements the requested service, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the service cannot be resolved.</source>
          <target state="translated">요청된 서비스를 구현하는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>이거나, 서비스를 확인할 수 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This method overrides the <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 메서드를 재정의 <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This implementation only resolves requests for the <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> services.</source>
          <target state="translated">이 구현에 대 한 요청을 확인만 <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> 서비스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>Gets the owning component for this nested container.</source>
          <target state="translated">이 중첩 컨테이너의 소유 구성 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">이 중첩 컨테이너를 소유하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The owning component is the characteristic that differentiates nested containers from ordinary containers.</source>
          <target state="translated">해당 구성 요소가 일반 컨테이너에서 중첩 된 컨테이너를 구분할 수 있는 특성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>Gets the name of the owning component.</source>
          <target state="translated">소유 구성 요소의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The name of the owning component.</source>
          <target state="translated">소유 구성 요소의 이름입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>This property may be overridden to provide a custom owner name.</source>
          <target state="translated">사용자 지정 소유자 이름을 제공 하기 위해이 속성을 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The default implementation searches the owner's site for <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> and calls <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> if there is no nested site.</source>
          <target state="translated">기본 구현은 소유자의 사이트에 대 한 검색 <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> 및 호출 <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> 중첩 사이트가 없는 경우.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>If neither is available, this property returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 속성을 반환 하는 경우 둘 다를 사용할 수 있는 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>