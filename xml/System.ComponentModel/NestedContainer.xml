<Type Name="NestedContainer" FullName="System.ComponentModel.NestedContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a124ee078be65668efae6c08b17c83ac01930fb7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30378897" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NestedContainer extends System.ComponentModel.Container implements class System.ComponentModel.IContainer, class System.ComponentModel.INestedContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.NestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class NestedContainer&#xA;Inherits Container&#xA;Implements IDisposable, INestedContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class NestedContainer : System::ComponentModel::Container, IDisposable, System::ComponentModel::INestedContainer" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Container</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INestedContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="28e4f-101">컨테이너에 소유 구성 요소가 포함될 수 있도록 하는 <see cref="T:System.ComponentModel.INestedContainer" /> 인터페이스에 대한 기본 구현을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="28e4f-101">Provides the base implementation for the <see cref="T:System.ComponentModel.INestedContainer" /> interface, which enables containers to have an owning component.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-102"><xref:System.ComponentModel.NestedContainer> 클래스의 간단한 구현을는 <xref:System.ComponentModel.INestedContainer> 인터페이스를 논리적으로 다른 구성 요소를 0 개 이상 포함 하 고 부모 구성 요소에서 소유 하는 구성 요소를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-102">The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</span></span> <span data-ttu-id="28e4f-103">표준에서 중첩 된 컨테이너의 동작이 서로 다름 <xref:System.ComponentModel.Container> 는 여러 가지 방법으로 다음을 포함 하 여:</span><span class="sxs-lookup"><span data-stu-id="28e4f-103">The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:</span></span>  
  
-   <span data-ttu-id="28e4f-104">와 같은 사이트 특성 <xref:System.ComponentModel.Component.DesignMode%2A> 및 <xref:System.ComponentModel.Component.GetService%2A> 소유 하는 구성 사이트를 통해 라우팅됩니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-104">Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.</span></span>  
  
-   <span data-ttu-id="28e4f-105">사이트의 <xref:System.ComponentModel.ISite.Name%2A> 속성은 소유 하는 구성 이름 뒤에 마침표 (.) 및 하위 구성 요소의 이름을 포함 하는 정규화 된 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-105">The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.</span></span>  
  
-   <span data-ttu-id="28e4f-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> 에 대 한 지원을 제공는 <xref:System.ComponentModel.INestedContainer> 서비스로 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.</span></span>  
  
-   <span data-ttu-id="28e4f-107">해당 구성 요소가 삭제 되 면 컨테이너도 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-107">When the owning component is disposed, the container is disposed as well.</span></span>  
  
 <span data-ttu-id="28e4f-108">또한 디자이너 중첩 된 컨테이너가 다른 방식으로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-108">In addition, designers treat nested containers differently.</span></span> <span data-ttu-id="28e4f-109">디자이너 호스트는 하나의 컨테이너에 관심이-호스트와 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-109">A designer host is only interested in one container—the one associated with the host.</span></span> <span data-ttu-id="28e4f-110">구성 요소 추가 및 이벤트를 제거 합니다. 따라서 구성 요소에 추가 되었거나 중첩 된 컨테이너에서 제거 하는 경우에 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-110">Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</span></span> <span data-ttu-id="28e4f-111">그러나 중첩 된 컨테이너에 서비스 흐름이 때문에 구성 변경 이벤트 발생 중첩 된 컨테이너에 구성 요소가 변경 될 때 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-111">However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</span></span>  
  
 <span data-ttu-id="28e4f-112">이벤트 추적이 일치 하지이 않을 실행 취소 기능을 밀접 하 게 연결 serialization에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-112">This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</span></span> <span data-ttu-id="28e4f-113">표준 실행 취소 엔진 사용 하 여 <xref:System.ComponentModel.Design.IReferenceService> 구성 요소에 대 한 변경 내용을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-113">The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components.</span></span> <span data-ttu-id="28e4f-114">실행 취소 엔진을 통해 참조 서비스 구성 요소의 이름을 식별할 수 없으면 해당 구성 요소에 대 한 변경 내용을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-114">If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</span></span> <span data-ttu-id="28e4f-115">이 서비스 소유자에 있는 같은 이름의 공용 읽기 전용 속성으로 노출 되는 경우에 자동으로 포함 된 구성 요소에 대 한 변경을 인식 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-115">This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</span></span> <span data-ttu-id="28e4f-116">그렇지 않은 경우 개발자는 소유자 구성 요소 변경 이벤트를 전달 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-116">Otherwise, the developer must pass component change events up to the owner.</span></span> <span data-ttu-id="28e4f-117">예를 들어 중첩 된 구성 요소의 `Text` 속성으로 소유 구성 요소에서 다시 표시 되는 `Address` 속성는 `Text` 속성이 변경 되는 해당 하는 것에 대 한 프로그래밍 방식으로 이루어져야 합니다 속성 변경, `Address` 속성. 그렇지 않으면 해당 변경 내용을 실행 취소에 의해 추적 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-117">For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.INestedContainer" />
    <altmember cref="T:System.ComponentModel.IContainer" />
    <altmember cref="T:System.ComponentModel.ISite" />
    <altmember cref="T:System.ComponentModel.Design.IReferenceService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NestedContainer (System.ComponentModel.IComponent owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NestedContainer(System::ComponentModel::IComponent ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="28e4f-118">이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-118">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="28e4f-119">
            <see cref="T:System.ComponentModel.NestedContainer" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-119">Initializes a new instance of the <see cref="T:System.ComponentModel.NestedContainer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-120">이 생성자의 소유자 참여 <xref:System.ComponentModel.IComponent.Disposed> 이벤트 있도록 중첩 된 컨테이너의 <xref:System.ComponentModel.NestedContainer.Dispose%2A> 메서드가 자동으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-120">This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="28e4f-121">
            <paramref name="owner" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-121">
              <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.ComponentModel.NestedContainer.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="CreateSite">
      <MemberSignature Language="C#" Value="protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ComponentModel.ISite CreateSite(class System.ComponentModel.IComponent component, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSite (component As IComponent, name As String) As ISite" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ComponentModel::ISite ^ CreateSite(System::ComponentModel::IComponent ^ component, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="28e4f-122">해당 사이트를 만들 <see cref="T:System.ComponentModel.IComponent" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-122">The <see cref="T:System.ComponentModel.IComponent" /> to create a site for.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="28e4f-123">
            <c>component</c>에 할당할 이름이거나, 이름을 할당하지 않으려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-123">The name to assign to <c>component</c>, or <see langword="null" /> to skip the name assignment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="28e4f-124">컨테이너에서 구성 요소에 대한 사이트를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-124">Creates a site for the component within the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="28e4f-125">새로 만든 <see cref="T:System.ComponentModel.ISite" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-125">The newly created <see cref="T:System.ComponentModel.ISite" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-126">경우는 `name` 매개 변수는 `null`, <xref:System.ComponentModel.IComponent> 식별 이름 없이 중첩 된 컨테이너에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-126">If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="28e4f-127">
            <paramref name="component" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-127">
              <paramref name="component" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="28e4f-128">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-128">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="28e4f-129">중첩 컨테이너에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-129">Releases the resources used by the nested container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-130">이 메서드는 public `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="28e4f-130">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="28e4f-131">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-131">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="28e4f-132"><xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-132"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="28e4f-133">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.ComponentModel.NestedContainer> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-133">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references.</span></span> <span data-ttu-id="28e4f-134">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-134">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="28e4f-135">
              <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="28e4f-135">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="28e4f-136">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <see langword="Dispose" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="28e4f-136">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="28e4f-137">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="28e4f-137">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="28e4f-138">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="28e4f-138">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected override object GetService (Type service);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetService(class System.Type service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetService (service As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ GetService(Type ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="service">
          <span data-ttu-id="28e4f-139">검색할 서비스의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-139">The <see cref="T:System.Type" /> of the service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="28e4f-140">가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-140">Gets the service object of the specified type, if it is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="28e4f-141">요청된 서비스를 구현하는 <see cref="T:System.Object" />이거나, 서비스를 확인할 수 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-141">An <see cref="T:System.Object" /> that implements the requested service, or <see langword="null" /> if the service cannot be resolved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-142">이 메서드를 재정의 <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="28e4f-142">This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="28e4f-143">이 구현에 대 한 요청을 확인만 <xref:System.ComponentModel.INestedContainer> 및 <xref:System.ComponentModel.IContainer> 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-143">This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Container.GetService(System.Type)" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.INestedContainer.Owner</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="28e4f-144">이 중첩 컨테이너의 소유 구성 요소를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-144">Gets the owning component for this nested container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="28e4f-145">이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-145">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-146">해당 구성 요소가 일반 컨테이너에서 중첩 된 컨테이너를 구분할 수 있는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-146">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.INestedContainer.Owner" />
      </Docs>
    </Member>
    <Member MemberName="OwnerName">
      <MemberSignature Language="C#" Value="protected virtual string OwnerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OwnerName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.OwnerName" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property OwnerName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ OwnerName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="28e4f-147">소유 구성 요소의 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-147">Gets the name of the owning component.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="28e4f-148">소유 구성 요소의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="28e4f-148">The name of the owning component.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28e4f-149">사용자 지정 소유자 이름을 제공 하기 위해이 속성을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-149">This property may be overridden to provide a custom owner name.</span></span> <span data-ttu-id="28e4f-150">기본 구현은 소유자의 사이트에 대 한 검색 <xref:System.ComponentModel.INestedSite> 및 호출 <xref:System.ComponentModel.INestedSite.FullName%2A>, 또는 <xref:System.ComponentModel.ISite.Name%2A> 중첩 사이트가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="28e4f-150">The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site.</span></span> <span data-ttu-id="28e4f-151">이 속성을 반환 하는 경우 둘 다를 사용할 수 있는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="28e4f-151">If neither is available, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>