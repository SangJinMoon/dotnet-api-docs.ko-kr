<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LicFileLicenseProvider&#xA;Inherits LicenseProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicFileLicenseProvider : System::ComponentModel::LicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e1774-101"><see cref="T:System.ComponentModel.LicenseProvider" />를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-101">Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider" />.</span></span> <span data-ttu-id="e1774-102">이 공급자는 Microsoft .NET Framework의 표준 라이선스 모델과 유사한 방식으로 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-102">The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1774-103"><xref:System.ComponentModel.LicFileLicenseProvider> 제공 <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> 및 <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1774-103">The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods.</span></span> <span data-ttu-id="e1774-104"><xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 메서드 확인 여부는 <xref:System.ComponentModel.License.LicenseKey%2A> 검색는 <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> 메서드는 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-104">The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid.</span></span> <span data-ttu-id="e1774-105">이 클래스에서 상속 하는 경우 재정의할 수 있습니다는 <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 메서드를 고유한 유효성 검사 논리를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-105">When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.</span></span>  
  
 <span data-ttu-id="e1774-106">이 클래스는 COM 라이선스를 라이선스 유사한 기능을 제공 하기 위한 및 텍스트 라이선스 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-106">This class exists to provide similar licensing functionality to COM licensing and uses text license files.</span></span>  
  
 <span data-ttu-id="e1774-107">라이선싱에 대 한 자세한 내용은 참조 하십시오. [하는 방법: 라이선스 구성 요소와 컨트롤](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-107">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1774-108">다음 예에서는 사용 하 여 사용이 허가 된 컨트롤을 만듭니다는 <xref:System.ComponentModel.LicenseManager.Validate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1774-108">The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="e1774-109">사용 하 여 <xref:System.ComponentModel.LicFileLicenseProvider> 라이선스 관리자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-109">It uses <xref:System.ComponentModel.LicFileLicenseProvider> for the license manager.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseManager" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LicFileLicenseProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e1774-110"><see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-110">Initializes a new instance of the <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetKey(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e1774-111">키를 반환할 개체 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-111">The object type to return the key.</span></span></param>
        <summary><span data-ttu-id="e1774-112">지정된 형식에 대한 키를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-112">Returns a key for the specified type.</span></span></summary>
        <returns><span data-ttu-id="e1774-113"><paramref name="type" /> 매개 변수에 라이선스가 있는지 확인하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-113">A confirmation that the <paramref name="type" /> parameter is licensed.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::License ^ GetLicense(System::ComponentModel::LicenseContext ^ context, Type ^ type, System::Object ^ instance, bool allowExceptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e1774-114">라이선스가 있는 개체를 사용할 수 있는 경우를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-114">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</span></span></param>
        <param name="type"><span data-ttu-id="e1774-115"><see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-115">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <param name="instance"><span data-ttu-id="e1774-116"><see cref="T:System.ComponentModel.License" />를 요청하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-116">An object that requests the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <param name="allowExceptions">
          <span data-ttu-id="e1774-117">구성 요소에 라이선스를 부여할 수 없는 경우 <see cref="T:System.ComponentModel.LicenseException" />이 throw되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-117"><see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when a component cannot be granted a license; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e1774-118">구성 요소의 인스턴스에 대한 라이선스를 사용할 수 있으면 해당 라이선스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-118">Returns a license for the instance of the component, if one is available.</span></span></summary>
        <returns><span data-ttu-id="e1774-119">유효한 <see cref="T:System.ComponentModel.License" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-119">A valid <see cref="T:System.ComponentModel.License" />.</span></span> <span data-ttu-id="e1774-120">이 메서드는 유효한 <see cref="T:System.ComponentModel.License" />나 유효한 <paramref name="context" /> 매개 변수를 찾을 수 없는 경우 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-120">If this method cannot find a valid <see cref="T:System.ComponentModel.License" /> or a valid <paramref name="context" /> parameter, it returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1774-121">디자인 타임에는 <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> 라이선스 파일에 대 한 메서드를 찾습니다 `myClassName.LIC`여기서 `myClassName` 는 <xref:System.Type.FullName%2A> 만들 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-121">At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create.</span></span> <span data-ttu-id="e1774-122">이 파일은 구성 요소를 포함 하는.dll 파일과 동일한 디렉터리에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-122">This file must be in the same directory as the .dll file that contains the component.</span></span>  
  
 <span data-ttu-id="e1774-123">이 메서드에 지정 된 키에 대 한 라이선스 파일의 첫 번째 줄을 확인 하는 다음으로 <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e1774-123">Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method.</span></span> <span data-ttu-id="e1774-124">이 줄으로 사용 되는 키가 유효 하는 경우는 <xref:System.ComponentModel.License.LicenseKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-124">If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsKeyValid(System::String ^ key, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="e1774-125">확인할 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-125">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to check.</span></span></param>
        <param name="type"><span data-ttu-id="e1774-126"><see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-126">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <summary><span data-ttu-id="e1774-127"><see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 메서드에서 검색한 키가 지정된 형식에 대해 유효한지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-127">Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> method retrieves is valid for the specified type.</span></span></summary>
        <returns>
          <span data-ttu-id="e1774-128">해당 키가 지정된 형식에 대해 유효한 <see cref="P:System.ComponentModel.License.LicenseKey" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-128"><see langword="true" /> if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey" /> for the specified type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1774-129">이 메서드는 구를 검색에 대 한 키를 확인: " `myClassName is a licensed component.` " 여기서 `myClassName` 는 <xref:System.Type.FullName%2A> 만들려는 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-129">This method checks the key against the phrase: " `myClassName is a licensed component.` ", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e1774-130">이 클래스에서 상속 하는 경우에 고유한 유효성 검사 논리를 제공 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e1774-130">When you inherit from this class, you can override this method to provide your own validation logic.</span></span></para>
        </block>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>