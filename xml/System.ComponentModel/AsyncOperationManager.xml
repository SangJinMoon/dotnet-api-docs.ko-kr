<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="87775-101">비동기 메서드 호출을 지원하는 클래스에 대한 동시성 관리 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="87775-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87775-103">클래스에 따라 비동기 동작을 제공 해야 하는 경우는 [이벤트 기반 비동기 패턴 개요](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), 다양 한 동시성 관리 문제를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="87775-104">그 중 한 스레드나 되는 응용 프로그램 모델에 대 한 적절 한 컨텍스트를 이벤트 처리기가 호출 하는 요구 사항이 됩니다 (예를 들어 Windows Forms 응용 프로그램 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 응용 프로그램, 콘솔 응용 프로그램, 및 등).</span><span class="sxs-lookup"><span data-stu-id="87775-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="87775-105"><xref:System.ComponentModel.AsyncOperationManager> 에서 지 원하는 모든 응용 프로그램 모델에서 제대로 실행 되는 클래스를 만드는 쉽게 숨기는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="87775-106"><xref:System.ComponentModel.AsyncOperationManager> 클래스에는 하나의 메서드 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>를 반환 하는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적을 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="87775-107"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 는 작업이 완료 될 때 클라이언트에 알릴 작업을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="87775-108">작업을 종료 하지 않고 진행률 업데이트 및 증분 결과 게시할 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="87775-109">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87775-110">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager> 모든 응용 프로그램 모델에 대 한 비동기 작업을 지 원하는 클래스를 만드는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="87775-111">숫자를 소수 인지 여부를 테스트 하는 클래스를 구현 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="87775-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="87775-112">이 계산 시간이 오래 걸릴 수 있으므로 별도 스레드에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87775-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="87775-113">진행률 보고서, 증분 결과 및 완료 알림을에서 처리 되는 <xref:System.ComponentModel.AsyncOperation> 클래스는 올바른 스레드 또는 컨텍스트에서 클라이언트의 이벤트 처리기가 호출 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="87775-114">전체 코드 목록을 참조 하십시오. [하는 방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소를 구현](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="87775-115">클라이언트의 전체 코드 목록을 참조 하십시오. [하는 방법: 이벤트 기반 비동기 패턴의 클라이언트 구현](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="87775-116">작업 ID와 같은 클라이언트 상태 정보와 특정 비동기 작업을 연결하는 데 사용되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-116">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="87775-117">특정 비동기 작업의 기간을 추적하기 위한 <see cref="T:System.ComponentModel.AsyncOperation" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-117">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="87775-118">비동기 메서드 호출의 기간을 추적하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.AsyncOperation" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-118">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87775-119"><xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 메서드가 반환 되는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적 하 고 작업이 완료 되는 응용 프로그램 모델 경고 메시지를 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-119">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="87775-120">진행률 업데이트 및 증분 결과 작업을 종료 하지 않고 게시를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-120">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="87775-121"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 올바르게 이러한 호출을 적절 한 스레드나 응용 프로그램 모델에 대 한 컨텍스트를 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-121">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="87775-122">이벤트 기반 비동기 패턴을 지 원하는 클래스를 구현 하는 경우 클래스를 호출 해야 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 때마다 프로그램 *MethodName* `Async` 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-122">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="87775-123">메서드를 호출 하는 클라이언트 응용 프로그램에서 사용할 수는 `userSuppliedState` 매개 변수를 고유 하 게 각 호출을 비동기 작업의 실행 하는 동안 발생 한 이벤트를 구별을 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-123">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="87775-124">클라이언트 코드에 대 한 고유한 값을 제공 해야 합니다는 `userSuppliedState` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-124">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="87775-125">고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고에 구현을 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-125">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="87775-126">코드에서 고유 하지 않은 작업 ID가 있는지 확인 하 고 throw 해야는 <xref:System.ArgumentException?displayProperty=nameWithType> 감지 된 연결이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87775-126">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="87775-127">코드를 추적 해야 모든 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 반환한 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 는 개체를 사용 하는 해당 기본 비동기 작업에서 업데이트를 게시 하 고 작업을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-127">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="87775-128">이 추적 전달 처럼 간단 해질 수는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 대리자 간에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-128">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="87775-129">클래스의 컬렉션 보다 정교한 디자인에 유지할 수 있습니다 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 개체, 작업이 시작 될 때 개체를 추가 하 고 작업을 완료 하거나 취소 하는 경우 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-129">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="87775-130">이 방법을 확인할 수 있습니다에 대 한 고유 `userSuppliedState` 매개 변수 값, 및 여러 동시 호출을 지 원하는 클래스를 작업할 때 사용 해야 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-130">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="87775-131">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-131">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87775-132">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 만드는 메서드를 한 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 비동기 작업의 기간을 추적 하기 위한 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-132">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="87775-133">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-133">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87775-134">비동기 작업의 동기화 컨텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-134">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="87775-135">비동기 작업의 동기화 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="87775-135">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87775-136">기본 구현은 자유 스레드 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-136">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="87775-137">스레드를 설정 해야는 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> 속성을 `null` 것입니다. 그렇지 않으면 해당 팩터리는 삭제 되지 않을 때 자유 스레드 팩터리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-137">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="87775-138">동기화 컨텍스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-138">for setting the synchronization context.</span></span> <span data-ttu-id="87775-139">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="87775-139">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="87775-140">연결 된 상태:</span><span class="sxs-lookup"><span data-stu-id="87775-140">Associated state:</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>