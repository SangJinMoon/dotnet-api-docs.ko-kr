<Type Name="ITypedList" FullName="System.ComponentModel.ITypedList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae1b812b22292721f7b8e6e474b15516e5215709" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30377357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITypedList" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypedList" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ITypedList" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypedList" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypedList" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>바인딩 가능한 목록의 스키마를 발견하는 기능을 제공합니다. 여기에서 바인딩할 수 있는 속성은 바인딩되는 개체의 공용 속성과 다릅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예를 들어, 사용 중인 경우에이 인터페이스를 사용 하 여는 <xref:System.Data.DataView> 을 나타내는 개체는 `customer` 속성 바인딩할 하려는 테이블을는 `customer` 개체를 <xref:System.Data.DataView> 의 속성이 아니라를 나타내는 <xref:System.Data.DataView>합니다.  
  
 이 인터페이스에 대 한 디자인 타임 지원 바인딩 가능한 목록 필요 하지 않습니다.  
  
 런타임 시 또는 디자이너에서 데이터 바인딩 발생할 수 있지만 둘 다에 대 한 규칙이 있습니다. 런타임 시 데이터는 다음 중 하나에 바인딩할 수 있습니다.  
  
-   <xref:System.Array>  
  
-   구현자 <xref:System.Collections.IList>구현자에 강력한 형식의 <xref:System.Collections.IList.Item%2A> 속성 (즉,는 <xref:System.Type> 이외의 <xref:System.Object>). 기본 구현 하 여이 수행할 수 있습니다 <xref:System.Collections.IList.Item%2A> 개인 합니다. 만들려는 경우 한 <xref:System.Collections.IList> 강력한 형식의 컬렉션의 규칙을 따르는에서 파생 되어야 <xref:System.Collections.CollectionBase>합니다.  
  
-   구현자 <xref:System.ComponentModel.ITypedList>합니다.  
  
 디자이너에서 바인딩할 수를 초기화할 수 있습니다 <xref:System.ComponentModel.Component> 동일한 규칙에 따라 개체입니다.  
  
 데이터 원본에 대 한 바인딩에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.Binding?displayProperty=nameWithType> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.ComponentModel.ITypedList> 인터페이스입니다. 라는 제네릭 형식은 `SortableBindingList` 에서 파생 되는 <xref:System.ComponentModel.BindingList%601> 클래스 및 구현 하는 <xref:System.ComponentModel.ITypedList> 인터페이스입니다. 전체 코드 목록을 참조 하십시오. [하는 방법: ITypedList 인터페이스 구현](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)합니다.  
  
 [!code-csharp[System.ComponentModel.ITypedList#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#1)]
 [!code-vb[System.ComponentModel.ITypedList#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.BindingList`1" />
  </Docs>
  <Members>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemProperties (listAccessors As PropertyDescriptor()) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties(cli::array &lt;System::ComponentModel::PropertyDescriptor ^&gt; ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">컬렉션에서 찾을 바인딩 가능한 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
        <summary>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />를 반환합니다.</summary>
        <returns>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `listAccessors` 매개 변수가 않습니다 `null`, 컨테이너를 구현 하는 개체에 대 한 검색 목록을 식별 하는 속성 설명자를 일반적으로 포함 <xref:System.ComponentModel.ITypedList>합니다. 예를 들어 한 <xref:System.Data.DataSet> 포함 하는 두 개의 테이블 `myCustomers` 및 `myOrders`, 라는 관계가 형성 된 `myCustOrders`합니다. 만드는 경우는 <xref:System.Data.DataView> 를 보려면 개체 `myCustomers`, 다음 호출는 <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> 메서드를 `null` 열에 대 한 속성 설명자를 반환 `myCustomers`합니다. 에 대 한 속성 설명자는 반환 된 속성 설명자 중 하나는 결과적으로, `myCustOrders`를 방금 같이 호출에서 <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> 사용에 대 한 속성 설명자를 포함 하는 목록 접근자 배열 메서드 `myCustOrders` 속성 설명자를 반환 합니다 에 대 한 `myOrders`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.ComponentModel.ITypedList.GetItemProperties%2A> 메서드. 전체 코드 목록을 참조 하십시오. [하는 방법: ITypedList 인터페이스 구현](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)합니다.  
  
 [!code-csharp[System.ComponentModel.ITypedList#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#3)]
 [!code-vb[System.ComponentModel.ITypedList#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BindingList`1" />
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="public string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetListName(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetListName (listAccessors As PropertyDescriptor()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetListName(cli::array &lt;System::ComponentModel::PropertyDescriptor ^&gt; ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">목록 이름이 반환되는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
        <summary>해당 목록의 이름을 반환합니다.</summary>
        <returns>목록 이름입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 여는 사용 되지 않는 디자인 타임 프레임 워크에만 사용 <xref:System.Windows.Forms.DataGrid> 제어 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.ComponentModel.ITypedList.GetListName%2A> 메서드. 전체 코드 목록을 참조 하십시오. [하는 방법: ITypedList 인터페이스 구현](~/docs/framework/winforms/how-to-implement-the-itypedlist-interface.md)합니다.  
  
 [!code-csharp[System.ComponentModel.ITypedList#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.ITypedList/CS/SortableBindingList.cs#4)]
 [!code-vb[System.ComponentModel.ITypedList#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.ITypedList/VB/SortableBindingList.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BindingList`1" />
      </Docs>
    </Member>
  </Members>
</Type>