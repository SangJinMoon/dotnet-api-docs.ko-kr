<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISynchronizeInvoke.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac5648d586e03aebeb7db72bd148861e02bc6f37.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac5648d586e03aebeb7db72bd148861e02bc6f37</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Provides a way to synchronously or asynchronously execute a delegate.</source>
          <target state="translated">대리자를 동기식 또는 비동기식으로 실행하는 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> 인터페이스는 이벤트 발생에 대 한 개체 간의 동기 및 비동기 통신을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</source>
          <target state="translated">이 인터페이스를 구현 하는 개체에는 이벤트가 발생 했음을 하 고 이벤트에 대 한 쿼리에 응답할 수 되었다는 알림을 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</source>
          <target state="translated">이러한 방식으로 클라이언트 수 있는 첫 번째 완료에 종속 하는 후속 요청을 제출 하기 전에 요청이 처리 되었는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> 클래스는 프로세스를 호출 하는 두 가지를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Asynchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">사용 하 여 비동기적으로 호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> 프로세스를 시작 하 고 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> 프로세스에 의해 시작 될 때까지 기다리지 <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> 완료 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Synchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">사용 하 여 동기적으로 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 프로세스, 완료 될 때까지 대기 및 반환을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 컨트롤의 주 스레드 간에 차이가 있는 호출 스레드가 호출을 적절 한 스레드에 마샬링해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> 이 클래스에 적용 된 특성에는 다음과 같은 <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> 속성 값: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph>는 대개 아이콘을 두 번 클릭하거나, 명령을 입력하거나, 브라우저에서 URL을 입력하여 시작되는 데스크톱 응용 프로그램에 영향을 미치지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id="p1">[</bpt>SQL Server Programming and Host Protection Attributes<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> 클래스 또는 <bpt id="p1">[</bpt>SQL Server 프로그래밍 및 호스트 보호 특성<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to pass as arguments to the given method.</source>
          <target state="translated">주어진 메서드에 인수로 전달하는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">인수가 필요하지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>Asynchronously executes the delegate on the thread that created this object.</source>
          <target state="translated">이 개체를 만든 스레드에서 대리자를 비동기적으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling this method.</source>
          <target state="translated">해당 메서드를 호출하여 시작된 비동기 작업을 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The <ph id="ph1">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.</source>
          <target state="translated"><ph id="ph1">`method`</ph> 대리자는 스레드 대신 개체를 만든 스레드에서 실행 된 <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">대리자가 비동기적으로 호출 하 고이 메서드가 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread.</source>
          <target state="translated">모든 스레드에서이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need the return value from a process started with this method, call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.</source>
          <target state="translated">이 방법으로 시작 하는 프로세스의 반환 값을 필요한 경우 문의 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need to call the delegate synchronously, use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.</source>
          <target state="translated">사용 하 여 대리자를 동기적으로 호출 해야 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 메서드 대신 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>를 호출하여 시작된 비동기 작업을 나타내는 <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>Waits until the process started by calling <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> completes, and then returns the value generated by the process.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>를 호출하여 시작된 프로세스가 완료될 때까지 대기한 다음 프로세스에서 생성된 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value generated by the asynchronous operation.</source>
          <target state="translated">비동기 작업에서 생성된 반환 값을 나타내는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>This method gets the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.</source>
          <target state="translated">이 메서드는가 나타내는 비동기 작업의 반환 값을 가져옵니다는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 이 인터페이스에 의해 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not completed, this method will wait until the result is available.</source>
          <target state="translated">비동기 작업이 완료 되지 않은 경우이 메서드는 결과가 나올 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains a method to call, in the context of the thread for the control.</source>
          <target state="translated">컨트롤의 스레드 컨텍스트에서 호출할 메서드가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments to pass to the given method.</source>
          <target state="translated">주어진 메서드에 전달할 인수를 나타내는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">인수가 필요하지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</source>
          <target state="translated">이 개체를 만든 스레드에서 대리자를 동기적으로 실행하고 만드는 스레드에 대한 호출을 마샬링합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">호출 중인 대리자의 반환 값을 나타내는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>이거나, 대리자에 반환 값이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Unlike <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.</source>
          <target state="translated">와 달리 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>반환 하기 전에 프로세스가 완료 될 때까지 대기,이 메서드는 동기적으로 작동 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions raised during the call are propagated back to the caller.</source>
          <target state="translated">호출 하는 동안 발생 한 예외는 호출자로 다시 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Use this method when calling a method from a different thread to marshal the call to the proper thread.</source>
          <target state="translated">적절 한 스레드에 대 한 호출을 마샬링하 다른 스레드에서 메서드를 호출할 때이 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Gets a value indicating whether the caller must call <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> when calling an object that implements this interface.</source>
          <target state="translated">해당 인터페이스를 구현하는 개체를 호출할 때 호출자에서 <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>를 호출해야 하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the caller must call <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">호출자에서 <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>를 호출해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>This property determines whether the caller must call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.</source>
          <target state="translated">이 속성은 호출자에 게 호출 해야 하는지를 결정 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 때이 인터페이스를 구현 하는 개체에 메서드 호출을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Such objects are bound to a specific thread and are not thread-safe.</source>
          <target state="translated">이러한 개체는 특정 스레드에 바인딩되고 스레드로부터 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>If you are calling a method from a different thread, you must use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.</source>
          <target state="translated">다른 스레드에서 메서드를 호출 하는 경우에 사용 해야는 <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> 메서드를 호출을 적절 한 스레드에 마샬링해야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>