<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e3100d5df8f298b733355b4ac8b472c23b7f225f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a654f-101">별도의 스레드에서 작업을 실행합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a654f-101">Executes an operation on a separate thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-102"><xref:System.ComponentModel.BackgroundWorker> 클래스를 사용 하면 전용 별도 스레드에서 작업을 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="a654f-103">다운로드 및 데이터베이스 트랜잭션과 같은 시간이 많이 걸리는 작업은 사용자 인터페이스 (UI) 실행 하는 동안 응답이 중지 것 처럼 보일 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="a654f-104">이러한 작업으로 인 한 지연이 길어지는 경우 및 응답성이 뛰어난 UI를 구성할 때의 <xref:System.ComponentModel.BackgroundWorker> 클래스는 편리 하 게 솔루션을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="a654f-105">백그라운드에서 시간이 많이 걸리는 작업을 실행 하려면 만듭니다는 <xref:System.ComponentModel.BackgroundWorker> 작업이 끝날 때 신호 및 작업의 진행률을 보고 하는 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="a654f-106">만들 수는 <xref:System.ComponentModel.BackgroundWorker> 프로그래밍 방식으로 하거나에서 폼으로 끌 수는 **구성 요소** 탭은 **도구 상자**합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="a654f-107">만드는 경우는 <xref:System.ComponentModel.BackgroundWorker> Windows Forms 디자이너에서 구성 요소 트레이에 표시 됩니다 및 해당 속성이 속성 창에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="a654f-108">를 설정 하려면 백그라운드 작업에 대 한 추가 대 한 이벤트 처리기는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="a654f-109">이 이벤트 처리기에서 시간이 많이 걸리는 작업을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="a654f-110">작업을 시작 하려면 호출 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="a654f-111">진행률 업데이트의 알림을 받으려는 처리는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a654f-112">작업이 완료 될 때 알림을 받으려는 처리는 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a654f-113">사용자 인터페이스 개체를 조작 하지 않도록 주의 해야 프로그램 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="a654f-114">대신, 사용자 인터페이스를 통해 통신할는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 및 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="a654f-115"><xref:System.ComponentModel.BackgroundWorker> 이벤트에서 마샬링되지는 <xref:System.AppDomain> 경계입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="a654f-116">사용 하지 않는 한 <xref:System.ComponentModel.BackgroundWorker> 둘 이상의에 다중 스레드 작업을 수행 하도록 구성 요소 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="a654f-117">백그라운드 작업에 매개 변수가 필요, 호출 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 프로그램 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="a654f-118">내에서 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기에서 매개 변수를 추출할 수 있습니다는 <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a654f-119"><xref:System.ComponentModel.BackgroundWorker>에 대한 자세한 내용은 [방법: 백그라운드에서 작업 실행](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a654f-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-120">다음 코드 예제에는 기본적인 방법을 보여 줍니다.는 <xref:System.ComponentModel.BackgroundWorker> 시간이 많이 걸리는 작업을 비동기적으로 실행 하기 위한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="a654f-121">다음 그림에서는 출력의 예를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="a654f-122">![BackgroundWorker 간단한 예제](~/add/media/backgroundworker-simple.png "BackgroundWorker 간단한 예제")</span><span class="sxs-lookup"><span data-stu-id="a654f-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="a654f-123">이 코드를 실행 하려면 Windows Forms 응용 프로그램을 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="a654f-124">추가 <xref:System.Windows.Forms.Label> 라는 컨트롤 `resultLabel` 두 개의 추가 <xref:System.Windows.Forms.Button> 라는 컨트롤 `startAsyncButton` 및 `cancelAsyncButton`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="a654f-125">만들 <xref:System.Windows.Forms.Control.Click> 두 단추에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="a654f-126">**구성 요소** 탭 추가 도구 상자의 한 <xref:System.ComponentModel.BackgroundWorker> 라는 구성 요소가 `backgroundWorker1`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="a654f-127">만들 <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, 및 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 에 대 한 이벤트 처리기는 <xref:System.ComponentModel.BackgroundWorker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="a654f-128">폼의 코드에서 기존 코드를 다음 코드로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="a654f-129">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker> 시간이 많이 걸리는 작업을 비동기적으로 실행 하기 위한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="a654f-130">다음 그림에서는 출력의 예를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="a654f-131">![BackgroundWorker 피보나치 예제](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker 피보나치 예제")</span><span class="sxs-lookup"><span data-stu-id="a654f-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="a654f-132">작업을 선택한 피보나치 수를 계산 하 고, 계산이 진행 됨에 따라 진행률 업데이트를 보고, 보류 중인 계산을 취소할 수를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a654f-133">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-133">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-134">이 생성자는 <xref:System.ComponentModel.BackgroundWorker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-134">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a654f-135">보류 중인 백그라운드 작업의 취소를 요청합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-135">Requests cancellation of a pending background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 보류 중인 백그라운드 작업을 종료 하는 요청을 제출 하 고 설정 하는 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="a654f-137">호출 하는 경우 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, 작업자 메서드는 해당 실행 및 종료를 중지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-137">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="a654f-138">작업자 코드 정기적으로 확인 해야는 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 로 설정 된 속성 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-138">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a654f-139">알아야 하는 코드에는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 로 설정 되 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-139">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a654f-140">이 경우에 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 플래그가 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 에 프로그램 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트 처리기 설정 하지 것입니다 `true`취소가 요청 된 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-140">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a654f-141">이 경우 호출 됩니다는 *경합 상태* 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-141">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a654f-142">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 [관리 되는 스레딩 유용한](~/docs/standard/threading/managed-threading-best-practices.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-142">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-143">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 메서드를 비동기 ("백그라운드") 작업을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-143">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="a654f-144">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-144">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a654f-145">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />가 <see langword="false" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-145">
              <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-146">응용 프로그램에서 백그라운드 작업의 취소를 요청했는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-146">Gets a value indicating whether the application has requested cancellation of a background operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a654f-147">응용 프로그램에서 백그라운드 작업의 취소를 요청했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-147">
              <see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a654f-148">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-148">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-149">경우 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 은 `true`, 하면 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 에서 메서드가 호출 된는 <xref:System.ComponentModel.BackgroundWorker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-149">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="a654f-150">이 속성은 정기적으로 확인 해야 하는 작업자 스레드에서 사용 하기 위해 사용 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 로 설정 된 경우 백그라운드 작업을 중단 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-150">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-151">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 속성을 쿼리 한 <xref:System.ComponentModel.BackgroundWorker> 취소 상태에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-151">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="a654f-152">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-152">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-153">
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />가 호출될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-153">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-154">호출 하는 경우이 이벤트는 발생 된 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a654f-154">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="a654f-155">이 잠재적으로 시간이 많이 걸리는 작업을 수행 하 여 작업을 시작 하는 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-155">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="a654f-156">코드에는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 정기적으로 확인 해야 이벤트 처리기는 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 속성 값과 이면 작업 중단 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-156">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="a654f-157">이 문제가 발생 하는 경우 설정할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 플래그가 <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> 를 `true`, 및 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 플래그가 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 에 프로그램 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트 처리기로 설정 됩니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-157">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a654f-158">알아야 하는 코드에는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 로 설정 되 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-158">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a654f-159">이 경우에 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 플래그가 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 에 프로그램 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트 처리기 설정 하지 것입니다 `true`취소가 요청 된 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-159">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a654f-160">이 경우 호출 됩니다는 *경합 상태* 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-160">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a654f-161">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 [관리 되는 스레딩 유용한](~/docs/standard/threading/managed-threading-best-practices.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-161">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="a654f-162">작업에서 결과 생성 하는 경우 결과를 할당할 수 있습니다는 <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-162">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a654f-163">이를 사용할 수 있습니다는 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 의 이벤트 처리기는 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-163">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a654f-164">작업 코드를 처리 하지 않는 경우 예외가 발생 하는 경우는 <xref:System.ComponentModel.BackgroundWorker> 예외를 catch 하 고 전달에 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트 처리기를으로 노출 됩니다는 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> 속성 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-164">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a654f-165">디버거는에서 지점에서 중단 하면 Visual Studio 디버거를 실행 하는 경우는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 처리 되지 않은 예외가 발생 하는 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-165">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="a654f-166">여러 개 있는 경우 <xref:System.ComponentModel.BackgroundWorker>, 있습니다 참조 하지 않아야 하면 그 중 하나를 직접이 결합 하는 대로 사용자 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기의 특정 인스턴스에 <xref:System.ComponentModel.BackgroundWorker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-166">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="a654f-167">에 액세스 해야 대신 프로그램 <xref:System.ComponentModel.BackgroundWorker> 캐스팅 하 여는 `sender` 매개 변수에서 프로그램 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-167">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="a654f-168">사용자 인터페이스 개체를 조작 하지 않도록 주의 해야 프로그램 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-168">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="a654f-169">대신, 사용자 인터페이스를 통해 통신할는 <xref:System.ComponentModel.BackgroundWorker> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-169">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="a654f-170">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-170">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-171">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트를 비동기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-171">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="a654f-172">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-172">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-173">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 비동기 작업을 실행하고 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-173">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a654f-174">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 비동기 작업을 실행하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-174">
              <see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-175"><xref:System.ComponentModel.BackgroundWorker> 호출할 때 비동기 작업을 시작 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-175">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-176">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> 속성의 완료를 기다리는 <xref:System.ComponentModel.BackgroundWorker> 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-176">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="a654f-177">이 코드 예제는에 설명 된 큰 예제의 일부 [하는 방법: 백그라운드에서 파일 다운로드](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-177">This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="a654f-178">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-178">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-179">
            <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-179">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="a654f-180">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-180">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-181">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-181">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-182">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a654f-183">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a654f-184">또한 <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-184">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a654f-185">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-186">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> 메서드를 비동기 작업의 진행률을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-186">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="a654f-187">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-187">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a654f-188">파생 클래스에서 <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> 메서드를 호출해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a654f-188">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="a654f-189">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-189">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-190">
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-190">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-191">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="a654f-192">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="a654f-193">또한 <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-193">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="a654f-194">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a654f-195">파생 클래스에서 <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> 메서드를 호출해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a654f-195">When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</span>
            </span>
          </para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-196">
            <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />가 호출될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-196">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-197">호출 하는 경우이 이벤트는 발생 된 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a654f-197">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="a654f-198">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-198">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-199">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-199">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a654f-200">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-200">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-201">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-201">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="a654f-202">백그라운드 작업의 완료율(0부터 100까지)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-202">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-203">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-203">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-204">백그라운드 작업 진행 상태를 보고 하기 위해 필요한 경우 호출할 수 있습니다는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 를 발생 시키는 메서드는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-204">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a654f-205"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> 속성 값 이어야 `true`, 또는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> throw 됩니다는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-205">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a654f-206">것은 전체 작업의 백분율 백그라운드 작업의 진행률을 측정의 의미 있는 방식으로 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-206">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="a654f-207">에 대 한 호출에서 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 메서드는 비동기적 이며 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-207">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="a654f-208"><xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트 처리기를 생성 하는 스레드에서 실행은 <xref:System.ComponentModel.BackgroundWorker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-208">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-209">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 메서드를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-209">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a654f-210">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-210">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a654f-211">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 속성은 <see langword="false" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-211">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="a654f-212">백그라운드 작업의 완료율(0부터 100까지)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-212">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="a654f-213">
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />로 전달된 상태 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-213">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-214">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 이벤트를 발생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-214">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-215">백그라운드 작업 진행 상태를 보고 하기 위해 필요한 경우 호출할 수 있습니다는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 를 발생 시키는 메서드는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-215">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="a654f-216"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> 속성 값이 있어야 `true`, 또는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> throw 됩니다는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-216">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a654f-217">것은 전체 작업의 백분율 백그라운드 작업의 진행률을 측정의 의미 있는 방식으로 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-217">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-218">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 메서드를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-218">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="a654f-219">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Windows.Forms.ToolStripProgressBar> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-219">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a654f-220">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 속성은 <see langword="false" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-220">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-221">백그라운드 작업의 실행을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-221">Starts execution of a background operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a654f-222">백그라운드 작업의 실행을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-222">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-223"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 메서드를 비동기적으로 실행할 작업을 시작 하는 요청을 제출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-223">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="a654f-224">요청이 서비스 되는 경우는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트가 다시 시작 되는 백그라운드 작업을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-224">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="a654f-225">백그라운드 작업이 이미 실행 중인 경우 호출 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 다시에서 발생 한 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-225">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-226">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 메서드를 비동기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-226">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="a654f-227">설명 하는 보다 큰 예제의의 일부인 [하는 방법: 백그라운드에서 파일 다운로드](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-227">It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a654f-228">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" />가 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-228">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">
          <span data-ttu-id="a654f-229">
            <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 이벤트 처리기에서 실행될 백그라운드 작업에서 사용하는 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-229">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a654f-230">백그라운드 작업의 실행을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-230">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-231"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 메서드를 비동기적으로 실행할 작업을 시작 하는 요청을 제출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-231">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="a654f-232">요청이 서비스 되는 경우는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트가 다시 시작 되는 백그라운드 작업을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-232">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="a654f-233">작업 매개 변수를 필요를 제공할 수 있습니다는 `argument` 매개 변수를 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-233">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="a654f-234">백그라운드 작업이 이미 실행 중인 경우 호출 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 다시에서 발생 한 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-234">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-235">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 메서드를 비동기 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-235">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="a654f-236">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-236">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a654f-237">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" />가 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-237">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-238">백그라운드 작업이 완료되거나 취소되거나 예외를 발생시켰을 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-238">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-239">이 이벤트는 경우는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-239">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="a654f-240">작업이 성공적으로 완료 되 고 그 결과에 할당 된는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기를 통해 결과 액세스할 수 있습니다는 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-240">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a654f-241"><xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> 속성 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 예외가 해당 작업에서 throw 된 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-241">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="a654f-242"><xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 속성 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 백그라운드 작업에서 취소 요청이 처리 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-242">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="a654f-243">하는 경우 코드에는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 이벤트 처리기를 확인 하 여 취소 요청을 감지는 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 설정과 플래그는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 플래그가 <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> 를 `true`, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 플래그가 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 로 설정 됩니다 `true`.</span><span class="sxs-lookup"><span data-stu-id="a654f-243">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a654f-244">알아야 하는 코드에는 <xref:System.ComponentModel.BackgroundWorker.DoWork> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> 로 설정 되 고 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-244">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="a654f-245">이 경우에 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 플래그가 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> 에 프로그램 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 이벤트 처리기 설정 하지 것입니다 `true`취소가 요청 된 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-245">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="a654f-246">이 경우 호출 됩니다는 *경합 상태* 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-246">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="a654f-247">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 [관리 되는 스레딩 유용한](~/docs/standard/threading/managed-threading-best-practices.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-247">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="a654f-248">프로그램 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 항상 확인 해야 이벤트 처리기는 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> 및 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> 속성에 액세스 하기 전에 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> 속성.</span><span class="sxs-lookup"><span data-stu-id="a654f-248">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a654f-249">예외가 발생 했는지 또는 작업을 취소 된 경우에 액세스 하는 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> 속성에서 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-249">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a654f-250">다음 코드 예제에서는 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 비동기 작업의 결과 처리 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-250">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="a654f-251">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.BackgroundWorker> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-251">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-252">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 진행률 업데이트를 보고할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-252">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a654f-253">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 진행률 업데이트를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-253">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a654f-254">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-254">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-255">설정의 <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> 속성을 `true` 하려는 경우는 <xref:System.ComponentModel.BackgroundWorker> 진행률 업데이트를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-255">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="a654f-256">이 속성이 `true`, 사용자 코드를 호출할 수는 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> 를 발생 시키는 메서드는 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-256">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a654f-257">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 비동기 취소를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-257">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a654f-258">
            <see cref="T:System.ComponentModel.BackgroundWorker" />가 취소를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-258">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a654f-259">기본값은 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a654f-259">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a654f-260">설정의 <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> 속성을 `true` 하려는 경우는 <xref:System.ComponentModel.BackgroundWorker> 취소를 지원 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a654f-260">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="a654f-261">이 속성이 `true`를 호출할 수 있습니다는 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 백그라운드 작업을 중단 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="a654f-261">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
  </Members>
</Type>