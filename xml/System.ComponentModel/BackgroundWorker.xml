<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BackgroundWorker.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e3100d5df8f298b733355b4ac8b472c23b7f225f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3100d5df8f298b733355b4ac8b472c23b7f225f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Executes an operation on a separate thread.</source>
          <target state="translated">별도의 스레드에서 작업을 실행합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스를 사용 하면 전용 별도 스레드에서 작업을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</source>
          <target state="translated">다운로드 및 데이터베이스 트랜잭션과 같은 시간이 많이 걸리는 작업은 사용자 인터페이스 (UI) 실행 하는 동안 응답이 중지 것 처럼 보일 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.</source>
          <target state="translated">이러한 작업으로 인 한 지연이 길어지는 경우 및 응답성이 뛰어난 UI를 구성할 때의 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스는 편리 하 게 솔루션을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To execute a time-consuming operation in the background, create a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.</source>
          <target state="translated">백그라운드에서 시간이 많이 걸리는 작업을 실행 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 작업이 끝날 때 신호 및 작업의 진행률을 보고 하는 이벤트를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 프로그래밍 방식으로 하거나에서 폼으로 끌 수는 <bpt id="p1">**</bpt>구성 요소<ept id="p1">**</ept> 탭은 <bpt id="p2">**</bpt>도구 상자<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If you create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</source>
          <target state="translated">만드는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> Windows Forms 디자이너에서 구성 요소 트레이에 표시 됩니다 및 해당 속성이 속성 창에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To set up for a background operation, add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
          <target state="translated">를 설정 하려면 백그라운드 작업에 대 한 추가 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Call your time-consuming operation in this event handler.</source>
          <target state="translated">이 이벤트 처리기에서 시간이 많이 걸리는 작업을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To start the operation, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">작업을 시작 하려면 호출 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive notifications of progress updates, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">진행률 업데이트의 알림을 받으려는 처리는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive a notification when the operation is completed, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
          <target state="translated">작업이 완료 될 때 알림을 받으려는 처리는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">사용자 인터페이스 개체를 조작 하지 않도록 주의 해야 프로그램 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.</source>
          <target state="translated">대신, 사용자 인터페이스를 통해 통신할는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 이벤트에서 마샬링되지는 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 경계입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Do not use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">사용 하지 않는 한 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 둘 이상의에 다중 스레드 작업을 수행 하도록 구성 요소 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If your background operation requires a parameter, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.</source>
          <target state="translated">백그라운드 작업에 매개 변수가 필요, 호출 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 프로그램 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Inside the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">내에서 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기에서 매개 변수를 추출할 수 있습니다는 <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>에 대한 자세한 내용은 <bpt id="p1">[</bpt>방법: 백그라운드에서 작업 실행<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the basics of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">다음 코드 예제에는 기본적인 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 시간이 많이 걸리는 작업을 비동기적으로 실행 하기 위한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">다음 그림에서는 출력의 예를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker simple example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker simple example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>BackgroundWorker 간단한 예제<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker 간단한 예제<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To try this code, create a Windows Forms application.</source>
          <target state="translated">이 코드를 실행 하려면 Windows Forms 응용 프로그램을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id="ph2">`resultLabel`</ph> and add two <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls named <ph id="ph4">`startAsyncButton`</ph> and <ph id="ph5">`cancelAsyncButton`</ph>.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 라는 컨트롤 <ph id="ph2">`resultLabel`</ph> 두 개의 추가 <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 컨트롤 <ph id="ph4">`startAsyncButton`</ph> 및 <ph id="ph5">`cancelAsyncButton`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handlers for both buttons.</source>
          <target state="translated">만들 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 두 단추에 대 한 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the Toolbox, add a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component named <ph id="ph2">`backgroundWorker1`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>구성 요소<ept id="p1">**</ept> 탭 추가 도구 상자의 한 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 라는 구성 요소가 <ph id="ph2">`backgroundWorker1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, and <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers for the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">만들 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 에 대 한 이벤트 처리기는 <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>In the code for the form, replace the existing code with the following code.</source>
          <target state="translated">폼의 코드에서 기존 코드를 다음 코드로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 시간이 많이 걸리는 작업을 비동기적으로 실행 하기 위한 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">다음 그림에서는 출력의 예를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker Fibonacci example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker Fibonacci example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>BackgroundWorker 피보나치 예제<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker 피보나치 예제<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</source>
          <target state="translated">작업을 선택한 피보나치 수를 계산 하 고, 계산이 진행 됨에 따라 진행률 업데이트를 보고, 보류 중인 계산을 취소할 수를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Requests cancellation of a pending background operation.</source>
          <target state="translated">보류 중인 백그라운드 작업의 취소를 요청합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> 보류 중인 백그라운드 작업을 종료 하는 요청을 제출 하 고 설정 하는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 속성을 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>When you call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, 작업자 메서드는 해당 실행 및 종료를 중지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The worker code should periodically check the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">작업자 코드 정기적으로 확인 해야는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 로 설정 된 속성 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">알아야 하는 코드에는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 로 설정 되 고 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 의 플래그가 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 에 프로그램 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트 처리기 설정 하지 것입니다 <ph id="ph4">`true`</ph>취소가 요청 된 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">이 경우 호출 됩니다는 <bpt id="p1">*</bpt>경합 상태<ept id="p1">*</ept> 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 <bpt id="p1">[</bpt>관리 되는 스레딩 유용한<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to cancel an asynchronous ("background") operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> 메서드를 비동기 ("백그라운드") 작업을 취소 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph>가 <ph id="ph2">&lt;see langword="false" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>Gets a value indicating whether the application has requested cancellation of a background operation.</source>
          <target state="translated">응용 프로그램에서 백그라운드 작업의 취소를 요청했는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the application has requested cancellation of a background operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">응용 프로그램에서 백그라운드 작업의 취소를 요청했으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, 하면 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> 에서 메서드가 호출 된는 <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This property is meant for use by the worker thread, which should periodically check <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성은 정기적으로 확인 해야 하는 작업자 스레드에서 사용 하기 위해 사용 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 로 설정 된 경우 백그라운드 작업을 중단 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to query a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> about its cancellation state.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 속성을 쿼리 한 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 취소 상태에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph>가 호출될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
          <target state="translated">호출 하는 경우이 이벤트는 발생 된 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This is where you start the operation that performs the potentially time-consuming work.</source>
          <target state="translated">이 잠재적으로 시간이 많이 걸리는 작업을 수행 하 여 작업을 시작 하는 위치입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">코드에는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 정기적으로 확인 해야 이벤트 처리기는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 속성 값과 이면 작업 중단 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>When this occurs, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">이 문제가 발생 하는 경우 설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 의 플래그가 <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph3">`true`</ph>, 및 <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 의 플래그가 <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 에 프로그램 <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트 처리기로 설정 됩니다 <ph id="ph7">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">알아야 하는 코드에는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 로 설정 되 고 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 의 플래그가 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 에 프로그램 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트 처리기 설정 하지 것입니다 <ph id="ph4">`true`</ph>취소가 요청 된 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">이 경우 호출 됩니다는 <bpt id="p1">*</bpt>경합 상태<ept id="p1">*</ept> 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 <bpt id="p1">[</bpt>관리 되는 스레딩 유용한<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If your operation produces a result, you can assign the result to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">작업에서 결과 생성 하는 경우 결과를 할당할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">이를 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 의 이벤트 처리기는 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If the operation raises an exception that your code does not handle, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">작업 코드를 처리 하지 않는 경우 예외가 발생 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 예외를 catch 하 고 전달에 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트 처리기를으로 노출 됩니다는 <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 속성 <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.</source>
          <target state="translated">디버거는에서 지점에서 중단 하면 Visual Studio 디버거를 실행 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 처리 되지 않은 예외가 발생 하는 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you have more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">여러 개 있는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, 있습니다 참조 하지 않아야 하면 그 중 하나를 직접이 결합 하는 대로 사용자 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기의 특정 인스턴스에 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, you should access your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id="ph2">`sender`</ph> parameter in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">에 액세스 해야 대신 프로그램 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 캐스팅 하 여는 <ph id="ph2">`sender`</ph> 매개 변수에서 프로그램 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">사용자 인터페이스 개체를 조작 하지 않도록 주의 해야 프로그램 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
          <target state="translated">대신, 사용자 인터페이스를 통해 통신할는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>NIB: 이벤트 사용<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event to start an asynchronous operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트를 비동기 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 비동기 작업을 실행하고 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 비동기 작업을 실행하고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 호출할 때 비동기 작업을 시작 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> property to wait for completion of a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operation.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> 속성의 완료를 기다리는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 작업 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>This code example is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">이 코드 예제는에 설명 된 큰 예제의 일부 <bpt id="p1">[</bpt>하는 방법: 백그라운드에서 파일 다운로드<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method to report the progress of an asynchronous operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> 메서드를 비동기 작업의 진행률을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph>가 호출될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.</source>
          <target state="translated">호출 하는 경우이 이벤트는 발생 된 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>NIB: 이벤트 사용<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">백그라운드 작업의 완료율(0부터 100까지)입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">백그라운드 작업 진행 상태를 보고 하기 위해 필요한 경우 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 를 발생 시키는 메서드는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> 속성 값 이어야 <ph id="ph2">`true`</ph>, 또는 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> throw 됩니다는 <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">것은 전체 작업의 백분율 백그라운드 작업의 진행률을 측정의 의미 있는 방식으로 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.</source>
          <target state="translated">에 대 한 호출에서 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 메서드는 비동기적 이며 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트 처리기를 생성 하는 스레드에서 실행은 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 메서드를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">백그라운드 작업의 완료율(0부터 100까지)입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The state object passed to <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>로 전달된 상태 개체입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">백그라운드 작업 진행 상태를 보고 하기 위해 필요한 경우 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 를 발생 시키는 메서드는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> 속성 값이 있어야 <ph id="ph2">`true`</ph>, 또는 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> throw 됩니다는 <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">것은 전체 작업의 백분율 백그라운드 작업의 진행률을 측정의 의미 있는 방식으로 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 메서드를 사용자에 게는 비동기 작업의 진행률을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Starts execution of a background operation.</source>
          <target state="translated">백그라운드 작업의 실행을 시작합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>Starts execution of a background operation.</source>
          <target state="translated">백그라운드 작업의 실행을 시작합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 메서드를 비동기적으로 실행할 작업을 시작 하는 요청을 제출 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">요청이 서비스 되는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트가 다시 시작 되는 백그라운드 작업을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">백그라운드 작업이 이미 실행 중인 경우 호출 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 다시에서 발생 한 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 메서드를 비동기 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>It is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">설명 하는 보다 큰 예제의의 일부인 <bpt id="p1">[</bpt>하는 방법: 백그라운드에서 파일 다운로드<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph>가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>A parameter for use by the background operation to be executed in the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event handler.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> 이벤트 처리기에서 실행될 백그라운드 작업에서 사용하는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>Starts execution of a background operation.</source>
          <target state="translated">백그라운드 작업의 실행을 시작합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 메서드를 비동기적으로 실행할 작업을 시작 하는 요청을 제출 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">요청이 서비스 되는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트가 다시 시작 되는 백그라운드 작업을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If your operation requires a parameter, you can provide it as the <ph id="ph1">`argument`</ph> parameter to <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">작업 매개 변수를 필요를 제공할 수 있습니다는 <ph id="ph1">`argument`</ph> 매개 변수를 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">백그라운드 작업이 이미 실행 중인 경우 호출 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 다시에서 발생 한 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> 메서드를 비동기 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph>가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Occurs when the background operation has completed, has been canceled, or has raised an exception.</source>
          <target state="translated">백그라운드 작업이 완료되거나 취소되거나 예외를 발생시켰을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This event is raised when the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.</source>
          <target state="translated">이 이벤트는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If the operation completes successfully and its result is assigned in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">작업이 성공적으로 완료 되 고 그 결과에 할당 된는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기를 통해 결과 액세스할 수 있습니다는 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates that an exception was thrown by the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 예외가 해당 작업에서 throw 된 나타냅니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates whether a cancellation request was processed by the background operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 백그라운드 작업에서 취소 요청이 처리 되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>, the <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> also will be set to <ph id="ph8">`true`</ph>.</source>
          <target state="translated">하는 경우 코드에는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 이벤트 처리기를 확인 하 여 취소 요청을 감지는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 설정과 플래그는 <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 의 플래그가 <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph5">`true`</ph>, <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 의 플래그가 <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 로 설정 됩니다 <ph id="ph8">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">알아야 하는 코드에는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 취소 요청 되 고 만들어지고 폴링 루프를 놓칠 수 면 이벤트 처리기가 작업을 종료할 수 있습니다 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> 로 설정 되 고 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 의 플래그가 <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 에 프로그램 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 이벤트 처리기 설정 하지 것입니다 <ph id="ph4">`true`</ph>취소가 요청 된 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">이 경우 호출 됩니다는 <bpt id="p1">*</bpt>경합 상태<ept id="p1">*</ept> 되 다중 스레드 프로그래밍의 일반적인 문제입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">다중 스레드 디자인에 대 한 자세한 내용은 문제, 참조 <bpt id="p1">[</bpt>관리 되는 스레딩 유용한<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> properties before accessing the <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">프로그램 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 항상 확인 해야 이벤트 처리기는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> 속성에 액세스 하기 전에 <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If an exception was raised or if the operation was canceled, accessing the <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property raises an exception.</source>
          <target state="translated">예외가 발생 했는지 또는 작업을 취소 된 경우에 액세스 하는 <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> 속성에서 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event to handle the result of an asynchronous operation.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> 비동기 작업의 결과 처리 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> can report progress updates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 진행률 업데이트를 보고할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports progress updates; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 진행률 업데이트를 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph> 하려는 경우는 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 진행률 업데이트를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>When this property is <ph id="ph1">`true`</ph>, user code can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">이 속성이 <ph id="ph1">`true`</ph>, 사용자 코드를 호출할 수는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> 를 발생 시키는 메서드는 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports asynchronous cancellation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 비동기 취소를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports cancellation; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph>가 취소를 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph> 하려는 경우는 <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 취소를 지원 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>When this property is <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.</source>
          <target state="translated">이 속성이 <ph id="ph1">`true`</ph>를 호출할 수 있습니다는 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> 백그라운드 작업을 중단 하는 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>