<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncCompletedEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59536ea1bbd455f045b8bf42ca811c20c2823cc54.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9536ea1bbd455f045b8bf42ca811c20c2823cc54</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Provides data for the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> event.</source>
          <target state="translated"><bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If you are using a class that implements the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, the class will provide a <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph1">`Completed`</ph> event.</source>
          <target state="translated">구현 하는 클래스를 사용 하는 경우는 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>는 클래스를 제공 합니다는 <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept> <ph id="ph1">`Completed`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If you add an instance of the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType&gt;</ph> delegate to the event, you will receive information about the outcome of asynchronous operations in the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> parameter of the corresponding event-handler method.</source>
          <target state="translated">인스턴스를 추가 하는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType&gt;</ph> 위임에서 비동기 작업의 결과 대 한 정보는 이벤트를 받습니다는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> 해당 이벤트 처리기 메서드의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The client application's event-handler delegate can check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property to determine if the asynchronous task was cancelled.</source>
          <target state="translated">클라이언트 응용 프로그램의 이벤트 처리기 대리자를 확인할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 속성을 확인 하는 경우 비동기 작업이 취소 되었습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The client application's event-handler delegate can check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property to determine if an exception occurred during execution of the asynchronous task.</source>
          <target state="translated">클라이언트 응용 프로그램의 이벤트 처리기 대리자를 확인할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 속성을 비동기 작업을 실행 하는 동안 예외가 발생 했는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event by checking the value of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
          <target state="translated">클래스에서 여러 비동기 메서드 또는 동일한 비동기 메서드를 여러 번 호출을 지 원하는 경우 발생 시킨 작업 확인할 수 있습니다는 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">`Completed`</ph> 의 값을 확인 하 여 이벤트는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</source>
          <target state="translated">코드의 해당 비동기 작업 시작 되 고 완료 하는 때 작업 Id 라고 하는 해당이 토큰을 추적 해야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 를 비동기 작업의 수명을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations.</source>
          <target state="translated">이벤트 기반 비동기 패턴을 따르는 클래스를 클라이언트에 알릴 보류 중인 비동기 작업의 상태에 대 한 이벤트를 발생 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If the class provides a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> event, you can use the <ph id="ph2">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> to tell clients about the outcome of asynchronous operations.</source>
          <target state="translated">클래스를 제공 하는 경우는 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">&lt;see langword="Completed" /&gt;</ph> 사용할 수 이벤트는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 비동기 작업의 결과 대 한 클라이언트를 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>You may want to communicate to clients more information about the outcome of an asynchronous operation than an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> accommodates.</source>
          <target state="translated">클라이언트에 전달 하려는 경우 보다는 비동기 작업의 결과 대 한 자세한 정보는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 수용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>In this case, you can derive your own class from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class and provide additional private instance variables and corresponding read-only public properties.</source>
          <target state="translated">고유한 클래스를 파생 하는 경우에 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 클래스 및 추가 전용 인스턴스 변수 및 해당 읽기 전용 공용 속성을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method before returning the property value, in case the operation was canceled or an error occurred.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> 작업이 취소 되거나 오류가 발생 한 경우 속성 값을 반환 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>Any error that occurred during the asynchronous operation.</source>
          <target state="translated">비동기 작업 중 발생한 오류입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>A value indicating whether the asynchronous operation was canceled.</source>
          <target state="translated">비동기 작업이 취소되었는지 여부를 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>The optional user-supplied state object passed to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph> 메서드에 전달되는 사용자가 제공한 선택적인 상태 개체입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>Gets a value indicating whether an asynchronous operation has been canceled.</source>
          <target state="translated">비동기 작업이 취소되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the background operation has been canceled; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">백그라운드 작업이 취소되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>When the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the asynchronous operation was interrupted.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>, 비동기 작업이 중단 되었습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The client application's event-handler delegate should check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property before accessing any properties in a class derived from <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> if the asynchronous operation was interrupted.</source>
          <target state="translated">클라이언트 응용 프로그램의 이벤트 처리기 대리자 확인 해야는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 에서 파생 된 클래스에서 속성에 액세스 하기 전에 속성을 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>, 그렇지 않으면 속성에서 발생 한 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> 비동기 작업이 이면 중단 되었습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The following code example demonstrates the using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제에서 사용 하 여 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 를 비동기 작업의 수명을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>If you provide read-only properties in a derived class, be sure to call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method.</source>
          <target state="translated">파생된 클래스에서 읽기 전용 속성을 제공 하는 경우 호출 해야는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">따라서 클라이언트를에서 비동기 작업의 오류 때문에 유효 하지 않을 수 있는 속성에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>Gets a value indicating which error occurred during an asynchronous operation.</source>
          <target state="translated">비동기 작업 중 발생한 오류를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instance, if an error occurred during an asynchronous operation; otherwise <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">비동기 작업 중 오류가 발생했으면 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> 인스턴스이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>If an exception is raised during an asynchronous operation, the class will assign the exception to the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property.</source>
          <target state="translated">클래스는 비동기 작업 중에 예외가 발생 하는 경우에 대 한 예외를 할당 합니다는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The client application's event-handler delegate should check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property before accessing any properties in a class derived from <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise a <ph id="ph3">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> with its <ph id="ph4">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property holding a reference to <ph id="ph5">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>.</source>
          <target state="translated">클라이언트 응용 프로그램의 이벤트 처리기 대리자 확인 해야는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 에서 파생 된 클래스에서 속성에 액세스 하기 전에 속성 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>, 그렇지 않으면 속성에서 발생 한 <ph id="ph3">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> 와 해당 <ph id="ph4">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 지주는 에 대 한 참조 <ph id="ph5">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The value of the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property is <ph id="ph2">`null`</ph> if the operation was canceled.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> 속성은 <ph id="ph2">`null`</ph> 작업이 취소 되었습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 를 비동기 작업의 수명을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>If you provide read-only properties in a derived class, be sure to call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method in your property implementation.</source>
          <target state="translated">파생된 클래스에서 읽기 전용 속성을 제공 하는 경우 호출 해야는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> 속성 구현에서 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">따라서 클라이언트를에서 비동기 작업의 오류 때문에 유효 하지 않을 수 있는 속성에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>Raises a user-supplied exception if an asynchronous operation failed.</source>
          <target state="translated">비동기 작업에 실패한 경우 사용자가 제공한 예외를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A&gt;</ph> in derived class properties.</source>
          <target state="translated">다음 코드 예제를 사용 하 여 보여 줍니다. <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A&gt;</ph> 파생 된 클래스 속성입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> property has been set by the asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> 속성이 비동기 작업에서 설정된 경우</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property holds a reference to <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> 속성에는 <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph>에 대한 참조가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>If you have derived your own class from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class, your read-only properties should call the <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method before returning the property value.</source>
          <target state="translated">고유한 클래스를 파생 하는 경우는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> 읽기 전용 속성을 호출 해야 클래스는 <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> 속성 값을 반환 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>If the component's asynchronous worker code assigns an exception to the <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> property or sets the <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> property to <ph id="ph3">&lt;see langword="true" /&gt;</ph>, the property will raise an exception if a client tries to read its value.</source>
          <target state="translated">구성 요소의 비동기 작업자 코드에 대 한 예외를 할당는 <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> 속성 또는 설정은 <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> 속성을 <ph id="ph3">&lt;see langword="true" /&gt;</ph>, 속성 값을 읽으려고 시도 하면 클라이언트 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">따라서 클라이언트를에서 비동기 작업의 오류 때문에 유효 하지 않을 수 있는 속성에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>Gets the unique identifier for the asynchronous task.</source>
          <target state="translated">비동기 작업의 고유 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>An object reference that uniquely identifies the asynchronous task; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no value has been set.</source>
          <target state="translated">비동기 작업을 고유하게 식별하는 개체 참조이거나, 설정된 값이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event by checking the value of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
          <target state="translated">클래스에서 여러 비동기 메서드를 또는 여러 단일 메서드 호출을 지 원하는 경우 발생 시킨 작업 확인할 수 있습니다는 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">`Completed`</ph> 의 값을 확인 하 여 이벤트는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</source>
          <target state="translated">코드의 해당 비동기 작업 시작 되 고 완료 하는 때 작업 Id 라고 하는 해당이 토큰을 추적 해야 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>The value of this property is set during the original call to the asynchronous method that started the task.</source>
          <target state="translated">이 속성의 값은 원래 작업을 시작 하는 비동기 메서드를 호출 하는 동안 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 를 비동기 작업의 수명을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>