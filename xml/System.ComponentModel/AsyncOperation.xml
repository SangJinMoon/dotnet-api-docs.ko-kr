<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="57662-101">비동기 작업의 수명을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57662-102">에 따라 클래스를 구현 하는 경우는 [이벤트 기반 비동기 패턴 개요](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), 클래스 인스턴스에서 호출 된 각 비동기 작업의 수명을 추적 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="57662-103"><xref:System.ComponentModel.AsyncOperation> 클래스를 추적 하 고 비동기 작업의 진행률을 보고 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="57662-104">다음 목록에는 사용 하는 방법을 식별 하는 <xref:System.ComponentModel.AsyncOperation> 개체:</span><span class="sxs-lookup"><span data-stu-id="57662-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="57662-105">클라이언트에 진행률 및 중간 결과 보고 하기 위해 호출 <xref:System.ComponentModel.AsyncOperation.Post%2A> 작업자 비동기 코드에서.</span><span class="sxs-lookup"><span data-stu-id="57662-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="57662-106">비동기 작업을 완료 메시지가 또는 보류 중인 비동기 작업을 취소 하려면 호출 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="57662-107">클래스에서 발생 해야는 <xref:System.ComponentModel.AsyncOperation> 호출 하 여 각 비동기 작업에 대 한 개체 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 각 작업을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="57662-108">별도 비동기 작업을 구분 하기 위해 클라이언트에 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 는 고유한 클라이언트 제공 토큰이 됨에 대 한 매개 변수는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="57662-109">그런 다음 사용할 수 있습니다 클라이언트 코드에서 진행 상태나 완료 이벤트를 발생 시킨 특정 비동기 작업을 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57662-110">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperation> 비동기 작업의 수명을 추적 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="57662-111">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="57662-112">전체 코드 목록을 참조 하십시오. [하는 방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소를 구현](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="57662-113">클라이언트의 전체 코드 목록을 참조 하십시오. [하는 방법: 이벤트 기반 비동기 패턴의 클라이언트 구현](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="57662-114">구현자는 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 및 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 비동기가 특정 응용 프로그램에 비동기 동작 가정 하는 경우 잠재적인 스택 오버플로 클래스 라이브러리 공급자와 고려할 필요가 없습니다 시계의 발생 하는 모델입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
 <span data-ttu-id="57662-115">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57662-116">비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-116">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57662-117">비동기 작업의 수명을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="57662-117">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57662-118">호출 된 <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> 메서드를 비동기 작업의 수명을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="57662-118">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="57662-119">이 메서드는 특정 작업에 대 한 호출 되 면 해당 호출 <xref:System.ComponentModel.AsyncOperation> 하면 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-119">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="57662-120"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />가 이 작업에 대해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="57662-120"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="57662-121">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-121">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="57662-122"><c>d</c> 매개 변수에 포함된 대리자에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-122">An argument for the delegate contained in the <c>d</c> parameter.</span></span></param>
        <summary><span data-ttu-id="57662-123">응용 프로그램 모델에 적절한 스레드나 컨텍스트에서 대리자를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-123">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57662-124"><xref:System.ComponentModel.AsyncOperation.Post%2A> 메서드가 호출 하 여 지정 된 대리자는 `arg` 비동기 작업의 수명의 끝내 지 않고 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-124">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="57662-125">호출할 수 있습니다는 <xref:System.ComponentModel.AsyncOperation.Post%2A> 메서드를 호출 하 여 비동기 작업의 수명을 종료 되지 않은 동안 원하는 만큼 자주 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-125">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="57662-126">클라이언트에 진행률 또는 중간 결과 다시 보고 하는 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-126">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="57662-127">`d` 매개 변수는 호출된 될 대리자는 비동기 작업의 상태에 대 한 업데이트를 게시 하려는 경우를 래핑합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-127">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="57662-128"><xref:System.ComponentModel.AsyncOperation> 개체 스레드 또는 컨텍스트로 응용 프로그램 모델에 대 한 적절 한 대리자는 호출 하는 방법을 사용 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="57662-128">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="57662-129">사용자 메서드 수 필요에 따라 이벤트를 발생 시킬 상태 변경, 진행 상황 업데이트 또는 증분 결과 새로 사용 가능한 클라이언트에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="57662-129">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="57662-130">`arg` 상태에서 래핑하는 대리자에 전달할 매개 변수를 사용할지는 `d` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-130">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="57662-131">에 대 한 참조 수 있습니다는 <xref:System.ComponentModel.AsyncOperation>, 수도 있습니다는 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-131">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="57662-132">고유한 클래스를 파생 하는 것이 바람직한 것 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 추가 상태 저장소를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-132">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57662-133">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperation.Post%2A> 의 진행률 및 증분 결과 비동기 작업을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-133">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="57662-134">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-134">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="57662-135"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 메서드가 이 작업에 대해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="57662-135">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="57662-136"><paramref name="d" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="57662-136"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="57662-137">상속자는 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 클래스 라이브러리 공급자 잠재적인 스택을 기울이지 않아도 되도록 비동기 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델 시계의 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-137">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="57662-138">콘솔 응용 프로그램은 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출 실행을 동기화하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-138">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="57662-139">이로 인해 <see langword="ProgressChanged" /> 이벤트가 잘못 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-139">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="57662-140"><see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 serialize되어 실행되도록 하려면 <see cref="T:System.Threading.SynchronizationContext" /> 클래스를 구현하여 설치합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-140">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="57662-141">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-141">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="57662-142">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-142">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="57662-143"><c>d</c> 매개 변수에 포함된 대리자에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-143">An argument for the delegate contained in the <c>d</c> parameter.</span></span></param>
        <summary><span data-ttu-id="57662-144">비동기 작업의 수명을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="57662-144">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57662-145">호출 된 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 메서드를 비동기 작업의 수명을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="57662-145">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="57662-146">이 메서드는 특정 작업에 대 한 호출 되 면 해당 호출 <xref:System.ComponentModel.AsyncOperation> 개체는 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-146">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="57662-147">`d` 매개 변수 클래스에서 완료, 취소 또는 작업의 오류 때문에 작업의 수명이 끝날 때 호출할 대리자를 래핑합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-147">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="57662-148"><xref:System.ComponentModel.AsyncOperation> 개체 스레드 또는 컨텍스트로 응용 프로그램 모델에 대 한 적절 한 대리자는 호출 하는 방법을 사용 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="57662-148">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="57662-149">대리자 수 필요에 따라 이벤트를 발생 시킬는 비동기 작업의 수명이 종료 된 클라이언트에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="57662-149">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="57662-150">`arg` 완료 대리자에 게 상태 정보를 전달 하려면 매개 변수를 사용 하는 `d`합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-150">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="57662-151">사용할 수는 <xref:System.ComponentModel.AsyncOperation> 개체 또는 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 매개 변수 값으로는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-151">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="57662-152">또는 추가 상태 저장소를 제공 하려는 경우에서 파생 클래스의 인스턴스 사용할 수는 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-152">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57662-153">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 메서드를 비동기 작업의 수명을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="57662-153">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="57662-154">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-154">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="57662-155"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />가 이 작업에 대해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="57662-155"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="57662-156"><paramref name="d" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="57662-156"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="57662-157">상속자는 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 클래스 라이브러리 공급자 잠재적인 스택을 기울이지 않아도 되도록 비동기 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델 시계의 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-157">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="57662-158">메서드 구현을 이란 응용 프로그램 모델에 대 한 적절 한 작업을 수행 해야 합니다. 즉, "수명이 종료" 콜으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="57662-158">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="57662-159">예를 들어, ASP.NET 처리 중인 비동기 작업의 수가 감소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="57662-159">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="57662-160">이 또한 해야 작업 상태로 넣을 이후의 모든 호출에 실패 합니다는 이제 완료 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-160">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
 <span data-ttu-id="57662-161">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-161">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57662-162">생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="57662-162">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="57662-163">생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-163">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="57662-164">비동기 작업을 고유하게 식별하는 데 사용되는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-164">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="57662-165">비동기 메서드 호출에 전달된 상태 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-165">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57662-166">클래스에 여러 비동기 메서드 또는 단일 비동기 메서드는 여러 개의 호출을 지 원하는 경우 클라이언트는 이벤트를 발생 시키는 비동기 작업을 결정 하는 방법이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-166">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="57662-167">프로그램 `MethodNameAsync` 메서드 형식 매개 변수를 사용 해야 <xref:System.Object> 하는 역할을 태스크 id입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-167">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="57662-168">호출 하는 경우에이 작업 ID를 사용 하는 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, 메서드 및이 비동기 작업의 특정 호출와 클라이언트의 작업 ID를 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-168">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="57662-169">이 작업 ID를 통해 구현에 사용할 수는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-169">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="57662-170">클라이언트 코드에 대 한 고유한 값을 제공 하도록 주의 해야 합니다.는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-170">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="57662-171">고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고에 구현을 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-171">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="57662-172">코드에서 고유 하지 않은 작업 ID가 있는지 확인 하 고 발생 해야는 <xref:System.ArgumentException> 감지 된 연결이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="57662-172">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57662-173">다음 코드 예제를 사용 하 여 보여 줍니다. <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 를 비동기 작업의 수명을 추적 합니다.</span><span class="sxs-lookup"><span data-stu-id="57662-173">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="57662-174">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="57662-174">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>