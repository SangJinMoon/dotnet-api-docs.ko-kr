<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperation.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac527b3f4ff3ed46bf8dc07465aaecd985e0ada7d95.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperation">
          <source>Tracks the lifetime of an asynchronous operation.</source>
          <target state="translated">비동기 작업의 수명을 추적합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>When you implement a class according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</source>
          <target state="translated">에 따라 클래스를 구현 하는 경우는 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, 클래스 인스턴스에서 호출 된 각 비동기 작업의 수명을 추적 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class provides ways to track and report the progress of an asynchronous task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 클래스를 추적 하 고 비동기 작업의 진행률을 보고 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following list identifies ways to use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object:</source>
          <target state="translated">다음 목록에는 사용 하는 방법을 식별 하는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 개체:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To report progress and interim results to the client, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> from your asynchronous worker code.</source>
          <target state="translated">클라이언트에 진행률 및 중간 결과 보고 하기 위해 호출 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> 작업자 비동기 코드에서.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">비동기 작업을 완료 메시지가 또는 보류 중인 비동기 작업을 취소 하려면 호출 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Your class should get an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object for each asynchronous task by calling <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> when each task starts.</source>
          <target state="translated">클래스에서 발생 해야는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 호출 하 여 각 비동기 작업에 대 한 개체 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> 각 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To allow the client to distinguish separate asynchronous tasks, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> takes a parameter for a unique client-provided token, which becomes the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">별도 비동기 작업을 구분 하기 위해 클라이언트에 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> 는 고유한 클라이언트 제공 토큰이 됨에 대 한 매개 변수는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</source>
          <target state="translated">그런 다음 사용할 수 있습니다 클라이언트 코드에서 진행 상태나 완료 이벤트를 발생 시킨 특정 비동기 작업을 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 비동기 작업의 수명을 추적 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">전체 코드 목록을 참조 하십시오. <bpt id="p1">[</bpt>하는 방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소를 구현<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">클라이언트의 전체 코드 목록을 참조 하십시오. <bpt id="p1">[</bpt>하는 방법: 이벤트 기반 비동기 패턴의 클라이언트 구현<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Implementers must ensure the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</source>
          <target state="translated">구현자는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 호출이 비동기가 특정 응용 프로그램에 비동기 동작 가정 하는 경우 잠재적인 스택 오버플로 클래스 라이브러리 공급자와 고려할 필요가 없습니다 시계의 발생 하는 모델입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 구현<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Finalize">
          <source>Finalizes the asynchronous operation.</source>
          <target state="translated">비동기 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">비동기 작업의 수명을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> 메서드를 비동기 작업의 수명을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> will raise an exception.</source>
          <target state="translated">이 메서드는 특정 작업에 대 한 호출 되 면 해당 호출 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph>가 이 작업에 대해 이미 호출된 경우</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">작업이 끝날 때 호출될 대리자를 래핑하는 <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> 매개 변수에 포함된 대리자에 대한 인수입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Invokes a delegate on the thread or context appropriate for the application model.</source>
          <target state="translated">응용 프로그램 모델에 적절한 스레드나 컨텍스트에서 대리자를 호출합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method invokes the delegate specified by the <ph id="ph2">`arg`</ph> parameter without ending the lifetime of the asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> 메서드가 호출 하 여 지정 된 대리자는 <ph id="ph2">`arg`</ph> 비동기 작업의 수명의 끝내 지 않고 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> 메서드를 호출 하 여 비동기 작업의 수명을 종료 되지 않은 동안 원하는 만큼 자주 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use the method to report progress or interim results back to clients.</source>
          <target state="translated">클라이언트에 진행률 또는 중간 결과 다시 보고 하는 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</source>
          <target state="translated"><ph id="ph1">`d`</ph> 매개 변수는 호출된 될 대리자는 비동기 작업의 상태에 대 한 업데이트를 게시 하려는 경우를 래핑합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 개체 스레드 또는 컨텍스트로 응용 프로그램 모델에 대 한 적절 한 대리자는 호출 하는 방법을 사용 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</source>
          <target state="translated">사용자 메서드 수 필요에 따라 이벤트를 발생 시킬 상태 변경, 진행 상황 업데이트 또는 증분 결과 새로 사용 가능한 클라이언트에 알립니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter should be used to pass state to the delegate wrapped by the <ph id="ph2">`d`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`arg`</ph> 상태에서 래핑하는 대리자에 전달할 매개 변수를 사용할지는 <ph id="ph2">`d`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It might be a reference to an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, or it might be a <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">에 대 한 참조 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, 수도 있습니다는 <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It may be desirable to derive your own class from <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> to provide additional state storage.</source>
          <target state="translated">고유한 클래스를 파생 하는 것이 바람직한 것 <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> 추가 상태 저장소를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method for reporting progress and incremental results of an asynchronous operation.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> 의 진행률 및 증분 결과 비동기 작업을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> method has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 메서드가 이 작업에 대해 이미 호출된 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">상속자는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 호출이 클래스 라이브러리 공급자 잠재적인 스택을 기울이지 않아도 되도록 비동기 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델 시계의 발생 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Console applications do not synchronize the execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls.</source>
          <target state="translated">콘솔 응용 프로그램은 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 호출 실행을 동기화하지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This can cause <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> events to be raised out of order.</source>
          <target state="translated">이로 인해 <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> 이벤트가 잘못 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>If you wish to have serialized execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls, implement and install a <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 호출이 serialize되어 실행되도록 하려면 <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> 클래스를 구현하여 설치합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 구현<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">작업이 끝날 때 호출될 대리자를 래핑하는 <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> 매개 변수에 포함된 대리자에 대한 인수입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">비동기 작업의 수명을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> 메서드를 비동기 작업의 수명을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will raise an exception.</source>
          <target state="translated">이 메서드는 특정 작업에 대 한 호출 되 면 해당 호출 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 개체는 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</source>
          <target state="translated"><ph id="ph1">`d`</ph> 매개 변수 클래스에서 완료, 취소 또는 작업의 오류 때문에 작업의 수명이 끝날 때 호출할 대리자를 래핑합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 개체 스레드 또는 컨텍스트로 응용 프로그램 모델에 대 한 적절 한 대리자는 호출 하는 방법을 사용 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</source>
          <target state="translated">대리자 수 필요에 따라 이벤트를 발생 시킬는 비동기 작업의 수명이 종료 된 클라이언트에 알립니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter is used to pass state information to the completion delegate <ph id="ph2">`d`</ph>.</source>
          <target state="translated"><ph id="ph1">`arg`</ph> 완료 대리자에 게 상태 정보를 전달 하려면 매개 변수를 사용 하는 <ph id="ph2">`d`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object, or an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> object as the parameter value.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> 개체 또는 <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 매개 변수 값으로는 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">또는 추가 상태 저장소를 제공 하려는 경우에서 파생 클래스의 인스턴스 사용할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> 메서드를 비동기 작업의 수명을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph>가 이 작업에 대해 이미 호출된 경우</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">상속자는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 호출이 클래스 라이브러리 공급자 잠재적인 스택을 기울이지 않아도 되도록 비동기 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델 시계의 발생 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</source>
          <target state="translated">메서드 구현을 이란 응용 프로그램 모델에 대 한 적절 한 작업을 수행 해야 합니다. 즉, "수명이 종료" 콜으로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</source>
          <target state="translated">예를 들어, ASP.NET 처리 중인 비동기 작업의 수가 감소 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</source>
          <target state="translated">이 또한 해야 작업 상태로 넣을 이후의 모든 호출에 실패 합니다는 이제 완료 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 구현<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">생성자에 전달된 <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">생성자에 전달된 <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Gets or sets an object used to uniquely identify an asynchronous operation.</source>
          <target state="translated">비동기 작업을 고유하게 식별하는 데 사용되는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The state object passed to the asynchronous method invocation.</source>
          <target state="translated">비동기 메서드 호출에 전달된 상태 개체입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</source>
          <target state="translated">클래스에 여러 비동기 메서드 또는 단일 비동기 메서드는 여러 개의 호출을 지 원하는 경우 클라이언트는 이벤트를 발생 시키는 비동기 작업을 결정 하는 방법이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your <ph id="ph1">`MethodNameAsync`</ph> method should take a parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> that will act as a task ID.</source>
          <target state="translated">프로그램 <ph id="ph1">`MethodNameAsync`</ph> 메서드 형식 매개 변수를 사용 해야 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 하는 역할을 태스크 id입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>You will use this task ID when you call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</source>
          <target state="translated">호출 하는 경우에이 작업 ID를 사용 하는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, 메서드 및이 비동기 작업의 특정 호출와 클라이언트의 작업 ID를 연결 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This task ID is made available to your implementation through the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">이 작업 ID를 통해 구현에 사용할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Client code must be careful to provide a unique value for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">클라이언트 코드에 대 한 고유한 값을 제공 하도록 주의 해야 합니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고에 구현을 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your code should check for a non-unique task ID and raise an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> if one is detected.</source>
          <target state="translated">코드에서 고유 하지 않은 작업 ID가 있는지 확인 하 고 발생 해야는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> 감지 된 연결이 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">다음 코드 예제를 사용 하 여 보여 줍니다. <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> 를 비동기 작업의 수명을 추적 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>