<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AttributeCollection.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594da5dea078376ed0dabeaa993c206de6906aa3c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94da5dea078376ed0dabeaa993c206de6906aa3c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AttributeCollection">
          <source>Represents a collection of attributes.</source>
          <target state="translated">특성 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> class is read-only; it does not implement methods to add or remove attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> 클래스는 읽기 전용; 특성을 추가 하거나 제거할 메서드를 구현 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>You must inherit from this class to implement these methods.</source>
          <target state="translated">이러한 메서드를 구현 하려면이 클래스에서 상속 해야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> property to find the number of attributes that exist in the collection.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> 속성을 컬렉션에 존재 하는 특성 수를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>You can also use the methods of this class to query the collection about its contents.</source>
          <target state="translated">또한 컬렉션의 내용에 대해 쿼리를이 클래스의 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> method to verify that a specified attribute or attribute array exists in the collection.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> 메서드를 지정 된 특성 또는 특성 배열을 컬렉션에 있는지 확인 하십시오.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> method to verify that a specified attribute or array of attributes exists in the collection, and that the values of the specified attributes are the same as the values in the collection.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> 메서드를 지정 된 특성 또는 특성으로 이루어진 배열 컬렉션에 있는지와 지정된 된 특성의 값 컬렉션에 있는 값과 동일한 지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>While most attributes have default values, default values are not required.</source>
          <target state="translated">대부분의 특성에 기본값이 있는 동안에 기본값이 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>If an attribute has no default value, <ph id="ph1">`null`</ph> is returned from the indexed property that takes a type.</source>
          <target state="translated">특성에 기본값이 없는 경우 <ph id="ph1">`null`</ph> 형식을 사용 하는 인덱싱된 속성에서 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>When defining your own attributes, you can declare a default value by either providing a constructor that takes no arguments, or defining a public static field of your attribute type named "Default".</source>
          <target state="translated">사용자 지정 특성을 정의할 때 기본값을 "Default" 라는 특성 형식의 공용 정적 필드를 정의 하거나 인수를 사용 하지 않는 생성자를 제공 하 여 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>The first code example checks to see whether the <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> has been set in this collection.</source>
          <target state="translated">첫 번째 코드 예제를 확인 여부는 <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> 이 컬렉션을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>The second code example gets the actual value of the <ph id="ph1">&lt;xref:System.ComponentModel.DescriptionAttribute&gt;</ph> for a button.</source>
          <target state="translated">실제 값을 설정 하는 두 번째 코드 예제는 <ph id="ph1">&lt;xref:System.ComponentModel.DescriptionAttribute&gt;</ph> 단추에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>Both examples require that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">두 예제를 진행 하려면 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AttributeCollection">
          <source>When using attributes, verify that an attribute has been set, or access its value.</source>
          <target state="translated">특성을 사용 하는 경우 특성 설정 되어 또는 해당 값에 액세스를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AttributeCollection">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> that provides the attributes for this collection.</source>
          <target state="translated">이 컬렉션의 특성을 제공하는 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
          <source>The following code example creates a new <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> using the attributes on <ph id="ph2">`button1`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 새 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection&gt;</ph> 에서 특성을 사용 하 여 <ph id="ph2">`button1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
          <source>It assumes that <ph id="ph1">`button1`</ph> has been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 폼에서 만들어진 것입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
          <source><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Attributes">
          <source>Gets the attribute collection.</source>
          <target state="translated">특성 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Attributes">
          <source>The attribute collection.</source>
          <target state="translated">특성 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AttributeCollection">
          <source>Determines whether this collection of attributes has the specified attribute or array of attributes.</source>
          <target state="translated">이 특성 컬렉션에 지정된 특성 또는 특성 배열이 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> to find in the collection.</source>
          <target state="translated">컬렉션에서 찾을 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>Determines whether this collection of attributes has the specified attribute.</source>
          <target state="translated">이 특성 컬렉션에 지정된 특성이 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컬렉션에 해당 특성이 포함되어 있거나 해당 특성 형식에 대한 기본 특성이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>This collection has the specified attribute if the specified type of attribute exists in the collection, and if the value of the specified attribute is the same as the value of the instance of the attribute in the collection.</source>
          <target state="translated">이 컬렉션에 특성의 지정 된 형식 컬렉션에 있으면이 고 지정된 된 특성의 값이 컬렉션에 있는 특성의 인스턴스 값과 동일 하 게 지정 된 특성이 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>The difference between the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> methods is that <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> calls the <ph id="ph4">&lt;xref:System.Attribute.Match%2A&gt;</ph> method on an attribute, and <ph id="ph5">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> calls the <ph id="ph6">&lt;xref:System.Object.Equals%2A&gt;</ph> method.</source>
          <target state="translated">차이 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> 호출은 <ph id="ph4">&lt;xref:System.Attribute.Match%2A&gt;</ph> 특성에 대 한 메서드 및 <ph id="ph5">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> 호출은 <ph id="ph6">&lt;xref:System.Object.Equals%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>For most attributes, these methods do the same thing.</source>
          <target state="translated">대부분의 특성에 대 한 이러한 메서드는 동일한 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>For attributes that may have multiple flags, however, <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> is typically implemented so that it returns <ph id="ph2">`true`</ph> if any of the flags are satisfied.</source>
          <target state="translated">그러나 여러 플래그를 가질 수 있는 특성에 대 한 <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> 반환 되도록 일반적으로 구현 됩니다 <ph id="ph2">`true`</ph> 플래그 중 하나라도 충족 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>For example, consider a data binding attribute with the Boolean flags "SupportsSql", "SupportsOleDb", and "SupportsXml".</source>
          <target state="translated">예를 들어 "SupportsSql", "SupportsOleDb" 및 "SupportsXml" 부울 플래그와 함께 데이터 바인딩 특성을 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>This attribute may be present on a property that supports all three data-binding approaches.</source>
          <target state="translated">이 특성은 세 가지 데이터 바인딩 방법을 모두 지 원하는 속성에 존재할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>It will often be the case that a programmer needs to know only if a particular approach is available, not all three.</source>
          <target state="translated">프로그래머는 특정 방식을 사용 가능한 있는지만 알고 있어야 하는 경우 경우가 일부만 3입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>Therefore, a programmer could use <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> with an instance of the attribute containing only the flags the programmer needs.</source>
          <target state="translated">따라서 사용할 수 <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> 프로그래머가 플래그를 포함 하는 특성의 인스턴스와 함께 필요 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>The following code example checks to see whether the collection has a <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 컬렉션에 있는지 여부를 확인 하려면 한 <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> to find in the collection.</source>
          <target state="translated">컬렉션에서 찾을 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source>Determines whether this attribute collection contains all the specified attributes in the attribute array.</source>
          <target state="translated">이 특성 컬렉션에 특성 배열의 지정된 특성이 모두 포함되어 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the collection contains all the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컬렉션에 모든 특성이 포함되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source>This collection has the specified array of attributes if all the specified attribute types exist in the collection and if each attribute in the specified array is the same as an attribute in the collection.</source>
          <target state="translated">이 컬렉션에 지정한 특성 배열을 모든 지정 된 특성 형식 컬렉션에 존재 하 고 지정 된 배열의 각 특성의 특성 컬렉션에 같은 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source>The following code example compares the attributes in <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> to see whether the attributes for the button are contained in the attributes for the text box.</source>
          <target state="translated">특성을 비교 하는 다음 코드 예제에서는 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 단추에 대 한 특성 텍스트 상자에 대 한 특성에 포함 되어 있는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
          <source>It assumes that both <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 두 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> to copy the collection to.</source>
          <target state="translated">컬렉션을 복사할 대상 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
          <source>The index to start from.</source>
          <target state="translated">복사를 시작할 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
          <source>Copies the collection to an array, starting at the specified index.</source>
          <target state="translated">컬렉션을 지정된 인덱스에서 시작하여 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>Gets the number of attributes.</source>
          <target state="translated">특성의 개수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>The number of attributes.</source>
          <target state="translated">특성의 개수입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>You can use the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> property to set the limits of a loop that iterates through a collection of objects.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> 속성을 개체의 컬렉션을 반복 하는 루프의 한계를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>If the collection is zero-based, be sure to use <ph id="ph1">`Count - 1`</ph> as the upper boundary of the loop.</source>
          <target state="translated">컬렉션은 0에서 시작 하는 경우 사용 해야 <ph id="ph1">`Count - 1`</ph> 루프의 상한값으로 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> property to print the number of properties on <ph id="ph2">`button1`</ph> in a text box.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Count%2A&gt;</ph> 속성에는 다양 한 속성을 인쇄 하려면 <ph id="ph2">`button1`</ph> 텍스트 상자에 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Count">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.AttributeCollection.Empty">
          <source>Specifies an empty collection that you can use, rather than creating a new one.</source>
          <target state="translated">새 컬렉션을 만드는 대신 사용할 수 있는 빈 컬렉션을 지정합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.AttributeCollection.Empty">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> from which to create the copy.</source>
          <target state="translated">복사본을 만들 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> that provides the attributes for this collection.</source>
          <target state="translated">이 컬렉션의 특성을 제공하는 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> from an existing <ph id="ph2">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>에서 새 <ph id="ph2">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>을 만듭니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>A new <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph> that is a copy of <ph id="ph2">&lt;paramref name="existing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="existing" /&gt;</ph>의 복사본인 새 <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source>If the <ph id="ph1">`newAttributes`</ph> parameter is provided, its <ph id="ph2">&lt;xref:System.Attribute&gt;</ph> entries are merged with those of the <ph id="ph3">`existing`</ph> parameter.</source>
          <target state="translated">경우는 <ph id="ph1">`newAttributes`</ph> 매개 변수가 제공 된 해당 <ph id="ph2">&lt;xref:System.Attribute&gt;</ph> 의 항목을 병합 하는 <ph id="ph3">`existing`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
          <source><ph id="ph1">&lt;paramref name="existing" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="existing" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the attribute to retrieve.</source>
          <target state="translated">검색할 특성의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
          <source>Returns the default <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> of a given <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>의 기본 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> of a given <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>의 기본 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.GetEnumerator">
          <source>Gets an enumerator for this collection.</source>
          <target state="translated">이 컬렉션의 열거자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.GetEnumerator">
          <source>An enumerator of type <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> 형식의 열거자입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.GetEnumerator">
          <source>The following code example gets an enumerator for the attributes on <ph id="ph1">`button1`</ph>.</source>
          <target state="translated">다음 코드 예제는 특성에 대 한 열거자를 가져옵니다 <ph id="ph1">`button1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.GetEnumerator">
          <source>It uses the enumerator to print the names of the attributes in the collection.</source>
          <target state="translated">열거자를 사용 하 여 컬렉션에 있는 특성의 이름을 출력 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.GetEnumerator">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AttributeCollection">
          <source>Gets the attribute with the specified index.</source>
          <target state="translated">지정된 인덱스가 있는 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>The zero-based index of <ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AttributeCollection" /&gt;</ph>의 인덱스이며 0에서 시작합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>Gets the attribute with the specified index number.</source>
          <target state="translated">지정된 인덱스 번호가 있는 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> with the specified index number.</source>
          <target state="translated">지정된 인덱스 번호가 있는 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>The index number is zero-based.</source>
          <target state="translated">인덱스 번호는 0부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>Therefore, you must subtract 1 from the numerical position of a particular <ph id="ph1">&lt;xref:System.Attribute&gt;</ph> to access that <ph id="ph2">&lt;xref:System.Attribute&gt;</ph>.</source>
          <target state="translated">따라서 1을 빼야 위치는 특정 숫자에서 <ph id="ph1">&lt;xref:System.Attribute&gt;</ph> 에 액세스 하려면 해당 <ph id="ph2">&lt;xref:System.Attribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>For example, to get the third <ph id="ph1">&lt;xref:System.Attribute&gt;</ph>, you need to specify <ph id="ph2">`myColl[2]`</ph>.</source>
          <target state="translated">예를 들어, 세 번째 가져오려는 <ph id="ph1">&lt;xref:System.Attribute&gt;</ph>를 지정 하면 <ph id="ph2">`myColl[2]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Item%2A&gt;</ph> property to print the name of the <ph id="ph2">&lt;xref:System.Attribute&gt;</ph> specified by the index number in a text box.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Item%2A&gt;</ph> 속성의 이름을 출력 하는 <ph id="ph2">&lt;xref:System.Attribute&gt;</ph> 텍스트 상자에 인덱스 번호로 지정 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>Because the index number is zero-based, this code example prints the name of the second <ph id="ph1">&lt;xref:System.Attribute&gt;</ph> in a text box.</source>
          <target state="translated">이 코드 예제에서는 두 번째의 이름을 출력 인덱스 번호는 0부터 시작 하므로 <ph id="ph1">&lt;xref:System.Attribute&gt;</ph> 텍스트 상자에 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
          <source>It assumes <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph> to get from the collection.</source>
          <target state="translated">목록에서 가져올 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Attribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>Gets the attribute with the specified type.</source>
          <target state="translated">지정된 형식의 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> with the specified type or, if the attribute does not exist, the default value for the attribute type.</source>
          <target state="translated">지정된 형식의 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>이거나, 해당 특성이 없으면 해당 특성 형식의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>If the attribute does not exist in the collection, this property returns the default value for the attribute type.</source>
          <target state="translated">특성 컬렉션에 없는 경우이 속성 특성 유형에 대 한 기본값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>The following code example gets the <ph id="ph1">&lt;xref:System.ComponentModel.DesignerAttribute&gt;</ph> from the collection and prints its value.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ComponentModel.DesignerAttribute&gt;</ph> 컬렉션에서 해당 값을 출력 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>For this code example to run, you must provide the fully qualified assembly name.</source>
          <target state="translated">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
          <source>For information about how to obtain the fully qualified assembly name, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 이름을<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AttributeCollection">
          <source>Determines whether a specified attribute or array of attributes is the same as an attribute or array of attributes in the collection.</source>
          <target state="translated">지정된 특성 또는 특성 배열이 컬렉션의 특성 또는 특성 배열과 같은지 확인합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph> to compare with the attributes in this collection.</source>
          <target state="translated">이 컬렉션의 특성과 비교할 <ph id="ph1">&lt;see cref="T:System.Attribute" /&gt;</ph>의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>Determines whether a specified attribute is the same as an attribute in the collection.</source>
          <target state="translated">지정된 특성이 컬렉션의 특성과 같은지 확인합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">해당 특성이 컬렉션 내에 포함되어 있으며 컬렉션의 특성과 같은 값을 가지면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>An attribute can provide support for matching.</source>
          <target state="translated">특성에는 일치에 대 한 지원을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>The difference between the <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> methods is that <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> calls the <ph id="ph4">&lt;xref:System.Attribute.Match%2A&gt;</ph> method on an attribute, and <ph id="ph5">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> calls the <ph id="ph6">&lt;xref:System.Object.Equals%2A&gt;</ph> method.</source>
          <target state="translated">차이 <ph id="ph1">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.ComponentModel.AttributeCollection.Matches%2A&gt;</ph> 호출은 <ph id="ph4">&lt;xref:System.Attribute.Match%2A&gt;</ph> 특성에 대 한 메서드 및 <ph id="ph5">&lt;xref:System.ComponentModel.AttributeCollection.Contains%2A&gt;</ph> 호출은 <ph id="ph6">&lt;xref:System.Object.Equals%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>For most attributes, these methods do the same thing.</source>
          <target state="translated">대부분의 특성에 대 한 이러한 메서드는 동일한 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>For attributes that may have multiple flags, however, <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> is typically implemented so that it returns <ph id="ph2">`true`</ph> if any of the flags are satisfied.</source>
          <target state="translated">그러나 여러 플래그를 가질 수 있는 특성에 대 한 <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> 반환 되도록 일반적으로 구현 됩니다 <ph id="ph2">`true`</ph> 플래그 중 하나라도 충족 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>For example, consider a data binding attribute with the Boolean flags "SupportsSql", "SupportsOleDb", and "SupportsXml".</source>
          <target state="translated">예를 들어 "SupportsSql", "SupportsOleDb" 및 "SupportsXml" 부울 플래그와 함께 데이터 바인딩 특성을 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>This attribute may be present on a property that supports all three data binding approaches.</source>
          <target state="translated">이 특성은 세 가지 데이터 바인딩 방법을 모두 지 원하는 속성에 존재할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>It will often be the case that a programmer needs to know only if a particular approach is available, not all three.</source>
          <target state="translated">프로그래머는 특정 방식을 사용 가능한 있는지만 알고 있어야 하는 경우 경우가 일부만 3입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>Therefore, a programmer could use <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> with an instance of the attribute containing only the flags the programmer needs.</source>
          <target state="translated">따라서 사용할 수 <ph id="ph1">&lt;xref:System.Attribute.Match%2A&gt;</ph> 프로그래머가 플래그를 포함 하는 특성의 인스턴스와 함께 필요 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>The following code example verifies that the <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> is a member of the collection and that it has been set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">다음 코드 예제를 확인 하 고 <ph id="ph1">&lt;xref:System.ComponentModel.BrowsableAttribute&gt;</ph> 컬렉션의 멤버 이며 설정 된 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.CodeDom.MemberAttributes" /&gt;</ph> to compare with the attributes in this collection.</source>
          <target state="translated">이 컬렉션의 특성과 비교할 <ph id="ph1">&lt;see cref="T:System.CodeDom.MemberAttributes" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source>Determines whether the attributes in the specified array are the same as the attributes in the collection.</source>
          <target state="translated">지정된 배열의 특성이 컬렉션의 특성과 같은지 확인합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">배열의 모든 특성이 해당 컬렉션에 포함되어 있으며 해당 컬렉션의 특성과 같은 값을 가지고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source>An attribute can provide support for matching.</source>
          <target state="translated">특성에는 일치에 대 한 지원을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source>The following code example compares the attributes in a button and a text box to see whether they match.</source>
          <target state="translated">다음 코드 예제에서는 단추와 일치 하는지 여부를 확인 하려면 텍스트 상자에 있는 특성을 비교 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
          <source>It assumes that <ph id="ph1">`button1`</ph> and <ph id="ph2">`textBox1`</ph> have been created on a form.</source>
          <target state="translated">있다고 가정 <ph id="ph1">`button1`</ph> 및 <ph id="ph2">`textBox1`</ph> 폼에 만들었습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
          <source>Gets the number of elements contained in the collection.</source>
          <target state="translated">컬렉션에 포함된 요소 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
          <source>The number of elements contained in the collection.</source>
          <target state="translated">컬렉션에 포함된 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the collection is synchronized (thread-safe).</source>
          <target state="translated">해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the collection is synchronized (thread-safe); otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컬렉션에 대한 액세스가 동기화(스레드로부터 안전)되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the collection.</source>
          <target state="translated">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the collection.</source>
          <target state="translated">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>