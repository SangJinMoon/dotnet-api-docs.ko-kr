<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EnumerablePartitionerOptions.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50e07ba7dcdb729b1cd2cc33d2bac216458254c3c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e07ba7dcdb729b1cd2cc33d2bac216458254c3c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
          <source>Specifies options to control the buffering behavior of a partitioner</source>
          <target state="translated">파티셔너의 버퍼링 동작을 제어하는 옵션을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
          <source>Out-of-the-box partitioners are created with a set of default behaviors.</source>
          <target state="translated">기본 제공 파티셔너는 기본 동작 집합을 통해 생성됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
          <source>For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> implementation is fast and non-blocking.</source>
          <target state="translated">예를 들어 기본적으로 일부 형식의 버퍼링 및 청크는 일반적인 시나리오에서 최적의 성능을 얻기 위해 여기서는 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 구현이 신속 하 고 비 중단 되었습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
          <source>These behaviors can be overridden by this enumeration by using the <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">사용 하 여 이러한 동작은이 열거형으로 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
          <source>Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads.</source>
          <target state="translated">한 번에 하나씩 열거 가능한 소스에서 항목을 가져오고 여러 스레드에서 보다 효율적으로 액세스할 수 있는 중간 저장소를 사용하지 않는 파티셔너를 만듭니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
          <source>This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).</source>
          <target state="translated">이 옵션은 낮은 대기 시간을 지원하므로 항목이 소스로부터 사용할 수 있게 되자 마자 처리되고 항목 간 종속성도 부분적으로 지원을 제공합니다. 하지만 스레드 자체에서 처리해야 하는 항목을 기다리면서 스레드가 교체 상태에 빠지지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
          <source>Use the default behavior, which is to use buffering to achieve optimal performance.</source>
          <target state="translated">최적의 성능을 얻기 위해 버퍼링을 사용하는 기본 동작을 사용합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>