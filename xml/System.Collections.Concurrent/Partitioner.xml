<Type Name="Partitioner" FullName="System.Collections.Concurrent.Partitioner">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26e931f691413347e172529d843575b9646d7a02" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36645867" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Partitioner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Partitioner extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.Partitioner" />
  <TypeSignature Language="VB.NET" Value="Public Class Partitioner" />
  <TypeSignature Language="C++ CLI" Value="public ref class Partitioner abstract sealed" />
  <TypeSignature Language="F#" Value="type Partitioner = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="00284-101">배열, 목록 및 열거 가능 형식에 대한 공용 분할 전략을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00284-101">Provides common partitioning strategies for arrays, lists, and enumerables.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-102">자세한 내용은 [PLINQ 및 TPL에 대한 사용자 지정 파티셔너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="00284-102">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00284-103">파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-103">Creates a partitioner.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;int,int&gt;&gt; Create (int fromInclusive, int toExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int32, int32&gt;&gt; Create(int32 fromInclusive, int32 toExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Integer, toExclusive As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;int, int&gt; ^&gt; ^ Create(int fromInclusive, int toExclusive);" />
      <MemberSignature Language="F#" Value="static member Create : int * int -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int * int&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="00284-104">범위의 하한(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-104">The lower, inclusive bound of the range.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="00284-105">범위의 상한(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-105">The upper, exclusive bound of the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-106">사용자가 지정한 범위를 분할하는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-106">Creates a partitioner that chunks the user-specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-107">파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-107">A partitioner.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-108">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-108">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00284-109">
            <paramref name="toExclusive" /> 인수는 <paramref name="fromInclusive" /> 인수보다 작거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-109">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;long,long&gt;&gt; Create (long fromInclusive, long toExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int64, int64&gt;&gt; Create(int64 fromInclusive, int64 toExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Long, toExclusive As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;long, long&gt; ^&gt; ^ Create(long fromInclusive, long toExclusive);" />
      <MemberSignature Language="F#" Value="static member Create : int64 * int64 -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int64 * int64&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int64,System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="00284-110">범위의 하한(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-110">The lower, inclusive bound of the range.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="00284-111">범위의 상한(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-111">The upper, exclusive bound of the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-112">사용자가 지정한 범위를 분할하는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-112">Creates a partitioner that chunks the user-specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-113">파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-113">A partitioner.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-114">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-114">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00284-115">
            <paramref name="toExclusive" /> 인수는 <paramref name="fromInclusive" /> 인수보다 작거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-115">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;int,int&gt;&gt; Create (int fromInclusive, int toExclusive, int rangeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int32, int32&gt;&gt; Create(int32 fromInclusive, int32 toExclusive, int32 rangeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Integer, toExclusive As Integer, rangeSize As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;int, int&gt; ^&gt; ^ Create(int fromInclusive, int toExclusive, int rangeSize);" />
      <MemberSignature Language="F#" Value="static member Create : int * int * int -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int * int&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive, rangeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="rangeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="00284-116">범위의 하한(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-116">The lower, inclusive bound of the range.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="00284-117">범위의 상한(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-117">The upper, exclusive bound of the range.</span>
          </span>
        </param>
        <param name="rangeSize">
          <span data-ttu-id="00284-118">각 하위 범위의 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-118">The size of each subrange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-119">사용자가 지정한 범위를 분할하는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-119">Creates a partitioner that chunks the user-specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-120">파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-120">A partitioner.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-121">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-121">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00284-122">
            <paramref name="toExclusive" /> 인수는 <paramref name="fromInclusive" /> 인수보다 작거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-122">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span>
          </span>
          <span data-ttu-id="00284-123">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-123">-or-</span>
          </span>
          <span data-ttu-id="00284-124">
            <paramref name="rangeSize" /> 인수가 0보다 작거나 같은 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-124">The <paramref name="rangeSize" /> argument is less than or equal to 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;long,long&gt;&gt; Create (long fromInclusive, long toExclusive, long rangeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int64, int64&gt;&gt; Create(int64 fromInclusive, int64 toExclusive, int64 rangeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Long, toExclusive As Long, rangeSize As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;long, long&gt; ^&gt; ^ Create(long fromInclusive, long toExclusive, long rangeSize);" />
      <MemberSignature Language="F#" Value="static member Create : int64 * int64 * int64 -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int64 * int64&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive, rangeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int64,System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="rangeSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="00284-125">범위의 하한(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-125">The lower, inclusive bound of the range.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="00284-126">범위의 상한(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-126">The upper, exclusive bound of the range.</span>
          </span>
        </param>
        <param name="rangeSize">
          <span data-ttu-id="00284-127">각 하위 범위의 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-127">The size of each subrange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-128">사용자가 지정한 범위를 분할하는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-128">Creates a partitioner that chunks the user-specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-129">파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-129">A partitioner.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-130">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-130">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00284-131">
            <paramref name="toExclusive" /> 인수는 <paramref name="fromInclusive" /> 인수보다 작거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-131">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span>
          </span>
          <span data-ttu-id="00284-132">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-132">-or-</span>
          </span>
          <span data-ttu-id="00284-133">
            <paramref name="rangeSize" /> 인수가 0보다 작거나 같은 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-133">The <paramref name="rangeSize" /> argument is less than or equal to 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (source As IEnumerable(Of TSource)) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;'Source&gt; -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="00284-134">소스 열거 가능한 형식에 있는 요소의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-134">Type of the elements in source enumerable.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00284-135">분할할 열거 가능한 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-135">The enumerable to be partitioned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-136">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 인스턴스에서 정렬할 수 있는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-136">Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-137">입력 배열을 기초로 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-137">An orderable partitioner based on the input array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-138">열거 가능한 원본에서 검색 된 대로 요소의 자연 스러운 순서에 따라 만들어진된 파티 셔 너에 사용 되는 순서가 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00284-138">The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.</span></span> <span data-ttu-id="00284-139">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-139">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, valuetype System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (source As IEnumerable(Of TSource), partitionerOptions As EnumerablePartitionerOptions) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Concurrent::EnumerablePartitionerOptions partitionerOptions);" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;'Source&gt; * System.Collections.Concurrent.EnumerablePartitionerOptions -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (source, partitionerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="partitionerOptions" Type="System.Collections.Concurrent.EnumerablePartitionerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="00284-140">소스 열거 가능한 형식에 있는 요소의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-140">Type of the elements in source enumerable.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="00284-141">분할할 열거 가능한 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-141">The enumerable to be partitioned.</span>
          </span>
        </param>
        <param name="partitionerOptions">
          <span data-ttu-id="00284-142">파티셔너의 버퍼링 동작을 제어하는 옵션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-142">Options to control the buffering behavior of the partitioner.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-143">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 인스턴스에서 정렬할 수 있는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-143">Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-144">입력 배열을 기초로 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-144">An orderable partitioner based on the input array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-145">열거 가능한 원본에서 검색 된 대로 요소의 자연 스러운 순서에 따라 만들어진된 파티 셔 너에 사용 되는 순서가 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00284-145">The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="00284-146">
            <paramref name="partitionerOptions" /> 인수는 <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />에 대해 잘못된 값을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-146">The <paramref name="partitionerOptions" /> argument specifies an invalid value for <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IList&lt;TSource&gt; list, bool loadBalance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IList`1&lt;!!TSource&gt; list, bool loadBalance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (list As IList(Of TSource), loadBalance As Boolean) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IList&lt;TSource&gt; ^ list, bool loadBalance);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.Generic.IList&lt;'Source&gt; * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (list, loadBalance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.IList&lt;TSource&gt;" />
        <Parameter Name="loadBalance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="00284-147">소스 목록에 있는 요소의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-147">Type of the elements in source list.</span>
          </span>
        </typeparam>
        <param name="list">
          <span data-ttu-id="00284-148">분할할 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-148">The list to be partitioned.</span>
          </span>
        </param>
        <param name="loadBalance">
          <span data-ttu-id="00284-149">만들어진 파티셔너가 파티션 간에 부하를 정적으로 분산하는 것이 아니라 동적으로 분산시켜야 하는지 여부를 나타내는 부울 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-149">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-150">
            <see cref="T:System.Collections.Generic.IList`1" /> 인스턴스에서 정렬할 수 있는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-150">Creates an orderable partitioner from an <see cref="T:System.Collections.Generic.IList`1" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-151">입력 목록을 기초로 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-151">An orderable partitioner based on the input list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-152">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-152">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (TSource[] array, bool loadBalance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(!!TSource[] array, bool loadBalance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (array As TSource(), loadBalance As Boolean) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(cli::array &lt;TSource&gt; ^ array, bool loadBalance);" />
      <MemberSignature Language="F#" Value="static member Create : 'Source[] * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (array, loadBalance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="TSource[]" />
        <Parameter Name="loadBalance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="00284-153">소스 배열에 있는 요소의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-153">Type of the elements in source array.</span>
          </span>
        </typeparam>
        <param name="array">
          <span data-ttu-id="00284-154">분할할 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-154">The array to be partitioned.</span>
          </span>
        </param>
        <param name="loadBalance">
          <span data-ttu-id="00284-155">만들어진 파티셔너가 파티션 간에 부하를 정적으로 분산하는 것이 아니라 동적으로 분산시켜야 하는지 여부를 나타내는 부울 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-155">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00284-156">
            <see cref="T:System.Array" /> 인스턴스에서 정렬할 수 있는 파티셔너를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-156">Creates an orderable partitioner from a <see cref="T:System.Array" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00284-157">입력 배열을 기초로 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00284-157">An orderable partitioner based on the input array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00284-158">자세한 내용 및 예제를 참조 하세요 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00284-158">For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>