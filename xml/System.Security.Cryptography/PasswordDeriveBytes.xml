<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="114473ac3aded1fedb136d53f48725f47b5ea62e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500337" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1d152-101">PBKDF1 알고리즘의 확장을 사용하여 암호에서 키를 파생시킵니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d152-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d152-102">이 클래스는 키 자료로 사용 하기에 적합 한 바이트 암호에서 파생 되도록 PKCS #5 v2.0 표준에 정의 된 PBKDF1 알고리즘의 확장을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="1d152-103">표준은 IETF RRC 2898 수록 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-104">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1d152-105">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d152-106">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <xref:System.Security.Cryptography.PasswordDeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1d152-107">
            <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="1d152-108">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-108">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="1d152-109">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-109">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-110">키를 파생시키는 데 사용할 암호 및 키 솔트를 지정하는 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-111">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1d152-112">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d152-113">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <xref:System.Security.Cryptography.PasswordDeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="1d152-114">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-114">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="1d152-115">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-115">The key salt to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-116">키를 파생시키는 데 사용할 암호 및 키 솔트를 사용하여 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-117">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1d152-118">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="1d152-119">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-119">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="1d152-120">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-120">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="1d152-121">작업의 CSP(암호화 서비스 공급자) 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-121">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-122">키를 파생시키는 데 사용할 암호, 키 솔트 및 CSP(암호화 서비스 공급자)를 지정하는 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-123">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1d152-124">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d152-125">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <xref:System.Security.Cryptography.PasswordDeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="1d152-126">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-126">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="1d152-127">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-127">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="1d152-128">작업에 대한 CSP 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-128">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-129">키를 파생시키는 데 사용할 암호, 키 솔트 및 CSP(암호화 서비스 공급자) 매개 변수를 사용하여 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-130">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1d152-131">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="1d152-132">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-132">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="1d152-133">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-133">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="1d152-134">키를 파생시키는 데 사용할 해시 알고리즘입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-134">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="1d152-135">키를 파생시키는 데 사용할 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-135">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-136">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름 및 반복을 지정하는 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-137">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1d152-138">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="1d152-139">목록이 해시 알고리즘 이름에 대 한 참조는 <xref:System.Security.Cryptography.CryptoConfig> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="1d152-140">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-140">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="1d152-141">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-141">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="1d152-142">작업에 대한 해시 알고리즘의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-142">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="1d152-143">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-143">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-144">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-145">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1d152-146">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="1d152-147">목록이 해시 알고리즘 이름에 대 한 참조는 <xref:System.Security.Cryptography.CryptoConfig> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="1d152-148">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-148">The password to derive the key for.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="1d152-149">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-149">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="hashName">
          <span data-ttu-id="1d152-150">키를 파생시키는 데 사용할 해시 알고리즘입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-150">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="1d152-151">키를 파생시키는 데 사용할 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-151">The iteration count to use to derive the key.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="1d152-152">작업의 CSP(암호화 서비스 공급자) 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-152">The cryptographic service provider (CSP) parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-153">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름, 반복 횟수 및 CSP(암호화 서비스 공급자)를 지정하는 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-154">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1d152-155">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="1d152-156">목록이 해시 알고리즘 이름에 대 한 참조는 <xref:System.Security.Cryptography.CryptoConfig> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword">
          <span data-ttu-id="1d152-157">키를 파생시킬 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-157">The password for which to derive the key.</span>
          </span>
        </param>
        <param name="rgbSalt">
          <span data-ttu-id="1d152-158">키를 파생시키는 데 사용할 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-158">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="strHashName">
          <span data-ttu-id="1d152-159">작업에 대한 해시 알고리즘의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-159">The name of the hash algorithm for the operation.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="1d152-160">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-160">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="cspParams">
          <span data-ttu-id="1d152-161">작업에 대한 CSP 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-161">The CSP parameters for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-162">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름, 반복 횟수 및 CSP(암호화 서비스 공급자) 매개 변수를 사용하여 <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d152-163">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1d152-164">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="1d152-165">목록이 해시 알고리즘 이름에 대 한 참조는 <xref:System.Security.Cryptography.CryptoConfig> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="1d152-166">키를 파생시킬 알고리즘 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-166">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="1d152-167">키를 파생시키는 데 사용할 해시 알고리즘 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-167">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="1d152-168">파생할 키의 크기(비트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-168">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="1d152-169">키를 파생시키는 데 사용할 IV(초기화 벡터)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-169">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-170">
            <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 개체에서 암호화 키를 파생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d152-171">파생된 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-171">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d152-172">이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="1d152-173">경우는 `keySize` 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d152-174">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.PasswordDeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="1d152-175">
            <paramref name="keySize" /> 매개 변수가 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-175">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="1d152-176">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-176">-or-</span>
          </span>
          <span data-ttu-id="1d152-177">CSP(암호화 서비스 공급자)를 가져올 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-177">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="1d152-178">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-178">-or-</span>
          </span>
          <span data-ttu-id="1d152-179">
            <paramref name="algname" /> 매개 변수가 유효한 알고리즘 이름이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="1d152-180">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-180">-or-</span>
          </span>
          <span data-ttu-id="1d152-181">
            <paramref name="alghashname" /> 매개 변수가 유효한 해시 알고리즘 이름이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1d152-182">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-182">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-183">
            <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d152-184">이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드.</span><span class="sxs-lookup"><span data-stu-id="1d152-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="1d152-185">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="1d152-186">`Finalize` 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="1d152-187">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Security.Cryptography.PasswordDeriveBytes>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="1d152-188">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1d152-189">
              <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1d152-189">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="1d152-190">재정의 하는 경우 <see langword="Dispose(Boolean)" />한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <see langword="Dispose" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1d152-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="1d152-191">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1d152-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="1d152-192">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see langword="Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1d152-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="1d152-193">생성할 의사(pseudo) 난수 키 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-193">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d152-194">의사(pseudo) 난수 키 바이트를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-194">Returns pseudo-random key bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d152-195">의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-195">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d152-196">이 메서드는 모든 의사 난수 바이트 수를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="1d152-197">그러나 바이트 시퀀스의 강도 해시 출력의 바이트 수로 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d152-198">작업에 대한 해시 알고리즘의 이름을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-198">Gets or sets the name of the hash algorithm for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d152-199">작업에 대한 해시 알고리즘의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-199">The name of the hash algorithm for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="1d152-200">해시 값의 이름이 고정되어 있는데 이 값을 변경하려고 한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-200">The name of the hash value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d152-201">작업의 반복 횟수를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-201">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d152-202">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-202">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="1d152-203">반복 횟수가 고정되어 있는데 이 값을 변경하려고 한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-203">The number of iterations is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1d152-204">값이 범위를 벗어나서 속성을 설정할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-204">The property cannot be set because its value is out of range.</span>
          </span>
          <span data-ttu-id="1d152-205">이 속성에는 0 또는 양의 정수가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-205">This property requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d152-206">작업의 상태를 다시 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-206">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d152-207">작업의 키 솔트 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-207">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d152-208">작업의 키 솔트 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-208">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d152-209">사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="1d152-210">키 파생 하기 전에 암호의 끝에 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="1d152-211">이러한 임의 바이트 솔트도 알려져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1d152-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="1d152-212">키 솔트 값이 고정되어 있는데 이 값을 변경하려고 한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d152-212">The key salt value is fixed and an attempt is made to change this value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>