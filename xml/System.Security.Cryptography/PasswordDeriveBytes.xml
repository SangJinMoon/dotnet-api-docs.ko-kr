<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PasswordDeriveBytes.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5114473ac3aded1fedb136d53f48725f47b5ea62e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">114473ac3aded1fedb136d53f48725f47b5ea62e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>Derives a key from a password using an extension of the PBKDF1 algorithm.</source>
          <target state="translated">PBKDF1 알고리즘의 확장을 사용하여 암호에서 키를 파생시킵니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</source>
          <target state="translated">이 클래스는 키 자료로 사용 하기에 적합 한 바이트 암호에서 파생 되도록 PKCS #5 v2.0 표준에 정의 된 PBKDF1 알고리즘의 확장을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>The standard is documented in IETF RRC 2898.</source>
          <target state="translated">표준은 IETF RRC 2898 수록 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>Hard coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>The following code example creates a key from a password using the <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.PasswordDeriveBytes">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>The password to derive the key for.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class specifying the password and key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호 및 키 솔트를 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>Never hard code a password within your source code.</source>
          <target state="translated">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])">
          <source>The following code example creates a key from a password using the <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The password for which to derive the key.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class with the password and key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호 및 키 솔트를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Hard coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The password to derive the key for.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The cryptographic service provider (CSP) parameters for the operation.</source>
          <target state="translated">작업의 CSP(암호화 서비스 공급자) 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트 및 CSP(암호화 서비스 공급자)를 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Never hard code a password within your source code.</source>
          <target state="translated">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> l, 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The following code example creates a key from a password using the <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 사용 하 여 암호에서 키를 만듭니다는 <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The password for which to derive the key.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>The CSP parameters for the operation.</source>
          <target state="translated">작업에 대한 CSP 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트 및 CSP(암호화 서비스 공급자) 매개 변수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
          <source>Hard coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>The password to derive the key for.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>The hash algorithm to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>The iteration count to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class specifying the password, key salt, hash name, and iterations to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름 및 반복을 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>Never hard code a password within your source code.</source>
          <target state="translated">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)">
          <source>For a list of hash algorithm names, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.</source>
          <target state="translated">목록이 해시 알고리즘 이름에 대 한 참조는 <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>The password for which to derive the key.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>The name of the hash algorithm for the operation.</source>
          <target state="translated">작업에 대한 해시 알고리즘의 이름입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class with the password, key salt, hash name, and number of iterations to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름 및 반복 횟수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>Hard coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
          <source>For a list of hash algorithm names, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.</source>
          <target state="translated">목록이 해시 알고리즘 이름에 대 한 참조는 <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The password to derive the key for.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The hash algorithm to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The iteration count to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The cryptographic service provider (CSP) parameters for the operation.</source>
          <target state="translated">작업의 CSP(암호화 서비스 공급자) 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름, 반복 횟수 및 CSP(암호화 서비스 공급자)를 지정하는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Never hard code a password within your source code.</source>
          <target state="translated">하드 코딩 하지 마십시오 소스 코드 내에서 암호입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Hard-coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>For a list of hash algorithm names, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.</source>
          <target state="translated">목록이 해시 알고리즘 이름에 대 한 참조는 <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The password for which to derive the key.</source>
          <target state="translated">키를 파생시킬 암호입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The name of the hash algorithm for the operation.</source>
          <target state="translated">작업에 대한 해시 알고리즘의 이름입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>The CSP parameters for the operation.</source>
          <target state="translated">작업에 대한 CSP 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호, 키 솔트, 해시 이름, 반복 횟수 및 CSP(암호화 서비스 공급자) 매개 변수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>Hard coded passwords can be retrieved from an assembly using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 도구, 16 진수 편집기 또는 notepad.exe와 같은 텍스트 편집기에서 어셈블리를 여는 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
          <source>For a list of hash algorithm names, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> class.</source>
          <target state="translated">목록이 해시 알고리즘 이름에 대 한 참조는 <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The algorithm name for which to derive the key.</source>
          <target state="translated">키를 파생시킬 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The hash algorithm name to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The size of the key, in bits, to derive.</source>
          <target state="translated">파생할 키의 크기(비트)입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The initialization vector (IV) to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 IV(초기화 벡터)입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>Derives a cryptographic key from the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 개체에서 암호화 키를 파생시킵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The derived key.</source>
          <target state="translated">파생된 키입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</source>
          <target state="translated">이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>If the <ph id="ph1">`keySize`</ph> parameter is set to 0 bits, the default key size for the specified algorithm is used.</source>
          <target state="translated">경우는 <ph id="ph1">`keySize`</ph> 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="keySize" /&gt;</ph> parameter is incorrect.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySize" /&gt;</ph> 매개 변수가 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
          <target state="translated">CSP(암호화 서비스 공급자)를 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="algname" /&gt;</ph> parameter is not a valid algorithm name.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="algname" /&gt;</ph> 매개 변수가 유효한 알고리즘 이름이 아닌 경우</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="alghashname" /&gt;</ph> parameter is not a valid hash algorithm name.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="alghashname" /&gt;</ph> 매개 변수가 유효한 해시 알고리즘 이름이 아닌 경우</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /&gt;</ph> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">`Finalize`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Security.Cryptography.PasswordDeriveBytes&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
          <source>The number of pseudo-random key bytes to generate.</source>
          <target state="translated">생성할 의사(pseudo) 난수 키 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
          <source>Returns pseudo-random key bytes.</source>
          <target state="translated">의사(pseudo) 난수 키 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
          <source>A byte array filled with pseudo-random key bytes.</source>
          <target state="translated">의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
          <source>This method can create any number of pseudo-random bytes.</source>
          <target state="translated">이 메서드는 모든 의사 난수 바이트 수를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
          <source>However, the strength of the byte sequence is limited by the number of bytes in the hash output.</source>
          <target state="translated">그러나 바이트 시퀀스의 강도 해시 출력의 바이트 수로 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.HashName">
          <source>Gets or sets the name of the hash algorithm for the operation.</source>
          <target state="translated">작업에 대한 해시 알고리즘의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.HashName">
          <source>The name of the hash algorithm for the operation.</source>
          <target state="translated">작업에 대한 해시 알고리즘의 이름입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.HashName">
          <source>The name of the hash value is fixed and an attempt is made to change this value.</source>
          <target state="translated">해시 값의 이름이 고정되어 있는데 이 값을 변경하려고 한 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
          <source>Gets or sets the number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
          <source>The number of iterations is fixed and an attempt is made to change this value.</source>
          <target state="translated">반복 횟수가 고정되어 있는데 이 값을 변경하려고 한 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
          <source>The property cannot be set because its value is out of range.</source>
          <target state="translated">값이 범위를 벗어나서 속성을 설정할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
          <source>This property requires a non-negative number.</source>
          <target state="translated">이 속성에는 0 또는 양의 정수가 필요합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.PasswordDeriveBytes.Reset">
          <source>Resets the state of the operation.</source>
          <target state="translated">작업의 상태를 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>Gets or sets the key salt value for the operation.</source>
          <target state="translated">작업의 키 솔트 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>The key salt value for the operation.</source>
          <target state="translated">작업의 키 솔트 값입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</source>
          <target state="translated">사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</source>
          <target state="translated">키 파생 하기 전에 암호의 끝에 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>These random bytes are known as salt.</source>
          <target state="translated">이러한 임의 바이트 솔트도 알려져 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
          <source>The key salt value is fixed and an attempt is made to change this value.</source>
          <target state="translated">키 솔트 값이 고정되어 있는데 이 값을 변경하려고 한 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>