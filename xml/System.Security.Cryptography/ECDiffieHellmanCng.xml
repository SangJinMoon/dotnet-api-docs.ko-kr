<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="02cdc-101">ECDH(Elliptic Curve Diffie-Hellman) 알고리즘의 CNG(Cryptography Next Generation) 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span> <span data-ttu-id="02cdc-102">이 클래스는 암호화 작업을 수행하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-102">This class is used to perform cryptographic operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-103"><xref:System.Security.Cryptography.ECDiffieHellmanCng> 클래스를 사용 하면 두 당사자를 공용 채널을 통해 통신 하는 경우에 개인 키 자료를 교환 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="02cdc-104">양쪽으로 참조 되는 동일한 비밀 값을 계산할 수는 *비밀 계약* 관리 되는 Diffie-hellman 클래스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="02cdc-105">비밀 계약 다양 한 대칭 키로 포함 한 목적으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="02cdc-106">그러나 비밀 계약을 직접 노출 하는 대신에는 <xref:System.Security.Cryptography.ECDiffieHellmanCng> 클래스 값을 제공 하기 전에 규약에 대해 일부 사후 처리를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="02cdc-107">이 게시물 처리 라고는 *KDF 파생 함수 ()을 키*; Diffie Hellman 개체 인스턴스에서 속성 집합을 통해 해당 매개 변수를 설정 하려면 어떤 KDF 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="02cdc-108">키 파생 함수</span><span class="sxs-lookup"><span data-stu-id="02cdc-108">Key derivation function</span></span>|<span data-ttu-id="02cdc-109">속성</span><span class="sxs-lookup"><span data-stu-id="02cdc-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="02cdc-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -비밀 계약을 처리 하는 데 사용 되는 해시 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="02cdc-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -앞에 해시 하기 전에 비밀 계약 선택적 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="02cdc-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -해시 하기 전에 비밀 계약에 추가할 선택적 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="02cdc-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -비밀 계약을 처리 하는 데 사용 되는 해시 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="02cdc-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-앞에 해시 하기 전에 비밀 계약 선택적 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="02cdc-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -해시 하기 전에 비밀 계약에 추가할 선택적 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="02cdc-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> -키 파생에 대 한 레이블입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="02cdc-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> -키 파생에 대 한 초기값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="02cdc-118">비밀 계약 키 파생 함수를 통해 전달 하는 결과는 응용 프로그램에 대 한 키 자료로 사용할 수 있는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="02cdc-119">생성 된 키 자료의 바이트 수; 키 파생 함수에 따라 달라 집니다. 예를 들어 s h A-512 512 비트의 키 자료를 생성 합니다 반면 s h A-256 256 비트의 키 자료에 생성 됩니다. ECDH 키 교환의 기본 흐름은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="02cdc-120">Alice와 Bob Diffie-hellman 키 교환 작업에 사용할 키 쌍 만들기</span><span class="sxs-lookup"><span data-stu-id="02cdc-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="02cdc-121">Alice와 Bob는 KDF을 구성에서 매개 변수는 동의 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="02cdc-122">Alice는 Bob 공개 키를 전송합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="02cdc-123">Bob Alice 그의 공개 키를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="02cdc-124">Alice와 Bob 상대방의 공개 키를 사용 하 여 비밀 계약을 생성 하 고 키를 생성 하는 비밀 계약 KDF 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02cdc-125">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Security.Cryptography.ECDiffieHellmanCng> 키 교환 및 해당 키를 사용 하 여 공용 채널을 통해 전송 하 고 받는 사람 암호를 해독할 수 있는 메시지를 암호화 하는 방법을 설정 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-126"><see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="02cdc-127">임의의 키 쌍을 사용하여 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-128">임의의 키 쌍의 521 비트의 기본 공개 키 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize"><span data-ttu-id="02cdc-129">키 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-129">The size of the key.</span></span> <span data-ttu-id="02cdc-130">유효한 키 크기는 256, 384 및 521비트입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-130">Valid key sizes are 256, 384, and 521 bits.</span></span></param>
        <summary><span data-ttu-id="02cdc-131">지정된 키 크기를 사용하여 임의의 키 쌍으로 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-132">임의의 키 쌍에 정의 된 공개 키 길이 갖습니다는 `keySize` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-133"><paramref name="keySize" />에서 잘못된 길이를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-133"><paramref name="keySize" /> specifies an invalid length.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="02cdc-134">CNG(Cryptography Next Generation) 클래스는 이 시스템에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="02cdc-135">현재 개체에 의해 수행되는 암호화 작업의 입력으로 사용할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-135">The key that will be used as input to the cryptographic operations performed by the current object.</span></span></param>
        <summary><span data-ttu-id="02cdc-136">지정된 <see cref="T:System.Security.Cryptography.CngKey" /> 개체를 사용하여 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-137"><paramref name="key" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-137"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-138"><paramref name="key" />가 ECDH(Elliptic Curve Diffie-Hellman) 알고리즘 그룹을 지정하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-138"><paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="02cdc-139">CNG(Cryptography Next Generation) 클래스는 이 시스템에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="02cdc-140">공개/개인 키 쌍을 생성하는 데 사용되는 곡선입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-140">The curve used to generate the public/private key pair.</span></span></param>
        <summary><span data-ttu-id="02cdc-141">해당 공개/개인 키 쌍이 지정된 곡선에서 생성되는 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-142">`curve` 유효성을 검사 해야 (즉, 반환 해야 `true`)에 전달 될 때는 <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> 메서드 명시적 여부와 관계 없이 prime 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="02cdc-143"><paramref name="curve" />의 유효성을 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-143"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-144">해시 함수를 사용하여 키로 사용할 수 있는 바이트를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-144">Derives bytes that can be used as a key using a hash function .</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-145">상대방의 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-145">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="02cdc-146">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-146">The hash algorithm  to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="02cdc-147">해시 전에 파생된 암호 앞에 추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-147">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="02cdc-148">해시 전에 파생된 암호 뒤에 추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-148">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="02cdc-149">해시 함수, 지정된 다른 당사자의 공개 키, 해시 알고리즘의 이름, 선행 값 및 후행 값을 사용하여 키로 사용할 수 있는 바이트를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span></span></summary>
        <returns><span data-ttu-id="02cdc-150">상대방의 공개 키와의 키 교환와 관련된 키 자료입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-150">The key material from the key exchange with the other party’s public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-151">하는 경우의 값 `secretPrepend` 또는 `secretAppend` 은 `null`를 빈 배열로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-152"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-152"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-153"><paramref name="otherPartyPublicKey" />가 ECDH 키가 아니거나 올바른 크기가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-153"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
 <span data-ttu-id="02cdc-154">또는</span><span class="sxs-lookup"><span data-stu-id="02cdc-154">-or-</span></span>  
  
 <span data-ttu-id="02cdc-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="02cdc-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="02cdc-156"><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-156">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-157">다른 모든 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-157">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-158">HMAC(해시 기반 메시지 인증 코드)를 사용하여 키로 사용할 수 있는 바이트를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-158">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-159">상대방의 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-159">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="02cdc-160">키 자료를 파생시키는 데 사용할 해시 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-160">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="02cdc-161">HMAC의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-161">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="02cdc-162">해시 전에 파생된 암호 앞에 추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-162">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="02cdc-163">해시 전에 파생된 암호 뒤에 추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-163">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="02cdc-164">HMAC(해시 기반 메시지 인증 코드)를 사용하여 키로 사용할 수 있는 바이트를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-164">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
        <returns><span data-ttu-id="02cdc-165">상대방의 공개 키와의 키 교환와 관련된 키 자료입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-165">The key material from the key exchange with the other party’s public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-166">하는 경우의 값 `secretPrepend` 또는 `secretAppend` 은 `null`를 빈 배열로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-166">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="02cdc-167">하는 경우의 값 `hmacKey` 은 `null`, Diffie Hellman ECDH (타원 곡선) 알고리즘의 결과 HMAC 키로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-167">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-168"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-168"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-169"><paramref name="otherPartyPublicKey" />가 ECDH 키가 아니거나 올바른 크기가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-169"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
 <span data-ttu-id="02cdc-170">또는</span><span class="sxs-lookup"><span data-stu-id="02cdc-170">-or-</span></span>  
  
 <span data-ttu-id="02cdc-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="02cdc-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="02cdc-172"><see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-172">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-173">다른 모든 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-173">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-174">두 당사자 간의 비밀 계약을 통해 생성되는 키 자료를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-174">Derives the key material that is generated from the secret agreement between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-175">Diffie Hellman ECDH (타원 곡선) 알고리즘 개인 키와 다른 당사자의 공개 키를 입력으로 받아들이고 출력으로 비밀 계약을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-175">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party’s public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="02cdc-176">다음 키 파생 함수 (KDF) 비밀 계약 되었으며 출력으로 키 자료를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-176">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-177">키 교환의 다른 당사자가 제공한 ECDH(Elliptic Curve Diffie-Hellman) 키의 공개 부분이 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-177">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="02cdc-178">두 번째 당사자의 공개 키가 들어 있는 <see cref="T:System.Security.Cryptography.CngKey" /> 개체를 사용하여 두 당사자 간의 비밀 계약을 통해 생성되는 키 자료를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-178">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="02cdc-179">키 자료가 들어 있는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-179">A byte array that contains the key material.</span></span> <span data-ttu-id="02cdc-180">이 정보는 현재 개체의 개인 키와 지정된 공개 키에 따라 계산되는 비밀 계약을 통해 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-180">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-181"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-181"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-182"><paramref name="otherPartyPublicKey" />이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-182"><paramref name="otherPartyPublicKey" /> is invalid.</span></span> <span data-ttu-id="02cdc-183"><see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> 속성이 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" />을 지정하지 않거나 키 크기가 이 인스턴스의 키 크기와 일치하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-183">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="02cdc-184">이 개체의 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> 속성이 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 키 파생 함수를 지정하지만 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 또는 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-184">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-185">다른 모든 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-185">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-186">키 교환의 다른 당사자가 제공한 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-186">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="02cdc-187">두 번째 당사자의 공개 키가 들어 있는 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 개체를 사용하여 두 당사자 간의 비밀 계약을 통해 생성되는 키 자료를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-187">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="02cdc-188">키 자료가 들어 있는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-188">A byte array that contains the key material.</span></span> <span data-ttu-id="02cdc-189">이 정보는 현재 개체의 개인 키와 지정된 공개 키에 따라 계산되는 비밀 계약을 통해 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-189">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-190"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-190"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-191"><paramref name="otherPartyPublicKey" />가 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 키가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-191"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-192">상대방의 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-192">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="02cdc-193">ASCII로 인코딩된 PRF 레이블입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-193">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="02cdc-194">64바이트 PRF 시드입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-194">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="02cdc-195">TLS(전송 계층 보안) PRF(의사 난수 함수) 파생 알고리즘을 사용하여 키로 사용할 수 있는 바이트를 파생합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-195">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span></span></summary>
        <returns><span data-ttu-id="02cdc-196">상대방의 공개 키와의 키 교환와 관련된 키 자료입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-196">The key material from the key exchange with the other party’s public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-197"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-197"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="02cdc-198">또는</span><span class="sxs-lookup"><span data-stu-id="02cdc-198">-or-</span></span>  
  
 <span data-ttu-id="02cdc-199"><paramref name="prfLabel" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-199"><paramref name="prfLabel" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="02cdc-200">또는</span><span class="sxs-lookup"><span data-stu-id="02cdc-200">-or-</span></span>  
  
 <span data-ttu-id="02cdc-201"><paramref name="prfSeed" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-201"><paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-202"><paramref name="otherPartyPublicKey" />가 ECDH 키가 아니거나 올바른 크기가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-202"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="02cdc-203"><paramref name="prfSeed" />의 정확한 길이가 64바이트가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-203"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>  
  
 <span data-ttu-id="02cdc-204">또는</span><span class="sxs-lookup"><span data-stu-id="02cdc-204">-or-</span></span>  
  
 <span data-ttu-id="02cdc-205">다른 모든 암호화 오류</span><span class="sxs-lookup"><span data-stu-id="02cdc-205">All other cryptographic errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-206">두 당사자 간에 생성된 비밀 계약에 대한 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-206">Gets a handle to the secret agreement generated between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-207"><xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> 메서드 오버 로드는 키 자료 아닌 원시 비밀 계약에 대 한 핸들을 해야 하는 고급 사용자에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-207">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="02cdc-208">비밀 계약 핸들 플랫폼에서 사용할 수 없습니다 래핑하는 작업을 수행 하는 호출을 호출는 <xref:System.Security.Cryptography.ECDiffieHellmanCng> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-208">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-209">키 교환의 다른 당사자가 제공한 ECDH(Elliptic Curve Diffie-Hellman) 키의 공개 부분이 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-209">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="02cdc-210">두 번째 당사자의 공개 키가 들어 있는 <see cref="T:System.Security.Cryptography.CngKey" /> 개체를 사용하여 두 당사자 간에 생성된 비밀 계약에 대한 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-210">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="02cdc-211">비밀 계약에 대한 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-211">A handle to the secret agreement.</span></span> <span data-ttu-id="02cdc-212">이 정보는 현재 개체의 개인 키와 지정된 공개 키에 따라 계산됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-212">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-213"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-213"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-214"><paramref name="otherPartyPublicKey" />가 ECDH 키가 아니거나 올바른 크기가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-214"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-215">다른 모든 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-215">All other errors.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="02cdc-216">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-216">for permission to call unmanaged code.</span></span> <span data-ttu-id="02cdc-217">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-217">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="02cdc-218">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="02cdc-218">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="02cdc-219">키 교환의 다른 당사자가 제공한 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-219">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="02cdc-220">두 번째 당사자의 공개 키가 들어 있는 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 개체를 사용하여 두 당사자 간에 생성된 비밀 계약에 대한 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-220">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="02cdc-221">비밀 계약에 대한 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-221">A handle to the secret agreement.</span></span> <span data-ttu-id="02cdc-222">이 정보는 현재 개체의 개인 키와 지정된 공개 키에 따라 계산됩니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-222">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-223"><paramref name="otherPartyPublicKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-223"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-224"><paramref name="otherPartyPublicKey" />가 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 키가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-224"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="02cdc-225">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-225"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="02cdc-226"><see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 사용되는 키 및 명시적 곡선 매개 변수를 <see cref="T:System.Security.Cryptography.ECParameters" /> 개체로 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-226">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="02cdc-227"><see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 사용되는 키 및 명시적 곡선 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-227">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-228">메서드가 곡선 값을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-228">The method cannot obtain curve values.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="02cdc-229">이 플랫폼에서는 명시적 내보내기가 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-229">Explicit export is not supported by this platform.</span></span> <span data-ttu-id="02cdc-230">Windows 10 이상이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-230">Windows 10 or higher is required.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="02cdc-231">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-231"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="02cdc-232"><see cref="T:System.Security.Cryptography.ECCurve" /> 개체가 사용하는 키를 <see cref="T:System.Security.Cryptography.ECParameters" /> 개체로 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-232">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="02cdc-233"><see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 사용되는 키 및 명명된 곡선 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-233">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-234">명명 된 곡선으로 키가 생성 하는 경우는 <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> 곡선 명명 된 지정 매개 변수를 포함 하는 필드          이렇게 하지 않으면 명시적 매개 변수를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-234">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-235">메서드가 곡선 값을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-235">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-236">XML 문자열에서 키 정보를 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-236">Deserializes the key information from an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="02cdc-237">deserialize할 XML 기반 키 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-237">The XML-based key information to be deserialized.</span></span></param>
        <summary><span data-ttu-id="02cdc-238">이 메서드가 구현되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-238">This method is not implemented.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-239">사용 하 여 XML 키를 deserialize 할는 <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> 오버 로드를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-239">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="02cdc-240">이 인스턴스에서 이 메서드가 재정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-240">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml"><span data-ttu-id="02cdc-241">deserialize할 XML 기반 키 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-241">The XML-based key information to be deserialized.</span></span></param>
        <param name="format"><span data-ttu-id="02cdc-242">XML 문자열의 형식을 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-242">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="02cdc-243">현재 사용 가능한 형식은 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-243">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="02cdc-244">지정된 형식을 사용하여 XML 문자열에서 키 정보를 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-244">Deserializes the key information from an XML string by using the specified format.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="02cdc-245"><paramref name="xml" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-245"><paramref name="xml" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02cdc-246"><paramref name="xml" />의 형식이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-246"><paramref name="xml" /> is malformed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="02cdc-247"><paramref name="format" />에 지정된 형식이 잘못된 경우.</span><span class="sxs-lookup"><span data-stu-id="02cdc-247"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="02cdc-248"><see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" /> 값만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-248">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="02cdc-249">다른 모든 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-249">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="02cdc-250">사용 후 삭제 공개/개인 키 쌍을 생성하는 데 사용되는 곡선입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-250">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="02cdc-251">지정된 곡선에 대해 사용 후 삭제 공개/개인 키 쌍을 새로 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-251">Generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-252">`curve` 유효성을 검사 해야 (즉, true를 반환 해야에 전달 될 때는 <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> 메서드) 암시적이 아니어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-252">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="02cdc-253">특징-2 곡선 Windows에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-253">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="02cdc-254"><paramref name="curve" />의 유효성을 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-254"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-255">키 자료를 생성하는 데 사용할 해시 알고리즘을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-255">Gets or sets the hash algorithm to use when generating key material.</span></span></summary>
        <value><span data-ttu-id="02cdc-256">해시 알고리즘을 지정하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-256">An object that specifies the hash algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-257">암호화 CNG (Next Generation) 개체 경우에만이 속성은 사용 된 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> 또는 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> 에 값이 설정의 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-257">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="02cdc-258">이 속성은 다음 알고리즘을 허용: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, 및 <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-258">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="02cdc-259">다른 사용자 지정 해시 알고리즘을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-259">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="02cdc-260">기본 알고리즘은 <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-260">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="02cdc-261">값이 <see langword="null." />인 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-261">The value is <see langword="null." /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-262">키 자료를 파생하는 데 사용할 HMAC(해시 기반 메시지 인증 코드) 키를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-262">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></summary>
        <value><span data-ttu-id="02cdc-263">키 자료를 파생하는 데 사용할 HMAC(해시 기반 메시지 인증 코드) 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-263">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-264">이 속성은 경우에만 적용 됩니다.는 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> 에 값이 설정의 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성 및 <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> 속성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-264">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="02cdc-265">기본적으로 이 값은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-265">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="02cdc-266">가져올 곡선의 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-266">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="02cdc-267"><see cref="T:System.Security.Cryptography.ECCurve" /> 개체에 대해 지정된 매개 변수를 현재 인스턴스에 키로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-267">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-268"><xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> 메서드는 새 작업은이 개체는 기존 키를 대체 <xref:System.Security.Cryptography.CngKey> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-268">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="02cdc-269">경우 `parameters` 만 포함 되어는 <xref:System.Security.Cryptography.ECParameters.Q> 공개 키만 가져온 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-269">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="02cdc-270">경우 `parameters` 도 포함 되어 <xref:System.Security.Cryptography.ECParameters.D>, 전체 키 쌍은 가져와야 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-270">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="02cdc-271">`parameter` <xref:System.Security.Cryptography.ECParameters.Curve> 값을 가져오는 곡선의 유형을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-271">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="02cdc-272"><paramref name="parameters" />의 유효성을 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-272"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="02cdc-273"><paramref name="parameters" />가 가져올 수 없는 곡선을 참조합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-273"><paramref name="parameters" /> references a curve that cannot be imported..</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="02cdc-274"><paramref name="parameters" />가 이 플랫폼에서 지원되지 않는 곡선을 참조합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-274"><paramref name="parameters" /> references a curve that is not supported by this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-275">현재 개체에서 암호화 작업에 사용하는 <see cref="T:System.Security.Cryptography.CngKey" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-275">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span></span></summary>
        <value><span data-ttu-id="02cdc-276">이 개체에서 암호화 작업을 수행하는 데 사용하는 키 쌍입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-276">The key pair used by this object to perform cryptographic operations.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-277"><see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 클래스의 키 파생 함수를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-277">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
        <value><span data-ttu-id="02cdc-278"><see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> 열거형 값인 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> 또는 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-278">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span></span> <span data-ttu-id="02cdc-279">기본값은 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-279">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-280">이 속성을 키 자료로 비밀 계약 변환 하는 데 사용 되는 키 파생 함수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-280">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="02cdc-281">열거형 값이 범위에서 벗어난 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-281">The enumeration value is out of range.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-282">키 파생에 사용되는 레이블 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-282">Gets or sets the label value that is used for key derivation.</span></span></summary>
        <value><span data-ttu-id="02cdc-283">레이블 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-283">The label value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-284">이 값이 키 파생에 사용 하는 경우는 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> 에 값이 설정의 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-284">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="02cdc-285">기본적으로는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-285">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-286">다른 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 개체에서 공유 비밀 계약을 생성하는 데 사용할 수 있는 공개 키를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-286">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span></span></summary>
        <value><span data-ttu-id="02cdc-287"><see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 개체의 이 인스턴스에 연결된 공개 키입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-287">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-288">키 자료를 생성할 때 비밀 계약에 추가되는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-288">Gets or sets a value that will be appended to the secret agreement when generating key material.</span></span></summary>
        <value><span data-ttu-id="02cdc-289">비밀 계약에 추가되는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-289">The value that is appended to the secret agreement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-290">이 값이 키 파생에 사용 하는 경우는 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> 또는 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> 키 파생 함수 (KDF)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="02cdc-291">비밀 계약 값 연결 하 고 결합 된 값은 키를 생성 하는 KDF에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-291">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="02cdc-292">기본적으로 이 값은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-293">키 자료를 파생할 때 비밀 계약의 시작 부분에 추가될 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-293">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span></span></summary>
        <value><span data-ttu-id="02cdc-294">키를 파생할 때 비밀 계약의 시작 부분에 추가될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-294">The value that is appended to the beginning of the secret agreement during key derivation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-295">이 값이 키 파생에 사용 하는 경우는 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성이 다음 값 중 하나:</span><span class="sxs-lookup"><span data-stu-id="02cdc-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="02cdc-296">비밀 계약에는 값은 앞에 추가 하 고 결합 된 값은 키 자료를 생성 (KDF) 키 파생 함수에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-296">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="02cdc-297">기본적으로 이 값은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-297">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-298">키 자료를 파생할 때 사용될 시드 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-298">Gets or sets the seed value that will be used when deriving key material.</span></span></summary>
        <value><span data-ttu-id="02cdc-299">시드 값입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-299">The seed value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-300">이 값이 키 파생에 사용 하는 경우는 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성이 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-300">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="02cdc-301">기본적으로 이 값은 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-301">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02cdc-302">키 정보를 XML 문자열로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-302">Serializes the key information to an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="02cdc-303">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-303"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="02cdc-304">이 메서드가 구현되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-304">This method is not implemented.</span></span></summary>
        <returns><span data-ttu-id="02cdc-305">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="02cdc-305">Not applicable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02cdc-306">현재 키 XML 표현으로 변환 하려면 사용 하 여는 <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> 오버 로드를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-306">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="02cdc-307">이 인스턴스에서 이 메서드가 재정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="02cdc-307">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="02cdc-308">XML 문자열의 형식을 지정하는 열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-308">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="02cdc-309">현재 사용 가능한 형식은 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-309">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="02cdc-310">지정된 형식을 사용하여 키 정보를 XML 문자열로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-310">Serializes the key information to an XML string by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="02cdc-311">요청된 형식에 따라 XML 문자열로 serialize한 키 정보가 들어 있는 문자열 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-311">A string object that contains the key information, serialized to an XML string, according to the requested format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="02cdc-312"><paramref name="format" />에 지정된 형식이 잘못된 경우.</span><span class="sxs-lookup"><span data-stu-id="02cdc-312"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="02cdc-313"><see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" /> 값만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-313">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="02cdc-314">비밀 계약을 HMAC(해시 기반 메시지 인증 코드)로 사용하여 키 자료를 파생하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-314">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span></span></summary>
        <value>
          <span data-ttu-id="02cdc-315">비밀 계약을 HMAC 키로 사용하여 키 자료를 파생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-315"><see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="02cdc-316">이 값이 키 파생에 사용 하는 경우는 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 속성이 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>합니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-316">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="02cdc-317">기본적으로 이 값은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="02cdc-317">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>