<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="597390917b804edf9f923f9907a94156a1a347fd" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37630586" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type Rfc2898DeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e0d92-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e0d92-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 암호, 솔트 및 반복 횟수를 가져오고 다음 호출을 통해 키를 생성 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e0d92-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="e0d92-103">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-104">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-106">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-107">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-108">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-109">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-110">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-111">다음 코드 예제에서는 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 만들려는 두 동일한 클래스에 대 한 키를 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="e0d92-112">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e0d92-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-114">The password used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-114">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="e0d92-115">The key salt used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-115">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-117">솔트 크기는 8 바이트 여야 합니다. 이상.</span><span class="sxs-lookup"><span data-stu-id="e0d92-117">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="e0d92-118">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-118">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-119">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-119">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-120"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-120">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-121">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-121">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-122">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-122">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-123">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-123">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-124">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-124">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-125">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-125">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-126">다음 코드 예제에서는 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 만들려는 두 동일한 클래스에 대 한 키를 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-126">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="e0d92-127">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-127">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-129">The password or salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-129">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-130">The password used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-130">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="e0d92-131">The size of the random salt that you want the class to generate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-131">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-133">솔트 크기는 8 바이트 여야 합니다. 이상.</span><span class="sxs-lookup"><span data-stu-id="e0d92-133">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="e0d92-134">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-134">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-135">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-135">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-136"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-136">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-137">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-137">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-138">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-138">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-139">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-139">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-140">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-140">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-141">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-141">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-142">The specified salt size is smaller than 8 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-142">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-143">The password or salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-143">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-144">The password used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-144">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="e0d92-145">The key salt used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-145">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-146">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-146">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-148">솔트 크기는 8 바이트 여야 합니다. 크거나 반복 횟수를 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-148">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="e0d92-149">반복의 최소 권장된 수는 1000 개입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-149">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="e0d92-150">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-150">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-151">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-151">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-152"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-152">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-153">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-153">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-154">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-154">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-155">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-155">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-156">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-156">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-157">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-157">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-159">The password or salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-159">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-160">The password used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-160">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="e0d92-161">The key salt used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-161">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-162">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-162">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-164">솔트 크기는 8 바이트 여야 합니다. 크거나 반복 횟수를 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-164">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="e0d92-165">반복의 최소 권장된 수는 1000 개입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-165">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="e0d92-166">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-166">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-167">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-167">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-168"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-168">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-169">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-169">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-170">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-170">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-171">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-171">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-172">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-172">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-173">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-173">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-174">다음 코드 예제에서는 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 만들려는 두 동일한 클래스에 대 한 키를 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-174">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="e0d92-175">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-175">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-177">The password or salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-177">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-178">The password used to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-178">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="e0d92-179">The size of the random salt that you want the class to generate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-179">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-180">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-180">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-182">솔트 크기는 8 바이트 여야 합니다. 크거나 반복 횟수를 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-182">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="e0d92-183">반복의 최소 권장된 수는 1000 개입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-183">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="e0d92-184">RFC 2898 키 및 초기화 벡터 (IV)에서 암호 및 솔트를 만들기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-184">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="e0d92-185">거의 무제한 길이 생성할 키를 허용 하는 의사 난수 함수를 사용 하 여 키를 파생 시키는 PBKDF2를 암호 기반 키 파생 함수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-185">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="e0d92-186"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 만드는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-186">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="e0d92-187">암호 기반 키 파생 함수에서 기본 키가 암호 및 다른 매개 변수는 값을 솔트 및 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-187">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="e0d92-188">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하세요. "PKCS #5: Password-based Cryptography Specification Version 2.0"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-188">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="e0d92-189">전체 세부 정보 섹션 5.2 "PBKDF2를"를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e0d92-189">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d92-190">하드 코드 하지 소스 코드 내에서 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-190">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="e0d92-191">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 해당 어셈블리를 열기만 하면 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-191">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-193">The password or salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-193">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e0d92-194">
            <paramref name="iterations" /> is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-194">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="e0d92-195">This parameter requires a non-negative number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-195">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-196">The password to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-196">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="e0d92-197">The key salt to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-197">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-198">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-198">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="e0d92-199">The hash algorithm to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-199">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-200">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-200">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e0d92-201">
            <paramref name="saltSize" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-201">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-202">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-202">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="e0d92-203">Hash algorithm name is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-203">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-204">The password to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-204">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="e0d92-205">The key salt to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-205">The key salt to use to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-206">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-206">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="e0d92-207">The hash algorithm to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-207">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-208">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-208">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-209">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-209">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="e0d92-210">Hash algorithm name is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-210">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="e0d92-211">The password to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-211">The password to use to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="e0d92-212">The size of the random salt that you want the class to generate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-212">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="e0d92-213">The number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-213">The number of iterations for the operation.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="e0d92-214">The hash algorithm to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-214">The hash algorithm to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-215">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-215">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e0d92-216">
            <paramref name="saltSize" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-216">
              <paramref name="saltSize" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-217">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-217">The <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> property of <paramref name="hashAlgorithm" /> is either <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="e0d92-218">Hash algorithm name is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-218">Hash algorithm name is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="rfc2898DeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="e0d92-219">The algorithm name for which to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-219">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="e0d92-220">The hash algorithm name to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-220">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="e0d92-221">The size of the key, in bits, to derive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-221">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="e0d92-222">The initialization vector (IV) to use to derive the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-222">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-223">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-223">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0d92-224">The derived key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-224">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-225">이 함수를 CryptDeriveKey() Crypto API 함수에 대 한 래퍼인 하며 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-225">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="e0d92-226">경우는 `keySize` 0 비트 매개 변수는 설정, 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-226">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="e0d92-227">The <paramref name="keySize" /> parameter is incorrect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-227">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="e0d92-228">-or-  The cryptographic service provider (CSP) cannot be acquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-228">-or-  The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="e0d92-229">-or-  The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-229">-or-  The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="e0d92-230">-or-  The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-230">-or-  The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="rfc2898DeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="e0d92-231">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-231">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-232">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-232">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-233">이 메서드는 공용 `Dispose()` 메서드 및 `Finalize` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e0d92-233">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="e0d92-234">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-234">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="e0d92-235">`Finalize` 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-235">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="e0d92-236">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-236">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="e0d92-237">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-237">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e0d92-238">
            <para>
              <see langword="Dispose" /> 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see langword="Dispose(Boolean)" />대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <see langword="Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [삭제 Method](~/docs/standard/garbage-collection/implementing-dispose.md) 구현 합니다.  에 대 한 자세한 내용은 <see langword="Dispose" /> 고 <see langword="Finalize" />, [정리를 관리 되지 않는 Resources](~/docs/standard/garbage-collection/unmanaged.md)를 참조 하세요.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-238">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="rfc2898DeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="e0d92-239">The number of pseudo-random key bytes to generate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-239">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0d92-240">Returns the pseudo-random key for this object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-240">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0d92-241">A byte array filled with pseudo-random key bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-241">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-242">합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 의사 난수 생성기를 기반으로 사용 하 여 PBKDF2 기능을 구현 하는 클래스 <xref:System.Security.Cryptography.HMACSHA1>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-242">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="e0d92-243">합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 암호, 솔트 및 반복 횟수를 한 다음 호출을 통해 키를 생성 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e0d92-243">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="e0d92-244">이 메서드를 반복 해 서 호출 된 동일한 키를 생성 하지 않습니다. 대신 두 호출을 추가 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드를 `cb` 매개 변수 값 `20` 호출 하는 것과 같습니다를 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드를 한 번을 `cb` 매개 변수 값 `40`.</span><span class="sxs-lookup"><span data-stu-id="e0d92-244">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-245">다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 인스턴스에 대 한 키를 가져오려면 메서드 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-245">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="e0d92-246">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-246">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e0d92-247">
            <paramref name="cb" /> is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-247">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="e0d92-248">This parameter requires a non-negative number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-248">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e0d92-249">Gets or sets the number of iterations for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-249">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e0d92-250">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-250">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-251">반복 횟수 작업이 수행 되는 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-251">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="e0d92-252">이 메서드에 대 한 개수가 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-252">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="e0d92-253">반복의 최소 권장된 수는 1000 개입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-253">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-254">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> 속성을 키의 생성에 사용 되는 반복 횟수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-254">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="e0d92-255">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-255">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e0d92-256">The number of iterations is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-256">The number of iterations is less than 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="rfc2898DeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e0d92-257">Resets the state of the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-257">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-258">이 메서드는 salt 나 반복 수를 수정 된 경우에 자동으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-258">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d92-259">다음 예제에서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-259">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="e0d92-260">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-260">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e0d92-261">Gets or sets the key salt value for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-261">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e0d92-262">작업의 키 솔트 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-262">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d92-263">솔트 바이트의 임의 집합 확인 무단 어려워집니다 메시지의 암호를 해독 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-263">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="e0d92-264">사전 공격은 가능성이 가장 높은 키에 대해 이전에 계산 된 암호화 된 값을 사용 하 여 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하려고 시도 공격자는 공격입니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-264">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="e0d92-265">이 공격 끝 키 파생 되기 전에 암호의 솔트, 또는 임의 바이트를 도입 하 여 훨씬 더 어렵게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0d92-265">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e0d92-266">The specified salt size is smaller than 8 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-266">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e0d92-267">The salt is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d92-267">The salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>