<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Rfc2898DeriveBytes.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">360c3a36-c465-4a92-baa7-e17b5430051fcd3ac9896d8adba5fc15cbc6580e9e102d0b902f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd3ac9896d8adba5fc15cbc6580e9e102d0b902f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7865e39826e7aaf54da4c7042975153813a31c7</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/16/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> 기반의 의사(pseudo) 난수 생성기를 사용하여 암호 기반 키 파생 기능인 PBKDF2를 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> takes a password, a salt, and an iteration count, and then generates keys through calls to the <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 에서는 암호, 솔트 및 반복 횟수를 한 다음 호출을 통해 키를 생성 된 <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class to create two identical keys for the <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 동일한 두 개의 만들 클래스에 대 한 키에서 <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>It then encrypts and decrypts some data using the keys.</source>
          <target state="translated">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.Rfc2898DeriveBytes">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using a password and salt to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호 및 솔트를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class to create two identical keys for the <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 동일한 두 개의 만들 클래스에 대 한 키에서 <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>It then encrypts and decrypts some data using the keys.</source>
          <target state="translated">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
          <source>The password or salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">암호나 솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">클래스에서 생성할 임의의 솔트 크기입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using the password and salt size to derive the key.</source>
          <target state="translated">키 파생을 위한 암호 및 솔트 크기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작은 경우</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
          <source>The password or salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">암호나 솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">키 파생을 위한 암호, 솔트 및 반복 횟수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
          <source>The password or salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">암호나 솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">키 파생을 위한 암호, 솔트 및 반복 횟수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class to create two identical keys for the <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 동일한 두 개의 만들 클래스에 대 한 키에서 <ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDES&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>It then encrypts and decrypts some data using the keys.</source>
          <target state="translated">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
          <source>The password or salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">암호나 솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">클래스에서 생성할 임의의 솔트 크기입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using a password, a salt size, and number of iterations to derive the key.</source>
          <target state="translated">키 파생을 위한 암호, 솔트 크기 및 반복 횟수를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>Never hard-code a password within your source code.</source>
          <target state="translated">하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>, 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>The password or salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">암호나 솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="iterations" /&gt;</ph> is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="iterations" /&gt;</ph>가 범위에서 벗어난 경우</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">이 매개 변수에는 0 또는 양의 정수가 필요합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The password to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</source>
          <target state="translated">지정된 암호, 솔트, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="saltSize" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="saltSize" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph>의 <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Hash algorithm name is invalid.</source>
          <target state="translated">해시 알고리즘 이름이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The password to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The key salt to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using the specified password, salt, number of iterations and the hash algorithm name to derive the key.</source>
          <target state="translated">지정된 암호, 솔트, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph>의 <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Hash algorithm name is invalid.</source>
          <target state="translated">해시 알고리즘 이름이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The password to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 암호입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">클래스에서 생성할 임의의 솔트 크기입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class using the specified password, salt size, number of iterations and the hash algorithm name to derive the key.</source>
          <target state="translated">지정된 암호, 솔트 크기, 반복 횟수 및 해시 알고리즘 이름을 사용하여 키를 파생시키는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="saltSize" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="saltSize" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="hashAlgorithm" /&gt;</ph>의 <ph id="ph1">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Hash algorithm name is invalid.</source>
          <target state="translated">해시 알고리즘 이름이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The algorithm name for which to derive the key.</source>
          <target state="translated">키를 파생시킬 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The hash algorithm name to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 해시 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The size of the key, in bits, to derive.</source>
          <target state="translated">파생할 키의 크기(비트)입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The initialization vector (IV) to use to derive the key.</source>
          <target state="translated">키를 파생시키는 데 사용할 IV(초기화 벡터)입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>Derives a cryptographic key from the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 개체에서 암호화 키를 파생시킵니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The derived key.</source>
          <target state="translated">파생된 키입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</source>
          <target state="translated">이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>If the <ph id="ph1">`keySize`</ph> parameter is set to 0 bits, the default key size for the specified algorithm is used.</source>
          <target state="translated">경우는 <ph id="ph1">`keySize`</ph> 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="keySize" /&gt;</ph> parameter is incorrect.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySize" /&gt;</ph> 매개 변수가 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
          <target state="translated">CSP(암호화 서비스 공급자)를 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="algname" /&gt;</ph> parameter is not a valid algorithm name.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="algname" /&gt;</ph> 매개 변수가 유효한 알고리즘 이름이 아닌 경우</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="alghashname" /&gt;</ph> parameter is not a valid hash algorithm name.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="alghashname" /&gt;</ph> 매개 변수가 유효한 해시 알고리즘 이름이 아닌 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /&gt;</ph> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">`Finalize`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>The number of pseudo-random key bytes to generate.</source>
          <target state="translated">생성할 의사(pseudo) 난수 키 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>Returns the pseudo-random key for this object.</source>
          <target state="translated">이 개체에 대한 의사(pseudo) 난수 키를 반환합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>A byte array filled with pseudo-random key bytes.</source>
          <target state="translated">의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class implements PBKDF2 functionality by using a pseudorandom number generator based on <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스는 난수 생성기를 사용 하 여 PBKDF2 기능을 구현 <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스를 다음 호출을 통해 키를 생성 하는 암호, 솔트 및 반복 횟수를 가져와서는 <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>Repeated calls to this method will not generate the same key; instead, appending two calls of the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> method with a <ph id="ph2">`cb`</ph> parameter value of <ph id="ph3">`20`</ph> is the equivalent of calling the <ph id="ph4">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> method once with a <ph id="ph5">`cb`</ph> parameter value of <ph id="ph6">`40`</ph>.</source>
          <target state="translated">이 메서드를 반복된 하 여 호출; 같은 키를 생성 하지 않습니다. 두 번의 호출을 추가 하는 대신,는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> 사용 하 여 메서드는 <ph id="ph2">`cb`</ph> 매개 변수 값의 <ph id="ph3">`20`</ph> 호출에 해당는 <ph id="ph4">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> 메서드를 한 번는 <ph id="ph5">`cb`</ph> 매개 변수 값의 <ph id="ph6">`40`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> method to get the key for an instance of <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph>.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</ph> 메서드의 인스턴스에 대 한 키를 얻기 위해 <ph id="ph2">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="cb" /&gt;</ph> is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cb" /&gt;</ph>가 범위에서 벗어난 경우</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">이 매개 변수에는 0 또는 양의 정수가 필요합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>Gets or sets the number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업의 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>Iteration count is the number of times an operation is performed.</source>
          <target state="translated">반복 횟수는 작업을 수행 하는 횟수입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>For this method, the count should be greater than zero.</source>
          <target state="translated">이 메서드에 대 한 개수가 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A&gt;</ph> property to display the number of iterations used in the generation of the key.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A&gt;</ph> 속성 키의 생성에 사용 되는 반복 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
          <source>The number of iterations is less than 1.</source>
          <target state="translated">반복 횟수가 1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
          <source>Resets the state of the operation.</source>
          <target state="translated">작업의 상태를 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
          <source>This method is automatically called if the salt or iteration count is modified.</source>
          <target state="translated">이 메서드는 솔트 나 반복 횟수가 수정 된 경우에 자동으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>Gets or sets the key salt value for the operation.</source>
          <target state="translated">작업의 키 솔트 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>The key salt value for the operation.</source>
          <target state="translated">작업의 키 솔트 값입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</source>
          <target state="translated">솔트, 바이트의 임의 집합 확인 하기가 더 어려워지므로 메시지의 인증 되지 않은 암호를 해독 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</source>
          <target state="translated">사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</source>
          <target state="translated">키 파생 하기 전에 암호의 끝에 솔트, 즉 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">지정된 솔트 크기가 8바이트보다 작은 경우</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
          <source>The salt is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">솔트가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>