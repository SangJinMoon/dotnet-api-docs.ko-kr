<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb88d38ba71eab51c03b25070016871c9628d94b" />
    <Meta Name="ms.sourcegitcommit" Value="254e16ae65e82f4aa59360cd8572b36b6b5b2f80" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/05/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4d19e-101">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 기반의 의사(pseudo) 난수 생성기를 사용하여 암호 기반 키 파생 기능인 PBKDF2를 구현합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d19e-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 에서는 암호, 솔트 및 반복 횟수를 한 다음 호출을 통해 키를 생성 된 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4d19e-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="4d19e-103">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-104">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-106">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-107">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-108">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-109">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-110">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-111">다음 코드 예제에서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 동일한 두 개의 만들 클래스에 대 한 키에서 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="4d19e-112">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d19e-113">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="4d19e-114">키 파생에 사용되는 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-114">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="4d19e-115">키 파생에 사용되는 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-115">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-116">키를 파생시키는 데 사용할 암호 및 솔트를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-117">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-117">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="4d19e-118">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-118">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-119">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-119">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-120"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-120">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-121">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-121">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-122">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-122">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-123">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-123">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-124">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-124">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-125">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-125">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-126">다음 코드 예제에서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 동일한 두 개의 만들 클래스에 대 한 키에서 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-126">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="4d19e-127">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-127">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-128">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-129">암호나 솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-129">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="4d19e-130">키 파생에 사용되는 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-130">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="4d19e-131">클래스에서 생성할 임의의 솔트 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-131">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-132">키 파생을 위한 암호 및 솔트 크기를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-133">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-133">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="4d19e-134">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-134">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-135">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-135">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-136"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-136">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-137">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-137">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-138">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-138">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-139">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-139">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-140">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-140">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-141">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-141">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-142">지정된 솔트 크기가 8바이트보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-142">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-143">암호나 솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-143">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="4d19e-144">키 파생에 사용되는 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-144">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="4d19e-145">키 파생에 사용되는 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-145">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="4d19e-146">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-146">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-147">키 파생을 위한 암호, 솔트 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-148">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-148">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="4d19e-149">최소 권장된 반복 횟수는 1000입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-149">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="4d19e-150">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-150">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-151">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-151">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-152"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-152">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-153">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-153">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-154">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-154">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-155">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-155">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-156">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-156">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-157">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-157">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-158">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-159">암호나 솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-159">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="4d19e-160">키 파생에 사용되는 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-160">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="4d19e-161">키 파생에 사용되는 키 솔트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-161">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="4d19e-162">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-162">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-163">키 파생을 위한 암호, 솔트 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-164">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-164">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="4d19e-165">최소 권장된 반복 횟수는 1000입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-165">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="4d19e-166">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-166">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-167">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-167">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-168"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-168">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-169">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-169">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-170">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-170">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-171">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-171">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-172">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-172">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-173">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-173">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-174">다음 코드 예제에서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 동일한 두 개의 만들 클래스에 대 한 키에서 <xref:System.Security.Cryptography.TripleDES> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-174">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="4d19e-175">그런 다음 암호화 하 고 키를 사용 하 여 일부 데이터를 해독 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-175">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-176">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-177">암호나 솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-177">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="4d19e-178">키 파생에 사용되는 암호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-178">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="4d19e-179">클래스에서 생성할 임의의 솔트 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-179">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="4d19e-180">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-180">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-181">키 파생을 위한 암호, 솔트 크기 및 반복 횟수를 사용하여 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-182">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-182">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="4d19e-183">최소 권장된 반복 횟수는 1000입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-183">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="4d19e-184">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-184">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="4d19e-185">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-185">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="4d19e-186"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-186">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="4d19e-187">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-187">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="4d19e-188">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 [의견 웹 사이트에 대 한 요청](http://go.microsoft.com/fwlink/?LinkID=37119)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-188">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="4d19e-189">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="4d19e-189">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4d19e-190">하드 코드 하지 소스 코드에는 암호입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-190">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="4d19e-191">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), 16 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-191">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-192">지정된 솔트 크기가 8바이트보다 작거나 반복 횟수가 1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-193">암호나 솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-193">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d19e-194">
            <paramref name="iterations" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-194">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="4d19e-195">이 매개 변수에는 0 또는 양의 정수가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-195">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="saltSize">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="4d19e-196">키를 파생시킬 알고리즘 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-196">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="4d19e-197">키를 파생시키는 데 사용할 해시 알고리즘 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-197">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="4d19e-198">파생할 키의 크기(비트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-198">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="4d19e-199">키를 파생시키는 데 사용할 IV(초기화 벡터)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-199">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-200">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 개체에서 암호화 키를 파생시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-200">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d19e-201">파생된 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-201">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-202">이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-202">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="4d19e-203">경우는 `keySize` 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-203">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="4d19e-204">
            <paramref name="keySize" /> 매개 변수가 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-204">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="4d19e-205">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-205">-or-</span>
          </span>
          <span data-ttu-id="4d19e-206">CSP(암호화 서비스 공급자)를 가져올 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-206">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="4d19e-207">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-207">-or-</span>
          </span>
          <span data-ttu-id="4d19e-208">
            <paramref name="algname" /> 매개 변수가 유효한 알고리즘 이름이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-208">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="4d19e-209">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-209">-or-</span>
          </span>
          <span data-ttu-id="4d19e-210">
            <paramref name="alghashname" /> 매개 변수가 유효한 해시 알고리즘 이름이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-210">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="4d19e-211">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-211">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-212">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-212">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-213">이 메서드는 public `Dispose()` 메서드 및 `Finalize` 메서드.</span><span class="sxs-lookup"><span data-stu-id="4d19e-213">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="4d19e-214">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-214">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="4d19e-215">`Finalize` 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-215">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="4d19e-216">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-216">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="4d19e-217">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-217">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="4d19e-218">
              <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="4d19e-218">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="4d19e-219">재정의 하는 경우 <see langword="Dispose(Boolean)" />한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <see langword="Dispose" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="4d19e-219">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="4d19e-220">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="4d19e-220">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="4d19e-221">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see langword="Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="4d19e-221">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="4d19e-222">생성할 의사(pseudo) 난수 키 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-222">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d19e-223">이 개체에 대한 의사(pseudo) 난수 키를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-223">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d19e-224">의사(pseudo) 난수 키 바이트로 채워진 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-224">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-225"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스는 난수 생성기를 사용 하 여 PBKDF2 기능을 구현 <xref:System.Security.Cryptography.HMACSHA1>합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-225">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="4d19e-226"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스를 다음 호출을 통해 키를 생성 하는 암호, 솔트 및 반복 횟수를 가져와서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4d19e-226">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="4d19e-227">이 메서드를 반복된 하 여 호출; 같은 키를 생성 하지 않습니다. 두 번의 호출을 추가 하는 대신,는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 사용 하 여 메서드는 `cb` 매개 변수 값의 `20` 호출에 해당는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드를 한 번는 `cb` 매개 변수 값의 `40`합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-227">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-228">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> 메서드의 인스턴스에 대 한 키를 얻기 위해 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-228">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="4d19e-229">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-229">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d19e-230">
            <paramref name="cb" />가 범위에서 벗어난 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-230">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="4d19e-231">이 매개 변수에는 0 또는 양의 정수가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-231">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d19e-232">작업의 반복 횟수를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-232">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d19e-233">작업의 반복 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-233">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-234">반복 횟수는 작업을 수행 하는 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-234">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="4d19e-235">이 메서드에 대 한 개수가 0 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-235">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="4d19e-236">최소 권장된 반복 횟수는 1000입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-236">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-237">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> 속성 키의 생성에 사용 되는 반복 수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-237">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="4d19e-238">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-238">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d19e-239">반복 횟수가 1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-239">The number of iterations is less than 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d19e-240">작업의 상태를 다시 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-240">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-241">이 메서드는 솔트 나 반복 횟수가 수정 된 경우에 자동으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-241">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d19e-242">다음 예제에서는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-242">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="4d19e-243">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-243">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d19e-244">작업의 키 솔트 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-244">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d19e-245">작업의 키 솔트 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-245">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d19e-246">솔트, 바이트의 임의 집합 확인 하기가 더 어려워지므로 메시지의 인증 되지 않은 암호를 해독 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-246">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="4d19e-247">사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-247">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="4d19e-248">키 파생 하기 전에 암호의 끝에 솔트, 즉 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4d19e-248">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d19e-249">지정된 솔트 크기가 8바이트보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-249">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d19e-250">솔트가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d19e-250">The salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>