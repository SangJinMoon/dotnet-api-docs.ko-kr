<Type Name="MemoryProtectionScope" FullName="System.Security.Cryptography.MemoryProtectionScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f6873ccb304798d8472dcbbe22118d3f20f8facf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum MemoryProtectionScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MemoryProtectionScope extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.MemoryProtectionScope" />
  <TypeSignature Language="VB.NET" Value="Public Enum MemoryProtectionScope" />
  <TypeSignature Language="C++ CLI" Value="public enum class MemoryProtectionScope" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="a715d-101">
        <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> 메서드를 통해 적용할 메모리 보호 범위를 지정합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a715d-101">Specifies the scope of memory protection to be applied by the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a715d-102">이 열거형은와 사용는 <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> 및 <xref:System.Security.Cryptography.ProtectedMemory.Unprotect%2A> 메모리에 데이터를 보호 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a715d-102">This enumeration is used with the <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> and <xref:System.Security.Cryptography.ProtectedMemory.Unprotect%2A> methods to protect data in memory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a715d-103">다음 코드 예제에서는 데이터 보호를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a715d-103">The following code example shows how to use data protection.</span></span>  
  
 [!code-cpp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CPP/memoryprotectionsample.cpp#1)]
 [!code-csharp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CS/memoryprotectionsample.cs#1)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/vb/memoryprotectionsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CrossProcess">
      <MemberSignature Language="C#" Value="CrossProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope CrossProcess = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.CrossProcess" />
      <MemberSignature Language="VB.NET" Value="CrossProcess" />
      <MemberSignature Language="C++ CLI" Value="CrossProcess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="a715d-104">
            <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> 메서드를 사용하여 보호된 메모리를 임의의 프로세스에서 모든 코드로 보호 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a715d-104">All code in any process can unprotect memory that was protected using the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SameLogon">
      <MemberSignature Language="C#" Value="SameLogon" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameLogon = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.SameLogon" />
      <MemberSignature Language="VB.NET" Value="SameLogon" />
      <MemberSignature Language="C++ CLI" Value="SameLogon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="a715d-105">
            <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> 메서드를 호출한 코드와 동일한 사용자 컨텍스트에서 실행되는 코드에서만 메모리를 보호 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a715d-105">Only code running in the same user context as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method can unprotect memory.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SameProcess">
      <MemberSignature Language="C#" Value="SameProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameProcess = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.SameProcess" />
      <MemberSignature Language="VB.NET" Value="SameProcess" />
      <MemberSignature Language="C++ CLI" Value="SameProcess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="a715d-106">
            <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> 메서드를 호출한 코드와 동일한 프로세스에서 실행되는 코드에서만 메모리를 보호 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a715d-106">Only code running in the same process as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method can unprotect memory.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>