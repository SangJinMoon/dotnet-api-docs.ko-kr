<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA384.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac595774be99a2bc91e6ab520c421de580645b78404.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95774be99a2bc91e6ab520c421de580645b78404</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA384" /&gt;</ph> hash function.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA384" /&gt;</ph> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> sha-384 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The HMAC process mixes a secret key with the message data and hashes the result.</source>
          <target state="translated">HMAC 프로세스는 메시지 데이터에는 비밀 키를 혼합 하 고 그 결과입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The hash value is mixed with the secret key again, and then hashed a second time.</source>
          <target state="translated">해시 값이 다시 비밀 키와 혼합 하 고를 두 번째로 해시 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The output hash is 384 bits long.</source>
          <target state="translated">출력 해시 길이 384 비트입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC 비밀 키를 공유 하는 발신자와 수신자 보안상 위험한 채널을 통해 보낸 메시지가 훼손 되었는지 여부를 확인 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</source>
          <target state="translated">보낸 사람에 게는 원본 데이터에 대 한 해시 값을 계산 하 고 단일 메시지로 원래 데이터와 해시 값을 보냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">수신자는 받은 메시지에 대해 해시 값을 다시 계산 하 고 계산된 HMAC 전송 된 HMAC 일치 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>If the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">원래과 계산 된 해시 값이 일치 하는 경우에 메시지 인증 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>If they do not match, either the data or the hash value has been changed.</source>
          <target state="translated">일치 하지 않으면 데이터 나 해시 값 변경 되었습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">Hmac 비밀 키의 지식이 없어도 메시지를 변경 하 고 올바른 해시 값을 다시 만들기 때문에 변조 행동에 대해 보안을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> accepts all key sizes and produces a hash sequence that is 384 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> 모든 크기의 키를 받아서 해시 시퀀스 길이 384 비트를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> object, and then how to verify the file.</source>
          <target state="translated">다음 예제를 사용 하 여 파일을 서명 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> 개체 및 해당 파일을 확인 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA384">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> class by using a randomly generated key.</source>
          <target state="translated">임의로 생성된 키를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA384.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">이 생성자는 64 바이트, 임의로 생성 된 키를 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> 암호화에 대한 비밀 키입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>The key can be any length.</source>
          <target state="translated">키 길이에 제한은 없지만</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>However, the recommended size is 128 bytes.</source>
          <target state="translated">단, 권장되는 크기는 128바이트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key.</source>
          <target state="translated">키가 128바이트를 초과하면 해시되어(SHA-384 사용) 128바이트 키가 파생됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>If it is less than 128 bytes long, it is padded to 128 bytes.</source>
          <target state="translated">128바이트보다 짧은 경우 128바이트까지 채워집니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> class by using the specified key data.</source>
          <target state="translated">지정된 키 데이터를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> class.</source>
          <target state="translated">이 생성자를 사용 하는 방법의 예제를 보려면는 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source>Provides a workaround for the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> implementation of the <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> algorithm, which is inconsistent with the <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> implementation of the algorithm.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA384" /&gt;</ph> 알고리즘에 대한 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> 구현이 <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> 구현과 일치하지 않는 문제에 대한 해결 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> 응용 프로그램과 <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> 응용 프로그램의 상호 작용을 설정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues%2A&gt;</ph> Boolean property is to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications.</source>
          <target state="translated">용도 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues%2A&gt;</ph> 부울 속성은 사용할 수 있도록 <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> 응용 프로그램 상호 작용을 <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source>When you set this property to <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> object produces values that match the values produced by the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.</source>
          <target state="translated">이 속성을 설정 하면 <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA384&gt;</ph> 에서 생성 된 값과 일치 하는 값을 생성 하는 개체는 <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source>You should set this property only once after you create your HMAC object.</source>
          <target state="translated">HMAC 개체를 만든 후에이 속성을 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
          <source>You will need to reset your key afterwards, as shown in the following example.</source>
          <target state="translated">됩니다 다시 설정 해야 키 이후에, 다음 예제와 같이 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>