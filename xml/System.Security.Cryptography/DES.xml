<Type Name="DES" FullName="System.Security.Cryptography.DES">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d50fca96544a72ef6f1e1466cacc67cd022f61cb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30497827" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DES extends System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DES" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DES&#xA;Inherits SymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class DES abstract : System::Security::Cryptography::SymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.SymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>모든 <see cref="T:System.Security.Cryptography.DES" /> 구현이 파생되어야 하는 DES(데이터 암호화 표준) 알고리즘에 대한 기본 클래스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 알고리즘은 64 비트의 키 길이 지원 합니다.  
  
> [!NOTE]
> 새 비대칭 암호화 알고리즘, 암호화 표준 AES (고급), ´ ù. 사용 하는 것이 좋습니다는 <xref:System.Security.Cryptography.Aes> 클래스 대신는 <xref:System.Security.Cryptography.DES> 클래스입니다. 사용 하 여 <xref:System.Security.Cryptography.DES> 레거시 응용 프로그램 및 데이터와 호환성을 위해서만 합니다.
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DES ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DES();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.DES" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 추상 클래스의 인스턴스를 만들 수 없습니다. 응용 프로그램 코드에서는 파생된 클래스의 새 인스턴스를 만듭니다.  
  
 이 메서드는 보호 되는 필드의 초기화는 <xref:System.Security.Cryptography.SymmetricAlgorithm> 클래스에는 다음 표에 표시 된 기본값입니다.  
  
|필드|기본값|  
|-----------|-------------------|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|64|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘을 수행하는 암호화 개체의 인스턴스를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DES Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DES Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As DES" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DES ^ Create();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DES</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘을 수행하는 암호화 개체의 인스턴스를 만듭니다.</summary>
        <returns>암호화 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인스턴스를 만듭니다는 <xref:System.Security.Cryptography.DES> 데이터 암호화 및 해독에 사용할 수 있는 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에 만들고 사용 하는 방법을 보여 줍니다는 <xref:System.Security.Cryptography.DES> 파일에 대 한 데이터 암호화 및 해독 하는 개체입니다.  
  
 [!code-cpp[Cryptography.DES.Create.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.File/CPP/fileexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.File/CS/fileexample.cs#1)]
 [!code-vb[Cryptography.DES.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.File/VB/fileexample.vb#1)]  
  
 다음 코드 예제에 만들고 사용 하는 방법을 보여 줍니다는 <xref:System.Security.Cryptography.DES> 메모리에 대 한 데이터 암호화 및 해독 하는 개체입니다.  
  
 [!code-cpp[Cryptography.DES.Create.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CPP/memoryexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Create.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CS/memoryexample.cs#1)]
 [!code-vb[Cryptography.DES.Create.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.Memory/VB/memoryexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DES Create (string algName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DES Create(string algName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algName As String) As DES" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DES ^ Create(System::String ^ algName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DES</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algName">사용하려는 <see cref="T:System.Security.Cryptography.DES" />의 특정 구현에 대한 이름입니다.</param>
        <summary>암호화 개체의 인스턴스를 만들어 지정된 데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘을 구현합니다.</summary>
        <returns>암호화 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에 만들고 사용 하는 방법을 보여 줍니다는 <xref:System.Security.Cryptography.DES> 파일에 대 한 데이터 암호화 및 해독 하는 개체입니다.  
  
 [!code-cpp[Cryptography.DES.Createstring.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CPP/fileexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Createstring.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CS/fileexample.cs#1)]
 [!code-vb[Cryptography.DES.Createstring.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.File/VB/fileexample.vb#1)]  
  
 다음 코드 예제에 만들고 사용 하는 방법을 보여 줍니다는 <xref:System.Security.Cryptography.DES> 메모리에 대 한 데이터 암호화 및 해독 하는 개체입니다.  
  
 [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CPP/memoryexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CS/memoryexample.cs#1)]
 [!code-vb[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/VB/memoryexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSemiWeakKey">
      <MemberSignature Language="C#" Value="public static bool IsSemiWeakKey (byte[] rgbKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSemiWeakKey(unsigned int8[] rgbKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSemiWeakKey (rgbKey As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSemiWeakKey(cli::array &lt;System::Byte&gt; ^ rgbKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">semi-weak인지 테스트할 비밀 키입니다.</param>
        <summary>지정된 키가 semi-weak인지 여부를 확인합니다.</summary>
        <returns>
          키가 semi-weak이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Semi-weak 키는 암호를 해독 하기 쉬운는 만드는 키 쌍입니다. 텍스트 semi-weak 키로 암호화 된 키가 semi-weak 파트너와 암호를 만들면 원본 텍스트를 반환 합니다. 6 개의 알려진된 semi-weak 키 쌍에 대 한 데이터 암호화 표준 없는 (<xref:System.Security.Cryptography.DES>) 알고리즘;이 해당 semi-weak 키에 대 한 메서드를 확인 합니다.  
  
 Semi-weak 키 결과 설정 하려고 한 <xref:System.Security.Cryptography.CryptographicException>합니다. 때 <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> semi-weak 키 반환 되지 것입니다 임의의 키를 만들기 위해 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="rgbKey" /> 매개 변수의 크기가 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWeakKey">
      <MemberSignature Language="C#" Value="public static bool IsWeakKey (byte[] rgbKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWeakKey(unsigned int8[] rgbKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWeakKey (rgbKey As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWeakKey(cli::array &lt;System::Byte&gt; ^ rgbKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">약한지 테스트할 비밀 키입니다.</param>
        <summary>지정된 키가 약한지 여부를 확인합니다.</summary>
        <returns>
          키가 약하면 <see langword="true" />이고, 약하지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 약한 키는 암호를 해독 하기 쉬운는 만드는 키입니다. 텍스트 weak 키로 암호화 된 암호를 만들면 동일한 weak 키 다시 암호화 원본 텍스트를 반환 합니다. 한 데이터 암호화 표준에 대 한 네 가지 알려진 약한 키 (<xref:System.Security.Cryptography.DES>) 알고리즘;이 약한 해당 키에 대 한 메서드를 확인 합니다.  
  
 약한 키 결과 설정 하려고 한 <xref:System.Security.Cryptography.CryptographicException>합니다. 때 <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> 호출 되는 임의 키를 만들려면 weak 키 반환 되지 것입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="rgbKey" /> 매개 변수의 크기가 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override byte[] Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DES.Key" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Key As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ Key { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 암호화 표준(<see cref="T:System.Security.Cryptography.DES" />) 알고리즘에 대한 비밀 키를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.DES" /> 알고리즘에 대한 비밀 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 `null` 사용 될 때 <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> 새 임의 값을 만들어야 하기 위해 호출 됩니다.  
  
 키의 길이 동일 해야 합니다. <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>합니다.  
  
 이 알고리즘은 64 비트의 키 길이 지원 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">키를 <see langword="null" />로 설정하려고 시도한 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" />와 길이가 다른 키를 설정하려고 한 경우</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">weak 키(<see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" /> 참조)나 semi-weak 키(<see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" /> 참조)를 설정하려고 한 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>