<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e0915be18b8c1f8512a72dc9a1f0f642e7d7ee6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37624174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="98f6f-101">
        <see cref="T:System.Security.Cryptography.RIPEMD160" /> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="98f6f-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98f6f-102"><xref:System.Security.Cryptography.HMACRIPEMD160> RIPEMD-160 해시 함수에서 생성 되 고으로 해시 기반 메시지 인증 코드 (HMAC)를 사용 하는 키 지정된 해시 알고리즘의 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="98f6f-103">HMAC 프로세스 메시지 데이터를 사용 하 여 비밀 키를 혼합, 해시 함수를 사용 하 여 그 결과, 비밀 키를 사용 하 여 해당 해시 값을 다시, 혼합 및 해시 함수를 한 번 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="98f6f-104">출력 해시는 160 비트 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="98f6f-105">발신자와 수신자 공유 비밀 키를 안전 하지 않은 채널을 통해 보낸 메시지가 훼손 되었는지 여부를 확인 하는 HMAC는 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="98f6f-106">보낸 사람에 게 원래 데이터에 대 한 해시 값을 계산 하 고 원래 데이터와 해시 값을 단일 메시지로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="98f6f-107">수신자는 받은 메시지에 대해 해시 값을 다시 계산 하 고 계산 된 HMAC 전송된 HMAC 일치 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="98f6f-108">데이터 또는 해시 값을 변경한 비밀 키의 지식이 없어도 메시지를 변경 하 고 올바른 해시 값을 다시 만들기 때문에 불일치를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="98f6f-109">따라서 원래과 계산 된 해시 값이 일치 하는 경우에 메시지 인증 됩니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="98f6f-110"><xref:System.Security.Cryptography.HMACRIPEMD160> 모든 크기의 키를 받고 160 비트 길이 해시 시퀀스를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="98f6f-111">RIPEMD 해시 알고리즘 및 해당 승계인 유럽 제거 프로젝트에서 개발 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="98f6f-112">원래 RIPEMD 알고리즘 나중에 강화 된 및 RIPEMD-160 이름이 MD4 및 MD5를 대체 하도록 고안 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="98f6f-113">RIPEMD-160 해시 알고리즘에는 160 비트 해시 값을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="98f6f-114">알고리즘의 설계 자들은 공개 했습니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98f6f-115">다음 예제에서는 파일을 사용 하 여 로그인 하는 방법의 <xref:System.Security.Cryptography.HMACRIPEMD160> 개체 및 해당 파일을 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="98f6f-116">
            <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="98f6f-117">임의로 생성된 64비트 키를 사용하여 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98f6f-118"><xref:System.Security.Cryptography.HMACRIPEMD160> RIPEMD-160 해시 함수에서 생성 되 고으로 해시 기반 메시지 인증 코드 (HMAC)를 사용 하는 키 지정된 해시 알고리즘의 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="98f6f-119">HMAC 프로세스 메시지 데이터를 사용 하 여 비밀 키를 혼합, 해시 함수를 사용 하 여 그 결과, 비밀 키를 사용 하 여 해당 해시 값을 다시, 혼합 및 해시 함수를 한 번 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="98f6f-120">출력 해시는 160 바이트의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="98f6f-121">이 생성자는 64 바이트, 임의로 생성 된 키를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="98f6f-122">
            <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 암호화에 대한 비밀 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span>
          </span>
          <span data-ttu-id="98f6f-123">키 길이에 제한은 없지만 64바이트를 초과하면 키가 해시되어(SHA-1 사용) 64바이트 키가 파생됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span>
          </span>
          <span data-ttu-id="98f6f-124">그러므로 비밀 키에 권장되는 크기는 64바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-124">Therefore, the recommended size of the secret key is 64 bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98f6f-125">지정된 키 데이터를 사용하여 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98f6f-126"><xref:System.Security.Cryptography.HMACRIPEMD160> RIPEMD-160 해시 함수에서 생성 되 고으로 해시 기반 메시지 인증 코드 (HMAC)를 사용 하는 키 지정된 해시 알고리즘의 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="98f6f-127">HMAC 프로세스 메시지 데이터를 사용 하 여 비밀 키를 혼합, 해시 함수를 사용 하 여 그 결과, 비밀 키를 사용 하 여 해당 해시 값을 다시, 혼합 및 해시 함수를 한 번 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="98f6f-128">출력 해시는 160 바이트의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98f6f-129">이 생성자를 사용 하는 방법의 예제를 참조 하세요.를 <xref:System.Security.Cryptography.HMACRIPEMD160> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="98f6f-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98f6f-130">
            <paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="98f6f-130">The <paramref name="key" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>