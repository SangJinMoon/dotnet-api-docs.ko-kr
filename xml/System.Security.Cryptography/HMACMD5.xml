<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACMD5.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52b4d9728bce0d03a7c7adb77236650b5857a603d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b4d9728bce0d03a7c7adb77236650b5857a603d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACMD5">
          <source>Computes a Hash-based Message Authentication Code (HMAC) by using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.MD5" /&gt;</ph> hash function.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.MD5" /&gt;</ph> 해시 기능을 사용하여 HMAC(해시 기반 메시지 인증 코드)를 계산합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the Message Digest Algorithm 5 (MD5) hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> 메시지 다이제스트 알고리즘 5 (MD5) 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>The output hash is 128 bits in length.</source>
          <target state="translated">출력 해시는 128 비트 길이입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC는 발신자와 수신자 공유 비밀 키를 보안 되지 않은 채널을 통해 보낸 메시지가 훼손 되었는지 여부를 확인 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">보낸 사람에 게는 원본 데이터에 대 한 해시 값을 계산 하 고 단일 메시지로 원래 데이터와 해시 값을 보냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">수신자는 받은 메시지에 대해 해시 값을 다시 계산 하 고 계산된 HMAC 전송 된 HMAC 일치 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">비밀 키의 지식이 없어도 메시지를 변경 하 고 올바른 해시 값을 다시 만들기 때문에 데이터 나 해시 값을 변경한 경우 불일치가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">따라서 원래과 계산 된 해시 값이 일치 하는 경우에 메시지가 인증 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>MD5 is a cryptographic hash algorithm developed at RSA Laboratories.</source>
          <target state="translated">M d 5가 RSA Laboratories에서 개발 하는 암호화 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> accepts keys of any size, and produces a hash sequence that is 128 bits in length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> 모든 크기의 키를 받아서 해시 시퀀스는 길이가 128 비트를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACMD5">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">다음 예제를 사용 하 여 파일을 서명 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> 개체와 해당 파일을 확인 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACMD5">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> class by using a randomly generated key.</source>
          <target state="translated">임의로 생성된 키를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> MD5 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor">
          <source>The output hash is 128 bits in length.</source>
          <target state="translated">출력 해시는 128 비트 길이입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">이 생성자는 64 바이트, 임의로 생성 된 키를 사용합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> 암호화에 대한 비밀 키입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>The key can be any length, but if it is more than 64 bytes long it will be hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">키 길이에 제한은 없지만 64바이트를 초과하면 키가 해시되어(SHA-1 사용) 64바이트 키가 파생됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">그러므로 비밀 키에 권장되는 크기는 64바이트입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> class by using the specified key.</source>
          <target state="translated">지정된 키를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACMD5" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> is a type of keyed hash algorithm that is constructed from the MD5 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> MD5 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘 유형이입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 프로세스는 비밀 키를 메시지 데이터와 혼합, 해시 함수가 그 결과, 비밀 키와 해당 해시 값을 다시, 혼합 및 해시 함수를 두 번 적용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>The output hash is 128 bits in length.</source>
          <target state="translated">출력 해시는 128 비트 길이입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>This constructor uses a key you provide to create the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> object.</source>
          <target state="translated">이 생성자를 만들기 위해 제공 하는 키를 사용 하 여 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> class.</source>
          <target state="translated">이 생성자를 사용 하는 방법의 예제를 보려면는 <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACMD5&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>