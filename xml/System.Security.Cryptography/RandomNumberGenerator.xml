<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RandomNumberGenerator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cad21ebba9ee4bb77582b33df171fb1b5987a421b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad21ebba9ee4bb77582b33df171fb1b5987a421b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Represents the abstract class from which all implementations of cryptographic random number generators derive.</source>
          <target state="translated">임의의 암호화 수 생성기의 모든 구현이 파생될 추상 클래스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Cryptographic random number generators create cryptographically strong random values.</source>
          <target state="translated">임의의 암호화 수 생성기 임의의 암호화 수준 값을 만듭니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>To create a random number generator, call the <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> method.</source>
          <target state="translated">호출 하는 난수 생성기를 만들려면는 <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>This is prefered over calling the constructor of the derived class <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, which is not available on all platforms.</source>
          <target state="translated">파생된 클래스의 생성자 호출을 통해 이것은 기본 설정 된 다른 <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, 모든 플랫폼에서 사용할 수 없으면입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>You cannot create an instance of an abstract class.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Application code will create a new instance of a derived class.</source>
          <target state="translated">응용 프로그램 코드에서는 파생된 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>For an implementation of a cryptographic random number generator, use the derived class <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.</source>
          <target state="translated">임의의 암호화 수 생성기의 구현, 파생된 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Creates an instance of an implementation of a cryptographic random number generator.</source>
          <target state="translated">임의의 암호화 수 생성기의 구현 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>Creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.</source>
          <target state="translated">임의의 데이터를 생성하는 데 사용할 수 있는 임의의 암호화 수 생성기의 기본 구현 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">임의의 암호화 수 생성기의 새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>The name of the random number generator implementation to use.</source>
          <target state="translated">사용할 난수 생성기 구현의 이름입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>Creates an instance of the specified implementation of a cryptographic random number generator.</source>
          <target state="translated">임의의 암호화 숫자 생성기의 지정된 구현 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">임의의 암호화 수 생성기의 새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>When overridden in a derived class, releases the unmanaged resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 관리되지 않는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>When overridden in a derived class, releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 사용을 마치면 <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 메서드를 사용하면 <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>를 사용할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> was occupying.</source>
          <target state="translated">호출한 후 <ph id="ph1">`Dispose`</ph>에 대 한 모든 참조를 해제 해야는 <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> 차지한 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Dispose 메서드를 구현<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>에 대한 마지막 참조를 해제하기 전에 반드시 <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>를 호출하십시오.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이렇게 하지 않으면 가비지 수집기가 <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> 개체의 <ph id="ph2">`Finalize`</ph> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">`Finalize`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 하십시오 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">강력하게 암호화된 임의의 값 시퀀스로 바이트 배열을 채웁니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">임의의 암호화 수준 바이트로 채울 배열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">파생 클래스에 재정의할 경우, 임의의 암호화 수준 시퀀스 값으로 바이트 배열을 채웁니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">바이트 배열의 길이 생성 된 임의 바이트 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The following example creates a random sequence 100 bytes long and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">다음 예제에서는 100 바이트 길이의 임의 시퀀스를 만들어에 저장 합니다. <ph id="ph1">`random`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">임의의 암호화 수준 바이트로 채울 배열입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the array to start the fill operation.</source>
          <target state="translated">채우기 작업을 시작할 배열의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to fill.</source>
          <target state="translated">채울 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>Fills the specified byte array with a cryptographically strong random sequence of values.</source>
          <target state="translated">임의의 암호화 수준 시퀀스 값으로 지정된 바이트 배열을 채웁니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than 0</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> exceeds the length of <ph id="ph3">&lt;paramref name="data" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 더하기 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="data" /&gt;</ph>의 길이를 초과합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random nonzero bytes.</source>
          <target state="translated">강력하게 암호화된 임의의 0이 아닌 바이트로 채울 배열입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.</source>
          <target state="translated">파생 클래스에 재정의할 경우, 0이 아닌 임의의 암호화 수준 시퀀스 값으로 바이트 배열을 채웁니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">바이트 배열의 길이 생성 된 임의 바이트 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The following example creates a random sequence of 100 nonzero bytes and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">다음 예제에서는 100 0이 아닌 바이트의 임의 시퀀스를 만들고 저장 <ph id="ph1">`random`</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>