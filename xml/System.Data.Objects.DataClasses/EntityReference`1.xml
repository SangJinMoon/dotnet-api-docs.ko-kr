<Type Name="EntityReference&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityReference&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="948e47dfbd85b87b3148962ea0ea5cde3b04cd3a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EntityReference&lt;TEntity&gt; : System.Data.Objects.DataClasses.EntityReference where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityReference`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.EntityReference" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityReference(Of TEntity)&#xA;Inherits EntityReference" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityReference sealed : System::Data::Objects::DataClasses::EntityReference" />
  <TypeSignature Language="F#" Value="type EntityReference&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit EntityReference" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.EntityReference</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">참조의 엔터티 형식입니다.</typeparam>
    <summary>Represents a related end of an association with a multiplicity of zero or one.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관련 End의 다중성이 0 또는 1이면 탐색 속성에 의해 <xref:System.Data.Objects.DataClasses.EntityReference%601> 개체가 반환됩니다. 자세한 내용은 [NavigationProperty 요소 (CSDL)](http://msdn.microsoft.com/library/5829a238-a50e-4c81-901d-7b54fc00f27e)합니다.  
  
 <xref:System.Data.Objects.DataClasses.EntityReference%601> 개체 관계의 다른 쪽 End에 해당 <xref:System.Data.Objects.DataClasses.EntityCollection%601>(일대다 관계) 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601>(일대일 관계)가 포함될 수 있습니다. <xref:System.Data.Objects.DataClasses.EntityReference%601> 및 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 모델이 같은 관계의 반대편 End에 있으면 관계의 무결성이 개체 수준에서 유지 관리됩니다.  
  
 이 클래스는 상속될 수 없습니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 개체를 사용하여 `SalesOrderHeader` 개체와 주문의 배송 주소를 나타내는 관련 `Address` 개체 사이의 관계를 변경하는 방법을 보여 줍니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#changeobjectrelationship)]
 [!code-vb[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#changeobjectrelationship)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityReference.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">The object being attached.</param>
        <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Attach%2A> 메서드는 한 개체와 관련 개체가 모두 개체 컨텍스트에 이미 연결되어 있을 때 두 개체 간의 관계를 정의하는 데 사용됩니다. 관련 개체가 개체 컨텍스트에 이미 연결되지 않은 경우 관련 개체를 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 속성으로 설정합니다. @FSHO2@두 개체가 모두 분리되어 있으면 관련 개체를 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 속성으로 설정하고 개체 그래프의 루트 개체를 연결하여 관계를 정의할 수도 있습니다. 자세한 내용은 [연결 및 분리 개체](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다.  
  
 이 <xref:System.Data.Objects.DataClasses.EntityReference%601>과 연결된 개체 및 여기에 연결 중인 모든 개체는 <xref:System.Data.EntityState.Unchanged> 또는 <xref:System.Data.EntityState.Modified> 상태여야 합니다.  
  
 @FSHO2@<xref:System.Data.EntityState.Deleted>가 관계 인스턴스를 이미 추적하고 있는 경우 <xref:System.Data.Objects.ObjectStateManager> 상태의 개체만 연결할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityReference.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an equivalent object query that returns the related object.</summary>
        <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that returns the related object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 실행되면 관련 개체를 반환하는 새 <xref:System.Data.Objects.ObjectQuery%601> 인스턴스를 가져오는 데 사용됩니다. 이 메서드는 보다 복잡한 조인, 통합 또는 필터링된 쿼리의 시작 지점으로 사용하거나, <xref:System.Data.Objects.MergeOption.NoTracking> 옵션을 사용하여 분리된 상태의 참조된 개체를 반환하는 데 유용합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.  -or-  When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityReference.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Specifies how the object should be returned if it already exists in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Loads the related object for this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> with the specified merge option.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 관련 개체를 로드하는 데 사용됩니다.  
  
 로드된 후에는 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 속성에서 관련 개체에 액세스합니다.  
  
 관련 개체를 명시적으로 로드하려면 탐색 속성을 통해 반환된 관련 End에서 `Load` 메서드를 호출해야 합니다. 일대다 관계의 경우 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>에 대해 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 메서드를 호출하고, 일대일 관계의 경우 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>에 대해 <xref:System.Data.Objects.DataClasses.EntityReference%601>를 호출합니다. 이렇게 하면 관련 개체 데이터가 개체 컨텍스트에 로드됩니다. 쿼리 결과 반환 하는 경우 사용 하 여 개체의 컬렉션을 열거할 수 있습니다는 `foreach` 루프 (`For Each...Next` Visual Basic의) 조건부로 호출 합니다 `Load` 메서드를 <xref:System.Data.Objects.DataClasses.EntityReference%601> 및 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 의 각 엔터티에 대 한 속성 결과입니다.  
  
 합니다 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 메서드는 데이터 소스의 여부 관련된 개체를 로드 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> 는 `true`합니다.  
  
> [!NOTE]
>  <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>(C#) 또는 `foreach`(Visual Basic) 열거를 수행하는 동안 `For Each` 메서드를 호출하면 개체 서비스에서 새 데이터 판독기를 열려고 시도합니다. 연결 문자열에서 `multipleactiveresultsets=true`를 지정하여 MARS(Multiple Active Result Sets)를 활성화하지 않은 경우에는 이 작업이 실패합니다. 쿼리 결과를 <xref:System.Collections.Generic.List%601> 컬렉션에 로드할 수도 있습니다. 이렇게 하면 데이터 판독기가 닫히고 컬렉션 전체를 열거하여 참조된 개체를 로드할 수 있게 됩니다.  
 
이 메서드 호출 내부 `RelatedEnd.ValidateLoad` 메서드를 호출 하는지 확인 하는 관련된 개체를 로드 하기 전에 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 에 올바른 조건이 있습니다. `RelatedEnd.ValidateLoad` 메서드 하는지 확인 합니다.

* 유효한 <xref:System.Data.Objects.ObjectContext> 존재 합니다.
* 에 없는 엔터티는 <xref:System.Data.EntityState.Deleted> 상태입니다.
* <xref:System.Data.Objects.MergeOption> 에 대 한 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 있어야 <xref:System.Data.Objects.MergeOption.NoTracking> 경우에 원본 엔터티가 <xref:System.Data.Objects.MergeOption.NoTracking>합니다. 원본 엔터티는 다른를 사용 하 여 검색 된 경우 <xref:System.Data.Objects.MergeOption>는 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption> 도 될 수 있습니다 <xref:System.Data.Objects.MergeOption.NoTracking> (예를 들어, 엔터티 수 로드 된 <xref:System.Data.Objects.MergeOption.OverwriteChanges> 및 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 옵션 수<xref:System.Data.Objects.MergeOption.AppendOnly>).
* 하는 경우 `mergeOption` 됩니다 <xref:System.Data.Objects.MergeOption.NoTracking>, <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 이미 로드 된 엔터티에 대해 호출 되지 않은 및 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 는 비어 있지 않은, not 추적에서 호출 되지 않은 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다.

 관련된 개체가 이미 로드 되는 경우는 <xref:System.Data.Objects.ObjectContext>, <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 메서드를 적용 합니다 <xref:System.Data.Objects.MergeOption> 에 지정 된를 `mergeOption` 매개 변수. 자세한 내용은 [Id 확인, 상태 관리 및 변경 내용 추적](http://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is <see langword="null" />.  -or-  A query returned more than one related end.  -or-  A query returned zero related ends, and one related end was expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnRefDeserialized">
      <MemberSignature Language="C#" Value="public void OnRefDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnRefDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnRefDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnRefDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnRefDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnRefDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The serialized stream.</param>
        <summary>This method is used internally to serialize related entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The serialized stream.</param>
        <summary>This method is used internally to serialize related entity objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public TEntity Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TEntity Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityReference`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TEntity Value { TEntity get(); void set(TEntity value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'Entity with get, set" Usage="System.Data.Objects.DataClasses.EntityReference&lt;'Entity (requires 'Entity : null)&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.SoapIgnore</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the related object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
        <value>이 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />에서 반환되는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정할 값이 현재 값과 같으면 값이 할당되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>