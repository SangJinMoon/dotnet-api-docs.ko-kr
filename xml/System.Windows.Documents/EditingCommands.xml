<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="84b5572cf9ba0ae76ee1c5c3bb7375f8ce499c04" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37521576" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="64ee1-101">편집 관련 명령의 표준 집합을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-101">Provides a standard set of editing related commands.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-102">다음 표에서 편집 명령과 연결 된 기본 키 제스처 (에서 키 이름의 합니다 <xref:System.Windows.Input.Key> 및 <xref:System.Windows.Input.ModifierKeys> 열거형)입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="64ee1-103">명령 편집</span><span class="sxs-lookup"><span data-stu-id="64ee1-103">Editing command</span></span>|<span data-ttu-id="64ee1-104">기본 키 제스처</span><span class="sxs-lookup"><span data-stu-id="64ee1-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="64ee1-105">기본 키 제스처가 없습니다</span><span class="sxs-lookup"><span data-stu-id="64ee1-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="64ee1-106">기본 키 제스처가 없습니다</span><span class="sxs-lookup"><span data-stu-id="64ee1-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="64ee1-107">캐럿 이동 명령 및 선택 영역 확장 명령을 기본 키 제스처의 공통 집합을 추가 되 고 일반 차이 공유 합니다 <xref:System.Windows.Input.ModifierKeys.Shift> 캐럿 이동 명령을 선택 명령 구별 하기 위해 키입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="64ee1-108">예를 들어 합니다 <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> 명령에는 기본 키 제스처는 <xref:System.Windows.Input.Key.Left>, 및 해당 <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> 명령에는 기본 키 제스처는 <xref:System.Windows.Input.ModifierKeys.Shift> + <xref:System.Windows.Input.Key.Left>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="64ee1-109">명령 정의에서 제공 하는 일반적으로 <xref:System.Windows.Documents.EditingCommands> 클래스를 만들지 마십시오 명령 매개 변수를 사용 (합니다 `parameter` 에 필요한 매개 변수는 <xref:System.Windows.Input.ICommand.Execute%2A> 메서드).</span><span class="sxs-lookup"><span data-stu-id="64ee1-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="64ee1-110">명령 및 명령에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-110">For more information on commands and commanding, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-111">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-112">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-113">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-114">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-115">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-116">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-117">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-118">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-119">현재 단락이나 단락의 선택 영역이 가운데 놓이도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span></span></summary>
        <value><span data-ttu-id="64ee1-120">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-120">The requested command.</span></span>  <span data-ttu-id="64ee1-121">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="E" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-122">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-123">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-124">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 효과 전체 내용의 선택 영역에 참여 하는 각 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-125">다음 그림에는 가운데 맞춤 된 콘텐츠의 예가 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="64ee1-126">![스크린 샷: Center의 TextAlign 속성 값](~/add/media/flowdoc-textalign-center.png "스크린 샷: Center의 TextAlign 속성 값")</span><span class="sxs-lookup"><span data-stu-id="64ee1-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="64ee1-127">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-128">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-129">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-130">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-131">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-132">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-133">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-134">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-135">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-136">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-137">현재 단락이나 단락의 선택 영역이 양쪽 맞춤되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span></span></summary>
        <value><span data-ttu-id="64ee1-138">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-138">The requested command.</span></span>  <span data-ttu-id="64ee1-139">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="J" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-140">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-141">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-142">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 결과 선택 영역에 있는 모든 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-143">콘텐츠를 맞출 동일 하거나 거의 같도록 너비의 줄 맞춤으로 정렬된 되도록 각 내용 줄 내의 가로 간격 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="64ee1-144">콘텐츠를 일반적으로 양쪽의 콘텐츠를 부드러운 가장자리 만드는 맞춥니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="64ee1-145">이기 때문에 종종 다른 보다 짧은이 명령이 호출 된 후에 단락의 마지막 줄은 양쪽 맞춤 되지 않고 남아 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="64ee1-146">다음 그림에 양쪽 맞춤 되지 않은 (왼쪽 맞춤) 내용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="64ee1-147">![스크린 샷: 콘텐츠 양쪽 맞춤 되지 않은](~/add/media/content-unjustified.png "스크린 샷: 콘텐츠 맞춤으로 정렬 됩니다.")</span><span class="sxs-lookup"><span data-stu-id="64ee1-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="64ee1-148">양쪽 맞춤 된 후 다음 그림에서 동일한 콘텐츠를 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="64ee1-149">![콘텐츠의 스크린 샷 텍스트 맞춤](~/add/media/content-justified.png "콘텐츠의 스크린 샷 텍스트 맞춤")</span><span class="sxs-lookup"><span data-stu-id="64ee1-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="64ee1-150">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-151">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-152">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-153">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-154">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-155">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-156">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-157">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-158">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-159">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-160">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-161">콘텐츠의 선택 영역을 왼쪽에 맞추도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span></span></summary>
        <value><span data-ttu-id="64ee1-162">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-162">The requested command.</span></span>  <span data-ttu-id="64ee1-163">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="L" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-164">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-165">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-166">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 효과 전체 내용의 선택 영역에 참여 하는 각 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-167">다음 그림에는 왼쪽 맞춤 콘텐츠의 예가 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="64ee1-168">![스크린 샷: 왼쪽의 TextAlign 속성 값](~/add/media/flowdoc-textalign-left.png "스크린 샷: Left의 TextAlign 속성 값")</span><span class="sxs-lookup"><span data-stu-id="64ee1-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="64ee1-169">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-170">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-171">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-172">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-173">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-174">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-175">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-176">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-177">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-178">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-179">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-180">콘텐츠의 선택 영역을 오른쪽에 맞추도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span></span></summary>
        <value><span data-ttu-id="64ee1-181">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-181">The requested command.</span></span>  <span data-ttu-id="64ee1-182">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="R" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-183">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-184">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-185">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 효과 전체 내용의 선택 영역에 참여 하는 각 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-186">다음 그림에는 오른쪽 맞춤 콘텐츠의 예가 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="64ee1-187">![스크린 샷: Right의 TextAlign 값](~/add/media/flowdoc-textalign-right.png "스크린 샷: Right의 TextAlign 값")</span><span class="sxs-lookup"><span data-stu-id="64ee1-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="64ee1-188">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-189">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-190">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-191">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-192">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-193">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-194">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-195">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-196">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-197">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-198">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-199">현재 위치나 현재 선택 영역에 백스페이스가 입력되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-200">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-200">The requested command.</span></span>  <span data-ttu-id="64ee1-201">이 명령의 기본 키 제스처는 <see langword="Backspace" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-201">The default key gesture for this command is <see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-202">빈 선택 영역에서 호출 되 면이 명령은 캐럿 직전 문자 또는 단락 구분 기호를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="64ee1-203">비어 있지 않은 선택에 호출 되 면 선택 항목을 삭제이 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="64ee1-204">이 명령은 삭제 된 즉시이 명령이 호출 된 후 동일한 위치에 삽입 되는 콘텐츠 선택 영역의 서식을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="64ee1-205">대비를 <xref:System.Windows.Documents.EditingCommands.Delete%2A> 명령을 이전 서식 지정을 유지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="64ee1-206">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-207">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-208">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-209">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-210">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-211">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-212">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-213">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-214">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-215">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-216">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-217">현재 위치에서 철자가 잘못된 단어를 수정하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span></span></summary>
        <value><span data-ttu-id="64ee1-218">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-218">The requested command.</span></span>  <span data-ttu-id="64ee1-219">이 명령에는 기본 키 제스처가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-219">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-220">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-221">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-222">현재 선택 영역의 글꼴 크기가 1포인트씩 감소하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span></span></summary>
        <value><span data-ttu-id="64ee1-223">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-223">The requested command.</span></span>  <span data-ttu-id="64ee1-224">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="OemOpenBrackets" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-225">단어 내의 캐럿이 있는 빈 선택 영역에서이 명령을 호출 하는 경우 선택 영역 전체 단어에 명령을 적용 하도록 자동으로 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="64ee1-226">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-227">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-228">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-229">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-230">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-231">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-232">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-233">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-234">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-235">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-236">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-237">현재 단락의 들여쓰기가 탭 정지 하나만큼씩 감소하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="64ee1-238">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-238">The requested command.</span></span>  <span data-ttu-id="64ee1-239">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="T" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-240">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-241">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="64ee1-242">하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 텍스트 요소의 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-243">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-244">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-245">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-246">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-247">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-248">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-249">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-250">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-251">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-252">현재 선택 영역을 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span></span></summary>
        <value><span data-ttu-id="64ee1-253">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-253">The requested command.</span></span>  <span data-ttu-id="64ee1-254">이 명령의 기본 키 제스처는 <see langword="Delete" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-254">The default key gesture for this command is <see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-255">이 명령은 삭제 된 선택 영역의 모든 서식 지정을 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="64ee1-256">대비를 <xref:System.Windows.Documents.EditingCommands.Backspace%2A> 명령을 즉시이 명령이 호출 된 후 동일한 위치에 삽입 된 내용에 대 한 삭제 선택 영역의 서식을 유지 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="64ee1-257">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-258">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-259">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-260">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-261">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-262">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-263">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-264">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-265">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-266">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-267">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-268">현재 위치를 기준으로 다음 단어를 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="64ee1-269">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-269">The requested command.</span></span>  <span data-ttu-id="64ee1-270">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Delete" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-271">단어 내에 캐럿이 현재 위치를 단어의 끝 사이의 단어의 나머지 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="64ee1-272">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-273">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-274">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-275">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-276">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-277">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-278">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-279">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-280">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-281">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-282">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-283">현재 위치를 기준으로 이전 단어를 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="64ee1-284">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-284">The requested command.</span></span>  <span data-ttu-id="64ee1-285">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Backspace" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-286">단어 내에 캐럿이 현재 위치를 단어의 시작 부분 사이의 단어의 나머지 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="64ee1-287">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-288">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-289">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-290">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-291">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-292">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-293">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-294">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-295">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-296">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-297">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-298">현재 위치나 현재 선택 영역 위에 줄 바꿈을 삽입하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-299">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-299">The requested command.</span></span>  <span data-ttu-id="64ee1-300">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Enter" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-301">와 같은 유동 콘텐츠를 지 원하는 편집기에 대 한 <xref:System.Windows.Controls.RichTextBox>이 명령을 실행 하면은 <xref:System.Windows.Documents.LineBreak> 현재 위치에 삽입할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="64ee1-302">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-303">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-304">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-305">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-306">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-307">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-308">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-309">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-310">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-311">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-312">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-313">현재 위치나 현재 선택 영역 위에 단락 나누기를 삽입하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-314">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-314">The requested command.</span></span>  <span data-ttu-id="64ee1-315">이 명령의 기본 키 제스처는 <see langword="Enter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-315">The default key gesture for this command is <see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-316">이 명령은 ENTER 키를 눌러 사용자에 게는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="64ee1-317">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-318">이 명령에서 기본적으로 지원 됩니다 <xref:System.Windows.Controls.RichTextBox> 하 고 <xref:System.Windows.Controls.TextBox> (때 합니다 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 속성이 `true`).</span><span class="sxs-lookup"><span data-stu-id="64ee1-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="64ee1-319">하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 텍스트 요소의 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-320">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-321">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-322">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-323">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-324">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-325">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-326">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-327">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-328">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-329">현재 위치나 현재 선택 영역에 있는 철자가 잘못된 단어의 인스턴스가 무시되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span></span></summary>
        <value><span data-ttu-id="64ee1-330">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-330">The requested command.</span></span>  <span data-ttu-id="64ee1-331">이 명령에는 기본 키 제스처가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-331">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-332">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-333">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-334">현재 선택 영역의 글꼴 크기가 1포인트씩 증가하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span></span></summary>
        <value><span data-ttu-id="64ee1-335">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-335">The requested command.</span></span>  <span data-ttu-id="64ee1-336">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="OemCloseBrackets" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-337">단어 내의 캐럿이 있는 빈 선택 영역에서이 명령을 호출 하는 경우 선택 영역 전체 단어에 명령을 적용 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="64ee1-338">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-339">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-340">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-341">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-342">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-343">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-344">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-345">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-346">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-347">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-348">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-349">현재 단락의 들여쓰기가 탭 정지 하나만큼씩 증가하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="64ee1-350">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-350">The requested command.</span></span>  <span data-ttu-id="64ee1-351">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="T" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-352">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-353">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="64ee1-354">하지 않는 한이 명령은 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 텍스트 요소의 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-355">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-356">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-357">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-358">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-359">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-360">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-361">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-362">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-363">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-364">캐럿이 한 줄씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span></span></summary>
        <value><span data-ttu-id="64ee1-365">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-365">The requested command.</span></span>  <span data-ttu-id="64ee1-366">이 명령의 기본 키 제스처는 <see langword="Down" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-366">The default key gesture for this command is <see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-367">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-368">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-369">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-370">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-371">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-372">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-373">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-374">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-375">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-376">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-377">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-378">캐럿이 한 페이지씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span></span></summary>
        <value><span data-ttu-id="64ee1-379">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-379">The requested command.</span></span>  <span data-ttu-id="64ee1-380">이 명령의 기본 키 제스처는 <see langword="PageDown" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-380">The default key gesture for this command is <see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-381">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-382">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-383">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-384">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-385">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-386">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-387">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-388">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-389">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-390">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-391">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-392">캐럿이 한 단락씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="64ee1-393">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-393">The requested command.</span></span>  <span data-ttu-id="64ee1-394">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Down" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-395">이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="64ee1-396">이 명령은 처럼 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> 에서 호출 되 면을 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="64ee1-397">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-398">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-399">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-400">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-401">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-402">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-403">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-404">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-405">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-406">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-407">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-408">캐럿이 한 문자씩 왼쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span></span></summary>
        <value><span data-ttu-id="64ee1-409">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-409">The requested command.</span></span>  <span data-ttu-id="64ee1-410">이 명령의 기본 키 제스처는 <see langword="Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-410">The default key gesture for this command is <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-411">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-412">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-413">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-414">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-415">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-416">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-417">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-418">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-419">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-420">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-421">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-422">캐럿이 한 단어씩 왼쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span></span></summary>
        <value><span data-ttu-id="64ee1-423">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-423">The requested command.</span></span>  <span data-ttu-id="64ee1-424">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Left" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-425">캐럿이 단어 안에서 인 경우이 명령은 단어의 시작 부분에 캐럿을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="64ee1-426">그렇지 않으면이 명령은 이전 단어의 시작 부분에 캐럿을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="64ee1-427">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-428">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-429">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-430">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-431">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-432">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-433">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-434">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-435">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-436">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-437">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-438">캐럿이 한 문자씩 오른쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span></span></summary>
        <value><span data-ttu-id="64ee1-439">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-439">The requested command.</span></span>  <span data-ttu-id="64ee1-440">이 명령의 기본 키 제스처는 <see langword="Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-440">The default key gesture for this command is <see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-441">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-442">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-443">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-444">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-445">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-446">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-447">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-448">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-449">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-450">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-451">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-452">캐럿이 한 단어씩 오른쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span></span></summary>
        <value><span data-ttu-id="64ee1-453">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-453">The requested command.</span></span>  <span data-ttu-id="64ee1-454">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Right" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-455">캐럿이 단어 안에서 인 경우이 명령은 해당 단어의 끝에 캐럿을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="64ee1-456">그렇지 않으면이 명령은 다음 단어의 시작 부분에 캐럿을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="64ee1-457">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-458">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-459">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-460">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-461">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-462">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-463">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-464">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-465">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-466">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-467">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-468">캐럿이 콘텐츠의 맨 끝 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span></span></summary>
        <value><span data-ttu-id="64ee1-469">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-469">The requested command.</span></span>  <span data-ttu-id="64ee1-470">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="End" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-471">A *원하는 텍스트 컨테이너* 당면한 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="64ee1-472"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="64ee1-473">텍스트 컨테이너 내에서 전체적으로 포함 된 콘텐츠는 이라고 하는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="64ee1-474">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-475">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-476">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-477">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-478">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-479">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-480">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-481">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-482">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-483">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-484">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-485">캐럿이 콘텐츠의 맨 처음 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="64ee1-486">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-486">The requested command.</span></span>  <span data-ttu-id="64ee1-487">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Home" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-488">A *원하는 텍스트 컨테이너* 당면한 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="64ee1-489"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="64ee1-490">텍스트 컨테이너 내에서 전체적으로 포함 된 콘텐츠는 이라고 하는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="64ee1-491">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-492">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-493">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-494">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-495">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-496">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-497">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-498">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-499">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-500">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-501">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-502">캐럿이 현재 줄의 맨 끝 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="64ee1-503">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-503">The requested command.</span></span>  <span data-ttu-id="64ee1-504">이 명령의 기본 키 제스처는 <see langword="End" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-504">The default key gesture for this command is <see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-505">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-506">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-507">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-508">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-509">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-510">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-511">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-512">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-513">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-514">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-515">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-516">캐럿이 현재 줄의 맨 처음 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="64ee1-517">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-517">The requested command.</span></span>  <span data-ttu-id="64ee1-518">이 명령의 기본 키 제스처는 <see langword="Home" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-518">The default key gesture for this command is <see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-519">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-520">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-521">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-522">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-523">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-524">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-525">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-526">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-527">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-528">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-529">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-530">캐럿이 한 줄씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span></span></summary>
        <value><span data-ttu-id="64ee1-531">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-531">The requested command.</span></span>  <span data-ttu-id="64ee1-532">이 명령의 기본 키 제스처는 <see langword="Up" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-532">The default key gesture for this command is <see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-533">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-534">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-535">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-536">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-537">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-538">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-539">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-540">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-541">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-542">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-543">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-544">캐럿이 한 페이지씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span></span></summary>
        <value><span data-ttu-id="64ee1-545">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-545">The requested command.</span></span>  <span data-ttu-id="64ee1-546">이 명령의 기본 키 제스처는 <see langword="PageUp" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-546">The default key gesture for this command is <see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-547">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-548">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-549">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-550">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-551">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-552">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-553">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-554">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-555">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-556">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-557">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-558">캐럿이 한 단락씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="64ee1-559">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-559">The requested command.</span></span>  <span data-ttu-id="64ee1-560">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Up" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-561">이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="64ee1-562">이 명령은 처럼 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> 에서 호출 되 면을 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="64ee1-563">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-564">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox> 고 <xref:System.Windows.Controls.TextBox>입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-565">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-566">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-567">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-568">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-569">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-570">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-571">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-572">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-573">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-574">현재 선택 영역이 한 줄씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span></span></summary>
        <value><span data-ttu-id="64ee1-575">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-575">The requested command.</span></span>  <span data-ttu-id="64ee1-576">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Down" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-577">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-578">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-579">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-580">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-581">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-582">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-583">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-584">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-585">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-586">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-587">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-588">현재 선택 영역이 한 페이지씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span></span></summary>
        <value><span data-ttu-id="64ee1-589">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-589">The requested command.</span></span>  <span data-ttu-id="64ee1-590">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="PageDown" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-591">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-592">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-593">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-594">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-595">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-596">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-597">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-598">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-599">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-600">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-601">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-602">현재 선택 영역이 한 단락씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="64ee1-603">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-603">The requested command.</span></span>  <span data-ttu-id="64ee1-604">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Down" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-605">이 명령은 다음 단락 시작 부분으로 선택을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="64ee1-606">이 고, 그렇지이 명령은 현재 단락의 끝에 선택 영역을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="64ee1-607">확장된 된 선택 영역 단락의 끝을 표시 하는 단락 나누기를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="64ee1-608">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-609">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-610">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-611">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-612">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-613">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-614">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-615">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-616">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-617">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-618">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-619">현재 선택 영역이 한 문자씩 왼쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span></span></summary>
        <value><span data-ttu-id="64ee1-620">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-620">The requested command.</span></span>  <span data-ttu-id="64ee1-621">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Left" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-622">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-623">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-624">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-625">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-626">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-627">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-628">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-629">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-630">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-631">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-632">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-633">현재 선택 영역이 한 단어씩 왼쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span></span></summary>
        <value><span data-ttu-id="64ee1-634">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-634">The requested command.</span></span>  <span data-ttu-id="64ee1-635">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Left" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-636">캐럿이 단어 안에서 인 경우이 명령은 단어의 시작 부분에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="64ee1-637">그렇지 않으면이 명령은 이전 단어의 시작 부분에 선택을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="64ee1-638">확장된 된 선택 영역 단어 구분 기호를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="64ee1-639">대비 <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, 확장된 선택 영역에 단어 구분 기호는입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="64ee1-640">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-641">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-642">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-643">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-644">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-645">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-646">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-647">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-648">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-649">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-650">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-651">현재 선택 영역이 한 문자씩 오른쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span></span></summary>
        <value><span data-ttu-id="64ee1-652">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-652">The requested command.</span></span>  <span data-ttu-id="64ee1-653">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Right" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-654">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-655">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-656">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-657">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-658">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-659">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-660">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-661">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-662">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-663">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-664">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-665">현재 선택 영역이 한 단어씩 오른쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span></span></summary>
        <value><span data-ttu-id="64ee1-666">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-666">The requested command.</span></span>  <span data-ttu-id="64ee1-667">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Right" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-668">캐럿이 단어 안에서 인 경우이 명령은 해당 단어의 끝에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="64ee1-669">그렇지 않으면이 명령은 다음 단어의 끝에 선택을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="64ee1-670">확장된 된 선택 영역 단어 구분 기호를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="64ee1-671">대비 <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> 확장된 선택 영역에는 단어 구분 기호가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="64ee1-672">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-673">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-674">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-675">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-676">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-677">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-678">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-679">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-680">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-681">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-682">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-683">현재 선택 영역이 콘텐츠의 맨 끝으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span></span></summary>
        <value><span data-ttu-id="64ee1-684">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-684">The requested command.</span></span>  <span data-ttu-id="64ee1-685">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="End" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-686">A *원하는 텍스트 컨테이너* 당면한 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="64ee1-687"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="64ee1-688">텍스트 컨테이너 내에서 전체적으로 포함 된 콘텐츠는 이라고 하는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="64ee1-689">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-690">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-691">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-692">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-693">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-694">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-695">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-696">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-697">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-698">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-699">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-700">현재 선택 영역이 콘텐츠의 맨 처음으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="64ee1-701">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-701">The requested command.</span></span>  <span data-ttu-id="64ee1-702">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Home" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-703">A *원하는 텍스트 컨테이너* 당면한 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="64ee1-704"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="64ee1-705">텍스트 컨테이너 내에서 전체적으로 포함 된 콘텐츠는 이라고 하는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="64ee1-706">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-707">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-708">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-709">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-710">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-711">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-712">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-713">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-714">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-715">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-716">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-717">현재 선택 영역이 현재 줄의 끝 부분으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="64ee1-718">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-718">The requested command.</span></span>  <span data-ttu-id="64ee1-719">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="End" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-720">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-721">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-722">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-723">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-724">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-725">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-726">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-727">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-728">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-729">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-730">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-731">현재 선택 영역이 현재 줄의 시작 부분으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="64ee1-732">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-732">The requested command.</span></span>  <span data-ttu-id="64ee1-733">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Home" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-734">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-735">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-736">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-737">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-738">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-739">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-740">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-741">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-742">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-743">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-744">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-745">현재 선택 영역이 한 줄씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span></span></summary>
        <value><span data-ttu-id="64ee1-746">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-746">The requested command.</span></span>  <span data-ttu-id="64ee1-747">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Up" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-748">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-749">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-750">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-751">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-752">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-753">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-754">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-755">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-756">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-757">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-758">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-759">현재 선택 영역이 한 페이지씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span></span></summary>
        <value><span data-ttu-id="64ee1-760">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-760">The requested command.</span></span>  <span data-ttu-id="64ee1-761">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="PageUp" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-762">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-763">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-764">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-765">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-766">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-767">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-768">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-769">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-770">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-771">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-772">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-773">현재 선택 영역이 한 단락씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="64ee1-774">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-774">The requested command.</span></span>  <span data-ttu-id="64ee1-775">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Up" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-776">단락 시작 부분에 캐럿이 있는 경우이 명령은 이전 단락의 시작 부분에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="64ee1-777">이 고, 그렇지이 명령은 현재 단락의 시작 부분에 선택 영역을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="64ee1-778">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-779">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-780">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-781">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-782">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-783">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-784">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-785">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-786">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-787">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-788">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-789"><see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span></span></summary>
        <value><span data-ttu-id="64ee1-790">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-790">The requested command.</span></span>  <span data-ttu-id="64ee1-791">이 명령에 대 한 기본 키 제스처가 <see langword="Shift" /> + <see langword="Tab" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-792">이 명령에 대 한 동작을 현재 선택 영역에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="64ee1-793">선택 영역에 비어 있지 않은 경우이 명령은 같습니다 <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="64ee1-794">캐럿 테이블 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell> 요소),이 명령은 캐럿을 이전 셀으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="64ee1-795">그렇지 않으면 탭 문자를 현재 위치에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="64ee1-796">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-797">이 명령에서 기본적으로 지원 됩니다 <xref:System.Windows.Controls.RichTextBox> 하 고 <xref:System.Windows.Controls.TextBox> (때 합니다 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 속성이 `true`).</span><span class="sxs-lookup"><span data-stu-id="64ee1-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-798">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-799">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-800">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-801">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-802">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-803">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-804">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-805">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-806">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-807"><see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span></span></summary>
        <value><span data-ttu-id="64ee1-808">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-808">The requested command.</span></span>  <span data-ttu-id="64ee1-809">이 명령의 기본 키 제스처는 <see langword="Tab" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-809">The default key gesture for this command is <see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-810">이 명령에 대 한 동작을 현재 선택 영역에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="64ee1-811">선택 영역이 비어 있지 않은, 아니면 선택 영역이 비어 단락 시작 부분에는 현재 캐럿 위치 하는 경우이 명령은 같습니다 <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="64ee1-812">캐럿 테이블 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell> 요소),이 명령은 캐럿을 다음 셀으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="64ee1-813">캐럿 테이블의 마지막 셀 이면 새 행의 첫 번째 셀에 배치 하는 캐럿을 사용 하 여 테이블에 추가할 새 행을이 명령을 사용 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="64ee1-814">그렇지 않으면 탭 문자를 현재 위치에 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="64ee1-815">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-816">이 명령에서 기본적으로 지원 됩니다 <xref:System.Windows.Controls.RichTextBox> 하 고 <xref:System.Windows.Controls.TextBox> (때 합니다 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 속성이 `true`).</span><span class="sxs-lookup"><span data-stu-id="64ee1-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-817">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-818">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-819">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-820">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-821">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-822">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-823">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-824">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-825">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-826">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Bold" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-827">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-827">The requested command.</span></span>  <span data-ttu-id="64ee1-828">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="B" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-829">경우는 <xref:System.Windows.FontWeight> 현재 선택 영역 범위에 대 한 <xref:System.Windows.FontWeights.Thin%2A> 하 <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> 현재 선택 영역에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="64ee1-830">그렇지 않으면 <xref:System.Windows.FontWeights.Normal%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="64ee1-831">비교 목록은 <xref:System.Windows.FontWeight> 값을 참조 하세요. <xref:System.Windows.FontWeights>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="64ee1-832">선택 비어 있고가 단어 안에서 캐럿, 선택 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="64ee1-833">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-834">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-835">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-836">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-837">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-838">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-839">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-840">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-841">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-842">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-843">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-844">현재 선택 영역에서 글머리 기호 목록이라고도 하는 순서가 지정되지 않은 목록의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-845">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-845">The requested command.</span></span>  <span data-ttu-id="64ee1-846">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="L" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-847">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-848">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-849">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 효과 전체 내용의 선택 영역에 참여 하는 각 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-850">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-851">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-852">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-853">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-854">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-855">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-856">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-857">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-858">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-859">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-860">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-861">삽입 모드와 겹쳐쓰기 모드 사이에서 입력 모드를 전환하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span></span></summary>
        <value><span data-ttu-id="64ee1-862">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-862">The requested command.</span></span>  <span data-ttu-id="64ee1-863">이 명령의 기본 키 제스처는 <see langword="Insert" />입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-863">The default key gesture for this command is <see langword="Insert" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-864">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-865">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-866">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-867">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-868">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-869">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-870">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-871">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-872">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-873">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-874">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-875">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Italic" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-876">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-876">The requested command.</span></span>  <span data-ttu-id="64ee1-877">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="I" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-878">경우는 <xref:System.Windows.FontStyle> 현재 선택 영역에 대 한 <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> 현재 선택 영역에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="64ee1-879">그렇지 않으면 <xref:System.Windows.FontStyles.Normal%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="64ee1-880">선택 비어 있고가 단어 안에서 캐럿, 선택 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="64ee1-881">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-882">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-883">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-884">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-885">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-886">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-887">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-888">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-889">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-890">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-891">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-892">현재 선택 영역에서 번호가 있는 목록이라고도 하는 순서가 지정된 목록의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-893">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-893">The requested command.</span></span>  <span data-ttu-id="64ee1-894">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="N" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-895">이 명령은에서 작동 합니다 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="64ee1-896">이 명령은 호출 됩니다 (캐럿이 한 단락에서 빈 선택 영역 포함)를 단락 내 콘텐츠의 부분을 선택 하는 경우 전체 단락에 요청한 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="64ee1-897">이 명령을 여러 단락에 걸쳐 있는 선택 항목을 호출 하는 경우 효과 전체 내용의 선택 영역에 참여 하는 각 단락에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="64ee1-898">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-899">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-900">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-901">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-902">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-903">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-904">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-905">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-906">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-907">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-908">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-909">현재 선택 영역에서 아래 첨자의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-910">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-910">The requested command.</span></span>  <span data-ttu-id="64ee1-911">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="OemPlus" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-912">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-913">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-914">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-915">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-916">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-917">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-918">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-919">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-920">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-921">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-922">현재 선택 영역에서 위 첨자의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-923">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-923">The requested command.</span></span>  <span data-ttu-id="64ee1-924">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="OemPlus" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-925">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-926">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-927">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-928">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-929">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-930">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-931">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-932">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-933">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-934">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64ee1-935">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Underline" /> 명령을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="64ee1-936">요청된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-936">The requested command.</span></span>  <span data-ttu-id="64ee1-937">이 명령에 대 한 기본 키 제스처가 <see langword="Ctrl" /> + <see langword="U" />합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ee1-938">선택 비어 있고가 단어 안에서 캐럿, 선택 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="64ee1-939">없는 반드시; 지정된 된 개체에서이 명령에 응답 하는 실제 구현 대부분의 명령에 응답 하는 구현은 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="64ee1-940">이 명령은 기본적으로 지 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="64ee1-941">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="64ee1-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="64ee1-942">다음 예제에서는 명령을 지 원하는 개체에는 편집 명령을 호출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="64ee1-943">예를 들어 한 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="64ee1-944">유의 <xref:System.Windows.Controls.RichTextBox> 구현를 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-945">첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="64ee1-946">대부분의 편집 명령을 무시 명령 매개 변수입니다. 일반적으로이 매개 변수 여야 합니다 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="64ee1-947">두 번째 인수는 명령이 라우팅되는 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="64ee1-948">이 개체를 구현 해야 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="64ee1-949">일반적으로 명령의 명령을 처리 하지 않는 개체에서 호출 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64ee1-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>