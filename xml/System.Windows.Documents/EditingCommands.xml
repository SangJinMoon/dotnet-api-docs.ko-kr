<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56ac8ca9237ec99eb53ae1283903a5a349c16b21" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36364131" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6acbc-101">편집 관련 명령의 표준 집합을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6acbc-101">Provides a standard set of editing related commands.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-102">다음 표에서 편집 명령 및 연결 된 기본 키 제스처 (키 이름으로는 <xref:System.Windows.Input.Key> 및 <xref:System.Windows.Input.ModifierKeys> 열거형)입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="6acbc-103">편집 명령</span><span class="sxs-lookup"><span data-stu-id="6acbc-103">Editing command</span></span>|<span data-ttu-id="6acbc-104">기본 키 제스처</span><span class="sxs-lookup"><span data-stu-id="6acbc-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="6acbc-105">기본 키 제스처 없음</span><span class="sxs-lookup"><span data-stu-id="6acbc-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="6acbc-106">기본 키 제스처 없음</span><span class="sxs-lookup"><span data-stu-id="6acbc-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="6acbc-107">캐럿 이동 명령 및 선택 영역 확장 명령을 기본 키 제스처는 공통 집합이 추가 되 고 일반 차이 공유는 <xref:System.Windows.Input.ModifierKeys.Shift> 키 선택 명령 캐럿 이동 명령을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="6acbc-108">예를 들어는 <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> 명령에는 기본 키 제스처는 <xref:System.Windows.Input.Key.Left>, 해당 <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> 명령에는 기본 키 제스처는 <xref:System.Windows.Input.ModifierKeys.Shift> + <xref:System.Windows.Input.Key.Left>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="6acbc-109">명령 정의에서 제공 하는 일반적으로 <xref:System.Windows.Documents.EditingCommands> 클래스를 만들지 마십시오 명령 매개 변수 사용 (의 `parameter` 에서 예상 되는 매개 변수는 <xref:System.Windows.Input.ICommand.Execute%2A> 메서드).</span><span class="sxs-lookup"><span data-stu-id="6acbc-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="6acbc-110">명령 및 명령 실행에 대 한 자세한 내용은 참조 하십시오. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-110">For more information on commands and commanding, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-111">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-112">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-113"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-114">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-115">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-116">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-117">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-118">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-119">현재 단락이나 단락의 선택 영역이 가운데 놓이도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-120">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-120">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-121">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="E" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-122">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-123">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-124">이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-125">다음 그림에는 가운데 맞춤 된 콘텐츠의 예가 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="6acbc-126">![스크린 샷: Center의 TextAlign 속성 값](~/add/media/flowdoc-textalign-center.png "스크린 샷: Center의 TextAlign 속성 값")</span><span class="sxs-lookup"><span data-stu-id="6acbc-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="6acbc-127">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-128">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-129">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-130">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-131"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-132">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-133">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-134">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-135">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-136">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-137">현재 단락이나 단락의 선택 영역이 양쪽 맞춤되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-138">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-138">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-139">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="J" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-140">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-141">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-142">이 명령은 여러 단락에 걸친 선택에 호출 되 면 선택 영역의 모든 단락에는 효과가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-143">콘텐츠를 맞출는 정렬 된 줄은 동일 하거나 거의 같도록 너비의 되도록 각 내용 줄 내에서 가로 간격 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="6acbc-144">콘텐츠는 일반적으로 부드러운 가장자리 콘텐츠의 양쪽에서 만들려는 양쪽 맞춤 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="6acbc-145">나머지 보다 짧은 종종 이기 때문에이 명령이 호출 된 후 단락의 마지막 줄에서는 양쪽 맞춤 되지 않고 남아 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="6acbc-146">다음 그림에서는 양쪽 맞춤 되지 않은 (왼쪽 맞춤) 콘텐츠를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="6acbc-147">![스크린 샷: 콘텐츠를 정렬 된](~/add/media/content-unjustified.png "스크린 샷: 콘텐츠 맞춤으로 정렬 됩니다.")</span><span class="sxs-lookup"><span data-stu-id="6acbc-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="6acbc-148">다음 그림에서는 양쪽 맞춤 된 후 동일한 콘텐츠를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="6acbc-149">![콘텐츠의 스크린 샷 텍스트 맞춤](~/add/media/content-justified.png "콘텐츠의 스크린 샷 텍스트 맞춤")</span><span class="sxs-lookup"><span data-stu-id="6acbc-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="6acbc-150">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-151">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-152">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-153">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-154">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-155"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-156">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-157">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-158">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-159">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-160">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-161">콘텐츠의 선택 영역을 왼쪽에 맞추도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-162">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-162">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-163">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="L" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-164">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-165">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-166">이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-167">다음 그림에는 왼쪽 맞춤 콘텐츠의 예가 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="6acbc-168">![스크린 샷: Left의 TextAlign 속성 값](~/add/media/flowdoc-textalign-left.png "스크린 샷: Left의 TextAlign 속성 값")</span><span class="sxs-lookup"><span data-stu-id="6acbc-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="6acbc-169">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-170">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-171">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-172">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-173">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-174"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-175">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-176">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-177">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-178">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-179">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-180">콘텐츠의 선택 영역을 오른쪽에 맞추도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-181">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-181">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-182">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="R" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-183">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-184">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-185">이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-186">다음 그림의 오른쪽에 맞추어져 콘텐츠 예를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="6acbc-187">![스크린 샷: Right의 TextAlign 값](~/add/media/flowdoc-textalign-right.png "스크린 샷: Right의 TextAlign 값")</span><span class="sxs-lookup"><span data-stu-id="6acbc-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="6acbc-188">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-189">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-190">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-191">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-192">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-193"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-194">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-195">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-196">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-197">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-198">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-199">현재 위치나 현재 선택 영역에 백스페이스가 입력되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-200">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-200">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-201">이 명령의 기본 키 제스처는 <see langword="Backspace" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-201">The default key gesture for this command is <see langword="Backspace" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-202">빈 선택 영역에 호출 되 면이 명령은 캐럿 바로 앞의 문자 또는 단락 구분 기호를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="6acbc-203">비어 있지 않은 선택에 호출 되 면 선택 항목을 삭제이 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="6acbc-204">이 명령은 즉시이 명령이 호출 된 후 동일한 위치에 삽입 된 내용에 대 한 삭제 된 선택의 서식을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="6acbc-205">와 대비는 <xref:System.Windows.Documents.EditingCommands.Delete%2A> 이전 서식 유지 되지 않는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="6acbc-206">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-207">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-208">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-209">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-210">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-211"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-212">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-213">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-214">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-215">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-216">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-217">현재 위치에서 철자가 잘못된 단어를 수정하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-218">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-218">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-219">이 명령에는 기본 키 제스처가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-219">This command has no default key gesture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-220">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-221">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-222">현재 선택 영역의 글꼴 크기가 1포인트씩 감소하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-223">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-223">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-224">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="OemOpenBrackets" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-225">이 명령은 단어 안에 캐럿이 있는 빈 선택 영역에서 호출 되 면 선택 영역 전체 단어에 명령을 적용 하도록 자동으로 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="6acbc-226">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-227">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-228">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-229">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-230">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-231"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-232">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-233">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-234">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-235">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-236">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-237">현재 단락의 들여쓰기가 탭 정지 하나만큼씩 감소하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-238">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-238">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-239">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="T" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-240">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-241">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6acbc-242">이 명령은 하지 않는 한 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 텍스트 요소의 속성이로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-243">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-244">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-245">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-246"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-247">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-248">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-249">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-250">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-251">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-252">현재 선택 영역을 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-253">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-253">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-254">이 명령의 기본 키 제스처는 <see langword="Delete" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-254">The default key gesture for this command is <see langword="Delete" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-255">이 명령은 삭제 된 선택 영역 서식을 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="6acbc-256">와 대비는 <xref:System.Windows.Documents.EditingCommands.Backspace%2A> 명령을 즉시이 명령이 호출 된 후 동일한 위치에 삽입 된 콘텐츠에 대 한 삭제 선택 영역의 서식을 유지 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="6acbc-257">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-258">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-259">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-260">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-261">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-262"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-263">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-264">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-265">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-266">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-267">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-268">현재 위치를 기준으로 다음 단어를 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-269">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-269">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-270">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Delete" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-271">캐럿 단어 안에 포함 된 경우 현재 위치와 단어의 끝 사이의 단어의 나머지 부분에서는 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="6acbc-272">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-273">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-274">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-275">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-276">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-277"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-278">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-279">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-280">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-281">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-282">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-283">현재 위치를 기준으로 이전 단어를 삭제하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-284">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-284">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-285">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Backspace" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-286">캐럿 단어 안에 포함 된 경우 현재 위치와 해당 단어의 시작 부분 사이의 단어의 나머지 부분에서는 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="6acbc-287">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-288">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-289">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-290">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-291">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-292"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-293">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-294">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-295">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-296">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-297">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-298">현재 위치나 현재 선택 영역 위에 줄 바꿈을 삽입하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-299">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-299">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-300">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Enter" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-301">같은 유동 콘텐츠를 지 원하는 편집기에 대 한 <xref:System.Windows.Controls.RichTextBox>,이 명령을 실행 하면 한 <xref:System.Windows.Documents.LineBreak> 현재 위치에 삽입할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="6acbc-302">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-303">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-304">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-305">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-306">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-307"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-308">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-309">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-310">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-311">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-312">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-313">현재 위치나 현재 선택 영역 위에 단락 나누기를 삽입하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-314">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-314">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-315">이 명령의 기본 키 제스처는 <see langword="Enter" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-315">The default key gesture for this command is <see langword="Enter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-316">이 명령은 ENTER 키를 사용자에 게는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="6acbc-317">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-318">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox> (때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 속성은 `true`).</span><span class="sxs-lookup"><span data-stu-id="6acbc-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6acbc-319">이 명령은 하지 않는 한 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 텍스트 요소의 속성이로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-320">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-321">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-322">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-323"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-324">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-325">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-326">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-327">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-328">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-329">현재 위치나 현재 선택 영역에 있는 철자가 잘못된 단어의 인스턴스가 무시되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-330">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-330">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-331">이 명령에는 기본 키 제스처가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-331">This command has no default key gesture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-332">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-333">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-334">현재 선택 영역의 글꼴 크기가 1포인트씩 증가하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-335">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-335">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-336">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="OemCloseBrackets" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-337">단어 안에 캐럿이 있는 빈 선택 영역에서이 명령을 호출 하는 경우에 전체 단어에 명령을 적용 하도록 선택 영역 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="6acbc-338">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-339">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-340">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-341">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-342">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-343"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-344">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-345">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-346">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-347">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-348">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-349">현재 단락의 들여쓰기가 탭 정지 하나만큼씩 증가하도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-350">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-350">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-351">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="T" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-352">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-353">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6acbc-354">이 명령은 하지 않는 한 텍스트 요소에 영향을 주지는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 텍스트 요소의 속성이로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-355">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-356">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-357">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-358"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-359">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-360">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-361">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-362">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-363">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-364">캐럿이 한 줄씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-365">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-365">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-366">이 명령의 기본 키 제스처는 <see langword="Down" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-366">The default key gesture for this command is <see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-367">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-368">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-369">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-370">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-371">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-372"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-373">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-374">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-375">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-376">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-377">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-378">캐럿이 한 페이지씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-379">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-379">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-380">이 명령의 기본 키 제스처는 <see langword="PageDown" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-380">The default key gesture for this command is <see langword="PageDown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-381">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-382">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-383">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-384">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-385">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-386"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-387">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-388">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-389">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-390">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-391">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-392">캐럿이 한 단락씩 아래로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-393">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-393">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-394">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Down" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-395">이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="6acbc-396">이 명령은 처럼 동작 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> 에서 호출 될 때는 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="6acbc-397">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-398">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-399">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-400">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-401">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-402"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-403">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-404">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-405">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-406">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-407">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-408">캐럿이 한 문자씩 왼쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-409">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-409">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-410">이 명령의 기본 키 제스처는 <see langword="Left" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-410">The default key gesture for this command is <see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-411">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-412">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-413">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-414">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-415">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-416"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-417">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-418">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-419">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-420">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-421">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-422">캐럿이 한 단어씩 왼쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-423">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-423">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-424">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Left" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-425">캐럿 단어 안에 포함 된 경우이 명령은 해당 단어의 시작 부분에 캐럿을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="6acbc-426">그렇지 않으면이 명령은 이전 단어의 시작 부분에 캐럿을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="6acbc-427">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-428">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-429">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-430">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-431">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-432"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-433">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-434">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-435">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-436">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-437">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-438">캐럿이 한 문자씩 오른쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-439">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-439">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-440">이 명령의 기본 키 제스처는 <see langword="Right" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-440">The default key gesture for this command is <see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-441">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-442">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-443">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-444">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-445">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-446"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-447">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-448">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-449">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-450">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-451">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-452">캐럿이 한 단어씩 오른쪽으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-453">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-453">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-454">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Right" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-455">캐럿 단어 안에 포함 된 경우이 명령은 해당 단어의 끝에 캐럿을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="6acbc-456">그렇지 않으면이 명령은 다음 단어의 시작 부분에 캐럿을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="6acbc-457">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-458">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-459">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-460">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-461">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-462"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-463">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-464">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-465">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-466">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-467">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-468">캐럿이 콘텐츠의 맨 끝 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-469">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-469">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-470">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="End" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-471">A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="6acbc-472"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="6acbc-473">텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="6acbc-474">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-475">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-476">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-477">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-478">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-479"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-480">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-481">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-482">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-483">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-484">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-485">캐럿이 콘텐츠의 맨 처음 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-486">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-486">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-487">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Home" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-488">A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="6acbc-489"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="6acbc-490">텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="6acbc-491">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-492">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-493">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-494">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-495">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-496"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-497">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-498">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-499">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-500">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-501">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-502">캐럿이 현재 줄의 맨 끝 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-503">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-503">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-504">이 명령의 기본 키 제스처는 <see langword="End" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-504">The default key gesture for this command is <see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-505">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-506">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-507">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-508">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-509">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-510"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-511">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-512">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-513">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-514">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-515">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-516">캐럿이 현재 줄의 맨 처음 부분으로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-517">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-517">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-518">이 명령의 기본 키 제스처는 <see langword="Home" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-518">The default key gesture for this command is <see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-519">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-520">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-521">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-522">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-523">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-524"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-525">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-526">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-527">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-528">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-529">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-530">캐럿이 한 줄씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-531">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-531">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-532">이 명령의 기본 키 제스처는 <see langword="Up" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-532">The default key gesture for this command is <see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-533">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-534">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-535">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-536">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-537">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-538"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-539">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-540">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-541">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-542">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-543">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-544">캐럿이 한 페이지씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-545">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-545">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-546">이 명령의 기본 키 제스처는 <see langword="PageUp" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-546">The default key gesture for this command is <see langword="PageUp" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-547">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-548">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-549">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-550">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-551">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-552"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-553">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-554">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-555">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-556">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-557">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-558">캐럿이 한 단락씩 위로 이동되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-559">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-559">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-560">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Up" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-561">이 명령은 다음 단락 시작 부분에 캐럿을 배치합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="6acbc-562">이 명령은 처럼 동작 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> 에서 호출 될 때는 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="6acbc-563">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-564">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-565">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-566">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-567">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-568"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-569">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-570">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-571">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-572">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-573">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-574">현재 선택 영역이 한 줄씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-575">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-575">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-576">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Down" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-577">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-578">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-579">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-580">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-581">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-582"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-583">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-584">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-585">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-586">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-587">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-588">현재 선택 영역이 한 페이지씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-589">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-589">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-590">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="PageDown" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-591">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-592">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-593">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-594">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-595">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-596"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-597">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-598">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-599">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-600">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-601">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-602">현재 선택 영역이 한 단락씩 아래로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-603">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-603">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-604">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Down" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-605">이 명령은 다음 단락 시작 부분으로 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="6acbc-606">그렇지 않으면이 명령은 현재 단락의 끝에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="6acbc-607">확장된 선택 영역 단락의 끝을 표시 하는 단락 나누기를 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="6acbc-608">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-609">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-610">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-611">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-612">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-613"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-614">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-615">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-616">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-617">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-618">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-619">현재 선택 영역이 한 문자씩 왼쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-620">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-620">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-621">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Left" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-622">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-623">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-624">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-625">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-626">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-627"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-628">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-629">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-630">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-631">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-632">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-633">현재 선택 영역이 한 단어씩 왼쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-634">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-634">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-635">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Left" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-636">캐럿 단어 내에 있으면이 명령은 해당 단어의 시작 부분에는 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="6acbc-637">그렇지 않으면이 명령은 이전 단어의 시작 부분에는 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="6acbc-638">확장된 선택 영역에는 단어 구분 기호가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="6acbc-639">와 대비 <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, 하는 확장된 된 선택 영역에서 단어 구분 기호 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="6acbc-640">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-641">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-642">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-643">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-644">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-645"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-646">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-647">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-648">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-649">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-650">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-651">현재 선택 영역이 한 문자씩 오른쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-652">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-652">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-653">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Right" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-654">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-655">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-656">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-657">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-658">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-659"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-660">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-661">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-662">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-663">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-664">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-665">현재 선택 영역이 한 단어씩 오른쪽으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-666">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-666">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-667">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Right" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-668">가 단어 안에서 캐럿이 있는 경우이 명령은 해당 단어의 끝에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="6acbc-669">그렇지 않으면이 명령은 다음 단어의 끝에 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="6acbc-670">확장된 선택 영역 단어 구분 기호를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="6acbc-671">와 대비 <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> 확장된 선택 영역에 단어 구분 기호를 포함 하지 않는 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="6acbc-672">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-673">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-674">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-675">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-676">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-677"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-678">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-679">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-680">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-681">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-682">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-683">현재 선택 영역이 콘텐츠의 맨 끝으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-684">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-684">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-685">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="End" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-686">A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="6acbc-687"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="6acbc-688">텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="6acbc-689">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-690">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-691">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-692">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-693">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-694"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-695">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-696">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-697">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-698">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-699">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-700">현재 선택 영역이 콘텐츠의 맨 처음으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-701">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-701">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-702">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Home" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-703">A *텍스트 컨테이너* 중인 콘텐츠에 대 한 궁극적인 테두리를 구성 하는 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="6acbc-704"><xref:System.Windows.Controls.TextBlock> 및 <xref:System.Windows.Documents.FlowDocument> 은 텍스트 컨테이너의 예입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="6acbc-705">텍스트 컨테이너 내에서 전체적으로 포함 된 내용은 라고는 *문서*합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="6acbc-706">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-707">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-708">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-709">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-710">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-711"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-712">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-713">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-714">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-715">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-716">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-717">현재 선택 영역이 현재 줄의 끝 부분으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-718">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-718">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-719">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="End" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-720">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-721">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-722">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-723">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-724">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-725"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-726">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-727">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-728">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-729">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-730">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-731">현재 선택 영역이 현재 줄의 시작 부분으로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-732">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-732">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-733">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Home" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-734">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-735">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-736">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-737">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-738">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-739"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-740">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-741">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-742">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-743">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-744">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-745">현재 선택 영역이 한 줄씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-746">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-746">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-747">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Up" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-748">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-749">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-750">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-751">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-752">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-753"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-754">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-755">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-756">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-757">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-758">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-759">현재 선택 영역이 한 페이지씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-760">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-760">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-761">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="PageUp" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-762">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-763">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-764">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-765">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-766">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-767"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-768">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-769">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-770">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-771">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-772">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-773">현재 선택 영역이 한 단락씩 위로 확장되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-774">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-774">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-775">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Up" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-776">캐럿 단락 시작 부분에 있는 경우이 명령은 이전 단락의 시작 부분에는 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="6acbc-777">그렇지 않으면이 명령은 현재 단락의 시작 부분에는 선택 영역을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="6acbc-778">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-779">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-780">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-781">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-782">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-783"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-784">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-785">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-786">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-787">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-788">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-789">
            <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-790">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-790">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-791">이 명령에 대 한 기본 키 제스처는 <see langword="Shift" /> + <see langword="Tab" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-792">이 명령에 대 한 동작은 현재 선택한 내용에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="6acbc-793">선택 영역이 비어 있지 않은 경우이 명령은 같습니다 <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="6acbc-794">캐럿 표 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell> 요소),이 명령은 캐럿을 이전 셀으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="6acbc-795">그렇지 않으면 현재 위치에 탭 문자가 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="6acbc-796">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-797">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox> (때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 속성은 `true`).</span><span class="sxs-lookup"><span data-stu-id="6acbc-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-798">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-799">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-800">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-801"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-802">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-803">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-804">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-805">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-806">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-807">
            <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-808">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-808">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-809">이 명령의 기본 키 제스처는 <see langword="Tab" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-809">The default key gesture for this command is <see langword="Tab" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-810">이 명령에 대 한 동작은 현재 선택한 내용에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="6acbc-811">선택 내용이 비어 있지 않은, 아니면 선택 내용이 비어 있는 단락 시작 부분에는 현재 캐럿 위치 하는 경우이 명령은 같습니다 <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="6acbc-812">캐럿 표 셀에 있으면 (나타내는 <xref:System.Windows.Documents.TableCell> 요소),이 명령은 캐럿을 다음 셀으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="6acbc-813">캐럿이 테이블의 마지막 셀에 있으면,이 명령을 사용 하면 새 행을 새 행의 첫 번째 셀에 배치 된 테이블에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="6acbc-814">그렇지 않으면 현재 위치에 탭 문자가 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="6acbc-815">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-816">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox> 및 <xref:System.Windows.Controls.TextBox> (때는 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 속성은 `true`).</span><span class="sxs-lookup"><span data-stu-id="6acbc-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-817">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-818">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-819">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-820"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-821">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-822">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-823">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-824">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-825">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-826">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Bold" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-827">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-827">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-828">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="B" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-829">경우는 <xref:System.Windows.FontWeight> 까지의 범위에 현재 선택 영역에 대 한 <xref:System.Windows.FontWeights.Thin%2A> 를 <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> 현재 선택 영역에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="6acbc-830">그렇지 않으면 <xref:System.Windows.FontWeights.Normal%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="6acbc-831">비교 목록은 <xref:System.Windows.FontWeight> 값, 참조 <xref:System.Windows.FontWeights>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="6acbc-832">선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="6acbc-833">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-834">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-835">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-836">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-837">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-838"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-839">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-840">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-841">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-842">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-843">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-844">현재 선택 영역에서 글머리 기호 목록이라고도 하는 순서가 지정되지 않은 목록의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-845">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-845">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-846">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="L" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-847">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-848">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-849">이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-850">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-851">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-852">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-853">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-854">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-855"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-856">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-857">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-858">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-859">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-860">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-861">삽입 모드와 겹쳐쓰기 모드 사이에서 입력 모드를 전환하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-862">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-862">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-863">이 명령의 기본 키 제스처는 <see langword="Insert" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-863">The default key gesture for this command is <see langword="Insert" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-864">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-865">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, 및 <xref:System.Windows.Controls.PasswordBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-866">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-867">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-868">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-869"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-870">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-871">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-872">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-873">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-874">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-875">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Italic" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-876">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-876">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-877">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="I" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-878">경우는 <xref:System.Windows.FontStyle> 현재 선택 영역에 대 한 <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> 현재 선택 영역에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="6acbc-879">그렇지 않으면 <xref:System.Windows.FontStyles.Normal%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="6acbc-880">선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="6acbc-881">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-882">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-883">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-884">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-885">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-886"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-887">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-888">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-889">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-890">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-891">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-892">현재 선택 영역에서 번호가 있는 목록이라고도 하는 순서가 지정된 목록의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-893">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-893">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-894">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="N" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-895">이 명령은에서 작동는 <xref:System.Windows.Documents.Paragraph> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="6acbc-896">이 명령은 부분적으로 선택의 콘텐츠 (단락 내에서 캐럿이 있는 빈 선택 영역을 포함 합니다.) 단락 내에서 호출 되 면 요청 된 효과가 단락 전체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="6acbc-897">이 명령은 여러 단락에 걸친 선택에 호출 되 면 효과 선택 영역에 참여 하는 각 단락의 전체 내용을에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="6acbc-898">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-899">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-900">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-901">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-902">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-903"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-904">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-905">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-906">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-907">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-908">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-909">현재 선택 영역에서 아래 첨자의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-910">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-910">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-911">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="OemPlus" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-912">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-913">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-914">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-915">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-916"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-917">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-918">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-919">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-920">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-921">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-922">현재 선택 영역에서 위 첨자의 서식이 전환되도록 요청하는 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-923">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-923">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-924">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="OemPlus" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-925">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-926">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-927">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-928">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-929"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-930">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-931">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-932">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-933">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-934">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6acbc-935">현재 선택 영역에서 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 서식이 전환되도록 요청하는 <see cref="T:System.Windows.Documents.Underline" /> 명령을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6acbc-936">요청된 명령입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-936">The requested command.</span>
          </span>
          <span data-ttu-id="6acbc-937">이 명령에 대 한 기본 키 제스처는 <see langword="Ctrl" /> + <see langword="U" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6acbc-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6acbc-938">선택 내용이 비어 있는 경우 단어 안에 캐럿이 여 선택 영역 전체 단어를 포함 하도록 확장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="6acbc-939">반드시 있는 것은 아닙니다; 지정된 된 개체에서이 명령에 응답 하는 실제 구현을 대부분의 경우에서에 명령에 응답 하는 구현을 응용 프로그램 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="6acbc-940">이 명령은에서 기본적으로 지원 <xref:System.Windows.Controls.RichTextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6acbc-941">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="6acbc-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="6acbc-942">다음 예제에서는 명령을 지 원하는 개체에 명령을 편집 명령을 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="6acbc-943">이 예는 <xref:System.Windows.Controls.RichTextBox> 명령 대상으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="6acbc-944"><xref:System.Windows.Controls.RichTextBox> 구현 하는 <xref:System.Windows.IInputElement> 인터페이스 (에서 상속 되며, <xref:System.Windows.FrameworkElement>), 많은 편집 명령에 대 한 기본 지원을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-945">에 대 한 첫 번째 인수는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 명령 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="6acbc-946">대부분의 편집 명령은; 명령 매개 변수를 무시합니다. 일반적으로이 매개 변수는 같아야 `null` 편집 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="6acbc-947">명령 라우팅 개체를 지정 하는 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="6acbc-948">이 개체를 구현 해야는 <xref:System.Windows.IInputElement> , 인터페이스 및 지정된 된 명령에 대 한 처리기를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="6acbc-949">일반적으로 한 명령은 명령을 처리 하지 않는 개체에서 호출 될 때 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6acbc-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>