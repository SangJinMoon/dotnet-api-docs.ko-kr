<Type Name="TextPointer" FullName="System.Windows.Documents.TextPointer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80ffc4468fcd8385587be234b88e4272ca043528" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37577931" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextPointer : System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPointer extends System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextPointer" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPointer&#xA;Inherits ContentPosition" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPointer : System::Windows::Documents::ContentPosition" />
  <TypeSignature Language="F#" Value="type TextPointer = class&#xA;    inherit ContentPosition" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.ContentPosition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a position within a <see cref="T:System.Windows.Documents.FlowDocument" /> or <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer> 클래스에서는 다음 용어를 소개 합니다.  
  
-   위치-기본적으로, 한 <xref:System.Windows.Documents.TextPointer> 항상 가리킵니다를 *위치* 콘텐츠에서.  이러한 위치 콘텐츠 전체에서 문자 간이나 흐름 콘텐츠 요소는 콘텐츠에 대 한 구조를 정의 합니다.  
  
-   때문에 현재 위치-는 <xref:System.Windows.Documents.TextPointer> 항상 된 위치를 나타냅니다 이므로 통해 수행할 수 있는 작업의 많은 <xref:System.Windows.Documents.TextPointer> 에서 가리키는 현재 위치를 기준으로는 <xref:System.Windows.Documents.TextPointer>를 지칭 하는 것이 으로 지정 된 위치를 <xref:System.Windows.Documents.TextPointer> 으로 *현재 위치*합니다.  
  
-   삽입 위치-는 *삽입 위치* 는 관련된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.  실제로 삽입 위치는 콘텐츠 내 캐럿을 배치할 수 있습니다.  유효한 예가 <xref:System.Windows.Documents.TextPointer> 삽입 위치 하지 않은 위치는 두 인접 한 위치 <xref:System.Windows.Documents.Paragraph> 태그 (즉, 여는 태그 다음 단락의 이전 단락의 닫는 태그 사이).  
  
-   기호-의 목적 <xref:System.Windows.Documents.TextPointer> 것으로 간주 됩니다 기호를 포함 하는 작업을 다음 중 하나는 *기호*:  
  
    -   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
    -   A <xref:System.Windows.UIElement> 내에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
    -   각 16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
-   텍스트 컨테이너-A *원하는 텍스트 컨테이너* 최종 테두리 당면한 유동 콘텐츠를 구성 하는 요소 않으면 가리키는 위치를 <xref:System.Windows.Documents.TextPointer> 항상 텍스트 컨테이너 내에 포함 합니다.  현재 텍스트 컨테이너 중 하나 여야 합니다는 <xref:System.Windows.Documents.FlowDocument> 또는 <xref:System.Windows.Controls.TextBlock>합니다.  일반적으로, 간의 작업 <xref:System.Windows.Documents.TextPointer> 인스턴스가 다른 텍스트 컨테이너에서 지원 되지 않습니다.  
  
-   문서의 현재 항목-텍스트 컨테이너의 콘텐츠 라고는 *문서*에서 같이 합니다 <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> 메서드 및 <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> 및 <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> 속성입니다.  
  
 합니다 <xref:System.Windows.Documents.TextPointer> 클래스를 쉽게 순회 하 고 조작 하 여 표시 되는 콘텐츠의 것 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 유동 콘텐츠 요소; 등의 요소에서 파생 되는 일반적으로 <xref:System.Windows.Documents.TextElement>입니다.  작업 중 일부는 <xref:System.Windows.Documents.TextPointer> 용이 하 게 다음과 같습니다.  
  
-   지정된 된 두 번째 위치를 사용 하 여 현재 위치는 서 수 비교를 수행 합니다.  참조 된 <xref:System.Windows.Documents.TextPointer.CompareTo%2A> 메서드.  
  
-   지정 된 방향으로 현재 위치에 인접 한 콘텐츠의 형식을 결정 합니다.  참조 된 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 메서드 및 <xref:System.Windows.Documents.TextPointerContext> 열거형입니다.  
  
-   가져오기는 <xref:System.Windows.Documents.TextElement> 범위를 지정 하거나 현재 위치에 인접 한입니다.  참조 <xref:System.Windows.Documents.Paragraph> 하며 <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> 메서드.  
  
-   현재 문서의 범위를 지정 하는 텍스트 컨테이너를 가져옵니다.  <xref:System.Windows.Documents.TextPointer.Parent%2A> 속성을 참조하세요.  
  
-   지정 된 개수의 문자 앞 이나 뒤의 현재 위치를 가져옵니다.  참조 된 <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> 메서드.  
  
-   현재 위치에 있는 문자의 문자열을 삽입 합니다.  참조 된 <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> 메서드.  
  
-   콘텐츠의 줄 경계를 찾습니다.  참조 된 <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> 메서드 및 <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> 속성입니다.  
  
-   사이 변환 <xref:System.Windows.Documents.TextPointer> 콘텐츠 위치와 기호 오프셋입니다.  참조 된 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 고 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 메서드.  
  
-   간에 변환 하 여 시각적 적중 테스트 수행을 <xref:System.Windows.Documents.TextPointer> 위치 및 <xref:System.Windows.Point> 상대 좌표를 나타내는입니다.  
  
-   근접 한 삽입 위치를 찾거나 현재 위치가 삽입 위치 인지 확인 합니다.  참조를 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 하 고 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 메서드 및 <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> 속성입니다.  
  
 위치 및 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 나타난를 <xref:System.Windows.Documents.TextPointer> 개체는 변경할 수 없습니다.  콘텐츠 되었거나 편집 수정 하 여 표시 되는 위치를 <xref:System.Windows.Documents.TextPointer> 주변 된 텍스트를 기준으로 바뀌지 대신 콘텐츠의 시작 부분에서 해당 위치의 오프셋에서 새 상대 위치를 반영 하도록 알맞게 조정 됩니다 콘텐츠입니다.  예를 들어, 한 <xref:System.Windows.Documents.TextPointer> 나타내는, 콘텐츠를 삽입 하거나 전이나 단락 뒤 삭제 하는 경우에 해당 단락 시작 부분을 가리키도록 지정 단락의 시작 위치를 계속 합니다.  
  
 <xref:System.Windows.Documents.TextPointer> 클래스는 공용 생성자를 제공 하지 않습니다.  인스턴스의 <xref:System.Windows.Documents.TextPointer> 속성 또는 다른 개체의 메서드를 사용 하 여 만들어집니다 (기타를 포함 하 여 <xref:System.Windows.Documents.TextPointer> 개체). 다음 목록에서는 몇 가지 예가 만들고 반환 하는 메서드 및 속성을 <xref:System.Windows.Documents.TextPointer>입니다.  이 목록은 전체 목록이 아닙니다.  
  
-   <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> 고 <xref:System.Windows.Documents.TextRange.End%2A>입니다.  
  
-   <xref:System.Windows.Documents.TextElement>: <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>합니다 <xref:System.Windows.Documents.TextElement.ElementStart%2A>, 및 <xref:System.Windows.Documents.TextElement.ElementEnd%2A>합니다.  
  
-   <xref:System.Windows.Controls.TextBlock> (텍스트 컨테이너): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>를 <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, 및 <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>합니다.  
  
-   <xref:System.Windows.Documents.FlowDocument> (텍스트 컨테이너): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, 및 <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  
  
-   기존 <xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>를 <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>합니다 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, 및 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>합니다.  
  
   
  
## Examples  
 다음 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Documents.TextPointer> 첫 번째 내부 위치를 찾으려면 <xref:System.Windows.Documents.Run> 된 지정 된 텍스트 컨테이너의에서 요소입니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  
  
 다음 예제에서는 사용 하 여 간단한 찾기 알고리즘 구현 <xref:System.Windows.Documents.TextPointer> 기능입니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextRange" />
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
    <altmember cref="T:System.Windows.Documents.TextElement" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.CompareTo position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">A <see cref="T:System.Windows.Documents.TextPointer" /> that specifies a position to compare to the current position.</param>
        <summary>Performs an ordinal comparison between the positions specified by the current <see cref="T:System.Windows.Documents.TextPointer" /> and a second specified <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
        <returns>–1 if the current <see cref="T:System.Windows.Documents.TextPointer" /> precedes <paramref name="position" />; 0 if the locations are the same; +1 if the current <see cref="T:System.Windows.Documents.TextPointer" /> follows <paramref name="position" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값이-1 이면 현재 지정 된 위치가 <xref:System.Windows.Documents.TextPointer> 에 지정 된 위치를 앞에 오는 `position`합니다.  0 값 표시 되는 위치가 같은지를 나타냅니다.  양의 + 1 값을 현재 지정 된 위치가 <xref:System.Windows.Documents.TextPointer> 으로 지정 된 위치 뒤에 옵니다 `position`합니다.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다.  예에서를 <xref:System.Windows.Documents.TextPointer.CompareTo%2A> 메서드를 함께에서 사용 합니다 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 메서드는 지정 된 테스트를 <xref:System.Windows.Documents.TextElement> 비어.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> specifies a position outside of the text container associated with the current position.</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTextInRun">
      <MemberSignature Language="C#" Value="public int DeleteTextInRun (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DeleteTextInRun(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTextInRun (count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DeleteTextInRun(int count);" />
      <MemberSignature Language="F#" Value="member this.DeleteTextInRun : int -&gt; int" Usage="textPointer.DeleteTextInRun count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The number of characters to delete, starting at the current position. Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.</param>
        <summary>Deletes the specified number of characters from the position indicated by the current <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
        <returns>The number of characters actually deleted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 위치 뒤에 있는 문자를 삭제 하려면 양수 값을 지정 (에서처럼 <xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>); 현재 위치를 앞에 있는 문자를 삭제 하려면 음수 값을 지정 (에서처럼 <xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>).  
  
 실제로 삭제할 문자의 수로 지정한 숫자 보다 작을 수도 있습니다 `count`합니다.  사례에서 발생 합니다. 여기서 `count` 삭제할 존재 하는 보다 많은 문자를 지정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The method is called at a position where text is not allowed.</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetTextInRun" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DocumentEnd">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentEnd As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentEnd { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentEnd : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> at the end of content in the text container associated with the current position.</summary>
        <value>
          <see cref="T:System.Windows.Documents.TextPointer" /> 현재 위치와 연결 된 텍스트 컨테이너의 콘텐츠 끝에 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Documents.TextPointer.Parent%2A> 반환 된 항목에 대 한 <xref:System.Windows.Documents.TextPointer> 은 항상 텍스트 컨테이너 (<xref:System.Windows.Controls.TextBlock> 또는 <xref:System.Windows.Documents.FlowDocument>), 대신 <xref:System.Windows.Documents.TextElement>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="DocumentStart">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentStart As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentStart { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentStart : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> at the beginning of content in the text container associated with the current position.</summary>
        <value>
          <see cref="T:System.Windows.Documents.TextPointer" /> 현재 위치와 연결 된 텍스트 컨테이너의 콘텐츠 시작 부분에 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다른 위치에 상대적인 오프셋을 사용 하는 기본 위치로이 속성에 의해 반환 되는 위치를 사용 합니다.  합니다 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 고 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 메서드는 위치와 위치 간에 변환 하는 방법을 제공 합니다. 오프셋입니다.  
  
 합니다 <xref:System.Windows.Documents.TextPointer.Parent%2A> 반환 된 항목에 대 한 <xref:System.Windows.Documents.TextPointer> 은 항상 텍스트 컨테이너 (<xref:System.Windows.Controls.TextBlock> 또는 <xref:System.Windows.Documents.FlowDocument>), 대신 <xref:System.Windows.Documents.TextElement>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyObject GetAdjacentElement(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjacentElement (direction As LogicalDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyObject ^ GetAdjacentElement(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetAdjacentElement : System.Windows.Documents.LogicalDirection -&gt; System.Windows.DependencyObject" Usage="textPointer.GetAdjacentElement direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to search for an adjacent element.</param>
        <summary>Returns the element, if any, that borders the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified logical direction.</summary>
        <returns>The adjacent element in the specified <paramref name="direction" />, or <see langword="null" /> if no adjacent element exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 요소는 일반적으로 <xref:System.Windows.Documents.TextElement>합니다.  A <xref:System.Windows.UIElement> 반환 될 수는 <xref:System.Windows.Documents.TextPointer> 내부 위치를 나타내는 <xref:System.Windows.Documents.BlockUIContainer> 요소 또는 <xref:System.Windows.Documents.InlineUIContainer> 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect GetCharacterRect(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharacterRect (direction As LogicalDirection) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect GetCharacterRect(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRect : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Rect" Usage="textPointer.GetCharacterRect direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to find a content bounding box.</param>
        <summary>Returns a bounding box (<see cref="T:System.Windows.Rect" />) for content that borders the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified logical direction.</summary>
        <returns>A bounding box for content that borders the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified direction, or <see cref="P:System.Windows.Rect.Empty" /> if current, valid layout information is unavailable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextElement> 가장자리는이 메서드의 목적에 대 한 콘텐츠를 고려 하지 않습니다.  경우는 <xref:System.Windows.Documents.TextPointer> 앞에 배치 되는 <xref:System.Windows.Documents.TextElement> edge, 반환 값은 다음에 대 한 경계 상자 이외<xref:System.Windows.Documents.TextElement> 지정된 된 방향으로 콘텐츠.  지정 된 방향으로 너비가 0 인 콘텐츠가 없는 경우 <xref:System.Windows.Rect> 높이 이전 콘텐츠를 일치 하는 높이 함께 반환 됩니다.  
  
 이 메서드에 의해 수행 된 작업은 올바른 레이아웃에 따라 달라 집니다.  필요한 경우이 메서드는 자동으로 작업을 진행 하기 전에 유효한 레이아웃을 다시 생성 하려고 합니다.  레이아웃을 다시 생성 하는 비교적 비용이 많이 드는 작업이 될 수 있습니다.  사용 된 <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 레이아웃이 올바른지 확인할 속성입니다.  자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      </Docs>
    </Member>
    <Member MemberName="GetInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to search for the closest insertion position.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the closest insertion position in the specified logical direction.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the closest insertion position in the specified direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 삽입 위치는 연결 된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.  실제로 삽입 위치는 콘텐츠 내 캐럿을 배치할 수 있습니다.  유효한 예가 <xref:System.Windows.Documents.TextPointer> 삽입 위치 하지 않은 위치는 두 인접 한 위치 <xref:System.Windows.Documents.Paragraph> 태그 (즉, 여는 태그 다음 단락의 이전 단락의 닫는 태그 사이).  
  
 경우는 <xref:System.Windows.Documents.TextPointer> 이미 가리키는 올바른 삽입 위치에 있지만 닫는 태그 바로 뒤에 오는 해당 위치에서 지정 된 방향으로 비어 있지 않은 서식 시퀀스에 대 한 해당 <xref:System.Windows.Documents.TextPointer> 이 반환한 메서드는 삽입을 가리키도록 조정 서식 지정 하는 시퀀스의 종료 된 이후에 배치 합니다. 예를 들어 태그 시퀀스를 고려해 보세요 `<Bold>a</Bold>b`합니다. 글자 사이의 두 삽입 위치는 `a` 하 고 `b` -뒤에 닫는 것 `Bold` 태그와 닫는 바로 다음 `Bold` 태그입니다. 경우 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 라고 하는 <xref:System.Windows.Documents.TextPointer> 문자 바로 뒤 위치 `a` 전과 닫기를 `Bold` 태그와를 `direction` 의 <xref:System.Windows.Documents.LogicalDirection.Forward>, 반환 된 <xref:System.Windows.Documents.TextPointer> 가리키도록 조정 됩니다는 문자 바로 앞 위치 `b`를 닫은 후 `Bold` 태그입니다. 반대 논리 방향으로 작업 하는 경우 서식 지정 태그를 열기 위한 비슷한 조정이 됩니다. 이 메서드가 유사한 경우 삽입 위치 간에 명확성 수단을 제공 하기에 적합 합니다.  
  
 이 메서드는 구조적 태그 시퀀스 관련 된 경우 삽입 지점을 선택 되도록 데도 사용할 수 있습니다. 예를 들어 결산 잔액과 개시 단락 태그 간에 위치에서 작업 하는 경우 방향 매개 변수 수 다음 단락 시작 부분에 가장 가까운 삽입 지점을 선택 (지정 하 여 <xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>) 또는 위의 단락 (끝에 지정 하 여 <xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType>).  
  
 포인터가 이미 삽입 위치에 인접 한 형식 지정 태그가 지정 된 경우 `direction`에서 반환 된 <xref:System.Windows.Documents.TextPointer> 호출와 동일한 위치를 가리키는 <xref:System.Windows.Documents.TextPointer>.  
  
 가리키는 위치를 기준으로 올바른 삽입 지점이 없이 있는지 수는 <xref:System.Windows.Documents.TextPointer>합니다.  이 참조 된 콘텐츠가 빈 테이블 또는 목록 구조적으로 불완전 한 경우에 발생할 수 있습니다.  이러한 경우에이 메서드가 단순히 반환을 <xref:System.Windows.Documents.TextPointer> 와 동일한 위치에는 <xref:System.Windows.Documents.TextPointer> 이 메서드가 호출 되었습니다.  이 메서드는 항상 유효한 반환 <xref:System.Windows.Documents.TextPointer>합니다.  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 지정 하는지 여부를 확인 하는 메서드 <xref:System.Windows.Documents.TextElement> 인쇄 가능한 콘텐츠가 비어 있습니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLineStartPosition">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the beginning of a line that is specified relative to the current <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the beginning of a line that is specified relative to the current <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> pointing to the beginning of the specified line (with the <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> set to <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />), or <see langword="null" /> if the specified line is out of range or otherwise cannot be located.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Documents.TextPointer> 는 모호한 위치를 가리키는 예를 들어, 두 줄 사이의 줄에서 지정 된 방향에서 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 상대 시작 줄으로 선택 됩니다.  
  
 이 메서드에 의해 수행 된 작업은 올바른 레이아웃에 따라 달라 집니다.  필요한 경우이 메서드는 자동으로 작업을 진행 하기 전에 유효한 레이아웃을 다시 생성 하려고 합니다.  레이아웃을 다시 생성 하는 비교적 비용이 많이 드는 작업이 될 수 있습니다.  사용 하 여 <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 레이아웃이 올바른지 확인 합니다.  자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count, [out] int32&amp; actualCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer, ByRef actualCount As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count, [Runtime::InteropServices::Out] int % actualCount);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int *  -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition (count, actualCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="actualCount" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.</param>
        <param name="actualCount">When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.  This value may be less than <c>count</c> if the beginning or end of content is encountered before the specified number of lines are skipped. This parameter is passed uninitialized.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the beginning of a line that is specified relative to the current <see cref="T:System.Windows.Documents.TextPointer" />, and reports how many lines were skipped.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> pointing to the beginning of the specified line (with the <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> set to <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />), or to the beginning of the line closest to the specified line if the specified line is out of range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Documents.TextPointer> 는 모호한 위치를 가리키는 예를 들어, 두 줄 사이의 줄에서 지정 된 방향에서는 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 상대 시작 줄으로 속성을 선택 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextContextPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextContextPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextContextPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextContextPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextContextPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextContextPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to search for the next symbol.</param>
        <summary>Returns a pointer to the next symbol in the specified logical direction.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the next symbol in the requested direction, or <see langword="null" /> if the current <see cref="T:System.Windows.Documents.TextPointer" /> borders the start or end of content.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 항목은 기호 간주 됩니다.  
  
-   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
-   A <xref:System.Windows.UIElement> 에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
-   16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
 다음 기호 자모 인지 하는 경우 <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>, <xref:System.Windows.Documents.TextPointerContext.ElementStart>, 또는 <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (으로 식별 되는 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 메서드), 해당 <xref:System.Windows.Documents.TextPointer> 이 반환한 메서드는 현재 위치에서 정확히 하나의 기호로 고급입니다.  
  
 다음 기호 자모 인지 하는 경우 <xref:System.Windows.Documents.TextPointerContext.Text>, 해당 <xref:System.Windows.Documents.TextPointer> 이 반환한 메서드에서 텍스트 지난 다음 텍스트가 아닌 기호 (즉, 다음 위치를 <xref:System.Windows.Documents.TextPointerContext> 아닙니다 <xref:System.Windows.Documents.TextPointerContext.Text>).  호출 하 여 교차 정확한 기호 수를 미리 계산 된 <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> 메서드.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다.  예제에서는 합니다 <xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A> 메서드와 함께 합니다 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 메서드를 트래버스하 고 지정 된 기호를 추출할 <xref:System.Windows.Documents.TextElement>합니다.  
  
 추출 하는 예제를 사용할 수 있습니다는 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] 의 내용에 대 한 구조는 지정 된 <xref:System.Windows.Documents.TextElement>, 설명 목적 으로만, 것 하며 프로덕션 코드에서는 사용할 수 없습니다.  참조 된 <xref:System.Xml> 다양 한 작업 및 XML을 처리 하기 위한 형식에 대 한 네임 스페이스입니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to search for the next insertion position.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the next insertion position in the specified logical direction.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that identifies the next insertion position in the requested direction, or <see langword="null" /> if no next insertion position can be found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *삽입 위치* 는 관련된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.  실제로 삽입 위치는 콘텐츠 내 캐럿을 배치할 수 있습니다.  유효한 예가 <xref:System.Windows.Documents.TextPointer> 삽입 위치 하지 않은 위치는 두 인접 한 위치 <xref:System.Windows.Documents.Paragraph> 태그 (즉, 여는 태그 다음 단락의 이전 단락의 닫는 태그 사이).  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다. 이 예제에서는 사용 합니다 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 개수를 계산 하기 위해 콘텐츠 요소 경계를 통과 하는 방법 <xref:System.Windows.Documents.Paragraph> 지정 된 두 요소를 제공 <xref:System.Windows.Documents.TextPointer> 인스턴스.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="GetOffsetToPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOffsetToPosition(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffsetToPosition (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetOffsetToPosition(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.GetOffsetToPosition : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.GetOffsetToPosition position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">A <see cref="T:System.Windows.Documents.TextPointer" /> that specifies a position to find the distance (in symbols) to.</param>
        <summary>Returns the count of symbols between the current <see cref="T:System.Windows.Documents.TextPointer" /> and a second specified <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
        <returns>The relative number of symbols between the current <see cref="T:System.Windows.Documents.TextPointer" /> and <paramref name="position" />.  A negative value indicates that the current <see cref="T:System.Windows.Documents.TextPointer" /> follows the position specified by <paramref name="position" />, 0 indicates that the positions are equal, and a positive value indicates that the current <see cref="T:System.Windows.Documents.TextPointer" /> precedes the position specified by <paramref name="position" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 항목은 기호 간주 됩니다.  
  
-   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
-   A <xref:System.Windows.UIElement> 에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
-   16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다. 예제에서는 합니다 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 2에 대 한 오프셋을 확인 하는 방법 <xref:System.Windows.Documents.TextPointer> 인스턴스와 다음이 정보를 사용 하 여 저장 하 고 선택 영역 복원를 <xref:System.Windows.Controls.RichTextBox>합니다.  가정 내용을 <xref:System.Windows.Controls.RichTextBox> 저장 선택 및 선택 영역 복원 간에 변경 되지 않았습니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="position" /> specifies a position outside of the text container associated with the current position.</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetPositionAtOffset" />
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPointerContext">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Documents.TextPointerContext GetPointerContext(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPointerContext (direction As LogicalDirection) As TextPointerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointerContext GetPointerContext(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPointerContext : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointerContext" Usage="textPointer.GetPointerContext direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to determine the category for adjacent content.</param>
        <summary>Returns a category indicator for the content adjacent to the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified logical direction.</summary>
        <returns>One of the <see cref="T:System.Windows.Documents.TextPointerContext" /> values that indicates the category for adjacent content in the specified logical direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다. 이 예제에서는 사용 된 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 열고 닫는 요소 태그가 지정 된 두의 분산을 계산 하기 위한 알고리즘을 구현 하는 방법 <xref:System.Windows.Documents.TextPointer> 위치 합니다.  각 + 1로 이동 하 고 각 계산는 여는 태그 요소의 닫는 요소 태그를-1로 계산 합니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPositionAtOffset">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, in symbols, from the beginning of content.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> property.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, in symbols, from the beginning of the current <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, or <see langword="null" /> if no corresponding position can be found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 항목은 기호 간주 됩니다.  
  
-   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
-   A <xref:System.Windows.UIElement> 에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
-   16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다. 예제에서는 합니다 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 쌍의 모든 호스팅 단락 및 반환할 다른에 비해 지정된 된 위치에 대 한 오프셋을 계산 하는 메서드를 구현 하는 방법을 <xref:System.Windows.Documents.TextPointer> 지정된 단락에 지정 된 오프셋에 합니다.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer, direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset, System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int * System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset (offset, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="offset">An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the returned <see cref="T:System.Windows.Documents.TextPointer" /> precedes the current <see cref="T:System.Windows.Documents.TextPointer" />; otherwise, it follows.</param>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction of the returned <see cref="T:System.Windows.Documents.TextPointer" />.</param>
        <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, in symbols, from the beginning of the current <see cref="T:System.Windows.Documents.TextPointer" /> and in the specified direction.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, or <see langword="null" /> if the offset extends past the end of the content.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 항목은 기호 간주 됩니다.  
  
-   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
-   A <xref:System.Windows.UIElement> 에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
-   16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextInRun">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns text adjacent to the current <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextInRun(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection -&gt; string" Usage="textPointer.GetTextInRun direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to find and return any adjacent text.</param>
        <summary>Returns a string containing any text adjacent to the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified logical direction.</summary>
        <returns>A string containing any adjacent text in the specified logical direction, or <see cref="F:System.String.Empty" /> if no adjacent text can be found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 텍스트의 중단 없이 실행만를 반환합니다.  아무 것도 반환 형식 이외의 기호 있는 경우 <xref:System.Windows.Documents.TextPointerContext.Text> 현재 인접 한 <xref:System.Windows.Documents.TextPointer> 지정 된 방향에서입니다.  마찬가지로 텍스트는 텍스트가 아닌 다음 기호 까지만 반환 됩니다.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다. 이 예제에서는 사용 된 <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> 간단한 텍스트 추출기를 구현 하는 방법입니다.  메서드는 지정 된 두 까지의 모든 텍스트의 문자열을 연결을 반환 <xref:System.Windows.Documents.TextPointer> 인스턴스.  
  
 이 예제에서는 두 텍스트를 추출할 사용할 수 있지만 <xref:System.Windows.Documents.TextPointer> 인스턴스 설명 목적 으로만, 것 하 고 프로덕션 코드에서는 사용할 수 없습니다.  대신 <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType> 속성을 사용하세요.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection, textBuffer As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextInRun(System::Windows::Documents::LogicalDirection direction, cli::array &lt;char&gt; ^ textBuffer, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection * char[] * int * int -&gt; int" Usage="textPointer.GetTextInRun (direction, textBuffer, startIndex, count)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
        <Parameter Name="textBuffer" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to find and copy any adjacent text.</param>
        <param name="textBuffer">A buffer into which any text is copied.</param>
        <param name="startIndex">An index into <c>textBuffer</c> at which to begin writing copied text.</param>
        <param name="count">The maximum number of characters to copy.</param>
        <summary>Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.</summary>
        <returns>The number of characters actually copied into <paramref name="textBuffer" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 텍스트의 중단 없이 실행만를 반환합니다.  아무 것도 반환 형식 이외의 기호 있는 경우 <xref:System.Windows.Documents.TextPointerContext.Text> 현재 인접 한 <xref:System.Windows.Documents.TextPointer> 지정 된 방향에서입니다.  마찬가지로 텍스트는 텍스트가 아닌 다음 기호 까지만 반환 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="startIndex" /> is less than 0 or greater than the <see cref="P:System.Array.Length" /> property of <paramref name="textBuffer" />.  -or-  <paramref name="count" /> is less than 0 or greater than the remaining space in <paramref name="textBuffer" /> (<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> minus <paramref name="startIndex" />).</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextRunLength">
      <MemberSignature Language="C#" Value="public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextRunLength(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextRunLength (direction As LogicalDirection) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextRunLength(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextRunLength : System.Windows.Documents.LogicalDirection -&gt; int" Usage="textPointer.GetTextRunLength direction" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction in which to count the number of characters.</param>
        <summary>Returns the number of Unicode characters between the current <see cref="T:System.Windows.Documents.TextPointer" /> and the next non-text symbol, in the specified logical direction.</summary>
        <returns>The number of Unicode characters between the current <see cref="T:System.Windows.Documents.TextPointer" /> and the next non-text symbol.  This number may be 0 if there is no adjacent text.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 항목은 기호 간주 됩니다.  
  
-   여는 태그 또는 닫는 태그가 <xref:System.Windows.Documents.TextElement> 요소입니다.  
  
-   A <xref:System.Windows.UIElement> 에 포함 된 요소를 <xref:System.Windows.Documents.InlineUIContainer> 또는 <xref:System.Windows.Documents.BlockUIContainer>합니다.  즉, 이러한 참고는 <xref:System.Windows.UIElement> 은 항상 하나만 기호; 모든 추가 콘텐츠 또는 요소에 포함 된 계산는 <xref:System.Windows.UIElement> 기호로 계산 되지 않습니다.  
  
-   16 비트 [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] 텍스트 내에서 문자 <xref:System.Windows.Documents.Run> 요소입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidLayout">
      <MemberSignature Language="C#" Value="public bool HasValidLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidLayout : bool" Usage="System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.HasValidLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.</summary>
        <value>
          <see langword="true" /> 레이아웃은 현재 및 유효한; 하는 경우 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 경우 올바른 레이아웃에 종속 된 작업 (같은 합니다 <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> 메서드를 <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> 메서드를 및 <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> 속성) 자동으로 작업을 진행 하기 전에 유효한 레이아웃을 다시 생성 하려고 합니다.  레이아웃을 다시 생성 하는 비교적 비용이 많이 드는 작업이 될 수 있습니다.  레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 유효한 레이아웃을 확인 하려면이 속성을 사용 합니다.  자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLineBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertLineBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertLineBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertLineBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertLineBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertLineBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertLineBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inserts a line break at the current position.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> positioned immediately after the <see cref="T:System.Windows.Documents.LineBreak" /> element inserted by this method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParagraphBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertParagraphBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertParagraphBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertParagraphBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertParagraphBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertParagraphBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertParagraphBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inserts a paragraph break at the current position.</summary>
        <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the beginning (<see cref="P:System.Windows.Documents.TextElement.ContentStart" />) of the new paragraph.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기존 내 현재 위치 하는 경우이 메서드를 호출 하면 <xref:System.Windows.Documents.Paragraph> 요소, 기존 단락 및 포함 된 콘텐츠를 현재 위치에 있는 두 단락으로 분할 됩니다.  현재 위치를 기존 단락 내 없을 때이 메서드는, 새로 만든 빈 단락 삽입 됩니다.  이 메서드는 위치에 분할 또는 단락 삽입에 대 한 적합 하지 않은 경우 (현재 위치 내에 있을 경우에 예를 들어를 <xref:System.Windows.Documents.Hyperlink> 요소), 예외가 throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <see cref="T:System.Windows.Documents.Hyperlink" /> or <see cref="T:System.Windows.Documents.InlineUIContainer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertTextInRun">
      <MemberSignature Language="C#" Value="public void InsertTextInRun (string textData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertTextInRun(string textData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertTextInRun (textData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertTextInRun(System::String ^ textData);" />
      <MemberSignature Language="F#" Value="member this.InsertTextInRun : string -&gt; unit" Usage="textPointer.InsertTextInRun textData" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Documents.ITextPointer.InsertTextInRun(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textData">The text to insert.</param>
        <summary>Inserts the specified text into the text <see cref="T:System.Windows.Documents.Run" /> at the current position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Documents.TextPointer> 으로 범위가 지정 되지 않습니다는 <xref:System.Windows.Documents.Run> 요소를 <xref:System.Windows.Documents.Run> 와 함께 삽입 됩니다는 `textData`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current position is not within a <see cref="T:System.Windows.Documents.Run" /> element.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textData" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtInsertionPosition">
      <MemberSignature Language="C#" Value="public bool IsAtInsertionPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtInsertionPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtInsertionPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtInsertionPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtInsertionPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.IsAtInsertionPosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current position is an insertion position.</summary>
        <value>
          <see langword="true" /> 현재 위치가 삽입 위치; 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 삽입 위치는 연결 된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.  실제로 삽입 위치는 콘텐츠 내 캐럿을 배치할 수 있습니다.  유효한 예가 <xref:System.Windows.Documents.TextPointer> 삽입 위치 하지 않은 위치는 두 인접 한 위치 <xref:System.Windows.Documents.Paragraph> 태그 (즉, 여는 태그 다음 단락의 이전 단락의 닫는 태그 사이).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="IsAtLineStartPosition">
      <MemberSignature Language="C#" Value="public bool IsAtLineStartPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtLineStartPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtLineStartPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtLineStartPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtLineStartPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current position is at the beginning of a line.</summary>
        <value>
          <see langword="true" /> 현재 위치가 줄의 시작 부분에 있는 경우 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Documents.TextPointer> 는 모호한 위치를 가리키는 예를 들어, 두 줄 사이의 줄에서 지정 된 방향에서는 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 상대 시작 줄으로 속성을 선택 합니다.  
  
 이 속성에 의해 수행 된 작업은 올바른 레이아웃에 따라 달라 집니다.  필요한 경우이 메서드는 자동으로 작업을 진행 하기 전에 유효한 레이아웃을 다시 생성 하려고 합니다.  레이아웃을 다시 생성 하는 비교적 비용이 많이 드는 작업이 될 수 있습니다.  사용 된 <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 레이아웃이 올바른지 확인할 속성입니다.  자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      </Docs>
    </Member>
    <Member MemberName="IsInSameDocument">
      <MemberSignature Language="C#" Value="public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInSameDocument(class System.Windows.Documents.TextPointer textPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInSameDocument (textPosition As TextPointer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInSameDocument(System::Windows::Documents::TextPointer ^ textPosition);" />
      <MemberSignature Language="F#" Value="member this.IsInSameDocument : System.Windows.Documents.TextPointer -&gt; bool" Usage="textPointer.IsInSameDocument textPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPosition">A <see cref="T:System.Windows.Documents.TextPointer" /> that specifies a position to compare to the current position.</param>
        <summary>Indicates whether the specified position is in the same text container as the current position.</summary>
        <returns>
          <see langword="true" /> if <paramref name="textPosition" /> indicates a position that is in the same text container as the current position; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 관련 된 대부분의 작업 <xref:System.Windows.Documents.TextPointer> 인스턴스는 해당 인스턴스는 동일한 텍스트 컨테이너 범위에 있는 위치를 나타내는 경우에 유효한만 합니다.  예를 들어 합니다 <xref:System.Windows.Documents.TextPointer.CompareTo%2A> 하 고 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 메서드를 사용 하 여 사용할 수 없습니다는 <xref:System.Windows.Documents.TextPointer> 현재 위치와 연결 된 텍스트 컨테이너의 외부 위치로.  지정 된 확인 하려면이 메서드를 사용 <xref:System.Windows.Documents.TextPointer> 이러한 작업에 대 한 현재 위치와 호환 됩니다.  
  
   
  
## Examples  
 다음 예제는이 메서드의 사용 방법을 보여 줍니다.  예제에서는 합니다 <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> 를 지정 하는지 여부를 확인 하는 메서드 <xref:System.Windows.Documents.TextPointer> 다른 지정 된 두 사이 놓입니다 <xref:System.Windows.Documents.TextPointer> 세 개의 위치가 모두 동일한 텍스트 컨테이너에 속하는 보장이 상황에서 인스턴스.  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]
 [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textPosition" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LogicalDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.LogicalDirection LogicalDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Documents.LogicalDirection LogicalDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalDirection As LogicalDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::LogicalDirection LogicalDirection { System::Windows::Documents::LogicalDirection get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalDirection : System.Windows.Documents.LogicalDirection" Usage="System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Documents.ITextPointer.LogicalDirection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.LogicalDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.</summary>
        <value>
          <see cref="T:System.Windows.Documents.LogicalDirection" /> 현재 위치와 연결 된 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하는 방법의 예는 <xref:System.Windows.Documents.LogicalDirection> 의 <xref:System.Windows.Documents.TextPointer> 반환 적중된 테스트에서 메서드는 텍스트의 두 문자 사이 있는 적중을 제공 합니다. 논리 방향을 지정 실제로 적중 된 두 문자 중-왼쪽 또는 오른쪽.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paragraph">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Paragraph Paragraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Paragraph Paragraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Paragraph" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Paragraph As Paragraph" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Paragraph ^ Paragraph { System::Windows::Documents::Paragraph ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Paragraph : System.Windows.Documents.Paragraph" Usage="System.Windows.Documents.TextPointer.Paragraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Paragraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the paragraph that scopes the current position, if any.</summary>
        <value>합니다 <see cref="T:System.Windows.Documents.Paragraph" /> 는 현재 위치의 범위 또는 <see langword="null" /> 해당 단락이 없는 경우.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.Documents.TextPointer.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical parent that scopes the current position.</summary>
        <value>현재 위치의 범위를 지정 하는 논리 부모입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Paragraph" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="textPointer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <returns>The string that represents the object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>