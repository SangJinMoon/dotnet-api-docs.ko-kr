<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextPointer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d374acbfa59bece9a23ff4841ba74263d0c6fa42.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d374acbfa59bece9a23ff4841ba74263d0c6fa42</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Documents.TextPointer">
          <source>Represents a position within a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.FlowDocument" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.Controls.TextBlock" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Documents.FlowDocument" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.Controls.TextBlock" /&gt;</ph> 내의 위치를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class introduces the following terminology:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 클래스에서는 다음 용어를 소개 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Position - Inherently, a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always points to a <bpt id="p1">*</bpt>position<ept id="p1">*</ept> in content.</source>
          <target state="translated">위치-기본적으로, 한 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 항상 가리키는 <bpt id="p1">*</bpt>위치<ept id="p1">*</ept> 콘텐츠에 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Such positions either fall between characters in the content, or between flow content element tags that define structure for the content.</source>
          <target state="translated">이러한 위치 또는 흐름의 콘텐츠를 문자 간에 콘텐츠 요소 태그를 삽입 하는 콘텐츠에 대 한 구조를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Current Position - Because a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always indicates a position, and because many of the operations that can be performed through a <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> are relative to the position currently pointed to by the <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>, it makes sense to simply refer to the position indicated by a <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> as the <bpt id="p1">*</bpt>current position<ept id="p1">*</ept>.</source>
          <target state="translated">때문에 현재 위치-는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 항상 한 위치를 나타내고 않기 때문에 여러 작업을 통해 수행할 수 있는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 에서 가리키는 현재 위치를 기준으로는 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>로 참조 하는 의미가 으로 지정 된 위치는 <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 로 <bpt id="p1">*</bpt>현재 위치<ept id="p1">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Insertion Position - An <bpt id="p1">*</bpt>insertion position<ept id="p1">*</ept> is a position where new content may be added without breaking any semantic rules for the associated content.</source>
          <target state="translated">삽입 위치-는 <bpt id="p1">*</bpt>삽입 위치<ept id="p1">*</ept> 연결된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>In practice, an insertion position is anywhere in content where a caret may be positioned.</source>
          <target state="translated">실제로, 삽입 위치는 콘텐츠 내에 캐럿 위치 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>An example of a valid <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).</source>
          <target state="translated">유효한의 예로 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 삽입 위치 하지 않은 위치는 인접 한 두 사이의 위치 <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 태그 (즉, 이전 단락의 닫는 태그와 여는 태그 다음 단락의 사이).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Symbol - For the purposes of <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> operations that involve symbols, any of the following is considered to be a <bpt id="p1">*</bpt>symbol<ept id="p1">*</ept>:</source>
          <target state="translated">목적에 대 한 기호- <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 것으로 간주 됩니다 기호를 포함 하는 작업을 다음 중 하나는 <bpt id="p1">*</bpt>기호<ept id="p1">*</ept>:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>An opening or closing tag for a <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained within an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 내에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Each 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">각각 16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Text Container - A <bpt id="p1">*</bpt>text container<ept id="p1">*</ept> is the element that forms the ultimate border for the flow content at hand; the position indicated by a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always falls within a text container.</source>
          <target state="translated">텍스트 컨테이너-A <bpt id="p1">*</bpt>텍스트 컨테이너<ept id="p1">*</ept> 최종 테두리에 유동 콘텐츠를 구성 하는 요소 않으면 나타내는 위치는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 항상 텍스트 컨테이너 내에 속합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Currently, a text container must be either a <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>.</source>
          <target state="translated">현재 텍스트 컨테이너 중 하나 여야 합니다는 <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Generally speaking, operations between <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances in different text containers are not supported.</source>
          <target state="translated">일반적으로 사이의 연산은 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 인스턴스가 다양 한 텍스트 컨테이너에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Document - The content in a text container is referred to as a <bpt id="p1">*</bpt>document<ept id="p1">*</ept>, as in the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph> properties.</source>
          <target state="translated">문서-텍스트 컨테이너의 콘텐츠 라고는 <bpt id="p1">*</bpt>문서<ept id="p1">*</ept>에서 같이 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class is intended to facilitate traversal and manipulation of content that is represented by <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> flow content elements; in general, such elements derive from <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 클래스 쉽게 탐색 하 고 막대로 콘텐츠의 조작 하기 위한 용도가 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 유동 콘텐츠 요소; 등의 요소에서 파생 되는 일반적으로 <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Some of the operations that <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> facilitates include the following:</source>
          <target state="translated">일부 작업 하는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 용이 하 게는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Perform an ordinal comparison of the current position with a second specified position.</source>
          <target state="translated">두 번째 지정 된 위치와 현재 위치 하는 서 수 비교를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Determine the type of content adjacent to the current position in a specified direction.</source>
          <target state="translated">지정 된 방향으로 현재 위치에 인접 한 콘텐츠의 형식을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> enumeration.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> 열거 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Get the <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> that scopes or is adjacent to the current position.</source>
          <target state="translated">가져오기는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 범위를 지정 하거나 현재 위치에 인접 한입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A&gt;</ph> method.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Get the text container that scopes the current document.</source>
          <target state="translated">현재 문서의 범위를 지정 하는 텍스트 컨테이너를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> 속성을 참조하세요.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Get a specified number of characters preceding or following the current position.</source>
          <target state="translated">지정된 된 수를의 문자 앞 또는 뒤의 현재 위치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextInRun%2A&gt;</ph> method.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextInRun%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Insert a string of characters at the current position.</source>
          <target state="translated">현재 위치에 문자열을 삽입 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A&gt;</ph> method.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Find line boundaries in content.</source>
          <target state="translated">줄 경계를 콘텐츠를 찾습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> property.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Translate between <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> positions and symbol offsets into content.</source>
          <target state="translated">사이 변환 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 콘텐츠로 위치와 기호 오프셋 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> methods.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Perform visual hit testing by translating between a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position and a <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> representing relative coordinates.</source>
          <target state="translated">간에 변환 하 여 시각적 적중 테스트 수행을 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 위치 및 <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> 상대 좌표를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>Find a nearby insertion position, or check whether the current position is an insertion position.</source>
          <target state="translated">근접 한 삽입 위치를 찾거나 삽입 위치 현재 위치 인지 확인 하십시오.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A&gt;</ph> property.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The position and <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> indicated by a <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> object are immutable.</source>
          <target state="translated">위치 및 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> 가리키는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 개체는 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>When content is edited or modified, the position indicated by a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.</source>
          <target state="translated">콘텐츠 편집 하거나 수정 하 여 지정 된 위치는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> ; 주변 텍스트를 기준으로 바뀌지 않으면 대신 콘텐츠의 시작 부분에서 해당 위치의 오프셋 새 상대 위치를 반영 하도록 알맞게 조정 됩니다 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 나타내는 콘텐츠를 삽입 하거나 앞 이나 뒤 단락을 삭제할 경우에 해당 단락 시작 부분을 가리키도록 지정 단락 시작 부분에 위치를 계속 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class does not provide any public constructors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 클래스는 공용 생성자를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>An instance of <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is created by using properties or methods of other objects (including other <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> objects).</source>
          <target state="translated">인스턴스 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 속성이 나 다른 개체의 메서드를 사용 하 여 생성 됩니다 (다른를 포함 하 여 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 개체).</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The following list provides a few examples of methods and properties that create and return a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.</source>
          <target state="translated">다음 목록에서는 메서드 및 속성 만들고 반환 하는 몇 가지 예는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>This list is not exhaustive:</source>
          <target state="translated">이 목록은 완벽 하지는:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>From a <ph id="ph1">&lt;xref:System.Windows.Documents.TextRange&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Documents.TextRange.Start%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Documents.TextRange.End%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextRange&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Documents.TextRange.Start%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Documents.TextRange.End%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>From a <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>:  <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement.ContentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement.ContentEnd%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Documents.TextElement.ElementStart%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement.ElementEnd%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement.ContentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement.ContentEnd%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Documents.TextElement.ElementStart%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement.ElementEnd%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>From a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> (text container): <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock.ContentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock.ContentEnd%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> (텍스트 컨테이너): <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock.ContentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock.ContentEnd%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>From a <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> (text container): <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument.ContentStart%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Documents.FlowDocument.ContentEnd%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> (텍스트 컨테이너): <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument.ContentStart%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Documents.FlowDocument.ContentEnd%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>From an existing <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph>.</source>
          <target state="translated">기존 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to find a position just inside of the first <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element in a specified text container.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 첫 번째 내부 위치 찾으려면 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 된 지정 된 텍스트 컨테이너의에서 요소입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Documents.TextPointer">
          <source>The following example implements a simplistic find algorithm using <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> facilities.</source>
          <target state="translated">다음 예제에서는 사용 하 여 단순한 찾기 알고리즘 구현 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 시설을 운영 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> that specifies a position to compare to the current position.</source>
          <target state="translated">현재 위치와 비교할 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>Performs an ordinal comparison between the positions specified by the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and a second specified <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>와 지정된 두 번째 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 지정된 위치 사이에 서수 비교를 수행합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>–1 if the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> precedes <ph id="ph2">&lt;paramref name="position" /&gt;</ph>; 0 if the locations are the same; +1 if the current <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="position" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="position" /&gt;</ph> 앞에 오면 –1이고, 위치가 동일하면 0이고, 현재 <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>가 <ph id="ph4">&lt;paramref name="position" /&gt;</ph> 뒤에 오면 +1입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>A value of –1 indicates that the position specified by the current <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> precedes the position specified by <ph id="ph2">`position`</ph>.</source>
          <target state="translated">-1 값을 현재 지정 된 위치가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 로 지정 된 위치를 앞에 오는 <ph id="ph2">`position`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>A value of 0 indicates that the indicated positions are equal.</source>
          <target state="translated">0 값 표시 되는 위치가 같음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>A value of positive +1 indicates that the position specified by the current <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> follows the position specified by <ph id="ph2">`position`</ph>.</source>
          <target state="translated">값이 양의 + 1 이면 현재 지정 된 위치가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 로 지정 된 위치 뒤에 오는 <ph id="ph2">`position`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source>In the example, the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> method is used in conjunction with the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> method to test whether a specified <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> is empty.</source>
          <target state="translated">예제에서는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> 함께에서 메서드를 사용는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> 메서드는 지정 된 있는지 여부를 테스트 <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> specifies a position outside of the text container associated with the current position.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph>이 현재 위치와 연결된 텍스트 컨테이너의 외부 위치를 지정하는 경우</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>The number of characters to delete, starting at the current position.</source>
          <target state="translated">현재 위치에서 시작하는 삭제할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.</source>
          <target state="translated">현재 위치 뒤에 오는 문자를 삭제하려면 양수 값을 지정하고, 현재 위치 앞에 오는 문자를 삭제하려면 음수 값을 지정합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>Deletes the specified number of characters from the position indicated by the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>로 표시되는 위치에서 지정된 수의 문자를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>The number of characters actually deleted.</source>
          <target state="translated">실제로 삭제할 문자의 수입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>Specify a positive value to delete characters that follow the current position (as in <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType&gt;</ph>); specify a negative value to delete characters that precede the current position (as in <ph id="ph2">&lt;xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">현재 위치 뒤에 있는 문자를 삭제 하려면 양수 값을 지정 (에서 같이 <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType&gt;</ph>); 문자 앞에 현재 위치를 삭제 하려면 음수 값을 지정 (에서 같이 <ph id="ph2">&lt;xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>The number of characters actually deleted may be less than the number specified by <ph id="ph1">`count`</ph>.</source>
          <target state="translated">실제로 삭제 되는 문자 수로 지정 된 수보다 작을 수도 있습니다 <ph id="ph1">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>This happens in cases where <ph id="ph1">`count`</ph> specifies more characters than exist to be deleted.</source>
          <target state="translated">경우에 이런 여기서 <ph id="ph1">`count`</ph> 삭제할 존재 하는 보다 많은 문자를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
          <source>The method is called at a position where text is not allowed.</source>
          <target state="translated">텍스트를 사용할 수 없는 위치에서 메서드가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.DocumentEnd">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> at the end of content in the text container associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 텍스트 컨테이너의 콘텐츠 끝 부분에서 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentEnd">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> at the end of content in the text container associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 텍스트 컨테이너의 콘텐츠 끝 부분에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentEnd">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> for the returned <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is always a text container (<ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), rather than a <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> 반환 된 작업에 대 한 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 은 항상 텍스트 컨테이너 (<ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), 아닌 <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.DocumentStart">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> at the beginning of content in the text container associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 텍스트 컨테이너의 콘텐츠 시작 부분에서 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentStart">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> at the beginning of content in the text container associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 텍스트 컨테이너의 콘텐츠 시작 부분에 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentStart">
          <source>Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.</source>
          <target state="translated">다른 위치에 상대적인 오프셋으로를 기본 위치로이 속성에서 반환 되는 위치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentStart">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> methods provide a way to translate between positions and position offsets.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> 메서드는 위치와 위치 사이 변환 하는 방법을 제공 만큼 오프셋 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.DocumentStart">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> for the returned <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is always a text container (<ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), rather than a <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> 반환 된 작업에 대 한 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 은 항상 텍스트 컨테이너 (<ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), 아닌 <ph id="ph5">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to search for an adjacent element.</source>
          <target state="translated">인접한 요소를 검색할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
          <source>Returns the element, if any, that borders the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 인접한 요소가 있으면 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
          <source>The adjacent element in the specified <ph id="ph1">&lt;paramref name="direction" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no adjacent element exists.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;paramref name="direction" /&gt;</ph>으로 인접한 요소입니다. 인접한 요소가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
          <source>The returned element is typically a <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.</source>
          <target state="translated">반환 된 요소는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> can be returned when the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> indicates a position inside a <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> element or an <ph id="ph4">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> element.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 반환 될 수는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 내부 위치를 나타내는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> 요소 또는 <ph id="ph4">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to find a content bounding box.</source>
          <target state="translated">콘텐츠 경계 상자를 찾을 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>Returns a bounding box (<ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>) for content that borders the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>에 인접한 콘텐츠의 경계 상자(<ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>A bounding box for content that borders the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> in the specified direction, or <ph id="ph2">&lt;see cref="P:System.Windows.Rect.Empty" /&gt;</ph> if current, valid layout information is unavailable.</source>
          <target state="translated">지정된 논리 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 인접한 콘텐츠의 경계 상자입니다. 현재 올바른 레이아웃 정보를 사용할 수 없는 경우 <ph id="ph2">&lt;see cref="P:System.Windows.Rect.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> edges are not considered content for the purposes of this method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 가장자리는이 방법의 목적에 대 한 콘텐츠를 고려 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is positioned before a <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> edge, the return value is a bounding box for the next non-<ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> content in the specified direction.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 앞에 배치 되는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 경계 면 반환 값은 다음에 대 한 경계 상자 비-<ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 지정된 된 방향으로 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>If there is no content in the specified direction, a zero-width <ph id="ph1">&lt;xref:System.Windows.Rect&gt;</ph> is returned with a height matching the height of any preceding content.</source>
          <target state="translated">너비가 0 인 지정된 된 방향으로 콘텐츠가 없는 경우 <ph id="ph1">&lt;xref:System.Windows.Rect&gt;</ph> 높이 이전 콘텐츠를 일치 하는 높이 함께 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>The operation performed by this method depends on a valid layout.</source>
          <target state="translated">이 메서드에 의해 수행 되는 작업은 올바른 레이아웃에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.</source>
          <target state="translated">필요한 경우이 메서드는 작업을 진행 하기 전에 유효한 레이아웃을 자동으로 다시 생성 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>Regenerating a layout can be a relatively expensive operation.</source>
          <target state="translated">레이아웃을 다시 생성 하는 작업 상대적으로 비용이 많이 들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> property to check for a valid layout before performing operations that may regenerate the layout.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 유효한 레이아웃에 대해 확인할 속성입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to search for the closest insertion position.</source>
          <target state="translated">가장 가까운 삽입 위치를 검색할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the closest insertion position in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 가장 가까운 삽입 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the closest insertion position in the specified direction.</source>
          <target state="translated">지정된 방향으로 가장 가까운 삽입 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.</source>
          <target state="translated">삽입 위치는 연결된 된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>In practice, an insertion position is anywhere in content where a caret may be positioned.</source>
          <target state="translated">실제로, 삽입 위치는 콘텐츠 내에 캐럿 위치 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>An example of a valid <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).</source>
          <target state="translated">유효한의 예로 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 삽입 위치 하지 않은 위치는 인접 한 두 사이의 위치 <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 태그 (즉, 이전 단락의 닫는 태그와 여는 태그 다음 단락의 사이).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 이미 비어 있지 않은 서식 시퀀스에 지정된 된 방향으로의 해당 위치 바로 뒤에 대 한 올바른 삽입 위치를 있지만 닫는 태그를 가리키는 경우 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 이 속성에서 반환 메서드는 삽입을 가리키도록 조정 됩니다 서식 지정 시퀀스 닫기 바로 다음 위치를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>For example, consider the markup sequence <ph id="ph1">`&lt;Bold&gt;a&lt;/Bold&gt;b`</ph>.</source>
          <target state="translated">예를 들어 태그 시퀀스 <ph id="ph1">`&lt;Bold&gt;a&lt;/Bold&gt;b`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>Note that there are two insertion positions between the letters <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> — one that precedes the closing <ph id="ph3">`Bold`</ph> tag, and one directly following the closing <ph id="ph4">`Bold`</ph> tag.</source>
          <target state="translated">문자 간 두 개의 삽입 위치는 <ph id="ph1">`a`</ph> 및 <ph id="ph2">`b`</ph> -뒤에 닫는 하나 <ph id="ph3">`Bold`</ph> 태그 및 닫는 바로 뒤 하나 <ph id="ph4">`Bold`</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to the position directly after the letter <ph id="ph3">`a`</ph> and before of the closing <ph id="ph4">`Bold`</ph> tag, and with a <ph id="ph5">`direction`</ph> of <ph id="ph6">&lt;xref:System.Windows.Documents.LogicalDirection.Forward&gt;</ph>, the returned <ph id="ph7">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is adjusted to point to the position just before the letter <ph id="ph8">`b`</ph>, after the closing <ph id="ph9">`Bold`</ph> tag.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> 라고 하는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 문자 바로 뒤의 위치로 <ph id="ph3">`a`</ph> 하기 전에 닫기를 <ph id="ph4">`Bold`</ph> 태그를 가진는 <ph id="ph5">`direction`</ph> 의 <ph id="ph6">&lt;xref:System.Windows.Documents.LogicalDirection.Forward&gt;</ph>, 반환 된 <ph id="ph7">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 가리키도록 조정는 문자 바로 앞의 위치 <ph id="ph8">`b`</ph>를 닫은 후 <ph id="ph9">`Bold`</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>A similar adjustment is made for opening formatting tags when working in the opposite logical direction.</source>
          <target state="translated">논리적 반대 방향으로 작업 하는 경우 서식 지정 태그를 열기 위한는 비슷한 조정이 이루어집니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>This method is intended to provide a means of disambiguation between insertion positions in similar cases.</source>
          <target state="translated">이 메서드는 비슷한 경우의 삽입 위치 간에 명확성 수단을 제공 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>This method can also be used to be selective about insertion points when a sequence of structural tags is involved.</source>
          <target state="translated">이 메서드는 구조적 태그 시퀀스 관련 된 경우 삽입 지점을 선택 되도록 데도 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType&gt;</ph>) or at the end of the preceding paragraph (by specifying <ph id="ph2">&lt;xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">예를 들어 때에 결산 잔액과 개시 단락 태그 사이의 위치, 방향 매개 변수 수 데 사용 될 다음 단락 시작 부분에 가장 가까운 삽입 지점을 선택 (지정 하 여 <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType&gt;</ph>) 또는 이전 단락 (의 끝에 지정 하 여 <ph id="ph2">&lt;xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>If the pointer is already at insertion position, and there are no adjacent formatting tags in the specified <ph id="ph1">`direction`</ph>, the returned <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to the same position as the calling <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.</source>
          <target state="translated">포인터가 삽입 위치에 이미 있고 인접 한 서식 지정 태그 없음에 지정 된 경우 <ph id="ph1">`direction`</ph>, 반환 된 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 호출 하는 동일한 위치를 가리키는 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>It is possible that no valid insertion position exists relative to the position pointed to by a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.</source>
          <target state="translated">올바른 삽입 지점이 없을가 가리키는 위치를 기준으로 존재 하는지 수는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>This can happen if the referenced content is structurally incomplete, as in an empty table or list.</source>
          <target state="translated">참조 된 콘텐츠가 빈 테이블 또는 목록에서와 같이 구조적으로 완료 되지 않은 경우 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>In such cases, this method simply returns a <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to the same position as the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> from which this method was called.</source>
          <target state="translated">이러한 경우이 메서드가 반환 된 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 와 같은 위치에는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 이 메서드가 호출 된에서 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>This method always returns a valid <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.</source>
          <target state="translated">이 메서드는 항상 유효한 반환 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>This example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> method to check whether a specified <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> is empty of printable content.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> 지정 된 있는지 여부를 확인 하는 메서드 <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 인쇄 가능한 콘텐츠가 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="T:System.Windows.Documents.TextPointer">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the beginning of a line that is specified relative to the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 상대적으로 지정된 줄의 시작 부분에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>The number of start-of-line markers to skip when determining the line for which to return the starting position.</source>
          <target state="translated">시작 위치를 반환할 줄을 결정할 때 건너뛸 줄 시작 마커 수입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.</source>
          <target state="translated">음수 값은 이전 줄을 지정하고, 0은 현재 줄을 지정하고, 양수 값은 다음 줄을 지정합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the beginning of a line that is specified relative to the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 상대적으로 지정된 줄의 시작 부분에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> pointing to the beginning of the specified line (with the <ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph> set to <ph id="ph3">&lt;see cref="F:System.Windows.Documents.LogicalDirection.Forward" /&gt;</ph>), or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the specified line is out of range or otherwise cannot be located.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>이 <ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph>로 설정된 지정된 줄의 시작 부분을 가리키는 <ph id="ph3">&lt;see cref="F:System.Windows.Documents.LogicalDirection.Forward" /&gt;</ph>입니다. 지정된 줄이 범위를 벗어나거나 해당 줄을 찾을 수 없는 경우 <ph id="ph4">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> is selected as the relative starting line.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 는 모호한 위치를 가리키는 예를 들어 두 줄 사이 지정 된 방향의 함수의 줄 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> 상대 시작 줄으로 선택 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>The operation performed by this method depends on a valid layout.</source>
          <target state="translated">이 메서드에 의해 수행 되는 작업은 올바른 레이아웃에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.</source>
          <target state="translated">필요한 경우이 메서드는 작업을 진행 하기 전에 유효한 레이아웃을 자동으로 다시 생성 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>Regenerating a layout can be a relatively expensive operation.</source>
          <target state="translated">레이아웃을 다시 생성 하는 작업 상대적으로 비용이 많이 들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> to check for a valid layout before performing operations that may regenerate the layout.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 유효한 레이아웃에 대 한 확인 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>The number of start-of-line markers to skip when determining the line for which to return the starting position.</source>
          <target state="translated">시작 위치를 반환할 줄을 결정할 때 건너뛸 줄 시작 마커 수입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.</source>
          <target state="translated">음수 값은 이전 줄을 지정하고, 0은 현재 줄을 지정하고, 양수 값은 다음 줄을 지정합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.</source>
          <target state="translated">이 메서드는 반환될 때 시작 위치를 반환할 줄을 결정할 때 건너뛴 실제 줄 시작 마커 수를 포함합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>This value may be less than <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> if the beginning or end of content is encountered before the specified number of lines are skipped.</source>
          <target state="translated">지정된 수의 줄을 건너뛰기 전에 콘텐츠 시작 또는 끝 부분이 있는 경우 이 값은 <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept>보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the beginning of a line that is specified relative to the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>, and reports how many lines were skipped.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 상대적으로 지정된 줄의 시작 부분에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환하고 건너뛴 줄 수를 보고합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> pointing to the beginning of the specified line (with the <ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph> set to <ph id="ph3">&lt;see cref="F:System.Windows.Documents.LogicalDirection.Forward" /&gt;</ph>), or to the beginning of the line closest to the specified line if the specified line is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>이 <ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph>로 설정된 지정된 줄의 시작 부분을 가리키거나 지정된 줄에 가장 가까운 줄의 시작 부분(지정된 줄이 범위를 벗어난 경우)을 가리키는 <ph id="ph3">&lt;see cref="F:System.Windows.Documents.LogicalDirection.Forward" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> property is selected as the relative starting line.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 는 모호한 위치를 가리키는 예를 들어 두 줄 사이의 줄에 지정 된 방향의 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> 상대 시작 줄으로 속성을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to search for the next symbol.</source>
          <target state="translated">다음 기호를 검색할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>Returns a pointer to the next symbol in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향의 다음 기호에 대한 포인터를 반환합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the next symbol in the requested direction, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the current <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> borders the start or end of content.</source>
          <target state="translated">요청한 방향의 다음 기호에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다. 현재 <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>가 콘텐츠 시작 또는 끝 부분에 인접한 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>Any of the following is considered to be a symbol:</source>
          <target state="translated">다음 항목은 기호 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>An opening or closing tag for a <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>A 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>If the next symbol is categorized as <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.EmbeddedElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointerContext.ElementStart&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointerContext.ElementEnd&gt;</ph> (as identified by the <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method), then the <ph id="ph5">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is advanced by exactly one symbol from the current position.</source>
          <target state="translated">다음 기호 분류 되는지 경우 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.EmbeddedElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointerContext.ElementStart&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointerContext.ElementEnd&gt;</ph> (으로 식별 되는 <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> 메서드), 그런 다음 <ph id="ph5">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 이 속성에서 반환 메서드는 현재 위치에서 정확히 하나의 기호가 앞입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>If the next symbol is categorized as <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> is not <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>).</source>
          <target state="translated">다음 기호 분류 되는지 경우 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 이 속성에서 반환 메서드에서 텍스트 뒤로 다음 텍스트가 아닌 기호 (즉, 다음 위치의 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> 않습니다 <ph id="ph4">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>The exact symbol count crossed can be calculated in advance by calling the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A&gt;</ph> method.</source>
          <target state="translated">호출 하 여 교차 기호 정확한 개수를 미리 계산할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A&gt;</ph> method in conjunction with the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method to traverse and extract the symbols in a specified <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A&gt;</ph> 메서드와 함께 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> 메서드를 트래버스하 고 지정 된 기호를 추출할 <ph id="ph3">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>While the example can be used to extract a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> structure for the contents of a given <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>, it is intended for illustrative purposes only, and should not be used in production code.</source>
          <target state="translated">추출 하는 예제를 사용할 수 있지만 한 <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> 의 내용에 대 한 구조는 주어진 <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>, 설명 목적 으로만 사용 하 고 프로덕션 코드에서는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
          <source>See the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace for a rich set of types designed for working with and processing XML.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Xml&gt;</ph> 다양 한 작업 및 XML을 처리 하기 위한 형식에 대 한 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to search for the next insertion position.</source>
          <target state="translated">다음 삽입 위치를 검색할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the next insertion position in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향의 다음 삽입 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> that identifies the next insertion position in the requested direction, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no next insertion position can be found.</source>
          <target state="translated">요청한 방향의 다음 삽입 위치를 식별하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다. 다음 삽입 위치를 찾을 수 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>An <bpt id="p1">*</bpt>insertion position<ept id="p1">*</ept> is a position where new content may be added without breaking any semantic rules for the associated content.</source>
          <target state="translated"><bpt id="p1">*</bpt>삽입 위치<ept id="p1">*</ept> 연결된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>In practice, an insertion position is anywhere in content where a caret may be positioned.</source>
          <target state="translated">실제로, 삽입 위치는 콘텐츠 내에 캐럿 위치 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>An example of a valid <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).</source>
          <target state="translated">유효한의 예로 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 삽입 위치 하지 않은 위치는 인접 한 두 사이의 위치 <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 태그 (즉, 이전 단락의 닫는 태그와 여는 태그 다음 단락의 사이).</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph> method to traverse content element boundaries in order to count the number of <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> elements present between two specified <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances.</source>
          <target state="translated">이 예제에서는 사용는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph> 의 수를 계산 하기 위해 콘텐츠 요소 경계를 트래버스해야 하는 메서드 <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 간에 지정 된 두 요소가 제공 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> that specifies a position to find the distance (in symbols) to.</source>
          <target state="translated">거리(기호)를 찾을 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>Returns the count of symbols between the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and a second specified <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>와 지정된 두 번째 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> 사이의 기호 수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>The relative number of symbols between the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and <ph id="ph2">&lt;paramref name="position" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="position" /&gt;</ph> 사이의 상대적 기호 수입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>A negative value indicates that the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> follows the position specified by <ph id="ph2">&lt;paramref name="position" /&gt;</ph>, 0 indicates that the positions are equal, and a positive value indicates that the current <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> precedes the position specified by <ph id="ph4">&lt;paramref name="position" /&gt;</ph>.</source>
          <target state="translated">음수 값은 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="position" /&gt;</ph>에 지정된 위치 뒤에 옴을 나타내고, 0은 위치가 동일함을 나타내고, 양수 값은 현재 <ph id="ph3">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>가 <ph id="ph4">&lt;paramref name="position" /&gt;</ph>에 지정된 위치 앞에 옴을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>Any of the following is considered to be a symbol:</source>
          <target state="translated">다음 항목은 기호 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>An opening or closing tag for a <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>A 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> method to find the offsets for two <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances, and then uses this information to save and restore the selection in a <ph id="ph3">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.</source>
          <target state="translated">이 예제에서는 사용은 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> 두에 대 한 오프셋을 확인 하려면 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 인스턴스와 다음이 정보를 사용 하 여 저장 하 고 선택 영역 복원는 <ph id="ph3">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source>The example assumes that the contents of the <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> have not changed between a selection save and a selection restore.</source>
          <target state="translated">이 예에서는 가정 하는의 내용을 <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> 저장 선택 및 선택 영역 복원 간에 변경 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> specifies a position outside of the text container associated with the current position.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph>이 현재 위치와 연결된 텍스트 컨테이너의 외부 위치를 지정하는 경우</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to determine the category for adjacent content.</source>
          <target state="translated">인접한 콘텐츠의 범주를 결정할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>Returns a category indicator for the content adjacent to the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 인접한 콘텐츠의 범주 표시기를 반환합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointerContext" /&gt;</ph> values that indicates the category for adjacent content in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 인접한 콘텐츠의 범주를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointerContext" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> positions.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> 수 간의 균형점을 열고 닫는 요소 태그가 지정 된 두 사이 계산 하기 위한 알고리즘을 구현 하는 메서드 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 위치 합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
          <source>Each opening element tag is counted as +1, and each closing element tag is counted as –1.</source>
          <target state="translated">각 + 1로 이동 하 고 각 계산 되는 여는 요소 태그-1로 계산 되는 닫는 요소 태그가 있습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="T:System.Windows.Documents.TextPointer">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the position indicated by the specified offset, in symbols, from the beginning of content.</source>
          <target state="translated">콘텐츠 시작 부분에서 지정된 오프셋(기호)으로 표시되는 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>An offset, in symbols, for which to calculate and return the position.</source>
          <target state="translated">위치를 계산하고 반환할 오프셋(기호)입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <ph id="ph1">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph> property.</source>
          <target state="translated">오프셋이 음수이면 위치는 <ph id="ph1">&lt;see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /&gt;</ph> 속성으로 표시되는 방향과 반대 논리 방향으로 계산됩니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the position indicated by the specified offset, in symbols, from the beginning of the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> 시작 부분에서 지정된 오프셋(기호)으로 표시되는 위치에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the position indicated by the specified offset, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no corresponding position can be found.</source>
          <target state="translated">지정된 오프셋으로 표시되는 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다. 해당 위치를 찾을 수 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>Any of the following is considered to be a symbol:</source>
          <target state="translated">다음 항목은 기호 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>An opening or closing tag for the <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>A 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to a specified offset in a specified paragraph.</source>
          <target state="translated">이 예제에서는 사용는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> 하나 모든 호스팅 단락 및 반환 하 고 다른 기준으로 지정된 된 위치에 대 한 오프셋을 계산 하는 메서드 쌍을 구현 하려면 메서드는 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 지정된 단락에 지정된 된 오프셋에 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>An offset, in symbols, for which to calculate and return the position.</source>
          <target state="translated">위치를 계산하고 반환할 오프셋(기호)입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>If the offset is negative, the returned <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> precedes the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>; otherwise, it follows.</source>
          <target state="translated">오프셋이 음수이면 반환되는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>는 현재 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> 앞에 오고, 그렇지 않으면 뒤에 옵니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction of the returned <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">반환되는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph>의 논리 방향을 지정하는 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the position indicated by the specified offset, in symbols, from the beginning of the current <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and in the specified direction.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>의 시작 부분에서 지정된 방향으로 지정된 오프셋(기호)으로 표시되는 위치에 대한 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the position indicated by the specified offset, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the offset extends past the end of the content.</source>
          <target state="translated">지정된 오프셋으로 표시되는 위치에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다. 오프셋이 콘텐츠 끝을 지나 확장되는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>Any of the following is considered to be a symbol:</source>
          <target state="translated">다음 항목은 기호 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>An opening or closing tag for the <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
          <source>A 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="T:System.Windows.Documents.TextPointer">
          <source>Returns text adjacent to the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 인접한 텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to find and return any adjacent text.</source>
          <target state="translated">인접한 텍스트를 찾아 반환할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>Returns a string containing any text adjacent to the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> in the specified logical direction.</source>
          <target state="translated">지정된 논리 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>에 인접한 텍스트를 포함하는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>A string containing any adjacent text in the specified logical direction, or <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> if no adjacent text can be found.</source>
          <target state="translated">지정된 논리 방향으로 인접한 텍스트를 포함하는 문자열입니다. 인접한 텍스트를 찾을 수 없는 경우 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>This method returns only uninterrupted runs of text.</source>
          <target state="translated">이 메서드는 텍스트의 중단 없이 실행만을 반환합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>Nothing is returned if any symbol type other than <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> is adjacent to the current <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> in the specified direction.</source>
          <target state="translated">아무 것도 반환 이외의 모든 기호 형식을 경우 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> 현재에 인접 한 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 지정된 된 방향으로 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>Similarly, text is returned only up to the next non-text symbol.</source>
          <target state="translated">마찬가지로, 다음 텍스트가 아닌 기호 까지만 텍스트가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextInRun%2A&gt;</ph> method to implement a simple text extractor.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetTextInRun%2A&gt;</ph> 간단한 텍스트 extractor 구현 하려면 메서드.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>The method returns a string concatenation of all text between two specified <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances.</source>
          <target state="translated">메서드는 지정 된 두 까지의 모든 텍스트의 문자열 연결을 반환 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>While the example can be used to extract any text between two <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances, it is intended for illustrative purposes only, and should not be used in production code.</source>
          <target state="translated">이 예제에서는 두 텍스트를 추출할 사용할 수 있지만 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 인스턴스 것 설명 목적 으로만, 용도가 및 프로덕션 코드에서는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">대신 <ph id="ph1">&lt;xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType&gt;</ph> 속성을 사용하세요.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to find and copy any adjacent text.</source>
          <target state="translated">인접한 텍스트를 찾아 복사할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>A buffer into which any text is copied.</source>
          <target state="translated">텍스트를 복사할 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>An index into <bpt id="p1">&lt;c&gt;</bpt>textBuffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing copied text.</source>
          <target state="translated">복사된 텍스트를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>textBuffer<ept id="p1">&lt;/c&gt;</ept>에 대한 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to copy.</source>
          <target state="translated">복사할 최대 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.</source>
          <target state="translated">지정된 방향으로 인접한 텍스트에서 지정된 최대 수의 문자를 호출자가 제공한 문자 배열에 복사합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>The number of characters actually copied into <ph id="ph1">&lt;paramref name="textBuffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="textBuffer" /&gt;</ph>에 실제로 복사되는 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>This method returns only uninterrupted runs of text.</source>
          <target state="translated">이 메서드는 텍스트의 중단 없이 실행만을 반환합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>Nothing is returned if any symbol type other than <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> is adjacent to the current <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> in the specified direction.</source>
          <target state="translated">아무 것도 반환 이외의 모든 기호 형식을 경우 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> 현재에 인접 한 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 지정된 된 방향으로 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>Similarly, text is returned only up to the next non-text symbol.</source>
          <target state="translated">마찬가지로, 다음 텍스트가 아닌 기호 까지만 텍스트가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than 0 or greater than the <ph id="ph2">&lt;see cref="P:System.Array.Length" /&gt;</ph> property of <ph id="ph3">&lt;paramref name="textBuffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph3">&lt;paramref name="textBuffer" /&gt;</ph>의 <ph id="ph2">&lt;see cref="P:System.Array.Length" /&gt;</ph> 속성보다 큰 경우.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0 or greater than the remaining space in <ph id="ph2">&lt;paramref name="textBuffer" /&gt;</ph> (<ph id="ph3">&lt;paramref name="textBuffer" /&gt;</ph>.<ph id="ph4">&lt;see cref="P:System.Array.Length" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="textBuffer" /&gt;</ph>의 남은 공간 보다 큰 경우(<ph id="ph3">&lt;paramref name="textBuffer" /&gt;</ph>.<ph id="ph4">&lt;see cref="P:System.Array.Length" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
          <source>minus <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>).</source>
          <target state="translated">빼기 <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> values that specifies the logical direction in which to count the number of characters.</source>
          <target state="translated">문자 수를 계산할 논리 방향을 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>Returns the number of Unicode characters between the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and the next non-text symbol, in the specified logical direction.</source>
          <target state="translated">지정된 방향으로 현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>와 텍스트가 아닌 다음 기호 사이의 유니코드 문자 수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>The number of Unicode characters between the current <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> and the next non-text symbol.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>와 텍스트가 아닌 다음 기호 사이의 유니코드 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>This number may be 0 if there is no adjacent text.</source>
          <target state="translated">인접한 텍스트가 없는 경우 이 숫자는 0일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>Any of the following is considered to be a symbol:</source>
          <target state="translated">다음 항목은 기호 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>An opening or closing tag for the <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.</source>
          <target state="translated">여는 태그 또는 닫는 태그가 <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 에 포함 된 요소는 <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>Note that such a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.</source>
          <target state="translated">이러한은 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 항상 정확히 하나의 기호; 추가 내용 또는 요소에 포함 된 것으로 간주 됩니다는 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 기호로 계산 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
          <source>A 16-bit <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
          <target state="translated">16 비트 <ph id="ph1">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> 텍스트 내부에서 문자 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source>Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.</source>
          <target state="translated">현재 위치와 연결된 텍스트 컨테이너의 레이아웃이 올바른지(최신인지) 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the layout is current and valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">레이아웃이 최신 상태이면서 올바르면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source>When necessary, operations that depend on a valid layout (such as the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A&gt;</ph> method, and <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> property) attempt to automatically regenerate a valid layout before proceeding with the operation.</source>
          <target state="translated">필요한 경우 올바른 레이아웃에 종속 된 작업 (같은 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> 메서드를 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A&gt;</ph> 메서드를 및 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> 속성) 작업을 진행 하기 전에 유효한 레이아웃을 자동으로 다시 생성 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source>Regenerating a layout can be a relatively expensive operation.</source>
          <target state="translated">레이아웃을 다시 생성 하는 작업 상대적으로 비용이 많이 들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source>Use this property to check for a valid layout before performing operations that may regenerate the layout.</source>
          <target state="translated">이 속성을 사용 하 여 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 유효한 레이아웃에 대 한 확인 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.HasValidLayout">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertLineBreak">
          <source>Inserts a line break at the current position.</source>
          <target state="translated">현재 위치에 줄 바꿈을 삽입합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertLineBreak">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> positioned immediately after the <ph id="ph2">&lt;see cref="T:System.Windows.Documents.LineBreak" /&gt;</ph> element inserted by this method.</source>
          <target state="translated">이 메서드에서 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> 요소를 삽입한 직후에 배치되는 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.LineBreak" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>Inserts a paragraph break at the current position.</source>
          <target state="translated">현재 위치에 단락 나누기를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> to the beginning (<ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextElement.ContentStart" /&gt;</ph>) of the new paragraph.</source>
          <target state="translated">새 단락의 시작 부분(<ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>)에 대한 <ph id="ph2">&lt;see cref="P:System.Windows.Documents.TextElement.ContentStart" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>If this method is called when the current position is inside of an existing <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.</source>
          <target state="translated">기존의 내부에서 현재 위치 하는 경우이 메서드를 호출 하면 <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 요소, 기존 단락 및 포함 된 콘텐츠는 현재 위치에 두 단락으로 분할 됩니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.</source>
          <target state="translated">현재 위치를 기존 단락 내에서 없을 때이 메서드가 호출 되는 새로 만든 빈 단락 삽입 됩니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> element), an exception is thrown.</source>
          <target state="translated">이 메서드는 위치에 분할 하거나 단락 삽입 사용할 수 없는 경우 (내에 현재 위치 하는 경우에 예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> 요소), 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
          <source>This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Hyperlink" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.Documents.InlineUIContainer" /&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Hyperlink" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.Documents.InlineUIContainer" /&gt;</ph> 범위에서와 같이 새 단락을 수용하도록 분할할 수 없는 위치에서 호출됩니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
          <source>The text to insert.</source>
          <target state="translated">삽입할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
          <source>Inserts the specified text into the text <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Run" /&gt;</ph> at the current position.</source>
          <target state="translated">지정된 텍스트를 현재 위치의 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Run" /&gt;</ph> 텍스트에 삽입합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is not scoped by a <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element, a <ph id="ph3">&lt;xref:System.Windows.Documents.Run&gt;</ph> is inserted along with the <ph id="ph4">`textData`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 여 범위로 지정 되지 않은 한 <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> 요소는 <ph id="ph3">&lt;xref:System.Windows.Documents.Run&gt;</ph> 와 함께 삽입 됩니다는 <ph id="ph4">`textData`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
          <source>The current position is not within a <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Run" /&gt;</ph> element.</source>
          <target state="translated">현재 위치가 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Run" /&gt;</ph> 요소 내에 없는 경우</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
          <source><ph id="ph1">&lt;paramref name="textData" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="textData" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
          <source>Gets a value that indicates whether the current position is an insertion position.</source>
          <target state="translated">현재 위치가 삽입 위치인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current position is an insertion position; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 위치가 삽입 위치이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
          <source>An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.</source>
          <target state="translated">삽입 위치는 연결된 된 콘텐츠에 대 한 의미 체계 규칙을 위반 하지 않고 새 콘텐츠를 추가할 수 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
          <source>In practice, an insertion position is anywhere in content where a caret may be positioned.</source>
          <target state="translated">실제로, 삽입 위치는 콘텐츠 내에 캐럿 위치 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
          <source>An example of a valid <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).</source>
          <target state="translated">유효한의 예로 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 삽입 위치 하지 않은 위치는 인접 한 두 사이의 위치 <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> 태그 (즉, 이전 단락의 닫는 태그와 여는 태그 다음 단락의 사이).</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>Gets a value that indicates whether the current position is at the beginning of a line.</source>
          <target state="translated">현재 위치가 줄의 시작 부분에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current position is at the beginning of a line; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 위치가 줄의 시작 부분에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> property is selected as the relative starting line.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 는 모호한 위치를 가리키는 예를 들어 두 줄 사이의 줄에 지정 된 방향의 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> 상대 시작 줄으로 속성을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>The operation performed by this property depends on a valid layout.</source>
          <target state="translated">이 속성에 의해 수행 되는 작업은 올바른 레이아웃에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.</source>
          <target state="translated">필요한 경우이 메서드는 작업을 진행 하기 전에 유효한 레이아웃을 자동으로 다시 생성 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>Regenerating a layout can be a relatively expensive operation.</source>
          <target state="translated">레이아웃을 다시 생성 하는 작업 상대적으로 비용이 많이 들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> property to check for a valid layout before performing operations that may regenerate the layout.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> 레이아웃을 다시 생성 될 수도 있는 작업을 수행 하기 전에 유효한 레이아웃에 대해 확인할 속성입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph> that specifies a position to compare to the current position.</source>
          <target state="translated">현재 위치와 비교할 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.TextPointer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>Indicates whether the specified position is in the same text container as the current position.</source>
          <target state="translated">지정된 위치가 현재 위치와 동일한 텍스트 컨테이너 내에 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="textPosition" /&gt;</ph> indicates a position that is in the same text container as the current position; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="textPosition" /&gt;</ph>이 현재 위치와 동일한 텍스트 컨테이너 내 위치를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>Most operations that involve multiple <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances are only valid if the instances in question indicate positions that are in the same text container scope.</source>
          <target state="translated">여러 관련 된 대부분의 작업 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 문제의 인스턴스는 동일한 텍스트 컨테이너 범위에 있는 위치를 가리킬 경우 인스턴스는만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>For example the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> methods cannot be used with a <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to a position outside of the text container associated with the current position.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> 메서드를 함께 사용할 수 없습니다는 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 현재 위치와 연결 된 텍스트 컨테이너의 외부 위치에 있습니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>Use this method to verify that a specified <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is compatible with the current position for such operations.</source>
          <target state="translated">지정 된 되어 있는지 확인 하려면이 메서드를 사용 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 등의 작업에 대 한 현재 위치와 호환 됩니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>The following example demonstrates a use for this method.</source>
          <target state="translated">다음 예제에서는이 메서드에 대 한 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A&gt;</ph> method to check whether a specified <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is positioned between two other specified <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances in a situation when there is no guarantee that all three positions belong to the same text container.</source>
          <target state="translated">이 예제에서는 사용는 <ph id="ph1">&lt;xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A&gt;</ph> 지정 된 있는지 여부를 확인 하는 메서드 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 다른 지정 된 두 중간쯤 <ph id="ph3">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 보장이 없습니다 세 개의 위치가 모두 동일한 텍스트 컨테이너에 속하는 경우 인스턴스.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
          <source><ph id="ph1">&lt;paramref name="textPosition" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="textPosition" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.LogicalDirection">
          <source>Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 콘텐츠를 구분하는 데 사용되는 현재 위치와 연결된 논리 방향을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.LogicalDirection">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> value that is associated with the current position.</source>
          <target state="translated">현재 위치와 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Documents.LogicalDirection" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.LogicalDirection">
          <source>As an example of how this property is used, the <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by a hit test method gives a hit that is between two characters of text.</source>
          <target state="translated">이 속성을 사용 하는 방법의 예로 <ph id="ph1">&lt;xref:System.Windows.Documents.LogicalDirection&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> 반환 된 적중된 테스트에서 메서드는 텍스트의 두 문자 사이 있는 적중 횟수를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.LogicalDirection">
          <source>The logical direction specifies which of the two characters was actually hit—the left or the right.</source>
          <target state="translated">두 문자 중에 도달한 실제로 논리 방향을 지정-왼쪽 이나 오른쪽입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.Paragraph">
          <source>Gets the paragraph that scopes the current position, if any.</source>
          <target state="translated">현재 위치의 범위를 지정하는 단락이 있으면 가져옵니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.Paragraph">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Documents.Paragraph" /&gt;</ph> that scopes the current position, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no such paragraph exists.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Documents.Paragraph" /&gt;</ph> 범위로 지정 하는 현재 위치 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 이러한 단락이 없는 존재 하는 경우.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Windows.Documents.TextPointer.Parent">
          <source>Gets the logical parent that scopes the current position.</source>
          <target state="translated">현재 위치의 범위를 지정하는 논리 부모를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Documents.TextPointer.Parent">
          <source>The logical parent that scopes the current position.</source>
          <target state="translated">현재 위치의 범위를 지정하는 논리 부모입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.ToString">
          <source>This type or member supports the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
          <target state="translated">이 형식 또는 멤버는 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Windows.Documents.TextPointer.ToString">
          <source>The string that represents the object.</source>
          <target state="translated">개체를 나타내는 문자열입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>