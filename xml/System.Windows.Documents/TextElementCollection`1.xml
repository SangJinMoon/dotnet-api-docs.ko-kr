<Type Name="TextElementCollection&lt;TextElementType&gt;" FullName="System.Windows.Documents.TextElementCollection&lt;TextElementType&gt;">
  <TypeSignature Language="C#" Value="public class TextElementCollection&lt;TextElementType&gt; : System.Collections.Generic.ICollection&lt;TextElementType&gt;, System.Collections.Generic.IEnumerable&lt;TextElementType&gt;, System.Collections.IList where TextElementType : TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextElementCollection`1&lt;(class System.Windows.Documents.TextElement) TextElementType&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!TextElementType&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TextElementType&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextElementCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementCollection(Of TextElementType)&#xA;Implements ICollection(Of TextElementType), IEnumerable(Of TextElementType), IList" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TextElementType&gt;&#xA; where TextElementType : TextElementpublic ref class TextElementCollection : System::Collections::Generic::ICollection&lt;TextElementType&gt;, System::Collections::Generic::IEnumerable&lt;TextElementType&gt;, System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TextElementType">
      <Constraints>
        <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TextElementType&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TextElementType"><span data-ttu-id="1d5cc-101">제네릭 컬렉션의 형식 지정자입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-101">Type specifier for the generic collection.</span></span>  <span data-ttu-id="1d5cc-102">사용 가능한 형식은 <see cref="T:System.Windows.Documents.TextElement" /> 형식 또는 <see cref="T:System.Windows.Documents.TextElement" />의 하위 항목으로 제한됩니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-102">Acceptable types are constrained to a type of <see cref="T:System.Windows.Documents.TextElement" /> or a descendant of <see cref="T:System.Windows.Documents.TextElement" />.</span></span></typeparam>
    <summary><span data-ttu-id="1d5cc-103">형식이 안전하고 순서가 지정된 <see cref="T:System.Windows.Documents.TextElement" /> 개체 컬렉션을 만들고 관리하기 위한 표준 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-103">Provides standard facilities for creating and managing a type-safe, ordered collection of <see cref="T:System.Windows.Documents.TextElement" /> objects.</span></span>  <span data-ttu-id="1d5cc-104">이 컬렉션은 <see cref="T:System.Windows.Documents.TextElement" />에서 파생되는 지정된 형식의 개체 작업을 위한 제네릭 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-104">This is a generic collection for working with objects of a specified type that derives from <see cref="T:System.Windows.Documents.TextElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d5cc-105">이 컬렉션은 0부터 시작 하는 인덱스가 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-105">This collection supports zero-based indexing.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TableCellCollection" />
    <altmember cref="T:System.Windows.Documents.TableColumnCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowCollection" />
    <altmember cref="T:System.Windows.Documents.TableRowGroupCollection" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1d5cc-106">컬렉션에 추가할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-106">An item to append to the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-107">지정된 항목을 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-107">Appends a specified item to the collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d5cc-108">*item*이 컬렉션에 이미 속해 있을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-108">Raised when *item* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d5cc-109">*item*이 **null**일 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-109">Raised when *item* is **null**.</span></span></exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.IEnumerable range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.IEnumerable range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::IEnumerable ^ range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="1d5cc-110"><see cref="T:System.Collections.IEnumerable" /> 인터페이스를 구현하고 컬렉션에 추가할 항목의 범위를 지정하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-110">An object that implements the <see cref="T:System.Collections.IEnumerable" /> interface, and that specifies a range of items to add to the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-111">지정된 범위의 항목을 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-111">Appends a specified range of items to the collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d5cc-112">*range*에 **null** 항목이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-112">Raised when *range* includes any **null** items.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d5cc-113">*range*가 **null**인 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-113">Raised when *range* is **null**.</span></span></exception>
        <altmember cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d5cc-114">컬렉션에서 모든 항목을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-114">Clears all items from the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1d5cc-115">컬렉션에 있는지 여부를 쿼리할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-115">An item to query for the presence of in the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-116">지정된 항목이 컬렉션에 있는지 여부를 쿼리합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-116">Queries for the presence of a specified item in the collection.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-117">지정된 *item*이 컬렉션에 있으면 **true**이고, 그렇지 않으면 **false**입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-117">**true** if the specified *item* is present in the collection; otherwise, **false**.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TextElementType[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TextElementType[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TextElementType(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TextElementType&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TextElementType[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1d5cc-118">컬렉션 내용을 복사할 1차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-118">A one-dimensional array to which the collection contents will be copied.</span></span>  <span data-ttu-id="1d5cc-119">이 배열은 0부터 시작하는 인덱스를 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-119">This array must use zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1d5cc-120"><c>array</c> 내에서 복사된 컬렉션 개체를 삽입할 시작 위치를 지정하는 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-120">A zero-based index in <c>array</c> specifying the position at which to begin inserting the copied collection objects.</span></span></param>
        <summary><span data-ttu-id="1d5cc-121">컬렉션 내용을 복사하여 배열의 지정된 인덱스 위치에서 시작하는 지정된 배열에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-121">Copies the contents of the collection and inserts them into a specified array starting at a specified index position in the array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d5cc-122">*array*에 <see cref="T:System.Windows.Documents.TextElement" /> 형식과 호환되지 않는 항목이 포함되어 있거나 *arrayIndex*가 *array*의 범위를 벗어난 위치를 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-122">Raised when *array* includes items that are not compatible with the type <see cref="T:System.Windows.Documents.TextElement" />, or if *arrayIndex* specifies a position that falls outside of the bounds of *array*.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d5cc-123">*array*가 **null**인 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-123">Raised when *array* is **null**.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1d5cc-124">*arrayIndex*가 **0**보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-124">Raised when *arrayIndex* is less than **0**.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-125">현재 컬렉션에 있는 항목 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-125">Gets the number of items currently in the collection.</span></span></summary>
        <value><span data-ttu-id="1d5cc-126">현재 컬렉션에 있는 항목 수입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-126">The number of items currently in the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TextElementType&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TextElementType&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TextElementType&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TextElementType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d5cc-127">컬렉션의 콘텐츠에 대한 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-127">Returns an enumerator for the contents of the collection.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-128">컬렉션의 콘텐츠에 대한 열거자입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-128">An enumerator for the contents of the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public void InsertAfter (TextElementType previousSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAfter(!TextElementType previousSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAfter (previousSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAfter(TextElementType previousSibling, TextElementType newItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="previousSibling"><span data-ttu-id="1d5cc-129">컬렉션에서 삽입될 새 항목 앞에 위치할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-129">An item in the collection after which the new item will be inserted.</span></span></param>
        <param name="newItem"><span data-ttu-id="1d5cc-130">컬렉션에 삽입할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-130">An item to insert into the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-131">컬렉션에서 지정된 항목을 지정된 컬렉션 항목 뒤에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-131">Inserts a specified item in the collection after a specified collection item.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d5cc-132">*newItem*이 이미 컬렉션에 속해 있는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-132">Raised when *newItem* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d5cc-133">*previousSibling* 또는 *newItem*이 **null**인 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-133">Raised when *previousSibling* or *newItem* is **null**.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1d5cc-134">*previousSibling*이 이 컬렉션에 속하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-134">Raised when *previousSibling* does not belong to this collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public void InsertBefore (TextElementType nextSibling, TextElementType newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertBefore(!TextElementType nextSibling, !TextElementType newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertBefore (nextSibling As TextElementType, newItem As TextElementType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertBefore(TextElementType nextSibling, TextElementType newItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextSibling" Type="TextElementType" />
        <Parameter Name="newItem" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="nextSibling"><span data-ttu-id="1d5cc-135">컬렉션에서 삽입될 새 항목 뒤에 위치할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-135">An item in the collection before which the new item will be inserted.</span></span></param>
        <param name="newItem"><span data-ttu-id="1d5cc-136">컬렉션에 삽입할 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-136">An item to insert into the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-137">컬렉션에서 지정된 항목을 지정된 컬렉션 항목 앞에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-137">Inserts a specified item in the collection before a specified collection item.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d5cc-138">*newItem*이 이미 컬렉션에 속해 있는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-138">Raised when *newItem* already belongs to a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d5cc-139">*nextSibling* 또는 *newItem*이 **null**인 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-139">Raised when *nextSibling* or *newItem* is **null**.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1d5cc-140">*nextSibling*이 이 컬렉션에 속하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="1d5cc-140">Raised when *nextSibling* does not belong to this collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-141">컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-141">Gets a value that indicates whether or not the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="1d5cc-142">**true 이면** 컬렉션이 읽기 전용 고, 그렇지 않으면 **false**합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-142">**true** if the collection is read-only; otherwise, **false**.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d5cc-143">현재이 속성은 항상 반환 **false**합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-143">Currently, this property always returns **false**.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TextElementType item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TextElementType item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As TextElementType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TextElementType item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TextElementType" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1d5cc-144">컬렉션에서 제거될 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-144">An item to be removed fro the collection.</span></span></param>
        <summary><span data-ttu-id="1d5cc-145">지정된 항목을 컬렉션에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-145">Removes a specified item from the collection.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-146">지정된 항목을 찾아서 제거하면 **true**이고, 그러지 않으면 **false**입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-146">**true** if the specified item was found and removed; otherwise, **false**.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d5cc-147">이 메서드가 반환 **false** 경우 *항목* 은 **null**합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-147">This method returns **false** if *item* is **null**.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1d5cc-148"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-148">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="1d5cc-149"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-149">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1d5cc-150"><c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-150">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="1d5cc-151">특정 <see cref="T:System.Collections.ICollection" /> 인덱스에서 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-151">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index..</span></span>  <span data-ttu-id="1d5cc-152">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-152">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-153"><see cref="T:System.Collections.ICollection" />에 포함된 요소 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-153">Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="1d5cc-154">대신 형식이 안전한 <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> 속성을 사용하십시오.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-154">Use the type-safe <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> property instead.</span></span></summary>
        <value><span data-ttu-id="1d5cc-155"><see cref="T:System.Collections.ICollection" />에 포함된 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-155">The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-156"><see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-156">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value>
          <span data-ttu-id="1d5cc-157"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-157"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-158"><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="1d5cc-159">
          <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d5cc-160">컬렉션을 반복하는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-160">Returns an enumerator that iterates through a collection.</span></span>  <span data-ttu-id="1d5cc-161">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-161">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> method instead.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-162">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-162">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1d5cc-163"><see cref="T:System.Collections.IList" />에 추가할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-163">The object to add to the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="1d5cc-164"><see cref="T:System.Collections.IList" />에 항목을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-164">Adds an item to the <see cref="T:System.Collections.IList" />.</span></span>  <span data-ttu-id="1d5cc-165">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-165">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> method instead.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-166">새 요소가 삽입된 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-166">The position into which the new element was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d5cc-167">이 형식 또는 멤버는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-167">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span>  <span data-ttu-id="1d5cc-168">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-168">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1d5cc-169"><see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-169">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="1d5cc-170"><see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-170">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value..</span></span>  <span data-ttu-id="1d5cc-171">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-171">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> method instead.</span></span></summary>
        <returns>
          <span data-ttu-id="1d5cc-172"><see cref="T:System.Object" />가 <see cref="T:System.Collections.IList" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-172"><see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1d5cc-173"><see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-173">The object to locate in the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="1d5cc-174"><see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-174">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span></span></summary>
        <returns><span data-ttu-id="1d5cc-175">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-175">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="1d5cc-176"><c>value</c>를 삽입할 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-176">The zero-based index at which <c>value</c> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="1d5cc-177"><see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-177">The object to insert into the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="1d5cc-178">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-178">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span></span>  <span data-ttu-id="1d5cc-179">대신 형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> 또는 <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-179">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> or <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> methods instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-180"><see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-180">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value>
          <span data-ttu-id="1d5cc-181"><see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-181"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d5cc-182"><see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-182">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value>
          <span data-ttu-id="1d5cc-183"><see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-183"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="1d5cc-184">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-184">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="1d5cc-185">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-185">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="1d5cc-186">지정한 인덱스의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-186">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1d5cc-187"><see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-187">The object to remove from the <see cref="T:System.Collections.IList" />.</span></span></param>
        <summary><span data-ttu-id="1d5cc-188"><see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-188">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span></span>  <span data-ttu-id="1d5cc-189">형식이 안전한 <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> 메서드를 대신 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-189">Use the type-safe <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> method instead.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="1d5cc-190">제거할 항목의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-190">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="1d5cc-191">지정한 인덱스에서 <see cref="T:System.Collections.IList" /> 항목을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1d5cc-191">Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>