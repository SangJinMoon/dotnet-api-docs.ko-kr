<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConstContainerRandomAccessIterator`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51f543b9407a91678f63541356cdb08297dd097aa.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f543b9407a91678f63541356cdb08297dd097aa</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>, accessing an element by using <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>를 호출하여 한 위치만큼 앞으로 이동, <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>를 호출하여 한 위치만큼 뒤로 이동, <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>를 사용하여 요소에 액세스, 포인터 산술 연산을 사용하여 요소에 액세스하는 등의 작업을 지원하는 반복기를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>The element pointed to by the iterator cannot be modified.</source>
          <target state="translated">반복기가 가리키는 요소는 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체를 할당하고 초기화합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체를 할당하고 초기화합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">현재 컨테이너에 복사할 기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체에서 새 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체를 할당 및 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">현재 컨테이너에 복사할 기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체에서 새 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> 개체를 할당 및 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">현재 컨테이너에 복사할 기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>The offset of the element that the iterator will point to after creation.</source>
          <target state="translated">작성 후 반복기가 가리킬 요소의 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> object.</source>
          <target state="translated">기존 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체에서 새 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> 개체를 할당 및 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체의 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체의 복사본입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
          <source>Gets the container that the iterator is traversing.</source>
          <target state="translated">반복기가 이동하고 있는 컨테이너를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
          <source>The container that the iterator is traversing.</source>
          <target state="translated">반복기가 이동하고 있는 컨테이너입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">현재 반복기가 가리키고 있는 요소와 지정된 반복기가 가리키고 있는 요소 사이의 거리를 확인합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">현재 반복기와 같은 컨테이너를 가리키는 유효한 반복기입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">현재 반복기가 가리키고 있는 요소와 지정된 반복기가 가리키고 있는 요소 사이의 거리를 확인합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">현재 반복기가 가리키고 있는 요소와 <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>가 가리키고 있는 요소 사이의 거리(요소의 수로 표현)입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>가 현재 반복기가 가리키는 요소 앞의 요소를 가리키는 경우 이 숫자는 음수입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">현재 반복기와 같은 컨테이너를 가리키는 유효한 반복기입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">현재 반복기가 가리키고 있는 요소와 지정된 반복기가 가리키고 있는 요소 사이의 거리를 확인합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">현재 반복기가 가리키고 있는 요소와 <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>가 가리키고 있는 요소 사이의 거리(요소의 수로 표현)입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>가 현재 반복기가 가리키는 요소 앞의 요소를 가리키는 경우 이 숫자는 음수입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">두 반복기가 같은 개체인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> objects are the same object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체가 같은 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 반복기가 같은 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>The position of the element to access.</source>
          <target state="translated">액세스할 요소의 위치입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>Accesses the element at the given position in the container.</source>
          <target state="translated">컨테이너의 지정된 위치에 있는 요소에 액세스합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>The element at the given position in the container.</source>
          <target state="translated">컨테이너의 지정된 위치에 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</source>
          <target state="translated">현재 반복기가 컨테이너에서 지정된 반복기가 가리키는 요소 앞에 있는 요소를 가리키는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">현재 반복기와 같은 컨테이너를 가리키는 유효한 반복기입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">현재 반복기가 컨테이너에서 지정된 반복기가 가리키는 요소 앞에 있는 요소를 가리키는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 반복기가 <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>가 가리키는 요소의 앞에 있는 요소를 가리키면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">현재 반복기와 같은 컨테이너를 가리키는 유효한 반복기입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">현재 반복기가 컨테이너에서 지정된 반복기가 가리키는 요소 앞에 있는 요소를 가리키는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 반복기가 <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>가 가리키는 요소의 앞에 있는 요소를 가리키면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>The number of elements to traverse.</source>
          <target state="translated">이동할 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator forward, specify a positive number.</source>
          <target state="translated">반복기를 앞쪽으로 이동하려면 양수를 지정하고</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator backward, use a negative number.</source>
          <target state="translated">뒤쪽으로 이동하려면 음수를 지정합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>Moves the iterator by the given number of elements.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 이동합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>The actual number of elements traversed.</source>
          <target state="translated">이동된 실제 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
          <source>This number will differ from <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
          <target state="translated">원하는 요소 수를 반복하기 전에 컨테이너의 시작 또는 끝에 도달하는 경우 이 숫자는 <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph>과 달라집니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next">
          <source>Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</source>
          <target state="translated">반복기를 기본 컨테이너의 다음 위치로, 또는 컨테이너를 모두 이동한 경우에는 컨테이너 끝 뒤의 첫 번째 위치로 증가시킵니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 증가시킵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to increment.</source>
          <target state="translated">증가시킬 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 증가시킵니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
          <target state="translated">정수 매개 변수는 더하기 연산자의 오른쪽에 지정됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The number of elements to increment.</source>
          <target state="translated">증가시킬 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The iterator to increment.</source>
          <target state="translated">증가시킬 반복기입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 증가시킵니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The integer parameter is specified on the left side of the addition operator.</source>
          <target state="translated">정수 매개 변수는 더하기 연산자의 왼쪽에 지정됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Assigns a given object to the current object.</source>
          <target state="translated">지정된 개체를 현재 개체에 할당합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">현재 개체에 할당할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체를 현재 개체에 할당합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">현재 개체입니다(<bpt id="p1">&lt;c&gt;</bpt>*이<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">현재 개체에 할당할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> 개체를 현재 개체에 할당합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">현재 개체입니다(<bpt id="p1">&lt;c&gt;</bpt>*이<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 줄입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 줄입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the decrement operator.</source>
          <target state="translated">이는 감소 연산자의 전위 버전입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
          <target state="translated">연산자의 후위 버전임을 나타내는 사용하지 않는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 줄입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the decrement operator.</source>
          <target state="translated">감소 연산자의 후위 버전입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">두 반복기가 같은 개체인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 반복기가 같은 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 반복기가 같은 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is greater than the position of another iterator.</source>
          <target state="translated">반복기의 위치가 다른 반복기의 위치보다 큰지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 큰지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 크면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the right-side iterator.</source>
          <target state="translated">오른쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the given left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">지정된 왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 큰지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the given left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 왼쪽 반복기가 지정된 오른쪽 반복기보다 크면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is greater than or equal to the position of another iterator.</source>
          <target state="translated">반복기의 위치가 다른 반복기의 위치보다 크거나 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 크거나 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 크거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 크거나 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 크거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>Converts a <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph>를 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>The current iterator as an <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>인 현재 반복기입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Increments the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 늘립니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 늘립니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the increment operator.</source>
          <target state="translated">이는 증가 연산자의 전위 버전입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">반복기를 한 요소씩 늘립니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the increment operator.</source>
          <target state="translated">증가 연산자의 후위 버전입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">반복기입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are not the same object.</source>
          <target state="translated">두 반복기가 같은 개체가 아닌지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 다른지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 반복기가 서로 다른 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 비교할 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> 개체가 현재 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> 개체와 다른지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 반복기가 서로 다른 개체이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is less than the position of another iterator.</source>
          <target state="translated">반복기의 위치가 다른 반복기의 위치보다 작은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 작은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 작으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 작은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 작으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is less than or equal to the position of another iterator.</source>
          <target state="translated">반복기의 위치가 다른 반복기의 위치보다 작거나 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</source>
          <target state="translated">왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 작거나 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">왼쪽 반복기가 지정된 오른쪽 반복기보다 작거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the right-side iterator.</source>
          <target state="translated">오른쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">왼쪽 반복기와 비교할 반복기입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the given left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">지정된 왼쪽 반복기의 위치가 지정된 오른쪽 반복기의 위치보다 작은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the given left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 왼쪽 반복기가 지정된 오른쪽 반복기보다 작거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">연산자가 적용되는 반복기입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">반복기가 현재 가리키고 있는 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">반복기가 현재 가리키고 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">연산자가 적용되는 반복기입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">반복기가 현재 가리키고 있는 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">반복기가 현재 가리키고 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
          <source>Decrements the iterator by the given number of elements, or determines the difference between two iterators.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 감소시키거나 두 반복기 사이의 차이를 확인합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> 개체에서 뺄 <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the difference between two iterators.</source>
          <target state="translated">두 반복기 사이의 차이를 확인합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The difference, in number of elements, between the two iterators.</source>
          <target state="translated">두 반복기 사이의 차이(요소 수)입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to decrement.</source>
          <target state="translated">감소시킬 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by the given number of elements.</source>
          <target state="translated">반복기를 지정된 요소 수만큼 감소시킵니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
          <target state="translated">정수 매개 변수는 더하기 연산자의 오른쪽에 지정됩니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>A decremented iterator.</source>
          <target state="translated">감소한 반복기입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev">
          <source>Positions the iterator to the element immediately before the current element.</source>
          <target state="translated">반복기를 현재 요소 바로 앞의 요소에 배치합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
          <target state="translated">반복기가 유효하며 기본 컨테이너를 이동하는 데 안전하게 사용할 수 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">반복기가 유효하고 사용하기에 안전하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>