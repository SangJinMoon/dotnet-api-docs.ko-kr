<Type Name="IBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7aae637660537dbcd5f2002675b411b0e03919" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726148" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBidirectionalIterator`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IForwardIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBidirectionalIterator(Of TValue)&#xA;Implements IForwardIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type IBidirectionalIterator&lt;'Value&gt; = interface&#xA;    interface IForwardIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">
      <span data-ttu-id="a8f0b-101">[! INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</span>
      <span class="sxs-lookup">
        <span data-stu-id="a8f0b-101">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a8f0b-102">컨테이너의 요소를 증가 연산자를 사용하여 앞쪽으로 액세스하고 감소 연산자를 사용하여 뒤쪽으로 액세스할 수 있는 반복기의 인터페이스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a8f0b-102">Interface for an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</span>
      </span>
      <span data-ttu-id="a8f0b-103">반복기가 가리키는 요소를 횟수에 제한 없이 읽고 쓸 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a8f0b-103">The element that the iterator points to can be both written to and read from any number of times.</span>
      </span>
      <span data-ttu-id="a8f0b-104">입력 또는 출력 반복기가 필요한 모든 곳에서 양방향 반복기를 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a8f0b-104">Bidirectional iterators can be used anywhere an input or output iterator is required.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit" Usage="iBidirectionalIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a8f0b-105">반복기를 현재 요소 바로 앞의 요소에 배치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a8f0b-105">Positions the iterator to the element immediately before the current element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>