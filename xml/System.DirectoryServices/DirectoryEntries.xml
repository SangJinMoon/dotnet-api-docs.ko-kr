<Type Name="DirectoryEntries" FullName="System.DirectoryServices.DirectoryEntries">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ae5023e228719327e8961f9e825aef40cebbae6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DirectoryEntries : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntries extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntries" />
  <TypeSignature Language="VB.NET" Value="Public Class DirectoryEntries&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectoryEntries : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="4b173-101">
        <see cref="T:System.DirectoryServices.DirectoryEntry" /> 개체의 컬렉션을 포함합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4b173-101">Contains a collection of <see cref="T:System.DirectoryServices.DirectoryEntry" /> objects.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
      <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />
    </permission>
    <altmember cref="T:System.DirectoryServices.DirectoryEntry" />
    <altmember cref="P:System.DirectoryServices.DirectoryEntry.Children" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Add(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (name As String, schemaClassName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Add(System::String ^ name, System::String ^ schemaClassName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b173-102">새 엔트리의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-102">The name of the new entry.</span>
          </span>
        </param>
        <param name="schemaClassName">
          <span data-ttu-id="4b173-103">새 엔트리에 사용된 스키마 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-103">The name of the schema that is used for the new entry.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b173-104">컨테이너에 새 엔트리를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-104">Creates a new entry in the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b173-105">새 엔트리를 나타내는 <see cref="T:System.DirectoryServices.DirectoryEntry" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-105">A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the new entry.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b173-106">호출 해야 합니다는 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 메서드를 만들 수 있도록 영구 새 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-106">You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent.</span></span> <span data-ttu-id="4b173-107">이 메서드를 호출 하면 새 항목에 다음 필수 속성 값을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-107">When you call this method, you can then set mandatory property values on the new entry.</span></span> <span data-ttu-id="4b173-108">각 공급자에 대 한 호출 하기 전에 설정 해야 하는 속성에 대 한 다른 요구 사항이 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 메서드 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-108">The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made.</span></span> <span data-ttu-id="4b173-109">이러한 요구 사항을 충족 되지 않는 공급자 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-109">If those requirements are not met, the provider might throw an exception.</span></span> <span data-ttu-id="4b173-110">변경 내용을 커밋하기 전에 설정 해야 하는 속성을 확인 하려면 공급자 사용 하 여 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-110">Check with your provider to determine which properties must be set before committing changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b173-111">다음 Visual Basic.NET 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 개체 지정된 된 경로, 그런 다음 컨테이너에 새 항목을 만듭니다 하 고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-111">The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.</span></span>  
  
```vb  
Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
' Create a new 'DirectoryEntry' object with the given path.  
Dim myDE As New DirectoryEntry(strPath)  
Dim myEntries As DirectoryEntries = myDE.Children  
' Create a new entry 'Sample' in the container.  
Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("CN=Sample", myDE.SchemaClassName)  
' Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges()  
Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
```  
  
 <span data-ttu-id="4b173-112">다음 C# 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 개체 지정된 된 경로, 그런 다음 컨테이너에 새 항목을 만듭니다 하 고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-112">The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.</span></span>  
  
```csharp  
String strPath = "IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry myDE = new DirectoryEntry(strPath);  
DirectoryEntries myEntries = myDE.Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry myDirectoryEntry =   
   myEntries.Add("CN=Sample", myDE.SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges();  
Console.WriteLine (myDirectoryEntry.Name + " entry is created in container.");  
```  
  
 <span data-ttu-id="4b173-113">다음 c + + 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 개체 지정된 된 경로, 그런 다음 컨테이너에 새 항목을 만듭니다 하 고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-113">The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.</span></span>  
  
```cpp  
String* strPath = S"IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry* myDE = new DirectoryEntry(strPath);  
DirectoryEntries* myEntries = myDE->Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry* myDirectoryEntry = myEntries->Add(S"CN=Sample", myDE->SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry->CommitChanges();  
Console::WriteLine("{0} entry is created in container.", myDirectoryEntry->Name);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="4b173-114">기본 인터페이스를 호출하는 동안 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-114">An error occurred during the call to the underlying interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4b173-115">이 컬렉션의 멤버를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-115">Returns a member of this collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Find(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b173-116">검색할 자식 개체의 이름을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-116">Contains the name of the child object for which to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b173-117">지정된 이름을 가진 이 컬렉션의 멤버를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-117">Returns the member of this collection with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b173-118">찾은 자식 개체를 나타내는 <see cref="T:System.DirectoryServices.DirectoryEntry" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-118">A <see cref="T:System.DirectoryServices.DirectoryEntry" /> that represents the child object that was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b173-119">서로 다른 유형의 자식 개체가 동일한 이름을 갖는 경우 첫 번째 일치 하는 자식 개체가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-119">If child objects of different types have the same name, the first matching child object is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4b173-120">인터넷 정보 서비스 (IIS) 공급자는이 메서드를 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-120">The Internet Information Services (IIS) provider does not support this method.</span></span> <span data-ttu-id="4b173-121">오버 로드 된를 사용 하 여 <xref:System.DirectoryServices.DirectoryEntries.Find%2A> 메서드 빈 문자열을 지정 하 고 ("")에 대 한는 `schemaClassName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-121">Use the overloaded <xref:System.DirectoryServices.DirectoryEntries.Find%2A> method and specify an empty string ("") for the `schemaClassName` parameter.</span></span>  
>   
>  <span data-ttu-id="4b173-122">일치 하는 결과가 없습니다.이 없으면는 <xref:System.DirectoryServices.DirectoryServicesCOMException> 오류 코드 0x2030과 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-122">If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b173-123">Active Directory 도메인 서비스 개체가 컨테이너가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-123">The Active Directory Domain Services object is not a container.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="4b173-124">기본 인터페이스를 호출하는 동안 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-124">An error occurred during the call to the underlying interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String, schemaClassName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Find(System::String ^ name, System::String ^ schemaClassName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="4b173-125">검색할 자식 디렉터리 개체의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-125">The name of the child directory object for which to search.</span>
          </span>
        </param>
        <param name="schemaClassName">
          <span data-ttu-id="4b173-126">검색할 자식 디렉터리 개체의 클래스 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-126">The class name of the child directory object for which to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b173-127">지정된 이름을 가진 지정된 형식의 이 컬렉션 멤버를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-127">Returns the member of this collection with the specified name and of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b173-128">찾은 자식 개체를 나타내는 <see cref="T:System.DirectoryServices.DirectoryEntry" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-128">A <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that represents the child object that was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b173-129">일치 하는 결과가 없습니다.이 없으면는 <xref:System.DirectoryServices.DirectoryServicesCOMException> 오류 코드 0x2030과 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-129">If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b173-130">다음 Visual Basic.NET 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-130">The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-131">새로 만든된 항목을 검색 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-131">It attempts to retrieve the newly created entry.</span></span>  
  
```vb  
Try  
     Dim myEntry1 As DirectoryEntry  
     Dim myEntry2 As DirectoryEntry  
     Dim strPath As String = "LDAP://DC=fabrikam,DC=com"  
  
     ' Create a 'DirectoryEntry' object with the given path.  
     Dim myDE As New DirectoryEntry(strPath)  
     Dim myEntries As DirectoryEntries = myDE.Children  
  
     ' Create a new entry in the container.  
     myEntry1 = myEntries.Add("CN=Sample Entry", myDE.SchemaClassName)  
     ' Save changes in the 'Active Directory Domain Services' store.  
     myEntry1.CommitChanges()  
  
     ' Find a child in the 'DirectoryEntries' collection which has the   
     ' specified name and type.  
     myEntry2 = myEntries.Find("CN=Sample Entry", myDE.SchemaClassName)  
     Console.WriteLine(myEntry2.Name + " is found in container.")  
  
     Catch e As Exception  
          Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
     End Try  
```  
  
 <span data-ttu-id="4b173-132">다음 C# 예제에는 새 만드는 방법을 보여 줍니다 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-132">The following C# example shows how to create a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-133">검색 하려고 시도 새로-항목을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-133">It attempts to retrieve the newly- created entry.</span></span>  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {          
         DirectoryEntry myEntry1;  
         DirectoryEntry myEntry2;  
         String strPath = "LDAP://DC=fabrikam,DC=com";  
  
         // Create a 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry in the container.  
         myEntry1 = myEntries.Add("CN=Sample Entry",myDE.SchemaClassName);  
         // Save changes in the 'Active Directory Domain Services' store.  
         myEntry1.CommitChanges();  
  
         // Find a child in the 'DirectoryEntries' collection which has the   
         // specified name and type.  
         myEntry2 = myEntries.Find("CN=Sample Entry",myDE.SchemaClassName);  
         Console.WriteLine (myEntry2.Name + " is found in container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",e.Message);  
      }  
   }  
}  
  
```  
  
 <span data-ttu-id="4b173-134">다음 c + + 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-134">The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-135">새 항목을 검색 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-135">It attempts to retrieve the new entry.</span></span>  
  
```cpp  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {          
        DirectoryEntry* myEntry1;  
        DirectoryEntry* myEntry2;  
        String* strPath = S"LDAP://DC=fabrikam,DC=com";  
  
        // Create a 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry in the container.  
        myEntry1 = myEntries->Add(S"CN=Sample Entry", myDE->SchemaClassName);  
        // Save changes in the 'Active Directory Domain Services' store.  
        myEntry1->CommitChanges();  
  
        // Find a child in the 'DirectoryEntries' collection which has the   
        // specified name and type.  
        myEntry2 = myEntries->Find(S"CN=Sample Entry", myDE->SchemaClassName);  
        Console::WriteLine ("{0} is found in container.", myEntry2->Name);  
    } catch(Exception* e) {  
        Console::WriteLine("The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4b173-136">Active Directory 도메인 서비스 개체가 컨테이너가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-136">The Active Directory Domain Services object is not a container.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="4b173-137">기본 인터페이스를 호출하는 동안 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-137">An error occurred during the call to the underlying interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4b173-138">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-138">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4b173-139">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-139">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.DirectoryServices.DirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.DirectoryServices.DirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (entry As DirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::DirectoryServices::DirectoryEntry ^ entry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="entry">
          <span data-ttu-id="4b173-140">삭제할 <see cref="T:System.DirectoryServices.DirectoryEntry" /> 개체의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-140">The name of the <see cref="T:System.DirectoryServices.DirectoryEntry" /> object to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4b173-141">이 컬렉션의 멤버를 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-141">Deletes a member of this collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b173-142">제거할 항목이 컨테이너인 경우 컨테이너 비어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-142">If the entry to be removed is a container, the container must be empty.</span></span> <span data-ttu-id="4b173-143">컨테이너 및 모든 자식 노드를 삭제 하려면 사용 된 <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="4b173-143">To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4b173-144">다음 Visual Basic.NET 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-144">The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-145">마지막으로, 새 항목을 검색 하 고 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-145">Finally, it retrieves the new entry and deletes it.</span></span>  
  
```vb  
Imports System  
Imports System.DirectoryServices  
  
Class MyClass1  
   Shared Sub Main()  
      Try  
         Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
         Dim strName As String = ""  
  
         ' Create a new 'DirectoryEntry' object with the given path.  
         Dim myDE As New DirectoryEntry(strPath)  
         Dim myEntries As DirectoryEntries = myDE.Children  
  
         ' Create a new entry 'Sample' in the container.  
         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("Sample", myDE.SchemaClassName)  
         ' Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges()  
         Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
  
         ' Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName)  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.")  
         ' Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name  
         myEntries.Remove(myDirectoryEntry)  
         Console.WriteLine(strName + " entry is removed from container.")  
  
      Catch e As Exception  
         Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
      End Try  
   End Sub 'Main  
End Class 'MyClass1  
  
```  
  
 <span data-ttu-id="4b173-146">다음 C# 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-146">The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-147">마지막으로, 새 항목을 검색 하 고 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-147">Finally, it retrieves the new entry and deletes it.</span></span>  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {  
         String strPath = "IIS://localhost/W3SVC/1/Root";  
         String strName = "";  
  
         // Create a new 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry 'Sample' in the container.  
         DirectoryEntry myDirectoryEntry =   
            myEntries.Add("Sample", myDE.SchemaClassName);  
         // Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges();  
         Console.WriteLine (myDirectoryEntry.Name +   
            " entry is created in container.");  
  
         // Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName);  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.");  
         // Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name;  
         myEntries.Remove(myDirectoryEntry);  
         Console.WriteLine(strName+ " entry is removed from container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",  
            e.Message);  
      }  
   }  
}  
  
```  
  
 <span data-ttu-id="4b173-148">다음 c + + 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 지정된 된 경로와 개체, 다음 새 항목을 컨테이너에서 만들고 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-148">The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it.</span></span> <span data-ttu-id="4b173-149">마지막으로, 새 항목을 검색 하 고 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-149">Finally, it retrieves the new entry and deletes it.</span></span>  
  
```cpp  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {  
        String* strPath = S"IIS://localhost/W3SVC/1/Root";  
        String* strName = S"";  
  
        // Create a new 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry 'Sample' in the container.  
        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S"Sample", myDE->SchemaClassName);  
        // Save changes of entry in the 'Active Directory Domain Services'.  
        myDirectoryEntry->CommitChanges();  
        Console::WriteLine(S"{0} entry is created in container.", myDirectoryEntry->Name);  
  
        // Find 'Sample' entry in container.  
        myDirectoryEntry = myEntries->Find(S"Sample", myDE->SchemaClassName);  
        Console::WriteLine(S"{0} found in container.", myDirectoryEntry->Name);  
        // Remove 'Sample' entry from container.  
        strName = myDirectoryEntry->Name;  
        myEntries->Remove(myDirectoryEntry);  
        Console::WriteLine(S"{0} entry is removed from container.", strName);  
    } catch(Exception* e) {  
        Console::WriteLine(S"The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="4b173-150">기본 인터페이스를 호출하는 동안 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-150">An error occurred during the call to the underlying interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaFilter">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.SchemaNameCollection SchemaFilter" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaFilter As SchemaNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::SchemaNameCollection ^ SchemaFilter { System::DirectoryServices::SchemaNameCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.SchemaNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4b173-151">컬렉션에 포함된 자식 개체를 지정하는 스키마를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-151">Gets the schemas that specify which child objects are contained in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4b173-152">
            <see cref="T:System.DirectoryServices.SchemaNameCollection" /> 인스턴스에 포함된 자식 개체를 지정하는 <see cref="T:System.DirectoryServices.DirectoryEntries" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4b173-152">A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that specifies which child objects are contained in the <see cref="T:System.DirectoryServices.DirectoryEntries" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4b173-153">경우는 <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter%2A> 속성이 비어 있으면 모든 형식의 자식 개체는 컬렉션에 표시 되 고, 그렇지 않으면만 지정 된 형식의 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4b173-153">If the <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter%2A> property is empty, child objects of all types are visible in the collection; otherwise, only those of the specified types are visible.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>