<Type Name="SearchResultCollection" FullName="System.DirectoryServices.SearchResultCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="469deebdec2c32a0c5485c31484fea7ed4be90a4" /><Meta Name="ms.sourcegitcommit" Value="112ca25eddde8ac8b788d67c406b7745ba914261" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/15/2019" /><Meta Name="ms.locfileid" Value="54311787" /></Metadata><TypeSignature Language="C#" Value="public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchResultCollection extends System.MarshalByRefObject implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.SearchResultCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchResultCollection&#xA;Inherits MarshalByRefObject&#xA;Implements ICollection, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SearchResultCollection : MarshalByRefObject, IDisposable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type SearchResultCollection = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ec9ba-101"><see cref="T:System.DirectoryServices.SearchResultCollection" /> 클래스에는 <see cref="T:System.DirectoryServices.DirectorySearcher" /> 쿼리 중에 Active Directory 계층 구조에서 반환한 <see cref="T:System.DirectoryServices.SearchResult" /> 인스턴스가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-101">The <see cref="T:System.DirectoryServices.SearchResultCollection" /> class contains the <see cref="T:System.DirectoryServices.SearchResult" /> instances that the Active Directory hierarchy returned during a <see cref="T:System.DirectoryServices.DirectorySearcher" /> query.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-102">구현 제한 사항으로 인해는 <xref:System.DirectoryServices.SearchResultCollection> 클래스는 가비지가 수집 하는 경우 해당 관리 되지 않는 리소스 모두 해제할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-102">Due to implementation restrictions, the <xref:System.DirectoryServices.SearchResultCollection> class cannot release all of its unmanaged resources when it is garbage collected.</span></span> <span data-ttu-id="ec9ba-103">메모리 누수를 방지 하려면 호출 해야 합니다는 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메서드 때는 <xref:System.DirectoryServices.SearchResultCollection> 개체가 더 이상 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-103">To prevent a memory leak, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method when the <xref:System.DirectoryServices.SearchResultCollection> object is no longer needed.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission"><see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.DirectoryServices.SearchResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.DirectoryServices.SearchResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (result As SearchResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::DirectoryServices::SearchResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.DirectoryServices.SearchResult -&gt; bool" Usage="searchResultCollection.Contains result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.DirectoryServices.SearchResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ec9ba-104">찾을 <see cref="T:System.DirectoryServices.SearchResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-104">The <see cref="T:System.DirectoryServices.SearchResult" /> object to find.</span></span></param>
        <summary><span data-ttu-id="ec9ba-105">지정된 <see cref="T:System.DirectoryServices.SearchResult" /> 개체가 이 컬렉션에 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-105">Determines if a specified <see cref="T:System.DirectoryServices.SearchResult" /> object is in this collection.</span></span></summary>
        <returns><span data-ttu-id="ec9ba-106">지정한 속성이 이 컬렉션에 속하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-106"><see langword="true" /> if the specified property belongs to this collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.DirectoryServices.SearchResult[] results, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (results As SearchResult(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::DirectoryServices::SearchResult ^&gt; ^ results, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.DirectoryServices.SearchResult[] * int -&gt; unit" Usage="searchResultCollection.CopyTo (results, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.DirectoryServices.SearchResult[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="results"><span data-ttu-id="ec9ba-107">이 컬렉션의 요소를 수신하는 <see cref="T:System.DirectoryServices.SearchResult" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-107">The array of <see cref="T:System.DirectoryServices.SearchResult" /> objects that receives the elements of this collection.</span></span></param>
        <param name="index"><span data-ttu-id="ec9ba-108">이 메서드가 이 컬렉션을 복사하기 시작하는 <paramref name="results" /> 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-108">The zero-based index in <paramref name="results" /> where this method starts copying this collection.</span></span></param>
        <summary><span data-ttu-id="ec9ba-109">대상 배열의 지정된 인덱스부터 시작하여 이 컬렉션의 모든 <see cref="T:System.DirectoryServices.SearchResult" /> 개체를 지정된 배열에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-109">Copies all <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection to the specific array, starting at the specified index in the target array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.DirectoryServices.SearchResultCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec9ba-110">이 컬렉션에 있는 <see cref="T:System.DirectoryServices.SearchResult" /> 개체 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-110">Gets the number of <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection.</span></span></summary>
        <value><span data-ttu-id="ec9ba-111">이 컬렉션에 있는 <see cref="T:System.DirectoryServices.SearchResult" /> 개체 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-111">The number of <see cref="T:System.DirectoryServices.SearchResult" /> objects in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ec9ba-112"><see cref="T:System.DirectoryServices.SearchResultCollection" /> 개체가 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-112">Releases all resources that are used by the <see cref="T:System.DirectoryServices.SearchResultCollection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="searchResultCollection.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ec9ba-113"><see cref="T:System.DirectoryServices.SearchResultCollection" /> 개체가 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-113">Releases all resources that are used by the <see cref="T:System.DirectoryServices.SearchResultCollection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-114">합니다 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메서드를 사용 하는 리소스 수 있습니다는 <xref:System.DirectoryServices.SearchResultCollection> 다른 용도로 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-114">The <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method, it allows the resources that are used by the <xref:System.DirectoryServices.SearchResultCollection> to be reallocated for other purposes.</span></span> <span data-ttu-id="ec9ba-115">에 대 한 자세한 내용은 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-115">For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="ec9ba-116">가비지 수집기에 대 한 메모리를 해제 하지 않습니다는 <xref:System.DirectoryServices.SearchResultCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-116">The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object.</span></span> <span data-ttu-id="ec9ba-117">따라서 애플리케이션에서 호출 해야 합니다는 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메모리 누수를 방지 하려면 명시적 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-117">Therefore, an application must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="searchResultCollection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="ec9ba-118">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-118"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="ec9ba-119"><see cref="T:System.DirectoryServices.SearchResultCollection" /> 개체에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-119">Releases the unmanaged resources that are used by the <see cref="T:System.DirectoryServices.SearchResultCollection" /> object and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-120">이 메서드는 공용 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-120">This method is called by the public <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ec9ba-121"><xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 보호 된 호출 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-121"><xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> invokes the protected <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="ec9ba-122"><xref:System.Object.Finalize%2A> 호출 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 사용 하 여 합니다 `disposing` 매개 변수 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-122"><xref:System.Object.Finalize%2A> invokes <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> with the `disposing` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="ec9ba-123">경우는 `disposing` 매개 변수가 `true`,이 메서드는 관리 되는 개체가 보유 하 고 있는 모든 리소스를 해제이 <xref:System.DirectoryServices.SearchResultCollection> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-123">When the `disposing` parameter is `true`, this method releases all resources that are held by any managed objects that this <xref:System.DirectoryServices.SearchResultCollection> references.</span></span>  
  
 <span data-ttu-id="ec9ba-124">가비지 수집기에 대 한 메모리를 해제 하지 않습니다는 <xref:System.DirectoryServices.SearchResultCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-124">The garbage collector does not release memory for a <xref:System.DirectoryServices.SearchResultCollection> object.</span></span> <span data-ttu-id="ec9ba-125">따라서 호출 해야 합니다는 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 메모리 누수를 방지 하려면 명시적 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-125">Therefore, you must call the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method explicitly to prevent a memory leak.</span></span>  
  
 <span data-ttu-id="ec9ba-126">이 메서드를 호출 하 여 <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> 컬렉션의 각 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-126">This method invokes the <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> method of each object in the collection.</span></span>  
  
 <span data-ttu-id="ec9ba-127">에 대 한 자세한 내용은 <xref:System.DirectoryServices.SearchResultCollection.Dispose> 및 <xref:System.Object.Finalize%2A>를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-127">For more information about <xref:System.DirectoryServices.SearchResultCollection.Dispose> and <xref:System.Object.Finalize%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ec9ba-128"><see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" /> 메서드 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-128">The <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="ec9ba-129">재정의 하는 경우는 <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)" /> 메서드를 호출 하 여 이전에 삭제 된 개체를 참조 하지 않도록 주의 해야 합니다 <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-129">When overriding the <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)" /> method be careful not to reference objects that have been previously disposed of in an earlier call to the <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" /> method.</span></span> <span data-ttu-id="ec9ba-130">구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-130">For more information about how to implement <see cref="M:System.DirectoryServices.SearchResultCollection.Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SearchResultCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SearchResultCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="searchResultCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ec9ba-131"><see cref="M:System.Object.Finalize" /> 메서드를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-131">Overrides the <see cref="M:System.Object.Finalize" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="searchResultCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ec9ba-132">이 컬렉션을 반복하는 데 사용할 수 있는 열거자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-132">Returns an enumerator that you can use to iterate through this collection.</span></span></summary>
        <returns><span data-ttu-id="ec9ba-133">이 컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-133">An <see cref="T:System.Collections.IEnumerator" /> object that you can use to iterate through this collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.DirectoryServices.SearchResultCollection.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec9ba-134">실제 검색을 수행하는 <c>IDirectorySearch::ExecuteSearch</c> 메서드에서 반환된 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-134">Gets the handle that is returned by the <c>IDirectorySearch::ExecuteSearch</c> method that performs the actual search.</span></span> <span data-ttu-id="ec9ba-135">자세한 내용은 <see href="/windows/desktop/api/iads/nf-iads-idirectorysearch-executesearch">IDirectorySearch::ExecuteSearch</see> 문서를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-135">For more information, see the <see href="/windows/desktop/api/iads/nf-iads-idirectorysearch-executesearch">IDirectorySearch::ExecuteSearch</see> article.</span></span></summary>
        <value><span data-ttu-id="ec9ba-136">이 컬렉션에서 사용하는 ADS_SEARCH_HANDLE 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-136">The ADS_SEARCH_HANDLE value that this collection uses.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-137"><xref:System.DirectoryServices.DirectorySearcher> 이 컬렉션을 생성 하는 호출을 `IDirectorySearch::ExecuteSearch` 쿼리 결과를 사용할 수 있도록 하는 메서드를 <xref:System.DirectoryServices.SearchResultCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-137">The  <xref:System.DirectoryServices.DirectorySearcher> that created this collection calls the `IDirectorySearch::ExecuteSearch` method, which makes the query results available to the <xref:System.DirectoryServices.SearchResultCollection> object.</span></span> <span data-ttu-id="ec9ba-138">자세한 내용은 참조는 [idirectorysearch:: Executesearch](/windows/desktop/api/iads/nf-iads-idirectorysearch-executesearch) 문서.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-138">For more information, see the [IDirectorySearch::ExecuteSearch](/windows/desktop/api/iads/nf-iads-idirectorysearch-executesearch) article.</span></span>  
  
 <span data-ttu-id="ec9ba-139">쿼리가 수행 될 때마다 해당 쿼리의 결과 대 한 핸들을 사용 하 여 연결 된 해당 <xref:System.DirectoryServices.SearchResultCollection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-139">Each time that a query is performed, a handle for the results of that query is associated with its <xref:System.DirectoryServices.SearchResultCollection> object.</span></span> <span data-ttu-id="ec9ba-140">이 핸들 ADSI의 검색 핸들에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-140">This handle corresponds to the search handle in ADSI.</span></span> <span data-ttu-id="ec9ba-141">이 핸들에 호출할 때까지 계속 되 면를 <xref:System.DirectoryServices.SearchResultCollection.Dispose> 메서드를 <xref:System.DirectoryServices.SearchResultCollection> 개체를 호출 해야 하므로 <xref:System.DirectoryServices.SearchResultCollection.Dispose> 메모리 누수를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-141">This handle persists until you call the <xref:System.DirectoryServices.SearchResultCollection.Dispose> method on the <xref:System.DirectoryServices.SearchResultCollection> object, so you must call <xref:System.DirectoryServices.SearchResultCollection.Dispose> to prevent a memory leak.</span></span> <span data-ttu-id="ec9ba-142">가비지 수집기는이 특정 개체에 대 한 메모리를 해제 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-142">The garbage collector does not free memory for this particular object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.DirectoryServices.SearchResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.DirectoryServices.SearchResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (result As SearchResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::DirectoryServices::SearchResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.DirectoryServices.SearchResult -&gt; int" Usage="searchResultCollection.IndexOf result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.DirectoryServices.SearchResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="ec9ba-143">이 컬렉션에서 검색할 <see cref="T:System.DirectoryServices.SearchResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-143">The <see cref="T:System.DirectoryServices.SearchResult" /> object to search for in this collection.</span></span></param>
        <summary><span data-ttu-id="ec9ba-144">이 컬렉션에서 맨 처음 발견되는 지정된 <see cref="T:System.DirectoryServices.SearchResult" /> 개체의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-144">Returns the index of the first occurrence of the specified <see cref="T:System.DirectoryServices.SearchResult" /> object in this collection.</span></span></summary>
        <returns><span data-ttu-id="ec9ba-145">일치하는 첫 번째 개체의 0부터 시작하는 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-145">The zero-based index of the first matching object.</span></span> <span data-ttu-id="ec9ba-146">이 컬렉션의 멤버 중 <see cref="T:System.DirectoryServices.SearchResult" /> 개체와 동일한 멤버가 없으면 -1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-146">Returns -1 if no member of this collection is identical to the <see cref="T:System.DirectoryServices.SearchResult" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.SearchResult this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.SearchResult Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As SearchResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::SearchResult ^ default[int] { System::DirectoryServices::SearchResult ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.DirectoryServices.SearchResult" Usage="System.DirectoryServices.SearchResultCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.SearchResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ec9ba-147">검색할 <see cref="T:System.DirectoryServices.SearchResult" /> 개체의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-147">The zero-based index of the <see cref="T:System.DirectoryServices.SearchResult" /> object to retrieve.</span></span></param>
        <summary><span data-ttu-id="ec9ba-148">이 컬렉션의 지정된 인덱스에 있는 <see cref="T:System.DirectoryServices.SearchResult" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-148">Gets the <see cref="T:System.DirectoryServices.SearchResult" /> object that is located at a specified index in this collection.</span></span></summary>
        <value><span data-ttu-id="ec9ba-149">지정된 인덱스에 있는 <see cref="T:System.DirectoryServices.SearchResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-149">The <see cref="T:System.DirectoryServices.SearchResult" /> object that is located at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-150">C#에서 이 속성은 <xref:System.DirectoryServices.SearchResultCollection> 클래스의 인덱서입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-150">In C#, this property is the indexer for the <xref:System.DirectoryServices.SearchResultCollection> class.</span></span>  
  
 <span data-ttu-id="ec9ba-151">Jscript에서는 형식으로 정의 된 기본 인덱싱된 속성을 사용할 수 있지만 정의할 수 없습니다 명시적으로 사용자 고유의.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-151">In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.</span></span> <span data-ttu-id="ec9ba-152">그러나 클래스에 expando 특성 기본값을 자동으로 제공 지정 인덱싱된 형식인 개체 속성 및 인덱스 유형으로 <xref:System.String>입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-152">However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and with an index type of <xref:System.String>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertiesLoaded">
      <MemberSignature Language="C#" Value="public string[] PropertiesLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] PropertiesLoaded" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.PropertiesLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertiesLoaded As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ PropertiesLoaded { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertiesLoaded : string[]" Usage="System.DirectoryServices.SearchResultCollection.PropertiesLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec9ba-153">검색을 실행하기 전에 지정된 <see cref="T:System.DirectoryServices.DirectorySearcher" /> 속성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-153">Gets the <see cref="T:System.DirectoryServices.DirectorySearcher" /> properties that were specified before the search was executed.</span></span></summary>
        <value><span data-ttu-id="ec9ba-154">검색을 실행하기 전에 <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> 속성 컬렉션에 지정한 속성을 포함하는 <see cref="T:System.String" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-154">An array of type <see cref="T:System.String" /> that contains the properties that were specified in the <see cref="P:System.DirectoryServices.DirectorySearcher.PropertiesToLoad" /> property collection before the search was executed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="ec9ba-155"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-155">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="ec9ba-156"><see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-156">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="ec9ba-157"><paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-157">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="ec9ba-158">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-158">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ec9ba-159"><paramref name="array" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ec9ba-159"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ec9ba-160"><paramref name="index" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-160"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ec9ba-161"><paramref name="array" />가 다차원 배열인 경우</span><span class="sxs-lookup"><span data-stu-id="ec9ba-161"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="ec9ba-162">또는</span><span class="sxs-lookup"><span data-stu-id="ec9ba-162">-or-</span></span> 
<span data-ttu-id="ec9ba-163">소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-163">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="ec9ba-164">소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-164">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec9ba-165"><see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-165">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="ec9ba-166"><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-166"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-167"><xref:System.Collections.ICollection.SyncRoot%2A>는 <xref:System.Collections.ICollection>에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-167"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="ec9ba-168">에 있는 대부분의 컬렉션 클래스는 <xref:System.Collections?displayProperty=nameWithType> 네임 스페이스는 내부 컬렉션에 동기화 된 래퍼를 제공 하는 동기화 메서드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-168">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</span></span>  
  
 <span data-ttu-id="ec9ba-169">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-169">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="ec9ba-170">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-170">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="ec9ba-171">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-171">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="ec9ba-172">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="ec9ba-172">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="ec9ba-173">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="ec9ba-173">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
  lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec9ba-174"><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-174">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="ec9ba-175"><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-175">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec9ba-176">내부 저장소를 공개적으로 사용할 수 없는 컬렉션의 경우 예상된 구현에서는 현재 인스턴스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-176">For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.</span></span> <span data-ttu-id="ec9ba-177">현재 인스턴스에 대 한 포인터 충분 하지 않을 다른 컬렉션을 래핑하는 컬렉션에 대 한 참고 기본 컬렉션을 반환 해야 해당 `SyncRoot` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-177">Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.</span></span>  
  
 <span data-ttu-id="ec9ba-178"><xref:System.Collections?displayProperty=nameWithType> 네임스페이스에 있는 대부분의 컬렉션 클래스는 내부 컬렉션에 동기화된 래퍼를 제공하는 `Synchronized` 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-178">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.</span></span> <span data-ttu-id="ec9ba-179">그러나 파생 클래스는 <xref:System.Collections.ICollection.SyncRoot%2A> 속성을 사용하여 컬렉션의 동기화된 고유 버전을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-179">However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="ec9ba-180">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.ICollection.SyncRoot%2A> 직접적 컬렉션에서 컬렉션의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-180">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection.</span></span> <span data-ttu-id="ec9ba-181">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-181">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="ec9ba-182">특히 컬렉션 인스턴스를 동시에 수정할 수 있는 다른 스레드와 적절한 동기화가 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-182">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</span></span>  
  
 <span data-ttu-id="ec9ba-183">없는 경우에는 `Synchronized` 컬렉션에 대 한 예상된 사용량에서 메서드 <xref:System.Collections.ICollection.SyncRoot%2A> 같습니다:</span><span class="sxs-lookup"><span data-stu-id="ec9ba-183">In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:</span></span>  
  
```csharp  
ICollection MyCollection =...  
 lock(MyCollection.SyncRoot) {  
  // Some operation on the collection, which is now thread safe.  
 }  
```  
  
```vb  
Dim myCollection as New ICollection()  
 SyncLock myCollection.SyncRoot  
  ' Some operation on the collection, which is now thread safe.  
 End SyncLock  
```  
  
 <span data-ttu-id="ec9ba-184">컬렉션을 열거 되지 본질적으로 스레드로부터 안전한 프로시저가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-184">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="ec9ba-185">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-185">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="ec9ba-186">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ec9ba-186">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="ec9ba-187">[Visual Basic의 경우 C#]</span><span class="sxs-lookup"><span data-stu-id="ec9ba-187">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="ec9ba-188">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.ICollection.SyncRoot%2A> 열거 하는 동안:</span><span class="sxs-lookup"><span data-stu-id="ec9ba-188">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
 lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
  </Members>
</Type>