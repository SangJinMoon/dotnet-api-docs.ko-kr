<Type Name="EncryptedPackageEnvelope" FullName="System.IO.Packaging.EncryptedPackageEnvelope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d13de0354f15e43fe6e836cca6df2e57f369e866" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EncryptedPackageEnvelope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EncryptedPackageEnvelope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.EncryptedPackageEnvelope" />
  <TypeSignature Language="VB.NET" Value="Public Class EncryptedPackageEnvelope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncryptedPackageEnvelope : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="309a5-101">암호화된 패키지가 들어 있는 OLE 복합 파일을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="309a5-101">Represents an OLE compound file that contains an encrypted package.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-102"><xref:System.IO.Packaging.EncryptedPackageEnvelope> public에 생성자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-102"><xref:System.IO.Packaging.EncryptedPackageEnvelope> has no public constructors.</span></span>  <span data-ttu-id="309a5-103"><xref:System.IO.Packaging.EncryptedPackageEnvelope> 정적을 사용 하 여 만든 <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, 또는 <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="309a5-103">An <xref:System.IO.Packaging.EncryptedPackageEnvelope> is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309a5-104">암호화된 패키지 및 이를 보유한 OLE 복합 파일을 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-104">Closes the encrypted package and the OLE compound file that holds it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="309a5-105">다음 예제에서는 닫으려면이 메서드를 사용 하는 <xref:System.IO.Packaging.EncryptedPackageEnvelope>합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-105">The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Open" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-106">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-106">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Create(class System.IO.Stream envelopeStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Create(System::IO::Stream ^ envelopeStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="309a5-107">파일을 만들 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-107">The stream on which to create the file.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="309a5-108">복합 파일에 포함된 게시 라이선스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-108">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="309a5-109">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-109">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-110">지정된 스트림에서 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-110">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> on the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-111">새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-111">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-112">현재 사용자가 새 파일에 읽기/쓰기 액세스입니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-112">The current user has read/write access to the new file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-113">
            <paramref name="envelopeStream" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-113">
              <paramref name="envelopeStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="309a5-114">
            <paramref name="envelopeStream" />에서 읽기/쓰기 액세스를 제공하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-114">
              <paramref name="envelopeStream" /> does not provide read/write access.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Create(string envelopeFileName, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Create(System::String ^ envelopeFileName, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="309a5-115">OLE 복합 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-115">The name of the OLE compound file.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="309a5-116">복합 파일에 포함된 게시 라이선스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-116">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="309a5-117">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-117">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-118">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환하고 지정된 파일 이름을 부여합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-118">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and gives it the specified file name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-119">새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-119">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-120">지정한 이름 가진 파일이 이미 있으면 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-120">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 <span data-ttu-id="309a5-121">현재 사용자가 파일에 읽기/쓰기 액세스입니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-121">The current user has read/write access to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-122">
            <paramref name="envelopeFileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-122">
              <paramref name="envelopeFileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateFromPackage">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-123">암호화되지 않은 기존 패키지를 해당 콘텐츠의 소스로 사용하는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-123">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses an existing unencrypted package as the source of its content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="309a5-124">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> 메서드를 인스턴스화하는 <xref:System.IO.Packaging.EncryptedPackageEnvelope>합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-124">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage(class System.IO.Stream envelopeStream, class System.IO.Stream packageStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ CreateFromPackage(System::IO::Stream ^ envelopeStream, System::IO::Stream ^ packageStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
        <Parameter Name="packageStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="309a5-125">파일을 만들 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-125">The stream on which to create the file.</span>
          </span>
        </param>
        <param name="packageStream">
          <span data-ttu-id="309a5-126">암호화되지 않은 기존 패키지를 나타내는 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-126">The stream representing the existing unencrypted package.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="309a5-127">복합 파일에 포함된 게시 라이선스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-127">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="309a5-128">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-128">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-129">지정된 암호화되지 않은 패키지를 해당 콘텐츠로 사용하는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 지정된 스트림에 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-129">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (on the specified stream) that uses the specified unencrypted package as its content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-130">새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-130">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-131">현재 사용자가 새 파일에 읽기/쓰기 액세스입니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-131">The current user has read/write access to the new file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="309a5-132">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> 메서드를 인스턴스화하는 <xref:System.IO.Packaging.EncryptedPackageEnvelope>합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-132">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-133">
            <paramref name="envelopeStream" /> 또는 <paramref name="packageStream" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-133">
              <paramref name="envelopeStream" /> or <paramref name="packageStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="309a5-134">
            <paramref name="envelopeStream" />에서 읽기/쓰기 액세스를 제공하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-134">
              <paramref name="envelopeStream" /> does not provide read/write access.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage(string envelopeFileName, class System.IO.Stream packageStream, class System.Security.RightsManagement.PublishLicense publishLicense, class System.Security.RightsManagement.CryptoProvider cryptoProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ CreateFromPackage(System::String ^ envelopeFileName, System::IO::Stream ^ packageStream, System::Security::RightsManagement::PublishLicense ^ publishLicense, System::Security::RightsManagement::CryptoProvider ^ cryptoProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="packageStream" Type="System.IO.Stream" />
        <Parameter Name="publishLicense" Type="System.Security.RightsManagement.PublishLicense" />
        <Parameter Name="cryptoProvider" Type="System.Security.RightsManagement.CryptoProvider" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="309a5-135">OLE 복합 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-135">The name of the OLE compound file.</span>
          </span>
        </param>
        <param name="packageStream">
          <span data-ttu-id="309a5-136">암호화되지 않은 기존 패키지를 나타내는 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-136">The stream representing the existing unencrypted package.</span>
          </span>
        </param>
        <param name="publishLicense">
          <span data-ttu-id="309a5-137">복합 파일에 포함된 게시 라이선스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-137">The publish license that is embedded in the compound file.</span>
          </span>
        </param>
        <param name="cryptoProvider">
          <span data-ttu-id="309a5-138">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-138">An object that determines what operations the current user is allowed to perform on the encrypted content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-139">지정된 암호화되지 않은 패키지를 해당 콘텐츠로 사용하는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들고 지정된 파일 이름을 부여하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-139">Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that uses the specified unencrypted package as its content, and gives it the specified file name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-140">새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-140">The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-141">지정한 이름 가진 파일이 이미 있으면 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-141">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 <span data-ttu-id="309a5-142">현재 사용자가 파일에 읽기/쓰기 액세스입니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-142">The current user has read/write access to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="309a5-143">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> 메서드를 인스턴스화하는 <xref:System.IO.Packaging.EncryptedPackageEnvelope>합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-143">The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-144">
            <paramref name="envelopeFileName" /> 또는 <paramref name="packageStream" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-144">
              <paramref name="envelopeFileName" /> or <paramref name="packageStream" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IO.Packaging.EncryptedPackageEnvelope.Create" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-145">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-145">Releases the resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309a5-146">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-146">Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-147">호출 <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> 끝나면는 <xref:System.IO.Packaging.EncryptedPackageEnvelope>합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-147">Call <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> when finished with a <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span> <span data-ttu-id="309a5-148"><xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> 메서드를 사용하면 <xref:System.IO.Packaging.EncryptedPackageEnvelope>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-148">The <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> method leaves the <xref:System.IO.Packaging.EncryptedPackageEnvelope> in an unusable state.</span></span> <span data-ttu-id="309a5-149">호출한 후 <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>에 대 한 모든 참조를 해제 해야는 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-149">After calling <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>, you must release all references to the <xref:System.IO.Packaging.EncryptedPackageEnvelope> so the garbage collector can reclaim the memory that the <xref:System.IO.Packaging.EncryptedPackageEnvelope> was occupying.</span></span> <span data-ttu-id="309a5-150">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-150">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="309a5-151"><xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.IO.Packaging.EncryptedPackageEnvelope>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="309a5-151">Always call <xref:System.IO.Packaging.EncryptedPackageEnvelope.Dispose%2A> before you release your last reference to the <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</span></span> <span data-ttu-id="309a5-152">이렇게 하지 않으면 가비지 수집기가 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 개체의 <xref:System.Object.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-152">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Packaging.EncryptedPackageEnvelope> object's <xref:System.Object.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="309a5-153">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-153">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-154">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-154">Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-155">이 메서드는 public `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="309a5-155">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="309a5-156">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-156">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="309a5-157"><xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-157"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="309a5-158">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.IO.Packaging.EncryptedPackageEnvelope> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-158">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.Packaging.EncryptedPackageEnvelope> references.</span></span> <span data-ttu-id="309a5-159">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-159">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="309a5-160">
              <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="309a5-160">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="309a5-161">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <see langword="Dispose" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="309a5-161">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="309a5-162">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="309a5-162">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="309a5-163">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="309a5-163">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-164">파일을 열 때 읽기 권한을 부여했는지, 쓰기 권한을 부여했는지, 아니면 두 권한을 모두 부여했는지 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-164">Gets a value that specifies whether the file was opened with access to read, write, or both.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309a5-165">파일을 여는 데 사용된 <see cref="T:System.IO.FileAccess" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-165">The <see cref="T:System.IO.FileAccess" /> value that was used to open the file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309a5-166">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 및 해당 패키지 콘텐츠 모두에 대해 스트림을 플러시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-166">Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> and its package content.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package GetPackage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.Package GetPackage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPackage () As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::Package ^ GetPackage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="309a5-167">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 내의 암호화된 패키지를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-167">Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-168">엔벌로프에 있는 <see cref="T:System.IO.Packaging.Package" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-168">The <see cref="T:System.IO.Packaging.Package" /> in the envelope.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsEncryptedPackageEnvelope">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-169">해당 파일이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일인지 여부를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-169">Gets a value specifying whether the file is an OLE compound file with an encrypted package stream</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsEncryptedPackageEnvelope">
      <MemberSignature Language="C#" Value="public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEncryptedPackageEnvelope(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEncryptedPackageEnvelope(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="309a5-170">테스트할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-170">The stream that is tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-171">지정된 스트림이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일인지 여부를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-171">Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-172">지정된 스트림이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-172">
              <see langword="true" /> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-173">
            <paramref name="stream" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-173">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEncryptedPackageEnvelope">
      <MemberSignature Language="C#" Value="public static bool IsEncryptedPackageEnvelope (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEncryptedPackageEnvelope(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEncryptedPackageEnvelope (fileName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEncryptedPackageEnvelope(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="309a5-174">테스트할 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-174">The file that is tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-175">지정된 파일이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일인지 여부를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-175">Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-176">지정된 파일이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-176">
              <see langword="true" /> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="309a5-177">다음 예제에서는 암호화를 테스트 하려면이 메서드를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-177">The following example shows how to use this method to test for encryption.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="309a5-178">
            <paramref name="fileName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-178">
              <paramref name="fileName" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-179">OLE 복합 파일의 암호화된 패키지를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-179">Opens the encrypted package in an OLE compound file.</span>
          </span>
        </summary>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(class System.IO.Stream envelopeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeStream As Stream) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::IO::Stream ^ envelopeStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="envelopeStream">
          <span data-ttu-id="309a5-180">암호화된 패키지를 포함하는 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-180">The stream containing the encrypted package.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-181">지정된 스트림의 암호화된 패키지를 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-181">Open the encrypted package in the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-182">열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-182">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-183">스트림 암호화 된 패키지가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-183">The stream must have an encrypted package.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="309a5-184">암호화된 패키지가 들어 있는 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-184">The file containing the encrypted package.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-185">지정된 파일의 암호화된 패키지를 공유하지 않고 읽기 전용 모드로 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-185">Open the encrypted package in the specified file as read only and unshared.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-186">열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-186">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-187">파일을 암호화 된 패키지가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-187">The file must have an encrypted package.</span></span>  
  
 <span data-ttu-id="309a5-188">열려 있는 파일은 읽기 전용 이며 공유 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-188">The opened file is read only and unshared.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String, access As FileAccess) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName, System::IO::FileAccess access);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="309a5-189">암호화된 패키지가 들어 있는 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-189">The file containing the encrypted package.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="309a5-190">액세스 유형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-190">The type of access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-191">지정된 액세스 권한을 적용하여 지정된 파일의 암호화된 패키지를 공유하지 않고 엽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-191">Open the encrypted package in the specified file as unshared and with the specified access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-192">열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-192">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-193">파일을 암호화 된 패키지가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-193">The file must have an encrypted package.</span></span>  
  
 <span data-ttu-id="309a5-194">열려 있는 파일을 공유 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-194">The opened file is unshared.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.EncryptedPackageEnvelope Open(string envelopeFileName, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare sharing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (envelopeFileName As String, access As FileAccess, sharing As FileShare) As EncryptedPackageEnvelope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::EncryptedPackageEnvelope ^ Open(System::String ^ envelopeFileName, System::IO::FileAccess access, System::IO::FileShare sharing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.EncryptedPackageEnvelope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="envelopeFileName" Type="System.String" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="sharing" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="envelopeFileName">
          <span data-ttu-id="309a5-195">암호화된 패키지가 들어 있는 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-195">The file containing the encrypted package.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="309a5-196">액세스 유형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-196">The type of access.</span>
          </span>
        </param>
        <param name="sharing">
          <span data-ttu-id="309a5-197">공유 유형입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-197">The type of sharing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="309a5-198">지정된 파일의 암호화된 패키지를 열고 지정된 액세스 권한 및 공유 설정을 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-198">Open the encrypted package in the specified file and gives it the specified access and sharing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="309a5-199">열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-199">The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> that is opened.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-200">파일을 암호화 된 패키지가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-200">The file must have an encrypted package.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.EncryptedPackageEnvelope.Close" />
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-201">권한으로 관리되는 문서의 핵심 패키지 속성(Title 및 Subject 등)을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-201">Gets the core package properties (such as Title and Subject) of the rights managed document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309a5-202">패키지의 <see cref="T:System.IO.Packaging.PackageProperties" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-202">The <see cref="T:System.IO.Packaging.PackageProperties" /> for the package.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="309a5-203">이러한 핵심 속성 표준 OLE 속성 스트림 (\005SummaryInformation 및 \005DocumentSummaryInformation)에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-203">These core properties are stored in the standard OLE property streams (\005SummaryInformation and \005DocumentSummaryInformation).</span></span> <span data-ttu-id="309a5-204">핵심 속성은 패키지 자체에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-204">The core properties are also stored in the package itself.</span></span> <span data-ttu-id="309a5-205">두 속성 집합의 동기화를 유지 하는 응용 프로그램의 작업은</span><span class="sxs-lookup"><span data-stu-id="309a5-205">It is the responsibility of the application to keep the two sets of properties synchronized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightsManagementInformation">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.RightsManagementInformation RightsManagementInformation" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightsManagementInformation As RightsManagementInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::RightsManagementInformation ^ RightsManagementInformation { System::IO::Packaging::RightsManagementInformation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.RightsManagementInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-206">
            <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에 저장되어 있는 권한 관리 정보를 가져옵니다. 권한 관리를 통해 보호되는 패키지를 구현하는 OLE 복합 파일에 저장되어 있는 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 및 <see cref="T:System.Security.RightsManagement.UseLicense" />가 특히 여기에 해당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-206">Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" /> and the <see cref="T:System.Security.RightsManagement.UseLicense" />s stored in the OLE compound file that embodies the rights-management protected package</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309a5-207">패키지의 <see cref="T:System.IO.Packaging.RightsManagementInformation" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-207">The <see cref="T:System.IO.Packaging.RightsManagementInformation" /> for the package.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="309a5-208">다음 예제에서는 가져오는 방법을 보여 줍니다. <xref:System.IO.Packaging.RightsManagementInformation> 사용 하 여 암호화 된 패키지에 대 한는 <xref:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="309a5-208">The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation%2A> property.</span></span>  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageInfo">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.StorageInfo StorageInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.StorageInfo StorageInfo" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StorageInfo As StorageInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::StorageInfo ^ StorageInfo { System::IO::Packaging::StorageInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.StorageInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="309a5-209">암호화된 패키지 외부에 있는 복합 파일 스트림에 대한 액세스 권한을 제공하는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-209">Gets an object that provides access to the compound file streams outside the encrypted package.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="309a5-210">암호화된 패키지 외부에 있는 OLE 복합 파일의 스트림을 나타내는 <see cref="T:System.IO.Packaging.StorageInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="309a5-210">A <see cref="T:System.IO.Packaging.StorageInfo" /> representing streams in the OLE compound file that are outside the encrypted package.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>