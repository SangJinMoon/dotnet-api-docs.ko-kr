<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PackageStore.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac509c25cbc0310ad976dc23dd14cc3caa0b864965f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09c25cbc0310ad976dc23dd14cc3caa0b864965f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Packaging.PackageStore">
          <source>Represents a collection of application-specific <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph> instances used in combination with <ph id="ph2">&lt;see cref="T:System.IO.Packaging.PackWebRequest" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph>와 함께 사용되는 응용 프로그램별 <ph id="ph2">&lt;see cref="T:System.IO.Packaging.PackWebRequest" /&gt;</ph> 인스턴스의 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>The <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> defines a reference collections of package that are open and active in the application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 열려 있고 응용 프로그램에서 활성화 된 패키지의 참조 컬렉션을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>Packages added to the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> are accessed is by their key URI value.</source>
          <target state="translated">에 추가 된 패키지는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 액세스 키 URI 값을 기준 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>The <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> supports three common uses:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 세 가지 일반적인 용도 지원 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>Accessing <ph id="ph1">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> data through <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph>.</source>
          <target state="translated">에 액세스 <ph id="ph1">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> 를 통해 데이터 <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>The application obtaining an instance of a <ph id="ph1">&lt;xref:System.IO.Packaging.Package&gt;</ph> given the package's URI.</source>
          <target state="translated">응용 프로그램의 인스턴스 가져오기는 <ph id="ph1">&lt;xref:System.IO.Packaging.Package&gt;</ph> 패키지의 URI를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>Accessing packages that are created and stored in a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">생성 되 고에 저장 된 패키지에 액세스 하는 <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>To improve performance and minimize the overhead of repeated file open/close operations, the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> is used to manage instances of packages accessed by <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> and directly by the application.</source>
          <target state="translated">성능을 개선 하 고 반복된 파일 열기/닫기 작업의 오버 헤드를 최소화는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 에서 액세스 하는 패키지의 인스턴스를 관리 하는 데는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> 및 응용 프로그램에서 직접 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>When accessing data in a package, the <ph id="ph1">&lt;xref:System.IO.Packaging.Package&gt;</ph> address of a requested <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> is first checked to see if the package is already defined and open in the <ph id="ph4">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>.</source>
          <target state="translated">패키지에서 데이터에 액세스할 때의 <ph id="ph1">&lt;xref:System.IO.Packaging.Package&gt;</ph> 주소에서 요청 된 <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> 정의 되 고에 열려 있는 패키지가 이미가 있는지를 먼저 검사는 <ph id="ph4">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>If the package is defined as open in the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>, requested parts can be accessed directly without repeatedly opening and closing the package for each  request.</source>
          <target state="translated">패키지에서 열기 정의 된 경우는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>, 요청한 부분 반복적으로 열고 닫아도 각 요청에 대 한 패키지 하지 않고 직접 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>If your application opens a package with <ph id="ph1">&lt;xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> can be called to add the package to the <ph id="ph3">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>.</source>
          <target state="translated">응용 프로그램으로 패키지를 열 경우 <ph id="ph1">&lt;xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> 에 패키지를 추가 하도록 호출 될 수는 <ph id="ph3">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source><ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> should later be called to remove the package from the <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> prior to calling <ph id="ph3">&lt;xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> 패키지를 제거 하려면 나중에 호출 되어야 합니다는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 호출 하기 전에 <ph id="ph3">&lt;xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>XPS packages opened with an <ph id="ph1">&lt;xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A&gt;</ph> constructor are automatically added and removed from the <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> when the document is created and disposed.</source>
          <target state="translated">사용 하 여 열린 XPS 패키지는 <ph id="ph1">&lt;xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A&gt;</ph> 생성자 자동으로 추가 되 고 제거는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 문서를 만들고 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>(You do not need to call <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> separately for XPS packages opened with <ph id="ph3">&lt;xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A&gt;</ph> constructors.)</source>
          <target state="translated">(호출할 필요가 없습니다 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> XPS 패키지 사용 하 여 열에 대해 별도로 <ph id="ph3">&lt;xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A&gt;</ph> 생성자입니다.)</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>The file I/O permissions of a package accessed through the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> remains the same as the I/O permissions set on the package when it is opened.</source>
          <target state="translated">파일 I/O 통해 액세스 한 패키지의 사용 권한을 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 열릴 때 패키지에 대해 설정 된 I/O 권한을 대로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>The <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> only provides references to the packages that have been added the store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 만 저장소에 추가 된 패키지에 대 한 참조를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>It is up to the application to correctly open, update, and close each package.</source>
          <target state="translated">응용 프로그램을 올바르게 열려면 업데이트 하 고 종결할 각 패키지는 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>Packages added to the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> can be accessed in multithreaded environments when they are used in combination with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> parser such as <ph id="ph3">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">에 추가 된 패키지는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 와 함께에서 사용 될 때 다중 스레드 환경에서 액세스할 수는 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 와 같은 파서 <ph id="ph3">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Packaging.PackageStore">
          <source>When operating in a multithreaded environment, the application must lock the package before access.</source>
          <target state="translated">다중 스레드 환경에서 운영 하는 경우 응용 프로그램 액세스 하기 전에 패키지를 잠가야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>The key <ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> of the <bpt id="p1">&lt;c&gt;</bpt>package<ept id="p1">&lt;/c&gt;</ept> to compare in a <ph id="ph2">&lt;see cref="T:System.IO.Packaging.PackWebRequest" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.Packaging.PackWebRequest" /&gt;</ph>에서 비교할 <bpt id="p1">&lt;c&gt;</bpt>package<ept id="p1">&lt;/c&gt;</ept>의 키 <ph id="ph1">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>The package to add to the store.</source>
          <target state="translated">저장소에 추가할 패키지입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>Adds a <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph> to the store.</source>
          <target state="translated">저장소에 <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph>를 추가합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source><ph id="ph1">`packageUri`</ph> defines the package's key URI that is compared when you call <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`packageUri`</ph> 패키지의 키를 호출할 때 비교 되는 URI를 정의 <ph id="ph2">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>If the <ph id="ph1">`packageUri`</ph> matches the <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> for a <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> in a <ph id="ph4">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> call, the package defined in the <ph id="ph5">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> is used to access the requested part.</source>
          <target state="translated">경우는 <ph id="ph1">`packageUri`</ph> 일치는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> 에 <ph id="ph4">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> 에 정의 된 패키지를 호출할는 <ph id="ph5">&lt;xref:System.IO.Packaging.PackageStore&gt;</ph> 요청한 부분에 액세스 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>If the <ph id="ph1">`packageUri`</ph> does not match the <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> for a <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> in a <ph id="ph4">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> call, the package with the specified URI is opened to access the requested part.</source>
          <target state="translated">경우는 <ph id="ph1">`packageUri`</ph> 일치 하지 않습니다는 <ph id="ph2">&lt;xref:System.IO.Packaging.PackagePart.Uri%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.IO.Packaging.PackagePart&gt;</ph> 에 <ph id="ph4">&lt;xref:System.IO.Packaging.PackWebRequest&gt;</ph> 요청한 부분에 액세스 하기 위해 호출에서 지정된 된 URI 사용 하 여 패키지 열립니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> This method demands <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> for all custom <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (non-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) types.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept> 요구 하는이 메서드가 <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> 모든 사용자 지정에 대 한 <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (비-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) 형식입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source><ph id="ph1">&lt;paramref name="package" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="package" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is an invalid package <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>가 잘못된 패키지 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>인 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
          <source>A package with the specified <ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is already in the store.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>의 패키지가 이미 저장소에 있는 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> of the package to return.</source>
          <target state="translated">반환할 패키지의 <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph> with a specified <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> from the store.</source>
          <target state="translated">저장소에서 지정된 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>의 <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source>The package with a specified <ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>; or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if a package with the specified <ph id="ph3">&lt;paramref name="packageUri" /&gt;</ph> is not in the store.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>의 패키지입니다. 지정된 <ph id="ph3">&lt;paramref name="packageUri" /&gt;</ph>의 패키지가 저장소에 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source><ph id="ph1">`packageUri`</ph> is matched to the URIs specified in the <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">`packageUri`</ph> Uri에 일치에 지정 된 된 <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> This method demands <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> for all custom <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (non-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) types.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept> 요구 하는이 메서드가 <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> 모든 사용자 지정에 대 한 <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (비-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) 형식입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.GetPackage%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.GetPackage%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
          <source><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is an invalid package <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>가 잘못된 패키지 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>인 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> of the package to remove.</source>
          <target state="translated">제거할 패키지의 <ph id="ph1">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source>Removes the <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph> with a specified <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> from the store.</source>
          <target state="translated">저장소에서 지정된 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>의 <ph id="ph1">&lt;see cref="T:System.IO.Packaging.Package" /&gt;</ph>를 제거합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source><ph id="ph1">`packageUri`</ph> is matched to the URIs specified in the <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">`packageUri`</ph> Uri에 일치에 지정 된 된 <ph id="ph2">&lt;xref:System.IO.Packaging.PackageStore.AddPackage%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> This method demands <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> for all custom <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (non-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) types.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept> 요구 하는이 메서드가 <ph id="ph1">&lt;xref:System.Security.Permissions.EnvironmentPermission&gt;</ph> 모든 사용자 지정에 대 한 <ph id="ph2">&lt;xref:System.IO.Packaging.Package&gt;</ph> (비-<ph id="ph3">&lt;xref:System.IO.Packaging.ZipPackage&gt;</ph>) 형식입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.IO.Packaging.PackageStore.RemovePackage%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
          <source><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph> is an invalid package <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="packageUri" /&gt;</ph>가 잘못된 패키지 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>인 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>