<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09c25cbc0310ad976dc23dd14cc3caa0b864965f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30417857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.IO.Packaging.Package" />와 함께 사용되는 응용 프로그램별 <see cref="T:System.IO.Packaging.PackWebRequest" /> 인스턴스의 컬렉션을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageStore> 열려 있고 응용 프로그램에서 활성화 된 패키지의 참조 컬렉션을 정의 합니다.  에 추가 된 패키지는 <xref:System.IO.Packaging.PackageStore> 액세스 키 URI 값을 기준 하는 것입니다.  <xref:System.IO.Packaging.PackageStore> 세 가지 일반적인 용도 지원 합니다.  
  
1.  에 액세스 <xref:System.IO.Packaging.PackagePart> 를 통해 데이터 <xref:System.IO.Packaging.PackWebRequest>합니다.  
  
2.  응용 프로그램의 인스턴스 가져오기는 <xref:System.IO.Packaging.Package> 패키지의 URI를 지정 합니다.  
  
3.  생성 되 고에 저장 된 패키지에 액세스 하는 <xref:System.IO.MemoryStream>합니다.  
  
 성능을 개선 하 고 반복된 파일 열기/닫기 작업의 오버 헤드를 최소화는 <xref:System.IO.Packaging.PackageStore> 에서 액세스 하는 패키지의 인스턴스를 관리 하는 데는 <xref:System.IO.Packaging.PackWebRequest> 및 응용 프로그램에서 직접 합니다.  패키지에서 데이터에 액세스할 때의 <xref:System.IO.Packaging.Package> 주소에서 요청 된 <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> 정의 되 고에 열려 있는 패키지가 이미가 있는지를 먼저 검사는 <xref:System.IO.Packaging.PackageStore>합니다.  패키지에서 열기 정의 된 경우는 <xref:System.IO.Packaging.PackageStore>, 요청한 부분 반복적으로 열고 닫아도 각 요청에 대 한 패키지 하지 않고 직접 액세스할 수 있습니다.  
  
 응용 프로그램으로 패키지를 열 경우 <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 에 패키지를 추가 하도록 호출 될 수는 <xref:System.IO.Packaging.PackageStore>합니다.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 패키지를 제거 하려면 나중에 호출 되어야 합니다는 <xref:System.IO.Packaging.PackageStore> 호출 하기 전에 <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>합니다.  
  
 사용 하 여 열린 XPS 패키지는 <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> 생성자 자동으로 추가 되 고 제거는 <xref:System.IO.Packaging.PackageStore> 문서를 만들고 삭제 합니다.  (호출할 필요가 없습니다 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 또는 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> XPS 패키지 사용 하 여 열에 대해 별도로 <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> 생성자입니다.)  
  
 파일 I/O 통해 액세스 한 패키지의 사용 권한을 <xref:System.IO.Packaging.PackageStore> 열릴 때 패키지에 대해 설정 된 I/O 권한을 대로 유지 됩니다.  <xref:System.IO.Packaging.PackageStore> 만 저장소에 추가 된 패키지에 대 한 참조를 제공 합니다.  응용 프로그램을 올바르게 열려면 업데이트 하 고 종결할 각 패키지는 합니다.  
  
 에 추가 된 패키지는 <xref:System.IO.Packaging.PackageStore> 와 함께에서 사용 될 때 다중 스레드 환경에서 액세스할 수는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 와 같은 파서 <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>합니다.  다중 스레드 환경에서 운영 하는 경우 응용 프로그램 액세스 하기 전에 패키지를 잠가야 합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.IO.Packaging.PackWebRequest" />에서 비교할 <c>package</c>의 키 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]입니다.</param>
        <param name="package">저장소에 추가할 패키지입니다.</param>
        <summary>저장소에 <see cref="T:System.IO.Packaging.Package" />를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 패키지의 키를 호출할 때 비교 되는 URI를 정의 <xref:System.IO.Packaging.PackWebRequest>합니다.  
  
 경우는 `packageUri` 일치는 <xref:System.IO.Packaging.PackagePart.Uri%2A> 에 대 한는 <xref:System.IO.Packaging.PackagePart> 에 <xref:System.IO.Packaging.PackWebRequest> 에 정의 된 패키지를 호출할는 <xref:System.IO.Packaging.PackageStore> 요청한 부분에 액세스 하는 데 사용 됩니다.  
  
 경우는 `packageUri` 일치 하지 않습니다는 <xref:System.IO.Packaging.PackagePart.Uri%2A> 에 대 한는 <xref:System.IO.Packaging.PackagePart> 에 <xref:System.IO.Packaging.PackWebRequest> 요청한 부분에 액세스 하기 위해 호출에서 지정된 된 URI 사용 하 여 패키지 열립니다.  
  
 **보안 정보** 요구 하는이 메서드가 <xref:System.Security.Permissions.EnvironmentPermission> 모든 사용자 지정에 대 한 <xref:System.IO.Packaging.Package> (비-<xref:System.IO.Packaging.ZipPackage>) 형식입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" />가 잘못된 패키지 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]인 경우</exception>
        <exception cref="T:System.InvalidOperationException">지정된 <paramref name="packageUri" />의 패키지가 이미 저장소에 있는 경우</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">반환할 패키지의 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]입니다.</param>
        <summary>저장소에서 지정된 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]의 <see cref="T:System.IO.Packaging.Package" />를 반환합니다.</summary>
        <returns>지정된 <paramref name="packageUri" />의 패키지입니다. 지정된 <paramref name="packageUri" />의 패키지가 저장소에 없으면 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` Uri에 일치에 지정 된 된 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 메서드를 호출 합니다.  
  
 **보안 정보** 요구 하는이 메서드가 <xref:System.Security.Permissions.EnvironmentPermission> 모든 사용자 지정에 대 한 <xref:System.IO.Packaging.Package> (비-<xref:System.IO.Packaging.ZipPackage>) 형식입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.Packaging.PackageStore.GetPackage%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" />가 잘못된 패키지 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]인 경우</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">제거할 패키지의 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]입니다.</param>
        <summary>저장소에서 지정된 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]의 <see cref="T:System.IO.Packaging.Package" />를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` Uri에 일치에 지정 된 된 <xref:System.IO.Packaging.PackageStore.AddPackage%2A> 메서드를 호출 합니다.  
  
 **보안 정보** 요구 하는이 메서드가 <xref:System.Security.Permissions.EnvironmentPermission> 모든 사용자 지정에 대 한 <xref:System.IO.Packaging.Package> (비-<xref:System.IO.Packaging.ZipPackage>) 형식입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" />가 잘못된 패키지 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]인 경우</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>