<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3603b-101">코드 디버깅에 도움이 되는 메서드 및 속성들을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-101">Provides a set of methods and properties that help debug your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-102">메서드를 사용 하는 경우는 <xref:System.Diagnostics.Debug> 디버깅 정보를 출력에 클래스 및 어설션과 함께 논리를 검사, 코드 만들 수 있습니다 프로그램 더욱 강력한 성능 및 코드 크기 최종 제품의 영향을 주지 않고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-102">If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</span></span>  
  
 <span data-ttu-id="3603b-103">이 클래스는 표시 하는 메서드를 제공는 <xref:System.Diagnostics.Debug.Assert%2A> 대화 상자를 생성 하 고 항상 실패 하는 어설션을 내보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-103">This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail.</span></span> <span data-ttu-id="3603b-104">이 클래스는 다음과 같은 형태로 쓰기 메서드를 제공: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> 및 <xref:System.Diagnostics.Debug.WriteLineIf%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-104">This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="3603b-105"><xref:System.Diagnostics.BooleanSwitch> 및 <xref:System.Diagnostics.TraceSwitch> 클래스 동적으로 추적 출력을 제어 하는 수단을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-105">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="3603b-106">응용 프로그램을 다시 컴파일하지 않고도 이러한 스위치의 값을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-106">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="3603b-107">스위치를 설정 하는 구성 파일을 사용 하는 방법은 참조 하십시오.는 <xref:System.Diagnostics.Switch> 클래스 및 [추적 스위치](~/docs/framework/debug-trace-profile/trace-switches.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-107">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.</span></span>  
  
 <span data-ttu-id="3603b-108">추적 출력 대상을 추가 하 여 사용자 지정할 수 있습니다 <xref:System.Diagnostics.TraceListener> 인스턴스 또는 인스턴스를 제거 하는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-108">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="3603b-109"><xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-109">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="3603b-110">기본적으로는 <xref:System.Diagnostics.DefaultTraceListener> 클래스 추적 출력을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-110">By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-111">추적 수신기를 추가 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 추적 수신기에서 사용 되는 리소스를 사용할 수 없는 경우 추적을 동안 throw 된 예외를 일으킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-111">Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="3603b-112">조건 및 throw 된 예외 추적 수신기에 좌우 되며이 항목의 열거할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-112">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="3603b-113">전화를 걸 수 유용할 수 있습니다는 <xref:System.Diagnostics.Debug> 메서드 `try` / `catch` 블록 감지 하 고 추적 수신기에서 발생 한 예외를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-113">It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
 <span data-ttu-id="3603b-114">들여쓰기를 사용 하 여 수준을 수정할 수는 <xref:System.Diagnostics.Debug.Indent%2A> 메서드 또는 <xref:System.Diagnostics.Debug.IndentLevel%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-114">You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property.</span></span> <span data-ttu-id="3603b-115">들여쓰기 간격을 수정 하려면 사용 하 여는 <xref:System.Diagnostics.Debug.IndentSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-115">To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property.</span></span> <span data-ttu-id="3603b-116">자동으로 설정 하 여 쓴 후 출력 버퍼를 플러시하지 여부를 지정할 수는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-116">You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="3603b-117">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-117">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="3603b-118">다음 예제와 같이 구성 파일의 형식은 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-118">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="3603b-119"><xref:System.Diagnostics.ConditionalAttribute> 의 메서드에 특성이 적용 되 <xref:System.Diagnostics.Debug>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-119">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>.</span></span> <span data-ttu-id="3603b-120">지 원하는 컴파일러 <xref:System.Diagnostics.ConditionalAttribute> "디버그"로 된 조건부 컴파일 기호가 정의 되어 있지 않으면 이러한 메서드 호출을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-120">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="3603b-121">확인 하려면 컴파일러의 설명서를 참조 하는지 여부를 <xref:System.Diagnostics.ConditionalAttribute> 사용할 수 및 조건부 컴파일 기호를 정의 하기 위한 구문을 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-121">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="3603b-122">기본적으로 Visual Studio C# 및 Visual Basic 프로젝트의 디버그 빌드에 대해 "디버그" 조건부 컴파일 기호가 정의 되어 하 고 모두 디버그 및 릴리스 빌드에 대해 "TRACE" 기호가 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-122">In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="3603b-123">이 동작을 사용 하지 않도록 설정 하는 방법에 대 한 정보를 Visual Studio 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-123">For information about how to disable this behavior, see the Visual Studio documentation.</span></span> <span data-ttu-id="3603b-124">Visual c + +에서 조건부 디버깅 하는 방법에 대 한 정보를 참조 하십시오. [Debug 클래스 (C + + /cli CLI)](/cpp/dotnet/debug-class-cpp-cli)합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-124">For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](/cpp/dotnet/debug-class-cpp-cli).</span></span>
  
 <span data-ttu-id="3603b-125">C#에서 "디버그" 조건부 컴파일 기호를 정의 하려면 추가 `/d:DEBUG` 명령줄을 사용 하 여 코드를 컴파일할 때 컴파일러 명령줄 옵션 또는 추가 `#define DEBUG` 파일의 맨 위로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-125">To define the "DEBUG" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file.</span></span> <span data-ttu-id="3603b-126">Visual Basic의 추가 `/d:DEBUG=True` 하려면 컴파일러 명령줄 옵션을 선택 하거나 추가 `#Const DEBUG=True` 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-126">In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-127">다음 예제에서는 <xref:System.Diagnostics.Debug> 프로그램 실행의 시작과 끝을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-127">The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution.</span></span> <span data-ttu-id="3603b-128">또한이 예제에서는 <xref:System.Diagnostics.Debug.Indent%2A> 및 <xref:System.Diagnostics.Debug.Unindent%2A> 추적 출력을 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-128">The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.</span></span>  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3603b-129">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-129">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-130">조건을 확인합니다. 조건이 <see langword="false" />이면 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-131">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-131">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-132">조건이 <see langword="true" />이면 실패 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span></span></param>
        <summary><span data-ttu-id="3603b-133">조건을 확인합니다. 조건이 <see langword="false" />이면 호출 스택을 보여주는 메시지 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-134">기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-134">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="3603b-135">사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-135">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="3603b-136">자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-136">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3603b-137">`Assert` 메서드를 사용할 수 없는 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 앱.</span><span class="sxs-lookup"><span data-stu-id="3603b-137">The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.</span></span>  
  
 <span data-ttu-id="3603b-138">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-138">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="3603b-139"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-139"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="3603b-140">결과가 `false`, 오류 메시지를 보내는 것은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-140">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="3603b-141">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-141">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="3603b-142">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-142">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="3603b-143">메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-143">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="3603b-144">클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-144">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="3603b-145">클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-145">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="3603b-146">클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-146">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]<span data-ttu-id="3603b-147"> 응용 프로그램 사용자 인터페이스 모드와 비 사용자 인터페이스 모드에서 동일 하므로 모달 대화 상자를 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-147"> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode.</span></span> <span data-ttu-id="3603b-148">디버깅 모드에서 활성 추적 수신기에 메시지를 씁니다 또는 릴리스 모드에서 메시지가 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-148">The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-149">메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-149">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-150">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-150">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-151"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-151">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-152">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-152">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="3603b-153">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-153">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3603b-154">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-154">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="3603b-155">다음 예제에서는 배열에 대 한 인덱스를 만듭니다는 인덱스의 값을 설정 하는 활동을 수행 하 고 다음 호출 <xref:System.Diagnostics.Debug.Assert%2A> 인덱스 값이 유효한 지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-155">The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid.</span></span> <span data-ttu-id="3603b-156">를 사용할 수 없는 경우 <xref:System.Diagnostics.Debug.Assert%2A> 호출 스택을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-156">If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-157">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-157">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-158">조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-159"><see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <summary><span data-ttu-id="3603b-160">조건을 확인합니다. 조건이 <see langword="false" />이면 지정된 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-161">기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-161">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="3603b-162">사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-162">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="3603b-163">자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-163">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="3603b-164">일반적으로 <xref:System.Diagnostics.Debug.Assert%2A> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-164">Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="3603b-165"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-165"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="3603b-166">결과가 `false`, 지정된 된 진단 메시지를 보내는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-166">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="3603b-167">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-167">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="3603b-168">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-168">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="3603b-169">메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-169">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="3603b-170">클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-170">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="3603b-171">클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-171">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="3603b-172">클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-172">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-173">메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-173">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-174">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-174">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-175"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-175">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-176">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-176">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="3603b-177">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-177">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3603b-178">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-178">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="3603b-179">다음 예제에서는 검사 여부는 `type` 매개 변수는 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-179">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="3603b-180">경우 `type` 은 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 된 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-180">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-181">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-181">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-182">조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-183"><see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <param name="detailMessage"><span data-ttu-id="3603b-184"><see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 자세한 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <summary><span data-ttu-id="3603b-185">조건을 확인합니다. 조건이 <see langword="false" />이면 지정된 2개의 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-186">기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-186">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="3603b-187">사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-187">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="3603b-188">자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-188">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="3603b-189">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-189">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="3603b-190"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-190"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="3603b-191">결과가 `false`, 지정 된 진단 메시지와 자세한 메시지를 보내는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-191">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="3603b-192">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-192">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="3603b-193">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-193">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="3603b-194">메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-194">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="3603b-195">클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-195">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="3603b-196">클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-196">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="3603b-197">클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-197">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-198">메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-198">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-199">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-199">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-200"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-200">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-201">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-201">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="3603b-202">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-202">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3603b-203">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-203">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="3603b-204">다음 예제에서는 검사 여부는 `type` 매개 변수는 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-204">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="3603b-205">경우 `type` 은 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 두 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-205">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.</span></span>  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-206">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-206">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-207">조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-208"><see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <param name="detailMessageFormat"><span data-ttu-id="3603b-209"><see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션에 보낼 복합 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span> <span data-ttu-id="3603b-210">이 메시지에는 <c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 혼합된 텍스트가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span></span></param>
        <param name="args"><span data-ttu-id="3603b-211">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-211">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="3603b-212">조건을 확인합니다. 조건이 <see langword="false" />이면 두 개의 메시지(단순 및 서식 있는 메시지)를 출력하고 호출 스택을 보여 주는 메시지 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-213">이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-213">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="3603b-214">결과 문자열에 게 보내집니다는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-214">The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="3603b-215">기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-215">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="3603b-216">사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-216">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="3603b-217">자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-217">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="3603b-218">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-218">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="3603b-219"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-219"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="3603b-220">결과가 `false`, <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드는 및 `detailMessageFormat` 문자열 및 `args` 배열 매개 변수로 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-220">If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters.</span></span> <span data-ttu-id="3603b-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 그런 다음 지정된 텍스트 메시지 및 서식 있는 텍스트 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="3603b-222">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-222">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="3603b-223">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-223">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="3603b-224">메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-224">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="3603b-225">클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-225">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="3603b-226">클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-226">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="3603b-227">클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-227">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-228">메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-228">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-229">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-229">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-230"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-230">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-231">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-231">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="3603b-232">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-232">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3603b-233">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-233">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3603b-234">각 쓰기 직후에 <see cref="M:System.Diagnostics.Debug.Flush" />에서 <see cref="P:System.Diagnostics.Debug.Listeners" />를 호출해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span></span></summary>
        <value>
          <span data-ttu-id="3603b-235">매번 쓴 후에 <see cref="P:System.Diagnostics.Debug.Listeners" />에 대해 <see cref="M:System.Diagnostics.Debug.Flush" /> 호출되면 <see langword="true" />이고, 호출되지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-235"><see langword="true" /> if <see cref="M:System.Diagnostics.Debug.Flush" /> is called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-236">기본값은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-236">The default is `false`.</span></span>  
  
 <span data-ttu-id="3603b-237">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-237">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="3603b-238">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-238">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="3603b-239">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-239">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="3603b-240">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-240">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="3603b-241">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-241">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="3603b-242">다음 예제와 같이 구성 파일의 형식은 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-242">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3603b-243">에 비관리 코드와 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-243">for operating with unmanaged code.</span></span> <span data-ttu-id="3603b-244">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-244">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3603b-245">출력 버퍼를 플러시한 다음 각 <see cref="P:System.Diagnostics.Debug.Listeners" />에 대해 <see langword="Close" /> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-246">이 메서드를 사용 하 여 출력 되 면 파일에 같은 <xref:System.Diagnostics.TextWriterTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-246">Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-247">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-247">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="3603b-248">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-248">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="3603b-249">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-249">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="3603b-250">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-250">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-251">다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-251">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="3603b-252">`myTextListener` 사용 하 여 한 <xref:System.IO.StreamWriter> 호출 `myOutputWriter` 라는 파일에 쓸 수 `TestFile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-252">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="3603b-253">이 예제에서는 파일, 스트림 및 텍스트 기록기, 파일을 텍스트 한 줄을 씁니다 및 플러시합니다 만들고 닫습니다 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-253">The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3603b-254">에 비관리 코드와 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-254">for operating with unmanaged code.</span></span> <span data-ttu-id="3603b-255">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-255">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-256">오류 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-256">Emits an error message.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-257">내보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-257">A message to emit.</span></span></param>
        <summary><span data-ttu-id="3603b-258">지정된 오류 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-258">Emits the specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-259">기본 동작은 하는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램이 실행 하는 사용자 인터페이스 모드에는 메시지 상자에 메시지를 출력는 <xref:System.Diagnostics.TraceListener> 인스턴스에 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-259">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-260">메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-260">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-261">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-261">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-262"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-262">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-263">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-263">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-264">다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 메서드 예외를 처리할 때 메시지 표시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-264">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3603b-265">사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-265">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-266">내보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-266">A message to emit.</span></span></param>
        <param name="detailMessage"><span data-ttu-id="3603b-267">내보낼 자세한 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-267">A detailed message to emit.</span></span></param>
        <summary><span data-ttu-id="3603b-268">오류 메시지와 자세한 오류 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-268">Emits an error message and a detailed error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-269">기본 동작은 하는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램이 실행 하는 사용자 인터페이스 모드에는 메시지 상자에 메시지를 출력는 <xref:System.Diagnostics.TraceListener> 인스턴스에 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-269">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-270">메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-270">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-271">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-271">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="3603b-272"><xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="3603b-272">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="3603b-273">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-273">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-274">다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 메서드 예외를 처리할 때 메시지 표시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-274">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3603b-275">사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-275">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3603b-276">출력 버퍼를 플러시하고 버퍼링된 데이터를 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션에 쓰도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-277">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-277">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="3603b-278">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-278">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="3603b-279">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-279">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="3603b-280">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-280">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-281">다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-281">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="3603b-282">`myTextListener` 사용 하 여 한 <xref:System.IO.FileStream> 호출 `myFileStream` 라는 파일에 쓸 수 `TestFile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-282">`myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="3603b-283">이 예제에서는 스트림을 만들고, 존재 또는 새 브러시를 만듭니다, 그리고 파일을 텍스트 한 줄에 기록한 다음 플러시하고 하 고 출력을 닫습니다 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-283">The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3603b-284">현재 <see cref="P:System.Diagnostics.Debug.IndentLevel" />이 1씩 증가합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3603b-285">다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-285">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3603b-286">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-286">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3603b-287">들여쓰기 수준을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-287">Gets or sets the indent level.</span></span></summary>
        <value><span data-ttu-id="3603b-288">들여쓰기 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-288">The indent level.</span></span> <span data-ttu-id="3603b-289">기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-289">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-290"><xref:System.Diagnostics.Debug.IndentLevel%2A> 속성 크기의 들여쓰기 횟수를 나타내는 <xref:System.Diagnostics.Debug.IndentSize%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-290">The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-291">다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-291">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3603b-292">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-292">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3603b-293">들여쓰기의 공백 수를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-293">Gets or sets the number of spaces in an indent.</span></span></summary>
        <value><span data-ttu-id="3603b-294">들여쓰기의 공백 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-294">The number of spaces in an indent.</span></span> <span data-ttu-id="3603b-295">기본값은 4입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-295">The default is four.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-296">A <xref:System.Diagnostics.TextWriterTraceListener> 공백으로이 숫자를 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-296">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="3603b-297"><xref:System.Diagnostics.EventLogTraceListener> 이 값을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-297">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="3603b-298">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-298">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="3603b-299">다음 예제와 같이 구성 파일의 형식은 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-299">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3603b-300">디버그 출력을 모니터링하는 수신기 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-300">Gets the collection of listeners that is monitoring the debug output.</span></span></summary>
        <value><span data-ttu-id="3603b-301">디버그 출력을 모니터링하는 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 형식의 컬렉션을 나타내는 <see cref="T:System.Diagnostics.TraceListener" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> representing a collection of type <see cref="T:System.Diagnostics.TraceListener" /> that monitors the debug output.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-302">수신기는 디버그 출력에서 형식이 지정 된 출력을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-302">The listeners produce formatted output from the debug output.</span></span> <span data-ttu-id="3603b-303">기본적으로 컬렉션의 인스턴스를 포함 된 <xref:System.Diagnostics.DefaultTraceListener> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-303">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="3603b-304">기본 수신기를 제거 하려면 호출는 <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> 메서드를 전달 하는 것의 인스턴스는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-304">To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="3603b-305">콘솔 창에 출력을 리디렉션할의 인스턴스를 추가 <xref:System.Diagnostics.ConsoleTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-305">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span> <span data-ttu-id="3603b-306">파일이 나 스트림에 출력을 리디렉션할의 인스턴스를 추가 <xref:System.Diagnostics.TextWriterTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-306">To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3603b-307"><xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-307">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-308">다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 콘솔 화면에 출력 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-308">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="3603b-309">다음 추가를 새 수신기 코드는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-309">The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3603b-310">에 비관리 코드와 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-310">for operating with unmanaged code.</span></span> <span data-ttu-id="3603b-311">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-311">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-312"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-313">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-313">The message to write.</span></span></param>
        <summary><span data-ttu-id="3603b-314"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-315">기본 줄 종결자는 캐리지 리턴 뒤에 줄 바꿈 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-315">The default line terminator is a carriage return followed by a line feed.</span></span> <span data-ttu-id="3603b-316">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-316">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="3603b-317"><c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 결합된 텍스트를 포함하는 합성 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span></span></param>
        <param name="args"><span data-ttu-id="3603b-318">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-318">An object array containing zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="3603b-319"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 서식이 지정된 문자열을 쓰고 뒤에 줄 종결자를 붙입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-320">이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-320">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="3603b-321">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-321">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3603b-322"><paramref name="format" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="3603b-322"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3603b-323"><paramref name="format" />이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-323"><paramref name="format" /> is invalid.</span></span>  
  
 <span data-ttu-id="3603b-324">또는</span><span class="sxs-lookup"><span data-stu-id="3603b-324">-or-</span></span>  
  
 <span data-ttu-id="3603b-325">형식을 지정할 인수를 나타내는 숫자가 0보다 작거나, 형식을 지정할 해당 개체의 수보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="3603b-325">The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3603b-326">현재 <see cref="P:System.Diagnostics.Debug.IndentLevel" />을 1씩 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-326">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3603b-327">다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-327">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3603b-328">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-328">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-329"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-329">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3603b-330"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-330">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="3603b-331"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-331">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-332">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-332">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-333">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-333">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-334">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-334">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-335">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-335">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-336">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-336">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-337">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-337">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-338">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-338">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-339">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-339">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-340">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-340">A message to write.</span></span></param>
        <summary><span data-ttu-id="3603b-341"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-341">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-342">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-342">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-343">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-343">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-344">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-344">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-345">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-345">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-346">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-346">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-347">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-347">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-348">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-348">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-349">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-349">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3603b-350"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-350">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-351">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-351">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-352"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-352">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-353">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-353">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-354">사용 된 `category` 그룹에 대 한 매개 변수는 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-354">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-355">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-355">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-356">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-356">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-357">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-357">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-358">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-358">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-359">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-359">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-360">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-360">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-361">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-361">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-362">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-362">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-363">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-363">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-364"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-364">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-365">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-365">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-366">사용 된 `category` 그룹에 대 한 매개 변수는 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-366">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-367">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-367">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-368">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-368">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-369">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-369">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-370">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-370">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-371">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-371">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-372">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-372">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-373">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-373">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-374">조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-374">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-375">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-375">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-376">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-376">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span></span></param>
        <param name="value"><span data-ttu-id="3603b-377"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-377">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="3603b-378">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-378">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-379">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-379">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-380">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-380">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-381">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-381">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-382">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-382">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-383">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 이상에 값 매개 변수를 이름이 출력 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-383">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-384">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-384">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-385">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-385">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="3603b-386">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-386">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-387">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-387">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-388">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-388">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-389">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-389">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span></span> <span data-ttu-id="3603b-390">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-390">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-391">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-391">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-392">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-392">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-393">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-393">Second example:</span></span>  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-394">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-394">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-395">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-395">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-396">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-396">A message to write.</span></span></param>
        <summary><span data-ttu-id="3603b-397">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-397">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-398">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-398">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-399">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-399">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-400">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-400">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-401">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-401">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-402">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-402">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-403">수신기를 추가 하는 방법에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-403">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-404">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-404">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-405">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-405">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-406">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-406">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-407">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-407">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-408">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-408">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span></span> <span data-ttu-id="3603b-409">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-409">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-410">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-410">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-411">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-411">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-412">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-412">Second example:</span></span>  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-413">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-413">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-414">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-414">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span></span></param>
        <param name="value"><span data-ttu-id="3603b-415"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-415">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-416">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-416">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-417">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-417">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-418">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-418">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-419">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-419">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-420">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-420">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-421">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-421">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-422">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-422">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-423">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 출력의 이름을 `myObject` 및 `category` 에 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-423">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-424">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-424">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-425">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 이상에 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-425">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-426">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-426">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-427">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-427">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-428">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-428">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-429">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-429">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span></span> <span data-ttu-id="3603b-430">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-430">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-431">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-431">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-432">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-432">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-433">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-433">Second example:</span></span>  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-434">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-434">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-435">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-435">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-436">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-436">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-437">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-437">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-438">조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-438">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-439">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-439">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-440">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-440">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-441">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-441">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-442">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-442">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-443">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-443">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-444">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 첫 번째 오류 메시지를 출력은 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-444">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-445">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-445">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-446">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 이상에 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-446">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-447">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-447">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-448">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-448">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-449">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-449">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-450">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-450">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span></span> <span data-ttu-id="3603b-451">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-451">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-452">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-452">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-453">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-453">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-454">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-454">Second example:</span></span>  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-455"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-455">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3603b-456"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-456">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="3603b-457"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-457">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-458">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-458">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-459">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-459">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-460">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-460">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-461">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-461">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-462">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-462">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-463">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-463">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-464">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 같은 줄에 개체의 이름을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-464">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="3603b-465">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-465">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-466">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-466">A message to write.</span></span></param>
        <summary><span data-ttu-id="3603b-467"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-467">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-468">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-468">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-469">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-469">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-470">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-470">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-471">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-471">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-472">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-472">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-473">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-473">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-474">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-474">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-475">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-475">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3603b-476"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-476">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-477">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-477">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-478"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-478">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-479">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-479">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-480">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-480">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-481">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-481">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-482">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-482">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-483">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-483">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-484">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-484">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-485">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-485">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-486">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-486">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-487">두 번째 메시지 줄 종결자를 차례로 나옵니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-487">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="3603b-488"><c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 결합된 텍스트를 포함하는 합성 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-488">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span></span></param>
        <param name="args"><span data-ttu-id="3603b-489">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-489">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="3603b-490"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 서식이 지정된 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-490">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-491">이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-491">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span>  
  
 <span data-ttu-id="3603b-492">이 메서드에 대 한 구문에서 키워드는 개체 배열의 단일 값이 될 수 있는지를 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-492">The  keyword in the syntax for this method implies that the object array can be a single value.</span></span> <span data-ttu-id="3603b-493">이에 대 한 예외는 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-493">The exception to this is the <xref:System.String> object.</span></span> <span data-ttu-id="3603b-494">명시적 오버 로드에 우선 하므로 `arg` 단일 문자열의 값은 기본적으로 <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-494">Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> overload.</span></span>  
  
 <span data-ttu-id="3603b-495">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-495">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-496">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-496">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3603b-497">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-497">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-498">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-498">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-499"><see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-499">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-500">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-500">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-501">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-501">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-502">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-502">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-503">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-503">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-504">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-504">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-505">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-505">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-506">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-506">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-507">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지 출력 및 `category` 첫 번째 메시지와 같은 줄에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-507">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="3603b-508">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-508">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3603b-509">조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-509">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-510">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-510">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-511">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-511">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span></span></param>
        <param name="value"><span data-ttu-id="3603b-512"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-512">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="3603b-513">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-513">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-514">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-514">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-515">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-515">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-516">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-516">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-517">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-517">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-518">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-518">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-519">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-519">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-520">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 같은 줄에 개체의 이름을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-520">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="3603b-521">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-521">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-522">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-522">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-523">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-523">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-524">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-524">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span></span> <span data-ttu-id="3603b-525">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-525">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-526">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-526">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-527">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-527">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-528">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-528">Second example:</span></span>  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-529">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-529">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-530">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-530">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-531">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-531">A message to write.</span></span></param>
        <summary><span data-ttu-id="3603b-532">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-532">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-533">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-533">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-534">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-534">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-535">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-535">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-536">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-536">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-537">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-537">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-538">수신기를 추가 하는 방법에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-538">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-539">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-539">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-540">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-540">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-541">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-541">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-542">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-542">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-543">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-543">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span></span> <span data-ttu-id="3603b-544">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-544">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-545">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-545">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-546">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-546">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-547">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-547">Second example:</span></span>  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3603b-548">평가할 조건식입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-548">The conditional expression to evaluate.</span></span> <span data-ttu-id="3603b-549">조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-549">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span></span></param>
        <param name="value"><span data-ttu-id="3603b-550"><see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-550">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-551">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-551">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-552">조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-552">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-553">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-553">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-554">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-554">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-555">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-555">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-556">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-556">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-557">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-557">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-558">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-558">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-559">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-559">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-560">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-560">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="3603b-561">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-561">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-562">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-562">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-563">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-563">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-564">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-564">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span></span> <span data-ttu-id="3603b-565">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-565">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-566">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-566">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-567">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-567">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-568">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-568">Second example:</span></span>  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="3603b-569">메시지를 작성하려면 <see langword="true" />이고, 그러지 않으려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-569"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="message"><span data-ttu-id="3603b-570">쓸 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-570">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="3603b-571">출력을 구성하는 데 사용되는 범주 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-571">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="3603b-572">조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-572">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3603b-573">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-573">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="3603b-574">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-574">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="3603b-575">이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3603b-575">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3603b-576">다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-576">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="3603b-577">이 스위치는 코드 샘플은 외부에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-577">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="3603b-578">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-578">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="3603b-579">수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-579">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="3603b-580">그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지 출력 및 `category` 첫 번째 메시지와 같은 줄에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-580">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="3603b-581">줄 종결자를 차례로 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-581">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="3603b-582">사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문.</span><span class="sxs-lookup"><span data-stu-id="3603b-582">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="3603b-583">다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-583">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="3603b-584">그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-584">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span></span> <span data-ttu-id="3603b-585">두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-585">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="3603b-586">이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3603b-586">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="3603b-587">첫 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-587">First example:</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="3603b-588">두 번째 예의 경우:</span><span class="sxs-lookup"><span data-stu-id="3603b-588">Second example:</span></span>  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>