<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1f2f5cb8de12cc67dfb0178935452c56a2348ef" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061117" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>코드 디버깅에 도움이 되는 메서드 및 속성들을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 사용 하는 경우는 <xref:System.Diagnostics.Debug> 디버깅 정보를 출력에 클래스 및 어설션과 함께 논리를 검사, 코드 만들 수 있습니다 프로그램 더욱 강력한 성능 및 코드 크기 최종 제품의 영향을 주지 않고 합니다.  
  
 이 클래스는 표시 하는 메서드를 제공는 <xref:System.Diagnostics.Debug.Assert%2A> 대화 상자를 생성 하 고 항상 실패 하는 어설션을 내보낼 수 있습니다. 이 클래스는 다음과 같은 형태로 쓰기 메서드를 제공: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> 및 <xref:System.Diagnostics.Debug.WriteLineIf%2A>합니다.  
  
 <xref:System.Diagnostics.BooleanSwitch> 및 <xref:System.Diagnostics.TraceSwitch> 클래스 동적으로 추적 출력을 제어 하는 수단을 제공 합니다. 응용 프로그램을 다시 컴파일하지 않고도 이러한 스위치의 값을 수정할 수 있습니다. 스위치를 설정 하는 구성 파일을 사용 하는 방법은 참조 하십시오.는 <xref:System.Diagnostics.Switch> 클래스 및 [추적 스위치](~/docs/framework/debug-trace-profile/trace-switches.md) 항목입니다.  
  
 추적 출력 대상을 추가 하 여 사용자 지정할 수 있습니다 <xref:System.Diagnostics.TraceListener> 인스턴스 또는 인스턴스를 제거 하는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다. <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다. 기본적으로는 <xref:System.Diagnostics.DefaultTraceListener> 클래스 추적 출력을 내보냅니다.  
  
> [!NOTE]
>  추적 수신기를 추가 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 추적 수신기에서 사용 되는 리소스를 사용할 수 없는 경우 추적을 동안 throw 된 예외를 일으킬 수 있습니다. 조건 및 throw 된 예외 추적 수신기에 좌우 되며이 항목의 열거할 수 없습니다. 전화를 걸 수 유용할 수 있습니다는 <xref:System.Diagnostics.Debug> 메서드 `try` / `catch` 블록 감지 하 고 추적 수신기에서 발생 한 예외를 처리 합니다.  
  
 들여쓰기를 사용 하 여 수준을 수정할 수는 <xref:System.Diagnostics.Debug.Indent%2A> 메서드 또는 <xref:System.Diagnostics.Debug.IndentLevel%2A> 속성입니다. 들여쓰기 간격을 수정 하려면 사용 하 여는 <xref:System.Diagnostics.Debug.IndentSize%2A> 속성입니다. 자동으로 설정 하 여 쓴 후 출력 버퍼를 플러시하지 여부를 지정할 수는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 속성을 `true`합니다.  
  
 설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수 있습니다. 다음 예제와 같이 구성 파일의 형식은 해야 합니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.ConditionalAttribute> 의 메서드에 특성이 적용 되 <xref:System.Diagnostics.Debug>합니다. 지 원하는 컴파일러 <xref:System.Diagnostics.ConditionalAttribute> "디버그"로 된 조건부 컴파일 기호가 정의 되어 있지 않으면 이러한 메서드 호출을 무시 합니다. 확인 하려면 컴파일러의 설명서를 참조 하는지 여부를 <xref:System.Diagnostics.ConditionalAttribute> 사용할 수 및 조건부 컴파일 기호를 정의 하기 위한 구문을 합니다.  
  
> [!NOTE]
> 기본적으로 Visual Studio C# 및 Visual Basic 프로젝트의 디버그 빌드에 대해 "디버그" 조건부 컴파일 기호가 정의 되어 하 고 모두 디버그 및 릴리스 빌드에 대해 "TRACE" 기호가 정의 됩니다. 이 동작을 사용 하지 않도록 설정 하는 방법에 대 한 정보를 Visual Studio 설명서를 참조 합니다. Visual c + +에서 조건부 디버깅 하는 방법에 대 한 정보를 참조 하십시오. [Debug 클래스 (C + + /cli CLI)](/cpp/dotnet/debug-class-cpp-cli)합니다.
  
 C#에서 "디버그" 조건부 컴파일 기호를 정의 하려면 추가 `/d:DEBUG` 명령줄을 사용 하 여 코드를 컴파일할 때 컴파일러 명령줄 옵션 또는 추가 `#define DEBUG` 파일의 맨 위로 이동 합니다. Visual Basic의 추가 `/d:DEBUG=True` 하려면 컴파일러 명령줄 옵션을 선택 하거나 추가 `#Const DEBUG=True` 파일에 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Debug> 프로그램 실행의 시작과 끝을 나타냅니다. 또한이 예제에서는 <xref:System.Diagnostics.Debug.Indent%2A> 및 <xref:System.Diagnostics.Debug.Unindent%2A> 추적 출력을 구분할 수 있습니다.  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>조건을 확인합니다. 조건이 <see langword="false" />이면 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 실패 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</param>
        <summary>조건을 확인합니다. 조건이 <see langword="false" />이면 호출 스택을 보여주는 메시지 상자를 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다. 사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다. 자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.  
  
> [!IMPORTANT]
>  `Assert` 메서드를 사용할 수 없는 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 앱.  
  
 일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다. <xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다. 결과가 `false`, 오류 메시지를 보내는 것은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다. 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
 사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다. 메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다. 클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다. 클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다. 클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 사용자 인터페이스 모드와 비 사용자 인터페이스 모드에서 동일 하므로 모달 대화 상자를 지원 하지 않습니다. 디버깅 모드에서 활성 추적 수신기에 메시지를 씁니다 또는 릴리스 모드에서 메시지가 기록 됩니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다. 이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다. 구성 파일 형식은 다음과 같습니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 다음 예제에서는 배열에 대 한 인덱스를 만듭니다는 인덱스의 값을 설정 하는 활동을 수행 하 고 다음 호출 <xref:System.Diagnostics.Debug.Assert%2A> 인덱스 값이 유효한 지 확인 합니다. 를 사용할 수 없는 경우 <xref:System.Diagnostics.Debug.Assert%2A> 호출 스택을 출력 합니다.  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</param>
        <param name="message">
          <see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</param>
        <summary>조건을 확인합니다. 조건이 <see langword="false" />이면 지정된 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다. 사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다. 자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.  
  
 일반적으로 <xref:System.Diagnostics.Debug.Assert%2A> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다. <xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다. 결과가 `false`, 지정된 된 진단 메시지를 보내는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다. 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
 사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다. 메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다. 클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다. 클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다. 클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다. 이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다. 구성 파일 형식은 다음과 같습니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 다음 예제에서는 검사 여부는 `type` 매개 변수는 유효 합니다. 경우 `type` 은 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 된 메시지를 출력 합니다.  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</param>
        <param name="message">
          <see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</param>
        <param name="detailMessage">
          <see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 자세한 메시지입니다.</param>
        <summary>조건을 확인합니다. 조건이 <see langword="false" />이면 지정된 2개의 메시지를 출력하고 호출 스택을 보여주는 메시지 상자를 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다. 사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다. 자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.  
  
 일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다. <xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다. 결과가 `false`, 지정 된 진단 메시지와 자세한 메시지를 보내는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다. 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
 사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다. 메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다. 클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다. 클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다. 클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다. 이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다. 구성 파일 형식은 다음과 같습니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 다음 예제에서는 검사 여부는 `type` 매개 변수는 유효 합니다. 경우 `type` 은 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 두 메시지를 출력 합니다.  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 지정된 메시지가 전송되지 않고 메시지 상자가 표시되지 않습니다.</param>
        <param name="message">
          <see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션으로 보낼 메시지입니다.</param>
        <param name="detailMessageFormat">
          <see cref="P:System.Diagnostics.Trace.Listeners" /> 컬렉션에 보낼 복합 서식 문자열입니다. 이 메시지에는 <c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 혼합된 텍스트가 포함됩니다.</param>
        <param name="args">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</param>
        <summary>조건을 확인합니다. 조건이 <see langword="false" />이면 두 개의 메시지(단순 및 서식 있는 메시지)를 출력하고 호출 스택을 보여 주는 메시지 상자를 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다. 결과 문자열에 게 보내집니다는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다.  
  
 기본적으로는 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 디버그 빌드에만 사용할 수 있는 방법입니다. 사용 하 여는 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드를 작성 합니다. 자세한 내용은 참조 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.  
  
 일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다. <xref:System.Diagnostics.Debug.Assert%2A> 조건을 확인합니다. 결과가 `false`, <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드는 및 `detailMessageFormat` 문자열 및 `args` 배열 매개 변수로 전달 됩니다. <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 그런 다음 지정된 텍스트 메시지 및 서식 있는 텍스트 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다. 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
 사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호가 있는 호출 스택을 표시 하는 메시지 상자가 표시 됩니다. 메시지 상자에 세 개의 단추가: **중단**, **을 다시 시도**, 및 **무시**합니다. 클릭 하 고 **중단** 단추는 응용 프로그램을 종료 합니다. 클릭 하면 **을 다시 시도** 응용 프로그램에서 디버거를 실행 중인 되지 않았으면 디버거가 열려는 있는 경우 디버거에서 코드를 보냅니다. 클릭 하면 **무시** 코드의 다음 명령으로 계속 진행 됩니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다. 이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다. 구성 파일 형식은 다음과 같습니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>각 쓰기 직후에 <see cref="M:System.Diagnostics.Debug.Flush" />에서 <see cref="P:System.Diagnostics.Debug.Listeners" />를 호출해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          매번 쓴 후에 <see cref="P:System.Diagnostics.Debug.Listeners" />에 대해 <see cref="M:System.Diagnostics.Debug.Flush" /> 호출되면 <see langword="true" />이고, 호출되지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값은 `false`입니다.  
  
 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다. 설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다. 따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다. 이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.  
  
 설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다. 다음 예제와 같이 구성 파일의 형식은 해야 합니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">에 비관리 코드와 작동 합니다. 요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>출력 버퍼를 플러시한 다음 각 <see cref="P:System.Diagnostics.Debug.Listeners" />에 대해 <see langword="Close" /> 메서드를 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 출력 되 면 파일에 같은 <xref:System.Diagnostics.TextWriterTraceListener>합니다.  
  
 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다. 설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다. 따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다. 이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다. `myTextListener` 사용 하 여 한 <xref:System.IO.StreamWriter> 호출 `myOutputWriter` 라는 파일에 쓸 수 `TestFile.txt`합니다. 이 예제에서는 파일, 스트림 및 텍스트 기록기, 파일을 텍스트 한 줄을 씁니다 및 플러시합니다 만들고 닫습니다 출력 합니다.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">에 비관리 코드와 작동 합니다. 요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>오류 메시지를 내보냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">내보낼 메시지입니다.</param>
        <summary>지정된 오류 메시지를 내보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 동작은 하는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램이 실행 하는 사용자 인터페이스 모드에는 메시지 상자에 메시지를 출력는 <xref:System.Diagnostics.TraceListener> 인스턴스에 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 메서드 예외를 처리할 때 메시지 표시를 합니다.  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">내보낼 메시지입니다.</param>
        <param name="detailMessage">내보낼 자세한 메시지입니다.</param>
        <summary>오류 메시지와 자세한 오류 메시지를 내보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 동작은 하는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램이 실행 하는 사용자 인터페이스 모드에는 메시지 상자에 메시지를 출력는 <xref:System.Diagnostics.TraceListener> 인스턴스에 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
> [!NOTE]
>  메시지 상자의 표시의 존재 여부에 따라 달라 집니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 속하지 않는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다. <xref:System.Diagnostics.DefaultTraceListener> 으로 제거할 수 있습니다는 [ &lt;지우기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여는 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 는 메서드<xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> to, 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 메서드 예외를 처리할 때 메시지 표시를 합니다.  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>출력 버퍼를 플러시하고 버퍼링된 데이터를 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션에 쓰도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다. 설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다. 따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다. 이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다. `myTextListener` 사용 하 여 한 <xref:System.IO.FileStream> 호출 `myFileStream` 라는 파일에 쓸 수 `TestFile.txt`합니다. 이 예제에서는 스트림을 만들고, 존재 또는 새 브러시를 만듭니다, 그리고 파일을 텍스트 한 줄에 기록한 다음 플러시하고 하 고 출력을 닫습니다 파일을 엽니다.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="P:System.Diagnostics.Debug.IndentLevel" />이 1씩 증가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 이 예제는 다음과 같은 출력을 생성합니다.  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>들여쓰기 수준을 가져오거나 설정합니다.</summary>
        <value>들여쓰기 수준입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Debug.IndentLevel%2A> 속성 크기의 들여쓰기 횟수를 나타내는 <xref:System.Diagnostics.Debug.IndentSize%2A> 적용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 이 예제는 다음과 같은 출력을 생성합니다.  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>들여쓰기의 공백 수를 가져오거나 설정합니다.</summary>
        <value>들여쓰기의 공백 수입니다. 기본값은 4입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.TextWriterTraceListener> 공백으로이 숫자를 해석 합니다. <xref:System.Diagnostics.EventLogTraceListener> 이 값을 무시 합니다.  
  
 설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 및 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다. 다음 예제와 같이 구성 파일의 형식은 해야 합니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>디버그 출력을 모니터링하는 수신기 컬렉션을 가져옵니다.</summary>
        <value>디버그 출력을 모니터링하는 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 형식의 컬렉션을 나타내는 <see cref="T:System.Diagnostics.TraceListener" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수신기는 디버그 출력에서 형식이 지정 된 출력을 만듭니다. 기본적으로 컬렉션의 인스턴스를 포함 된 <xref:System.Diagnostics.DefaultTraceListener> 클래스입니다. 기본 수신기를 제거 하려면 호출는 <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> 메서드를 전달 하는 것의 인스턴스는 <xref:System.Diagnostics.DefaultTraceListener>합니다. 콘솔 창에 출력을 리디렉션할의 인스턴스를 추가 <xref:System.Diagnostics.ConsoleTraceListener>합니다. 파일이 나 스트림에 출력을 리디렉션할의 인스턴스를 추가 <xref:System.Diagnostics.TextWriterTraceListener>합니다.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TextWriterTraceListener> 콘솔 화면에 출력 하 합니다. 다음 추가를 새 수신기 코드는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">에 비관리 코드와 작동 합니다. 요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자는 캐리지 리턴 뒤에 줄 바꿈 합니다. 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 결합된 텍스트를 포함하는 합성 서식 문자열입니다.</param>
        <param name="args">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 서식이 지정된 문자열을 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다. 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" />이 잘못되었습니다.  
  
 또는  
  
 형식을 지정할 인수를 나타내는 숫자가 0보다 작거나, 형식을 지정할 해당 개체의 수보다 크거나 같은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="P:System.Diagnostics.Debug.IndentLevel" />을 1씩 줄입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 생성 합니다.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 이 예제는 다음과 같은 출력을 생성합니다.  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 사용 된 `category` 그룹에 대 한 매개 변수는 메시지를 출력 합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 사용 된 `category` 그룹에 대 한 매개 변수는 메시지를 출력 합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 값을 씁니다.</param>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 이상에 값 매개 변수를 이름이 출력 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 메시지를 씁니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가 하는 방법에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 값을 씁니다.</param>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 출력의 이름을 `myObject` 및 `category` 에 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 이상에 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 메시지를 씁니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 첫 번째 오류 메시지를 출력은 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 이상에 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 같은 줄에 개체의 이름을 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 두 번째 메시지 줄 종결자를 차례로 나옵니다.  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <c>args</c> 배열의 개체에 해당하는 0개 이상의 서식 항목과 결합된 텍스트를 포함하는 합성 서식 문자열입니다.</param>
        <param name="args">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 서식이 지정된 메시지를 쓰고 뒤에 줄 종결자를 붙입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용 된 개체의 값을 텍스트 표현으로 변환 표현을 문자열로에 포함 하는.NET Framework의 합니다.  
  
 이 메서드에 대 한 구문에서 키워드는 개체 배열의 단일 값이 될 수 있는지를 의미 합니다. 이에 대 한 예외는 <xref:System.String> 개체입니다. 명시적 오버 로드에 우선 하므로 `arg` 단일 문자열의 값은 기본적으로 <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> 오버 로드 합니다.  
  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>
          <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지 출력 및 `category` 첫 번째 메시지와 같은 줄에 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 디버그에 대한 정보를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 값을 씁니다.</param>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 같은 줄에 개체의 이름을 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 메시지를 씁니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가 하는 방법에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">평가할 조건식입니다. 조건이 <see langword="true" />이면 컬렉션의 추적 수신기에 범주 이름과 값을 씁니다.</param>
        <param name="value">
          <see cref="P:System.Diagnostics.Debug.Listeners" />에 이름을 보낸 개체입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>조건이 <see langword="true" />인 경우 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 개체의 <see cref="M:System.Object.ToString" /> 메서드 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`,이 예제에서는 첫 번째 메시지와 같은 줄에 두 번째 오류 메시지를 출력 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          메시지를 작성하려면 <see langword="true" />이고, 그러지 않으려면 <see langword="false" />입니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <param name="category">출력을 구성하는 데 사용되는 범주 이름입니다.</param>
        <summary>조건이 <see langword="true" />이면 <see cref="P:System.Diagnostics.Debug.Listeners" /> 컬렉션의 추적 수신기에 범주 이름 및 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.  
  
 `category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.  
  
 이 메서드를 호출는 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다. 이 스위치는 코드 샘플은 외부에서 설정 됩니다.  
  
 스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 첫 번째 오류 메시지를 출력 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다. 수신기를 추가에 대 한 내용은 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 참조는 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.  
  
 그런 다음은 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지 출력 및 `category` 첫 번째 메시지와 같은 줄에 합니다. 줄 종결자를 차례로 두 번째 메시지를 따릅니다.  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용 하 여 응용 프로그램을 계측의 성능 저하를 최소화할 수 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문. 다음 두 코드 예에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예는 훨씬 더 빠르게 추적이 꺼져 때문에 경우 <c>기능</c> 계산 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예에서는 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에, <c>기능</c> 은 <see langword="false" /> 추적 출력이 생성 되 고 있습니다. 이 인해 불필요 한 복잡 한 코드가 실행 될 수 있습니다.  
  
 첫 번째 예의 경우:  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 두 번째 예의 경우:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>