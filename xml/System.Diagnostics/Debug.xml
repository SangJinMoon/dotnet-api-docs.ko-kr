<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9352beb210f7371d9906ab17c6c16c3933c24891" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37665171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <TypeSignature Language="F#" Value="type Debug = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1add0-101">Provides a set of methods and properties that help debug your code.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1add0-101">Provides a set of methods and properties that help debug your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-102">메서드를 사용 하는 경우는 <xref:System.Diagnostics.Debug> 디버깅 정보를 인쇄 하려면 클래스 어설션 사용 하 여 논리를 확인 하 고 할 수 있습니다 코드 보다 강력 하면 최종 제품의 성능 및 코드 크기를 영향을 주지 않고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-102">If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</span></span>  
  
 <span data-ttu-id="1add0-103">표시할 메서드를 제공 하는이 클래스는 <xref:System.Diagnostics.Debug.Assert%2A> 대화 상자 및에 항상 실패 하는 어설션을 내보내려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-103">This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail.</span></span> <span data-ttu-id="1add0-104">이 클래스는 다음과 같은 형태로 write 메서드를 제공 합니다. <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>를 <xref:System.Diagnostics.Debug.WriteIf%2A> 및 <xref:System.Diagnostics.Debug.WriteLineIf%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-104">This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="1add0-105">합니다 <xref:System.Diagnostics.BooleanSwitch> 고 <xref:System.Diagnostics.TraceSwitch> 클래스는 추적 출력을 동적으로 제어 하는 수단을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-105">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="1add0-106">응용 프로그램을 다시 컴파일하지 않고도 이러한 스위치의 값을 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-106">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="1add0-107">구성 파일을 사용 하 여 스위치를 설정 하는 내용은 합니다 <xref:System.Diagnostics.Switch> 클래스 및 [추적 스위치](~/docs/framework/debug-trace-profile/trace-switches.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-107">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.</span></span>  
  
 <span data-ttu-id="1add0-108">추적 출력의 대상을 추가 하 여 사용자 지정할 수 있습니다 <xref:System.Diagnostics.TraceListener> 인스턴스를 하거나 인스턴스를 제거 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-108">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="1add0-109">합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-109">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="1add0-110">기본적으로 <xref:System.Diagnostics.DefaultTraceListener> 클래스는 추적 출력을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-110">By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-111">추적 수신기를 추가 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 추적 수신기에서 사용 하는 리소스를 사용할 수 없는 경우 추적 하는 동안 throw 된 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-111">Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="1add0-112">조건 및 throw 된 예외 추적 수신기에 따라 다르며이 항목의 열거할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-112">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="1add0-113">전화를 걸 수 유용할 수 있습니다는 <xref:System.Diagnostics.Debug> 의 메서드 `try` / `catch` 요소를 감지 하 여 추적 수신기에서 예외를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-113">It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
 <span data-ttu-id="1add0-114">다음을 사용 하 여 들여쓰기 수준을 수정할 수 있습니다 합니다 <xref:System.Diagnostics.Debug.Indent%2A> 메서드 또는 <xref:System.Diagnostics.Debug.IndentLevel%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-114">You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property.</span></span> <span data-ttu-id="1add0-115">들여쓰기 간격을 수정 하려면 사용 된 <xref:System.Diagnostics.Debug.IndentSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-115">To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property.</span></span> <span data-ttu-id="1add0-116">자동으로 설정 하 여 각 쓰기 직후 출력 버퍼를 플러시하려면를 지정할 수 있습니다 합니다 <xref:System.Diagnostics.Debug.AutoFlush%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-116">You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="1add0-117">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 하 고 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-117">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="1add0-118">다음 예제에서와 같이 구성 파일 형식을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-118">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="1add0-119">합니다 <xref:System.Diagnostics.ConditionalAttribute> 특성의 메서드에 적용 됩니다 <xref:System.Diagnostics.Debug>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-119">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>.</span></span> <span data-ttu-id="1add0-120">지 원하는 컴파일러 <xref:System.Diagnostics.ConditionalAttribute> 조건부 컴파일 기호로 "DEBUG"를 정의 하지 않으면 이러한 메서드에 대 한 호출을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-120">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="1add0-121">확인 하는 컴파일러의 설명서를 참조 하는지 여부를 <xref:System.Diagnostics.ConditionalAttribute> 지원 됩니다 및 조건부 컴파일 기호를 정의 하기 위한 구문.</span><span class="sxs-lookup"><span data-stu-id="1add0-121">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="1add0-122">기본적으로 Visual Studio C# 및 Visual Basic 프로젝트에서 "디버그" 조건부 컴파일 기호는 디버그 빌드에 대 한 정의 및 "TRACE" 기호를 모두 디버그 및 릴리스 빌드에 대해 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-122">In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="1add0-123">이 동작을 사용 하지 않도록 설정 하는 방법에 대 한 내용은 Visual Studio 설명서를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="1add0-123">For information about how to disable this behavior, see the Visual Studio documentation.</span></span> <span data-ttu-id="1add0-124">Visual c + +를 사용한 조건부 디버깅 하는 방법에 대 한 내용은 [Debug 클래스 (C + + /cli CLI)](/cpp/dotnet/debug-class-cpp-cli)합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-124">For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](/cpp/dotnet/debug-class-cpp-cli).</span></span>
  
 <span data-ttu-id="1add0-125">C#에서 "디버그" 조건부 컴파일 기호를 정의 하려면 다음을 추가 합니다 `/d:DEBUG` 명령줄을 사용 하 여 코드를 컴파일할 때 컴파일러 명령줄 옵션 또는 추가 `#define DEBUG` 파일의 맨 위로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-125">To define the "DEBUG" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file.</span></span> <span data-ttu-id="1add0-126">Visual basic의 경우 추가 합니다 `/d:DEBUG=True` 컴파일러 명령줄 옵션 또는 추가 `#Const DEBUG=True` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-126">In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-127">다음 예제에서는 <xref:System.Diagnostics.Debug> 프로그램 실행의 시작과 끝을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-127">The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution.</span></span> <span data-ttu-id="1add0-128">또한이 예제에서는 <xref:System.Diagnostics.Debug.Indent%2A> 고 <xref:System.Diagnostics.Debug.Unindent%2A> 추적 출력을 구별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-128">The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.</span></span>  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1add0-129">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1add0-129">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberSignature Language="F#" Value="static member Assert : bool -&gt; unit" Usage="System.Diagnostics.Debug.Assert condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-131">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-131">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-134">기본적으로 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 메서드 디버그 빌드에서만에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-134">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="1add0-135">사용 된 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드는 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-135">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="1add0-136">자세한 내용은 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-136">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1add0-137">합니다 `Assert` 메서드를 사용할 수 없는 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 앱.</span><span class="sxs-lookup"><span data-stu-id="1add0-137">The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.</span></span>  
  
 <span data-ttu-id="1add0-138">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-138">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="1add0-139"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-139"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="1add0-140">결과가 `false`을 오류 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-140">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="1add0-141">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-141">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="1add0-142">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호를 사용 하 여 호출 스택을 보여 주는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-142">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="1add0-143">메시지 상자에는 세 가지 단추가 포함 되어 있습니다.: **중단**, **재시도**, 및 **무시**.</span><span class="sxs-lookup"><span data-stu-id="1add0-143">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="1add0-144">클릭 하 여 **중단** 단추 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-144">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="1add0-145">클릭 **다시 시도** 응용 프로그램에서 디버거를 실행 되 고 있지 않으면 디버거를 열려면 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-145">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="1add0-146">클릭 **무시** 코드에서 다음 명령을 사용 하 여 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-146">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]<span data-ttu-id="1add0-147"> 앱은 사용자 인터페이스 모드 및 사용자 인터페이스가 아닌 모드에서 동일 하므로 모달 대화 상자를 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-147"> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode.</span></span> <span data-ttu-id="1add0-148">디버깅 모드에서 활성 추적 수신기에 메시지를 씁니다 또는 릴리스 모드에서 메시지가 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-148">The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-149">메시지 상자의 표시의 유무에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-149">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-150">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-150">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-151"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-151">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-152">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-152">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="1add0-153">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-153">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1add0-154">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-154">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="1add0-155">다음 예제에서는 배열에 대 한 인덱스를 만듭니다 인덱스의 값을 설정 하려면 몇 가지 작업을 수행 하 고 호출 <xref:System.Diagnostics.Debug.Assert%2A> 인덱스 값이 유효한 지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-155">The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid.</span></span> <span data-ttu-id="1add0-156">유효한 경우 <xref:System.Diagnostics.Debug.Assert%2A> 호출 스택을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-156">If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-157">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-157">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-161">기본적으로 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 메서드 디버그 빌드에서만에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-161">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="1add0-162">사용 된 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드는 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-162">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="1add0-163">자세한 내용은 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-163">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="1add0-164">일반적으로 <xref:System.Diagnostics.Debug.Assert%2A> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-164">Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="1add0-165"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-165"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="1add0-166">결과가 `false`에 지정된 된 진단 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-166">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="1add0-167">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-167">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="1add0-168">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호를 사용 하 여 호출 스택을 보여 주는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-168">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="1add0-169">메시지 상자에는 세 가지 단추가 포함 되어 있습니다.: **중단**, **재시도**, 및 **무시**.</span><span class="sxs-lookup"><span data-stu-id="1add0-169">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="1add0-170">클릭 하 여 **중단** 단추 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-170">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="1add0-171">클릭 **다시 시도** 응용 프로그램에서 디버거를 실행 되 고 있지 않으면 디버거를 열려면 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-171">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="1add0-172">클릭 **무시** 코드에서 다음 명령을 사용 하 여 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-172">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-173">메시지 상자의 표시의 유무에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-173">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-174">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-174">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-175"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-175">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-176">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-176">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="1add0-177">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-177">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1add0-178">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-178">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="1add0-179">다음 예제에서는 검사 하는지 여부를 `type` 매개 변수는 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-179">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="1add0-180">하는 경우 `type` 됩니다 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-180">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-181">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-181">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="1add0-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-186">기본적으로 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 메서드 디버그 빌드에서만에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-186">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="1add0-187">사용 된 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드는 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-187">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="1add0-188">자세한 내용은 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-188">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="1add0-189">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-189">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="1add0-190"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-190"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="1add0-191">결과가 `false`에 지정 된 진단 메시지와 자세한 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-191">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="1add0-192">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-192">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="1add0-193">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호를 사용 하 여 호출 스택을 보여 주는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-193">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="1add0-194">메시지 상자에는 세 가지 단추가 포함 되어 있습니다.: **중단**, **재시도**, 및 **무시**.</span><span class="sxs-lookup"><span data-stu-id="1add0-194">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="1add0-195">클릭 하 여 **중단** 단추 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-195">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="1add0-196">클릭 **다시 시도** 응용 프로그램에서 디버거를 실행 되 고 있지 않으면 디버거를 열려면 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-196">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="1add0-197">클릭 **무시** 코드에서 다음 명령을 사용 하 여 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-197">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-198">메시지 상자의 표시의 유무에 따라 달라 집니다는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-198">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-199">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-199">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-200"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-200">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-201">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-201">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="1add0-202">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-202">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1add0-203">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-203">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="1add0-204">다음 예제에서는 검사 하는지 여부를 `type` 매개 변수는 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-204">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="1add0-205">하는 경우 `type` 됩니다 `null`, <xref:System.Diagnostics.Trace.Assert%2A> 두 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-205">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.</span></span>  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessageFormat, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-206">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-206">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessageFormat">
          <span data-ttu-id="1add0-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
          <span data-ttu-id="1add0-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1add0-211">An object array that contains zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-211">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-213">이 메서드는는.NET framework 값 개체의 텍스트 표현으로 변환 하 고 문자열에서 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-213">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="1add0-214">결과 문자열은 전송 된 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-214">The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="1add0-215">기본적으로 <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> 메서드 디버그 빌드에서만에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-215">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="1add0-216">사용 된 <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> 릴리스에서 어설션을 수행 하려는 경우 메서드는 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-216">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="1add0-217">자세한 내용은 [관리 코드에 어설션](/visualstudio/debugger/assertions-in-managed-code)합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-217">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="1add0-218">일반적으로 <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드는 프로그램을 개발 하는 동안 논리 오류를 식별 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-218">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="1add0-219"><xref:System.Diagnostics.Debug.Assert%2A> 조건을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-219"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="1add0-220">결과가 `false`는 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드는 하며 `detailMessageFormat` 문자열 및 `args` 배열 매개 변수로 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-220">If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters.</span></span> <span data-ttu-id="1add0-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 그런 다음 지정 된 문자 메시지 및 서식 있는 텍스트 메시지를 보냅니다는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="1add0-222">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-222">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="1add0-223">사용자 인터페이스 모드로 실행 되는 응용 프로그램 파일 및 줄 번호를 사용 하 여 호출 스택을 보여 주는 메시지 상자가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-223">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="1add0-224">메시지 상자에는 세 가지 단추가 포함 되어 있습니다.: **중단**, **재시도**, 및 **무시**.</span><span class="sxs-lookup"><span data-stu-id="1add0-224">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="1add0-225">클릭 하 여 **중단** 단추 응용 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-225">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="1add0-226">클릭 **다시 시도** 응용 프로그램에서 디버거를 실행 되 고 있지 않으면 디버거를 열려면 있는 경우 디버거에서 코드를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-226">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="1add0-227">클릭 **무시** 코드에서 다음 명령을 사용 하 여 계속 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-227">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-228">메시지 상자의 표시의 존재에 따라 다릅니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-228">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-229">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-229">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-230"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-230">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-231">동작을 변경할 수는 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램의 이름에 해당 하는 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-231">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="1add0-232">이 파일에서 사용 하도록 설정 하 고 어설션 메시지 상자를 사용 하지 않도록 설정 하거나 설정할 수 있습니다는 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-232">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1add0-233">구성 파일 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-233">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="System.Diagnostics.Debug.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1add0-235">매번 쓴 후에 <see cref="P:System.Diagnostics.Debug.Listeners" />에 대해 <see cref="M:System.Diagnostics.Debug.Flush" /> 호출되면 <see langword="true" />이고, 호출되지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-235">
              <see langword="true" /> if <see cref="M:System.Diagnostics.Debug.Flush" /> is called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-236">기본값은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-236">The default is `false`.</span></span>  
  
 <span data-ttu-id="1add0-237">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-237">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="1add0-238">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 에 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태는 플러시되지 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-238">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="1add0-239">이 수는 다음 문자 블록을 올바르게 인코딩할 수 있도록 상태로 (부분 자)를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-239">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="1add0-240">이 시나리오는 UTF8 및 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩된만 수 있는 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-240">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="1add0-241">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 하 고 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-241">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="1add0-242">다음 예제에서와 같이 구성 파일 형식을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-242">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="1add0-243">에 관리 되지 않는 코드를 사용 하 여 작동 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-243">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="1add0-244">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-244">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberSignature Language="F#" Value="static member Close : unit -&gt; unit" Usage="System.Diagnostics.Debug.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1add0-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-246">이 메서드를 사용 하 여 출력 되 면 파일에 같은 <xref:System.Diagnostics.TextWriterTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-246">Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-247">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-247">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="1add0-248">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 에 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태는 플러시되지 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-248">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="1add0-249">이 수는 다음 문자 블록을 올바르게 인코딩할 수 있도록 상태로 (부분 자)를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-249">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="1add0-250">이 시나리오는 UTF8 및 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩된만 수 있는 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-250">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-251">다음 예제는 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-251">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="1add0-252">`myTextListener` 사용 하는 <xref:System.IO.StreamWriter> 호출 `myOutputWriter` 라는 파일에 쓸 `TestFile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-252">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="1add0-253">예제 파일, 스트림 및 텍스트 기록기를 만들고, 한 줄의 텍스트 파일에 씁니다 및 다음 플러시하고 닫습니다 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-253">The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="1add0-254">에 관리 되지 않는 코드를 사용 하 여 작동 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-254">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="1add0-255">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-255">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-256">Emits an error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-256">Emits an error message.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Fail : string -&gt; unit" Usage="System.Diagnostics.Debug.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-257">A message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-257">A message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-258">Emits the specified error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-258">Emits the specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-259">기본 동작을 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램 및 사용자 인터페이스 모드로 실행 중일 때 메시지 상자에 메시지를 출력 합니다 <xref:System.Diagnostics.TraceListener> 인스턴스는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="1add0-259">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-260">메시지 상자의 표시의 존재에 따라 다릅니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-260">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-261">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-261">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-262"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-262">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-263">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-263">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-264">다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 예외 처리 하는 동안 메시지를 인쇄 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-264">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1add0-265">사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-265">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Fail : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-266">A message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-266">A message to emit.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="1add0-267">A detailed message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-267">A detailed message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-268">Emits an error message and a detailed error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-268">Emits an error message and a detailed error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-269">기본 동작을 <xref:System.Diagnostics.DefaultTraceListener> 응용 프로그램 및 사용자 인터페이스 모드로 실행 중일 때 메시지 상자에 메시지를 출력 합니다 <xref:System.Diagnostics.TraceListener> 인스턴스는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션.</span><span class="sxs-lookup"><span data-stu-id="1add0-269">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-270">메시지 상자의 표시의 존재에 따라 다릅니다.는 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-270">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-271">경우는 <xref:System.Diagnostics.DefaultTraceListener> 에 없는 경우는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션, 메시지 상자가 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-271">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="1add0-272"><xref:System.Diagnostics.DefaultTraceListener> 제거할 수 있습니다 합니다 [ &lt;의 선택을 취소&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)의 [ &lt;제거&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), 또는 호출 하 여를 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> 메서드를 <xref:System.Diagnostics.Trace.Listeners%2A> 속성 (`System.Diagnostics.Trace.Listeners.Clear()`).</span><span class="sxs-lookup"><span data-stu-id="1add0-272">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="1add0-273">추가 하 여이 동작을 사용자 지정할 수 있습니다는 <xref:System.Diagnostics.TraceListener> 을 제거 또는 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-273">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-274">다음 예제에서는 <xref:System.Diagnostics.Debug.Fail%2A> 예외 처리 하는 동안 메시지를 인쇄 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-274">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1add0-275">사용할 수도 있습니다는 <xref:System.Diagnostics.Debug.Fail%2A> switch 문에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-275">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Diagnostics.Debug.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1add0-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-277">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.Diagnostics.Debug.Flush%2A> 또는 <xref:System.Diagnostics.Debug.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-277">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="1add0-278">설정 <xref:System.Diagnostics.Debug.AutoFlush%2A> 에 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태는 플러시되지 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-278">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="1add0-279">이 수는 다음 문자 블록을 올바르게 인코딩할 수 있도록 상태로 (부분 자)를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-279">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="1add0-280">이 시나리오는 UTF8 및 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩된만 수 있는 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-280">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-281">다음 예제는 <xref:System.Diagnostics.TextWriterTraceListener> 라는 `myTextListener`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-281">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="1add0-282">`myTextListener` 사용 하는 <xref:System.IO.FileStream> 호출 `myFileStream` 라는 파일에 쓸 `TestFile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-282">`myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="1add0-283">예제에서는 스트림을 만들고, 존재 또는 새로 만듭니다, 그리고 한 줄의 텍스트 파일에 기록 하 고 플러시하고 닫습니다 출력 하는 경우 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-283">The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberSignature Language="F#" Value="static member Indent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Indent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1add0-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1add0-285">다음 예제는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-285">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1add0-286">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-286">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentLevel : int with get, set" Usage="System.Diagnostics.Debug.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-287">Gets or sets the indent level.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-287">Gets or sets the indent level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1add0-288">들여쓰기 수준입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-288">The indent level.</span>
          </span>
          <span data-ttu-id="1add0-289">기본값은 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-289">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-290"><xref:System.Diagnostics.Debug.IndentLevel%2A> 속성이 나타내는 횟수 크기의 들여쓰기 <xref:System.Diagnostics.Debug.IndentSize%2A> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-290">The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-291">다음 예제는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-291">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1add0-292">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-292">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentSize : int with get, set" Usage="System.Diagnostics.Debug.IndentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-293">Gets or sets the number of spaces in an indent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-293">Gets or sets the number of spaces in an indent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1add0-294">들여쓰기의 공백 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-294">The number of spaces in an indent.</span>
          </span>
          <span data-ttu-id="1add0-295">기본값은 4입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-295">The default is four.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-296"><xref:System.Diagnostics.TextWriterTraceListener> 공간으로이 번호를 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-296">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="1add0-297"><xref:System.Diagnostics.EventLogTraceListener> 이 값을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-297">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="1add0-298">설정 하는 <xref:System.Diagnostics.Debug.AutoFlush%2A> 하 고 <xref:System.Diagnostics.Debug.IndentSize%2A> 에 대 한 <xref:System.Diagnostics.Debug>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-298">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="1add0-299">다음 예제에서와 같이 구성 파일 형식을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-299">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.Debug.Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-300">Gets the collection of listeners that is monitoring the debug output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-300">Gets the collection of listeners that is monitoring the debug output.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1add0-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> 형식의 컬렉션을 나타내는 <see cref="T:System.Diagnostics.TraceListener" /> 디버그 출력을 모니터링 하는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> representing a collection of type <see cref="T:System.Diagnostics.TraceListener" /> that monitors the debug output.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-302">수신기는 디버그 출력에서 형식이 지정 된 출력을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-302">The listeners produce formatted output from the debug output.</span></span> <span data-ttu-id="1add0-303">기본적으로 컬렉션의 인스턴스를 포함 합니다 <xref:System.Diagnostics.DefaultTraceListener> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-303">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="1add0-304">기본 수신기를 제거 하려면 호출을 <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> 메서드를 인스턴스에 전달를 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-304">To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="1add0-305">콘솔 창에 출력을 리디렉션할 인스턴스를 추가 합니다 <xref:System.Diagnostics.ConsoleTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-305">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span> <span data-ttu-id="1add0-306">파일이 나 스트림에 출력을 리디렉션할 인스턴스를 추가 합니다 <xref:System.Diagnostics.TextWriterTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-306">To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1add0-307">합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션 모두에 의해 공유 되는 <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스; 둘 다에 수신기를 추가 하는 클래스를 추적 수신기를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-307">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-308">다음 예제에서는 <xref:System.Diagnostics.TextWriterTraceListener> 는 콘솔 화면에 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-308">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="1add0-309">코드에 추가한 새 수신기는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-309">The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="1add0-310">에 관리 되지 않는 코드를 사용 하 여 작동 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-310">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="1add0-311">요청 값 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-311">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Print : string -&gt; unit" Usage="System.Diagnostics.Debug.Print message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-313">The message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-313">The message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-315">기본 줄 종결자는 캐리지 리턴 뒤에 줄 바꿈 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-315">The default line terminator is a carriage return followed by a line feed.</span></span> <span data-ttu-id="1add0-316">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-316">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Print : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Print (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="1add0-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1add0-318">An object array containing zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-318">An object array containing zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-320">이 메서드는는.NET framework 값 개체의 텍스트 표현으로 변환 하 고 문자열에서 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-320">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="1add0-321">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-321">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1add0-322">
            <paramref name="format" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-322">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="1add0-323">
            <paramref name="format" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-323">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="1add0-324">-or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-324">-or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberSignature Language="F#" Value="static member Unindent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Unindent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1add0-325">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-325">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1add0-326">다음 예제는 들여쓰기 수준을 설정 하 고 디버깅 메시지를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-326">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="1add0-327">이 예제는 다음과 같은 출력을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-327">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-328">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-328">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Diagnostics.Debug.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="1add0-329">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-329">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-330">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-330">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-331">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-331">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-332">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-332">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-333">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-333">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-334">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-334">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-335">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-335">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-336">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-336">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-337">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-337">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-338">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-338">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Diagnostics.Debug.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-339">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-339">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-340">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-340">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-341">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-341">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-342">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-342">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-343">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-343">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-344">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-344">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-345">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-345">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-346">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-346">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-347">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-347">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-348">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-348">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="1add0-349">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-349">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-350">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-350">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-351">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-351">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-352">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-352">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-353">사용 된 `category` 매개 변수 그룹에 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-353">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-354">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-354">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-355">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-355">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-356">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-356">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-357">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-357">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-358">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-358">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-359">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-359">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-360">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-360">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-361">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-361">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-362">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-362">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-363">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-363">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-364">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-364">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-365">사용 된 `category` 매개 변수 그룹에 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-365">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-366">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-366">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-367">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-367">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-368">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-368">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-369">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-369">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-370">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-370">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-371">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-371">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-372">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-372">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-373">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-373">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-374">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-374">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-375">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-375">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1add0-376">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-376">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-377">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-377">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-378">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-378">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-379">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-379">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-380">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-380">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-381">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-381">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-382">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 이상 예제 출력 값 매개 변수의 이름 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-382">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-383">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-383">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-384">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 첫 번째 메시지와 동일한 줄에서 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-384">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="1add0-385">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-385">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-386">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.Write ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-386">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-387">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-387">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-388">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-388">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-389">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-389">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-390">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-390">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-391">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-391">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-392">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-392">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-393">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-393">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-394">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-394">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-395">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-395">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-396">수신기를 추가 하는 것에 대 한 자세한를 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-396">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-397">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-397">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-398">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-398">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-399">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.Write ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-399">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-400">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-400">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-401">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-401">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1add0-402">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-402">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-403">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-403">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-404">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-404">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-405">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-405">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-406">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-406">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-407">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-407">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-408">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-408">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-409">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-409">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-410">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 예제 출력의 이름을 합니다 `myObject` 및 `category` 에 <xref:System.Diagnostics.Debug.Listeners%2A>.</span><span class="sxs-lookup"><span data-stu-id="1add0-410">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-411">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-411">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-412">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 예제에서 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 하는 이상 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-412">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-413">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-413">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-414">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.Write ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-414">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-415">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-415">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-416">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-416">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-417">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-417">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-418">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-418">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-419">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-419">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-420">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-420">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-421">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-421">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-422">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-422">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-423">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-423">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-424">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-424">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-425">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Verbose`, 첫 번째 오류 메시지를 출력 하는 예제는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-425">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-426">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-426">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-427">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Error` 예제에서 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 하는 이상 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-427">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-428">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-428">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-429">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.Write(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.Write ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-429">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-430">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-430">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="1add0-431">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-431">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-432">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-432">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-433">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-433">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-434">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-434">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-435">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-435">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-436">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-436">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-437">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-437">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-438">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-438">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-439">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 동일한 줄에 있는 개체의 이름을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-439">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="1add0-440">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-440">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-441">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-441">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-442">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-442">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-443">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-443">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-444">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-444">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-445">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-445">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-446">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-446">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-447">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-447">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-448">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-448">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-449">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-449">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-450">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-450">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="1add0-451">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-451">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-452">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-452">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-453">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-453">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-454">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-454">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-455">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-455">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-456">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-456">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-457">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-457">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-458">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-458">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-459">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-459">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-460">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-460">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-461">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-461">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-462">두 번째 메시지는 줄 종결자입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-462">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="1add0-463">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-463">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1add0-464">An object array that contains zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-464">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-465">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-465">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-466">이 메서드는는.NET framework 값 개체의 텍스트 표현으로 변환 하 고 문자열에서 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-466">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span>  
  
 <span data-ttu-id="1add0-467">이 메서드에 대 한 구문에서 키워드는 개체 배열을 단일 값 수를 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-467">The  keyword in the syntax for this method implies that the object array can be a single value.</span></span> <span data-ttu-id="1add0-468">이 예외는 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-468">The exception to this is the <xref:System.String> object.</span></span> <span data-ttu-id="1add0-469">명시적 오버 로드 보다 우선적으로 적용 하므로 `arg` 단일 문자열 값은 기본적으로 <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-469">Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> overload.</span></span>  
  
 <span data-ttu-id="1add0-470">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-470">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-471">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-471">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="1add0-472">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-472">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-473">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-473">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-474">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-474">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-475">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-475">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-476">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-476">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-477">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-477">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-478">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-478">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-479">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-479">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-480">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-480">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-481">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-481">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-482">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지를 출력 하는 예제 및 `category` 첫 번째 메시지와 동일한 줄에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-482">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="1add0-483">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-483">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1add0-484">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-484">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-485">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-485">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-486">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-486">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1add0-487">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-487">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-488">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-488">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-489">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-489">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-490">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-490">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-491">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-491">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-492">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-492">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-493">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-493">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-494">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-494">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-495">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 첫 번째 메시지와 동일한 줄에 있는 개체의 이름을 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-495">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="1add0-496">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-496">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-497">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.WriteLine ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteLineIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-497">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-498">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-498">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-499">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-499">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-500">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-500">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-501">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-501">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-502">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-502">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-503">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-503">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-504">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-504">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-505">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-505">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-506">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-506">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-507">수신기를 추가 하는 것에 대 한 자세한를 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-507">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-508">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-508">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-509">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-509">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-510">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.WriteLine ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteLineIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-510">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-511">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-511">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="1add0-512">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-512">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1add0-513">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-513">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-514">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-514">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-515">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-515">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-516">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-516">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-517">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-517">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-518">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-518">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-519">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-519">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-520">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-520">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-521">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-521">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-522">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-522">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-523">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 되어 `Verbose`, 예제에서는 첫 번째 메시지와 동일한 줄에 두 번째 오류 메시지를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-523">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="1add0-524">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-524">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-525">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.WriteLine ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteLineIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-525">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="1add0-526">
            <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-526">
              <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="1add0-527">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-527">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="1add0-528">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-528">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1add0-529">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-529">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1add0-530">기본적으로 출력 인스턴스에 기록 <xref:System.Diagnostics.DefaultTraceListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-530">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="1add0-531">`category` 매개 변수를 사용 하 여 출력 메시지를 그룹화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-531">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="1add0-532">이 메서드를 호출 합니다 <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> 추적 수신기의 메서드.</span><span class="sxs-lookup"><span data-stu-id="1add0-532">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1add0-533">다음 예제는 <xref:System.Diagnostics.TraceSwitch> 라는 `generalSwitch`합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-533">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="1add0-534">이 스위치는 외부 코드 샘플에서 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-534">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="1add0-535">스위치로 설정 된 경우는 <xref:System.Diagnostics.TraceLevel> `Error` 예제에서 첫 번째 오류 메시지를 출력 하는 이상 또는 <xref:System.Diagnostics.Debug.Listeners%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-535">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="1add0-536">수신기를 추가 하는 방법은 합니다 <xref:System.Diagnostics.Debug.Listeners%2A> 컬렉션에 참조를 <xref:System.Diagnostics.TraceListenerCollection> 클래스.</span><span class="sxs-lookup"><span data-stu-id="1add0-536">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="1add0-537">그런 다음 경우는 <xref:System.Diagnostics.TraceLevel> 로 설정 된 `Verbose`, 두 번째 오류 메시지를 출력 하는 예제 및 `category` 첫 번째 메시지와 동일한 줄에 합니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-537">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="1add0-538">줄 종결자가 오는 두 번째 메시지를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="1add0-538">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1add0-539">
            <para>사용 하 여 응용 프로그램을 계측 하는 성능 저하를 최소화할 수 있습니다 <see langword="If...Then" /> 문을 사용 하는 대신 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> 문입니다. 다음 두 코드 예제에서는 동일한 디버깅 메시지를 보냅니다. 그러나 첫 번째 예제에서는 훨씬 속도가 빨라집니다 추적 해제 되 면 경우 <c>기능</c> 로 <see langword="false" />를 호출 하지 않으면 <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />합니다. 두 번째 예제를 항상 호출 <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />경우에 <c>기능</c> 는 <see langword="false" /> 추적 출력이 생성 됩니다. 이 훨씬 더 복잡 한 코드를 불필요 하 게 실행 될 수 있습니다.  첫 번째 예: ' ' csharp if(mySwitch.TraceError) Debug.WriteLine ("aNumber =" + aNumber + "of range"); ' ' 두 번째 예: ' ' csharp Debug.WriteLineIf (기능, "aNumber =" + aNumber + "of range"); \`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1add0-539">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>