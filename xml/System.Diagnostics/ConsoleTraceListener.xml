<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d972b73279362d66526d9748a3d452a994965d63" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36342853" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>추적 또는 디버깅 출력을 표준 출력 또는 표준 오류 스트림으로 보냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Diagnostics.ConsoleTraceListener> 추적 및 디버깅 메시지를 콘솔에 작성 하는 클래스입니다. 초기화할 수 있습니다는 <xref:System.Diagnostics.ConsoleTraceListener> 추적 메시지를 작성 하는 개체는 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림 합니다.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는`try` / `catch` 블록입니다. 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 추적 및 디버깅 출력을 사용 하도록 설정 된 <xref:System.Diagnostics.ConsoleTraceListener> 메시지가 기록 됩니다 지정 된 <xref:System.Console?displayProperty=nameWithType> 스트림을 사용 하 여 메시지 작성 하는 방법은 비슷합니다는 <xref:System.Console.Write%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드. 콘솔 응용 프로그램에서의 <xref:System.Console?displayProperty=nameWithType> 출력 및 오류 스트림은 기존 콘솔 창에 메시지를 작성 하거나에 쓰려고 스트림을 리디렉션할 수 있습니다는 <xref:System.IO.TextWriter?displayProperty=nameWithType> 인스턴스.  
  
> [!NOTE]
>  콘솔 존재 하지 않는 Windows 기반 응용 프로그램에서와 같이 메시지를 콘솔에 표시 되지 않습니다.  
  
 추가 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 해당 <xref:System.Diagnostics.Trace.Listeners%2A> 통해 기록 된 메시지를 원하는 경우 컬렉션 <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, 또는 <xref:System.Diagnostics.Debug> 콘솔에 기록 되도록 합니다. 또한 사용 하 여 콘솔에 직접 메시지를 작성할 수 있습니다는 <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> 또는 <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> 메서드.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug> 및 <xref:System.Diagnostics.Trace> 클래스 공유할지 <xref:System.Diagnostics.TraceListenerCollection> 각 통해 액세스할 수 있는 컬렉션 `Listeners` 속성입니다. 추가 하는 경우는 <xref:System.Diagnostics.ConsoleTraceListener> 컬렉션에 개체를 이러한 클래스 중 하나를 사용 하 고 다른 클래스는 동일한 수신기를 자동으로 사용 합니다.  
  
 대부분의 컴파일러는 추적을 사용 하도록 설정 하 고 조건부 컴파일 플래그를 통해 출력을 디버깅 합니다. 추적 및 디버깅을 통해 기록 된 메시지를 사용 하지 않는 경우는 <xref:System.Diagnostics.Debug?displayProperty=nameWithType> 및 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 효과적으로 클래스는 무시 됩니다. 추적을 사용 하도록 설정 하 고 디버그 출력 하는 구문은 컴파일러 특정; 이외의 C# 또는 Visual Basic 컴파일러를 사용 하는 경우 컴파일러에 대 한 설명서를 참조 하십시오.  
  
-   C#에서 디버깅을 사용 하려면 추가 **/d: debug**플래그를 추가할 수 있습니다 또는 코드를 컴파일할 때 컴파일러 명령줄 **#define 디버그** 파일의 맨 위로 이동 합니다. Visual Basic의 추가 **/d: debug = True** 컴파일러 명령줄을 플래그 합니다.  
  
-   C#에서 추적을 사용 하려면 추가 **/d:TRACE** 플래그를 추가 하거나 코드를 컴파일할 때 컴파일러 명령줄 **#define TRACE** 파일의 맨 위로 이동 합니다. Visual Basic의 추가 **/d:TRACE = True** 컴파일러 명령줄을 플래그 합니다.  
  
 추가할 수는 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 <xref:System.Diagnostics.Trace.Listeners%2A> 사용자 코드에서 컬렉션을 추가할 수는 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 <xref:System.Diagnostics.Trace.Listeners%2A> 응용 프로그램 구성 파일을 통해 컬렉션입니다. 추가 <xref:System.Diagnostics.ConsoleTraceListener> 특정 코드 섹션 또는 실행 경로 대 한 메시지를 쓸 코드에서이 개체입니다. 추가 <xref:System.Diagnostics.ConsoleTraceListener> 개체 직접 모든 추적 및 디버그 하기 위해 응용 프로그램 구성 파일에 메시지를 콘솔 응용 프로그램을 실행 하는 동안 합니다.  
  
 쓸 추적 및 디버그 코드의 특정 섹션에 대 한 콘솔 메시지를 초기화 하는 <xref:System.Diagnostics.ConsoleTraceListener> 개체에 추가 하는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다. 사용 하 여 메시지를 포함 하는 코드의 섹션을 계측할는 <xref:System.Diagnostics.Trace> 또는 <xref:System.Diagnostics.Debug> 클래스입니다. 제거를 완료 한 코드 섹션에는 <xref:System.Diagnostics.ConsoleTraceListener> 에서 개체는 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션과 호출은 <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> 에서 메서드는 <xref:System.Diagnostics.ConsoleTraceListener>합니다.  
  
 모든 추적을 직접 응용 프로그램을 실행 하는 동안 디버그 콘솔에 메시지를 추가 <xref:System.Diagnostics.ConsoleTraceListener> 응용 프로그램 구성 파일에는 개체입니다. 응용 프로그램의 이름에 해당 하는 구성 파일 또는 app.config 파일에서 편집을 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 프로젝트. 이 파일에 요소를 삽입 한 <xref:System.Diagnostics.ConsoleTraceListener>합니다.  
  
 다음 예제에서는 추가 <xref:System.Diagnostics.ConsoleTraceListener> 라는 개체 `configConsoleListener` 에 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 응용 프로그램 구성 파일에 추적 수신기를 추가 하는 방법에 대 한 세부 정보를 참조 하십시오. [ &lt;수신기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 두 개의 공용 메서드가 있는 클래스의 구성 되는 콘솔 응용 프로그램을 구현 합니다.  
  
 `Main` 메서드 명령줄 인수를 검사 하 고 추적 출력을 표준 오류 스트림을 또는 표준 출력 스트림에 전달 해야 하는 경우 여부를 결정 합니다. `Main` 만들고 초기화는 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 스트림을 출력 하 고이 개체의 추적 수신기 컬렉션에 추가 합니다. 그런 다음 호출 하 여 `WriteEnvironmentInfoToTrace` 메서드는 실행 중인 환경 및 추적 출력에 추적 수신기 구성에 대 한 세부 정보를 기록 합니다.  
  
 환경 및 추적 구성 세부 정보를 통해 지정 된 콘솔 출력 스트림에 씁니다 예제 응용 프로그램을 실행 하는 경우는 <xref:System.Diagnostics.ConsoleTraceListener> 개체입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>표준 출력 스트림에 쓴 추적 출력을 사용하여 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.ConsoleTraceListener> 메시지를 작성 하는 개체는 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 합니다. 해당 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 ("").  
  
   
  
## Examples  
 다음 코드 예제를 초기화 하는 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.ConsoleTraceListener> 클래스입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">추적 및 디버깅 출력을 표준 오류 스트림에 쓰는 경우 <see langword="true" />이고, 표준 출력 스트림에 쓰는 경우 <see langword="false" />입니다.</param>
        <summary>추적 출력을 표준 출력 스트림이나 표준 오류 스트림에 쓰는 옵션을 사용하여 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.ConsoleTraceListener> 메시지를 쓰는 개체는 <xref:System.Console.Out%2A?displayProperty=nameWithType> 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림 합니다. 해당 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 ("").  
  
   
  
## Examples  
 다음 코드 예제를 초기화 하는 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.ConsoleTraceListener> 클래스입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 추적 수신기에 지정된 스트림에 대한 출력을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 대 한 지정 된 스트림 <xref:System.Diagnostics.ConsoleTraceListener> 인스턴스 (중 하나는 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림)가 닫혀 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>