<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConsoleTraceListener.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c460e5408087ef9310e95d0e12d7120856a3e454.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c460e5408087ef9310e95d0e12d7120856a3e454</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Directs tracing or debugging output to either the standard output or the standard error stream.</source>
          <target state="translated">추적 또는 디버깅 출력을 표준 출력 또는 표준 오류 스트림으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class to write trace and debugging messages to the console.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 추적 및 디버깅 메시지를 콘솔에 작성 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>You can initialize a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write trace messages to the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream or to the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">초기화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 추적 메시지를 작성 하는 개체는 <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> 스트림 또는 <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source><ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a<ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When trace and debugging output is enabled, the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> messages are written to the specified <ph id="ph2">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> stream, which is similar to the way messages are written with the <ph id="ph3">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">추적 및 디버깅 출력을 사용 하도록 설정 된 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 메시지가 기록 됩니다 지정 된 <ph id="ph2">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> 스트림을 사용 하 여 메시지 작성 하는 방법은 비슷합니다는 <ph id="ph3">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In a console application, the <ph id="ph1">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <ph id="ph2">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph> instance.</source>
          <target state="translated">콘솔 응용 프로그램에서의 <ph id="ph1">&lt;xref:System.Console?displayProperty=nameWithType&gt;</ph> 출력 및 오류 스트림은 기존 콘솔 창에 메시지를 작성 하거나에 쓰려고 스트림을 리디렉션할 수 있습니다는 <ph id="ph2">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.</source>
          <target state="translated">콘솔 존재 하지 않는 Windows 기반 응용 프로그램에서와 같이 메시지를 콘솔에 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the appropriate <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection if you want messages written through <ph id="ph3">&lt;xref:System.Diagnostics.Trace&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, or <ph id="ph5">&lt;xref:System.Diagnostics.Debug&gt;</ph> to be written to the console.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체를 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 통해 기록 된 메시지를 원하는 경우 컬렉션 <ph id="ph3">&lt;xref:System.Diagnostics.Trace&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Diagnostics.Debug&gt;</ph> 콘솔에 기록 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In addition, you can write messages directly to the console using the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">또한 사용 하 여 콘솔에 직접 메시지를 작성할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph> classes share the same <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection, accessed through their respective <ph id="ph4">`Listeners`</ph> properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph> 클래스 공유할지 <ph id="ph3">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> 각 통해 액세스할 수 있는 컬렉션 <ph id="ph4">`Listeners`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If you add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the collection using one of these classes, the other class automatically uses the same listener.</source>
          <target state="translated">추가 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 컬렉션에 개체를 이러한 클래스 중 하나를 사용 하 고 다른 클래스는 동일한 수신기를 자동으로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Most compilers enable trace and debug output through conditional compilation flags.</source>
          <target state="translated">대부분의 컴파일러는 추적을 사용 하도록 설정 하 고 조건부 컴파일 플래그를 통해 출력을 디버깅 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>If you do not enable tracing or debugging, the messages written through the <ph id="ph1">&lt;xref:System.Diagnostics.Debug?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Trace?displayProperty=nameWithType&gt;</ph> classes are effectively ignored.</source>
          <target state="translated">추적 및 디버깅을 통해 기록 된 메시지를 사용 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Debug?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Trace?displayProperty=nameWithType&gt;</ph> 효과적으로 클래스는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
          <target state="translated">추적을 사용 하도록 설정 하 고 디버그 출력 하는 구문은 컴파일러 특정; 이외의 C# 또는 Visual Basic 컴파일러를 사용 하는 경우 컴파일러에 대 한 설명서를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To enable debugging in C#, add the <bpt id="p1">**</bpt>/d:DEBUG<ept id="p1">**</ept>flag to the compiler command line when you compile your code, or you can add <bpt id="p2">**</bpt>#define DEBUG<ept id="p2">**</ept> to the top of your file.</source>
          <target state="translated">C#에서 디버깅을 사용 하려면 추가 <bpt id="p1">**</bpt>/d: debug<ept id="p1">**</ept>플래그를 추가할 수 있습니다 또는 코드를 컴파일할 때 컴파일러 명령줄 <bpt id="p2">**</bpt>#define 디버그<ept id="p2">**</ept> 파일의 맨 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In Visual Basic, add the <bpt id="p1">**</bpt>/d:DEBUG=True<ept id="p1">**</ept> flag to the compiler command line.</source>
          <target state="translated">Visual Basic의 추가 <bpt id="p1">**</bpt>/d: debug = True<ept id="p1">**</ept> 컴파일러 명령줄을 플래그 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To enable tracing in C#, add the <bpt id="p1">**</bpt>/d:TRACE<ept id="p1">**</ept> flag to the compiler command line when you compile your code, or add <bpt id="p2">**</bpt>#define TRACE<ept id="p2">**</ept> to the top of your file.</source>
          <target state="translated">C#에서 추적을 사용 하려면 추가 <bpt id="p1">**</bpt>/d:TRACE<ept id="p1">**</ept> 플래그를 추가 하거나 코드를 컴파일할 때 컴파일러 명령줄 <bpt id="p2">**</bpt>#define TRACE<ept id="p2">**</ept> 파일의 맨 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In Visual Basic, add the <bpt id="p1">**</bpt>/d:TRACE=True<ept id="p1">**</ept> flag to the compiler command line.</source>
          <target state="translated">Visual Basic의 추가 <bpt id="p1">**</bpt>/d:TRACE = True<ept id="p1">**</ept> 컴파일러 명령줄을 플래그 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>You can add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection in your code, or you can add a <ph id="ph3">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection through the application configuration file.</source>
          <target state="translated">추가할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체를 <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 사용자 코드에서 컬렉션을 추가할 수는 <ph id="ph3">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체를 <ph id="ph4">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 응용 프로그램 구성 파일을 통해 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your code to write messages for a specific code section or execution path.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 특정 코드 섹션 또는 실행 경로 대 한 메시지를 쓸 코드에서이 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Add the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your application configuration file to direct all trace and debug messages to the console while the application executes.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체 직접 모든 추적 및 디버그 하기 위해 응용 프로그램 구성 파일에 메시지를 콘솔 응용 프로그램을 실행 하는 동안 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To write trace and debug messages to the console for a specific section of code, initialize a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object and add it to the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.</source>
          <target state="translated">쓸 추적 및 디버그 코드의 특정 섹션에 대 한 콘솔 메시지를 초기화 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체에 추가 하는 <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Instrument the section of code that contains messages using the <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes.</source>
          <target state="translated">사용 하 여 메시지를 포함 하는 코드의 섹션을 계측할는 <ph id="ph1">&lt;xref:System.Diagnostics.Trace&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>At the end of the code section, remove the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection, and call the <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> method on the <ph id="ph4">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.</source>
          <target state="translated">제거를 완료 한 코드 섹션에는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 에서 개체는 <ph id="ph2">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 컬렉션과 호출은 <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> 에서 메서드는 <ph id="ph4">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>To direct all trace and debug messages to the console while the application executes, add a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the application configuration file.</source>
          <target state="translated">모든 추적을 직접 응용 프로그램을 실행 하는 동안 디버그 콘솔에 메시지를 추가 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 응용 프로그램 구성 파일에는 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Edit the configuration file that corresponds to the name of your application, or the app.config file in a <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> project.</source>
          <target state="translated">응용 프로그램의 이름에 해당 하는 구성 파일 또는 app.config 파일에서 편집을 <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 프로젝트.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>In this file, insert an element for a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.</source>
          <target state="translated">이 파일에 요소를 삽입 한 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The following example adds a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object named <ph id="ph2">`configConsoleListener`</ph> to the <ph id="ph3">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.</source>
          <target state="translated">다음 예제에서는 추가 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 라는 개체 <ph id="ph2">`configConsoleListener`</ph> 에 <ph id="ph3">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>For details about adding trace listeners in the application configuration file, see <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>listeners<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)</ept>.</source>
          <target state="translated">응용 프로그램 구성 파일에 추적 수신기를 추가 하는 방법에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>수신기<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The following code example implements a console application consisting of a class with two public methods.</source>
          <target state="translated">다음 코드 예제에서는 두 개의 공용 메서드가 있는 클래스의 구성 되는 콘솔 응용 프로그램을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>The <ph id="ph1">`Main`</ph> method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream.</source>
          <target state="translated"><ph id="ph1">`Main`</ph> 메서드 명령줄 인수를 검사 하 고 추적 출력을 표준 오류 스트림을 또는 표준 출력 스트림에 전달 해야 하는 경우 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source><ph id="ph1">`Main`</ph> creates and initializes a <ph id="ph2">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph3">&lt;xref:System.Console&gt;</ph> output stream, and adds this object to the trace listener collection.</source>
          <target state="translated"><ph id="ph1">`Main`</ph> 만들고 초기화는 <ph id="ph2">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 지정 된 개체 <ph id="ph3">&lt;xref:System.Console&gt;</ph> 스트림을 출력 하 고이 개체의 추적 수신기 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>It then calls the <ph id="ph1">`WriteEnvironmentInfoToTrace`</ph> method, which writes details about the executing environment and the trace listener configuration to the trace output.</source>
          <target state="translated">그런 다음 호출 하 여 <ph id="ph1">`WriteEnvironmentInfoToTrace`</ph> 메서드는 실행 중인 환경 및 추적 출력에 추적 수신기 구성에 대 한 세부 정보를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>When the example application runs, the environment and trace configuration details are written to the specified console output stream through the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object.</source>
          <target state="translated">환경 및 추적 구성 세부 정보를 통해 지정 된 콘솔 출력 스트림에 씁니다 예제 응용 프로그램을 실행 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.ConsoleTraceListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class with trace output written to the standard output stream.</source>
          <target state="translated">표준 출력 스트림에 쓴 추적 출력을 사용하여 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 메시지를 작성 하는 개체는 <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("").</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> 속성은 빈 문자열로 초기화 ("").</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>The following code example initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph2">&lt;xref:System.Console&gt;</ph> output stream and adds it to the trace listener collection.</source>
          <target state="translated">다음 코드 예제를 초기화 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 지정 된 개체 <ph id="ph2">&lt;xref:System.Console&gt;</ph> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to write tracing and debugging output to the standard error stream; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to write tracing and debugging output to the standard output stream.</source>
          <target state="translated">추적 및 디버깅 출력을 표준 오류 스트림에 쓰는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 표준 출력 스트림에 쓰는 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> class with an option to write trace output to the standard output stream or the standard error stream.</source>
          <target state="translated">추적 출력을 표준 출력 스트림이나 표준 오류 스트림에 쓰는 옵션을 사용하여 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ConsoleTraceListener" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to either the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> or the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 메시지를 쓰는 개체는 <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>Its <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string ("").</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> 속성은 빈 문자열로 초기화 ("").</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>The following code example initializes a <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object for the specified <ph id="ph2">&lt;xref:System.Console&gt;</ph> output stream and adds it to the trace listener collection.</source>
          <target state="translated">다음 코드 예제를 초기화 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 지정 된 개체 <ph id="ph2">&lt;xref:System.Console&gt;</ph> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ConsoleTraceListener.Close">
          <source>Closes the output to the stream specified for this trace listener.</source>
          <target state="translated">이 추적 수신기에 지정된 스트림에 대한 출력을 닫습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ConsoleTraceListener.Close">
          <source>The stream specified for this <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> instance (either the <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> stream or the <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> stream) is closed.</source>
          <target state="translated">이 대 한 지정 된 스트림 <ph id="ph1">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> 인스턴스 (중 하나는 <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph> 스트림 또는 <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> 스트림)가 닫혀 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>