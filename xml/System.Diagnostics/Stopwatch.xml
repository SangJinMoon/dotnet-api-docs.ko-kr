<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c035670b6a5acf3a4bb5bd86c113e7784448fdd" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>경과 시간을 정확하게 측정하는 데 사용할 수 있는 일련의 메서드와 속성을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> 인스턴스 한 간격 또는 총 경과 된 시간에 대 한 여러 간격에 경과 된 시간을 측정할 수 있습니다. 일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 시나리오는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 결국 호출는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 한 다음 확인 경과 시간을 사용 하는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.  
  
 A <xref:System.Diagnostics.Stopwatch> 실행 중이거나 중지 된 인스턴스가 사용 하 여; <xref:System.Diagnostics.Stopwatch.IsRunning%2A> 의 현재 상태를 확인 하는 <xref:System.Diagnostics.Stopwatch>합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Start%2A> ; 경과 시간 측정을 시작 하려면 사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 경과 시간 측정을 중지 합니다. 경과 된 시간 값 속성을 통해 쿼리 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 또는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>합니다. 인스턴스가 실행 중이거나 중지 된 동안 경과 시간 속성을 쿼리할 수 있습니다. 속성 꾸준히 증가 하는 경과 된 시간 동안는 <xref:System.Diagnostics.Stopwatch> 가 실행 될 일정 하 게 유지는 인스턴스가 중지 된 경우.  
  
 경과 시간 값은 기본적으로는 <xref:System.Diagnostics.Stopwatch> 인스턴스 모든 측정된 시간 간격의 합계와 같습니다. 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 시간; 여기에서 시작을 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 고정 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 가 기존 누적 경과 시간을 지울 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스.  
  
 <xref:System.Diagnostics.Stopwatch> 내부 타이머 메커니즘에서 타이머 틱 수를 계산 하 여 경과 시간을 측정 합니다. 설치 된 하드웨어 및 운영 체제에서 고해상도 성능 카운터를 지원 하면 <xref:System.Diagnostics.Stopwatch> 클래스 해당 카운터를 사용 하 여 경과 시간을 측정 합니다. 그렇지 않은 경우는 <xref:System.Diagnostics.Stopwatch> 클래스 시스템 타이머를 사용 하 여 경과 시간을 측정 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Frequency> 및 <xref:System.Diagnostics.Stopwatch.IsHighResolution> 정밀도 정확도 확인 하는 필드는 <xref:System.Diagnostics.Stopwatch> 타이밍 구현 합니다.  
  
 <xref:System.Diagnostics.Stopwatch> 클래스 조작의 관리 코드 내에서 타이밍 관련 성능 카운터를 지원 합니다. 특히,는 <xref:System.Diagnostics.Stopwatch.Frequency> 필드 및 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 관리 되지 않는 Win32 Api 대신 메서드를 사용할 수 있습니다 `QueryPerformanceFrequency` 및 `QueryPerformanceCounter`합니다.  
  
> [!NOTE]
>  다중 프로세서 컴퓨터에서 실행 되는 스레드는 프로세서를 중요 하지 않습니다. 그러나 BIOS 또는 (HAL (하드웨어 추상화 계층)의 버그 때문에 서로 다른 프로세서에서 다른 타이밍 결과 얻을 수 있습니다. 스레드에 대 한 프로세서 선호도 지정 하려면 사용 된 <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.Diagnostics.Stopwatch> 응용 프로그램에 대 한 실행 시간을 확인 하려면 클래스입니다.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 성능 데이터를 계산 하는 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.Stopwatch" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 <xref:System.Diagnostics.Stopwatch> 인스턴스가 중지 되 고 인스턴스 경과 시간 속성 기본값은 0입니다.  
  
 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Start%2A> 새 경과 시간 측정을 시작 하는 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.StartNew%2A> 새 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스 한 즉시 시작 합니다.  
  
   
  
## Examples  
 다음 예제에서는 초기화는 <xref:System.Diagnostics.Stopwatch> 간단한 클래스 생성자를 사용 하 여 인스턴스.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인스턴스가 측정한 총 경과 시간을 가져옵니다.</summary>
        <value>현재 인스턴스가 측정한 총 경과 시간을 나타내는 읽기 전용 <see cref="T:System.TimeSpan" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 시나리오는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 결국 호출는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 한 다음 확인 경과 시간을 사용 하는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.  
  
 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 경과 시간을 검색 속성 값을 사용 하 여 <xref:System.TimeSpan> 메서드 및 속성입니다. 예를 들어 서식을 지정할 수 있습니다는 반환 된 <xref:System.TimeSpan> 인스턴스의 텍스트 표현으로 하거나 필요로 하는 다른 클래스에 전달 된 <xref:System.TimeSpan> 매개 변수입니다.  
  
 속성을 쿼리할 수 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스는 실행 또는 중지 합니다. 속성 꾸준히 증가 하는 경과 된 시간 동안는 <xref:System.Diagnostics.Stopwatch> 가 실행 될 일정 하 게 유지는 인스턴스가 중지 된 경우.  
  
 경과 시간 값은 기본적으로는 <xref:System.Diagnostics.Stopwatch> 인스턴스 모든 측정된 시간 간격의 합계와 같습니다. 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 시간; 여기에서 시작을 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 고정 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 가 기존 누적 경과 시간을 지울 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성 응용 프로그램에 대 한 실행 시간을 결정 합니다.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인스턴스가 측정한 밀리초 단위의 총 경과 시간을 가져옵니다.</summary>
        <value>현재 인스턴스가 측정한 총 밀리초 수를 나타내는 읽기 전용 정수(Long)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 가장 가까운 정수 밀리초 값으로 내림 하는 경과 시간을 나타냅니다. 더 높은 정밀도 측정을 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 또는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 속성입니다.  
  
 속성을 쿼리할 수 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스는 실행 또는 중지 합니다. 속성 꾸준히 증가 하는 경과 된 시간 동안는 <xref:System.Diagnostics.Stopwatch> 가 실행 될 일정 하 게 유지는 인스턴스가 중지 된 경우.  
  
 경과 시간 값은 기본적으로는 <xref:System.Diagnostics.Stopwatch> 인스턴스 모든 측정된 시간 간격의 합계와 같습니다. 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 시간; 여기에서 시작을 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 고정 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 가 기존 누적 경과 시간을 지울 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 문자열에서 정수를 구문 분석을 위한 4 개의 서로 다른 구현의 성능을 측정 하는 클래스입니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 인스턴스가 측정한 총 경과 시간(타이머 틱 수)을 가져옵니다.</summary>
        <value>현재 인스턴스가 측정한 총 타이머 틱 수를 나타내는 읽기 전용 정수(Long)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 내부 타이머 메커니즘에서 경과 된 틱 수를 나타냅니다. 틱은 최소 시간 단위는는 <xref:System.Diagnostics.Stopwatch> 타이머 측정할 수 있습니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Frequency> 변환 하는 필드는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 값을 초 수입니다.  
  
 속성을 쿼리할 수 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스는 실행 또는 중지 합니다. 속성 꾸준히 증가 하는 경과 된 시간 동안는 <xref:System.Diagnostics.Stopwatch> 가 실행 될 일정 하 게 유지는 인스턴스가 중지 된 경우.  
  
 경과 시간 값은 기본적으로는 <xref:System.Diagnostics.Stopwatch> 인스턴스 모든 측정된 시간 간격의 합계와 같습니다. 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 시간; 여기에서 시작을 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 고정 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 가 기존 누적 경과 시간을 지울 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> 틱은 다릅니다 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>합니다. 각 틱은 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> 값 하나 100 나노초 간격을 나타냅니다. 각 눈금에는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 값으로 나눈 1 초 시간 간격을 나타내면는 <xref:System.Diagnostics.Stopwatch.Frequency>합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 문자열에서 정수를 구문 분석을 위한 4 개의 서로 다른 구현의 성능을 측정 하는 클래스입니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>초당 틱 수로 나타낸 타이머의 빈도를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 타이머 주파수 타이머 정밀도 정확도 나타냅니다. 예를 들어 2 백만 주파수 타이머 틱 당 500 나노초의 타이머 확인 이면 당 틱입니다. 즉, 1 초가 십억 1 나노초 인 때문에 초당 2 백만 틱 타이머 주파수는 2 백만 틱 당 1 십억 나노초 단위, 1 틱 당 500 나노초를 단순화할 수 있습니다.  
  
 <xref:System.Diagnostics.Stopwatch.Frequency> 값 기본 타이밍 메커니즘에 따라 달라 집니다. 설치 된 하드웨어 및 운영 체제에서 고해상도 성능 카운터를 지원 하면 <xref:System.Diagnostics.Stopwatch.Frequency> 값은 해당 카운터의 빈도 반영 합니다. 그렇지 않은 경우는 <xref:System.Diagnostics.Stopwatch.Frequency> 값은 시스템 타이머 빈도에 따라 결정 됩니다.  
  
 때문에 <xref:System.Diagnostics.Stopwatch> 빈도 설치 된 하드웨어 및 운영 체제에 따라 달라 집니다는 <xref:System.Diagnostics.Stopwatch.Frequency> 값 일정 하 게 유지 시스템에서 실행 되는 동안 합니다.  
  
   
  
## Examples  
 다음 예제에서는 표시 된 빈도 및 해상도의 <xref:System.Diagnostics.Stopwatch> 타이머 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>타이머 메커니즘에서 현재 틱 수를 가져옵니다.</summary>
        <returns>내부 타이머 메커니즘의 틱 카운터 값을 나타내는 정수(Long)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Diagnostics.Stopwatch> 클래스에는 고해상도 성능 카운터를 사용 하 여 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 해당 카운터의 현재 값을 반환 합니다. 경우는 <xref:System.Diagnostics.Stopwatch> 클래스 시스템 타이머를 사용 하 여 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 현재 반환 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> 의 속성은 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> 인스턴스.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 메서드를 성능 카운터를 업데이트 합니다.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>타이머가 고해상도 성능 카운터를 기반으로 하는지를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 타이머는 <xref:System.Diagnostics.Stopwatch> 클래스 시스템 하드웨어와 운영 체제에 따라 달라 집니다. <xref:System.Diagnostics.Stopwatch.IsHighResolution> `true` 경우는 <xref:System.Diagnostics.Stopwatch> 타이머가 고해상도 성능 카운터를 기반 합니다. 그렇지 않으면 <xref:System.Diagnostics.Stopwatch.IsHighResolution> 은 `false`, 않는다는 의미는 <xref:System.Diagnostics.Stopwatch> 타이머가 시스템 타이머를 기반 합니다.  
  
   
  
## Examples  
 다음 예제에서는 표시 된 빈도 및 해상도의 <xref:System.Diagnostics.Stopwatch> 타이머 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.Stopwatch" /> 타이머가 실행 중인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          현재 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스가 간격의 경과 시간을 측정하면서 실행되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> 을 호출 하 여 실행을 시작 하는 인스턴스 <xref:System.Diagnostics.Stopwatch.Start%2A> 또는 <xref:System.Diagnostics.Stopwatch.StartNew%2A>합니다. 호출 하 여 실행을 중지 <xref:System.Diagnostics.Stopwatch.Stop%2A> 또는 <xref:System.Diagnostics.Stopwatch.Reset%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>시간 간격 측정을 중지하고 경과 시간을 0으로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> 인스턴스 계산 하 고 인스턴스를 다시 설정 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 하 현재 간격 측정을 중지 하 고 누적 경과 된 시간 값을 유지 합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Reset%2A> 을 진행 중인 모든 간격 측정을 중지 한 경과 시간 값의 선택을 취소 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>시간 간격 측정을 중지하고 경과 시간 값을 0으로 다시 설정한 다음 경과 시간 측정을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> 인스턴스가 계산 하 고 인스턴스가 다시 설정 되거나 다시 시작 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 하 현재 간격 측정을 중지 하 고 누적 경과 된 시간 값을 유지 합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Reset%2A> 을 진행 중인 모든 간격 측정을 중지 한 경과 시간 값의 선택을 취소 합니다. 사용 하 여 <xref:System.Diagnostics.Stopwatch.Restart%2A> 현재 간격 측정을 중지 하 고 새 간격 측정을 시작 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>간격에 대한 경과 시간 측정을 시작하거나 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 시나리오는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 결국 호출는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 한 다음 확인 경과 시간을 사용 하는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.  
  
 일단 시작 되 면 한 <xref:System.Diagnostics.Stopwatch> 타이머 인스턴스가 중지 되었거나 다시 설정 될 때까지 경과 된 타이머 틱에서 현재 간격을 측정 합니다. 시작 하는 <xref:System.Diagnostics.Stopwatch> 즉 이미 실행 되 고 타이머 상태가 변경 않거나 경과 시간 속성 다시 설정 합니다.  
  
 경우는 <xref:System.Diagnostics.Stopwatch> 인스턴스가 여러 개 간격을 측정할는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 계속 진행 현재 경과 시간 값에서 시간을 측정 합니다. A <xref:System.Diagnostics.Stopwatch> 인스턴스 계산 하 고 인스턴스를 다시 설정 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 메서드 호출 하기 전에 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 된 경과 시간을 선택 취소 한 <xref:System.Diagnostics.Stopwatch> 인스턴스. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Restart%2A> 메서드를 <xref:System.Diagnostics.Stopwatch.Reset%2A> 및 <xref:System.Diagnostics.Stopwatch.Start%2A> 는 <xref:System.Diagnostics.Stopwatch> 단일 명령으로 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 응용 프로그램의 실행 시간을 측정 하는 타이머를 시작 합니다.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>새 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스를 초기화하고 경과 시간 속성을 0으로 설정한 다음 경과 시간 측정을 시작합니다.</summary>
        <returns>경과 시간 측정을 방금 시작한 <see cref="T:System.Diagnostics.Stopwatch" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출에 해당 하는 <xref:System.Diagnostics.Stopwatch> 생성자를 호출한 다음 <xref:System.Diagnostics.Stopwatch.Start%2A> 새 인스턴스에서 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 문자열에서 정수를 구문 분석을 위한 4 개의 서로 다른 구현의 성능을 측정 하는 클래스입니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>간격에 대한 경과 시간 측정을 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 시나리오는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 결국 호출는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 한 다음 확인 경과 시간을 사용 하는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드는 현재 시간 간격 측정을 종료 합니다. 중지 된 <xref:System.Diagnostics.Stopwatch> 즉 실행 되 고 있지 않는 하지 타이머 또는 상태 변경 경과 시간 속성 다시 설정 합니다.  
  
 경우는 <xref:System.Diagnostics.Stopwatch> 인스턴스가 여러 개 간격을 측정할는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 을 경과 시간 측정을 일시 중지 하는 것과 같습니다. 후속 호출에 <xref:System.Diagnostics.Stopwatch.Start%2A> 현재 경과 시간 값에서 시간을 측정 하는 다시 시작 합니다. 사용 하 여는 <xref:System.Diagnostics.Stopwatch.Reset%2A> 누적 된 경과 시간을 선택 취소 하는 메서드는 <xref:System.Diagnostics.Stopwatch> 인스턴스.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 응용 프로그램의 실행 시간을 측정 하는 타이머를 중지 합니다.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>