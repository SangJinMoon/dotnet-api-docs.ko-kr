<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="205ebec39040ed058ad9ffbdc4b91602849b5386" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30397217" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 및 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기적으로 리디렉션된를 수집 하려면 <xref:System.Diagnostics.Process.StandardOutput%2A> 또는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림, 프로세스의 출력 리디렉션된 스트림 출력 이벤트를 처리 하는 메서드를 작성 해야 합니다. 이벤트 처리기 메서드는 프로세스가 리디렉션된 스트림에 쓸 때 호출 됩니다. 인스턴스와 이벤트 처리기를 호출 하는 이벤트 대리자 <xref:System.Diagnostics.DataReceivedEventArgs>합니다. <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 속성 프로세스 리디렉션된 스트림에 작성 하는 텍스트 줄을 포함 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 리디렉션된에 대해 비동기 읽기 작업을 수행 하는 방법을 보여 줍니다. <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림을 `sort` 명령입니다. `sort` 명령 읽고 텍스트 입력을 정렬 하는 콘솔 응용 프로그램입니다.  
  
 이 예에서는 대 한 이벤트 대리자를 만듭니다는 `SortOutputHandler` 이벤트 처리기에 연결 된 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트입니다. 이벤트 처리기는 리디렉션된 텍스트 줄을 받아서 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림에 텍스트의 서식을 지정 하 고 화면에 텍스트를 씁니다.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>리디렉션된 <see cref="T:System.Diagnostics.Process" /> 출력 스트림에 쓰여진 문자 줄을 가져옵니다.</summary>
        <value>연결된 <see cref="T:System.Diagnostics.Process" />가 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 또는 <see cref="P:System.Diagnostics.Process.StandardError" /> 스트림에 쓴 줄입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 리디렉션하는 경우는 <xref:System.Diagnostics.Process.StandardOutput%2A> 또는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림을 <xref:System.Diagnostics.Process> 이벤트 처리기 인 이벤트가 프로세스 리디렉션된 스트림에 쓸 때마다 발생 합니다. <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 속성은 줄 하는 <xref:System.Diagnostics.Process> 리디렉션된 출력 스트림에 작성 합니다. 이벤트 처리기를 사용할 수는 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 프로세스 출력을 필터링 하거나 다른 위치에 출력을 쓸 속성입니다. 예를 들어, 모든 오류 출력 줄을 지정 된 오류 로그 파일에 저장 하는 이벤트 처리기를 만들 수 있습니다.  
  
 줄은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n") 또는 문자 시퀀스 뒤에 줄 바꿈 ("\n")으로 정의 됩니다. 기본 시스템의 ANSI 코드 페이지를 사용 하 여 줄 문자가 인코딩됩니다. <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 속성 종결 캐리지 리턴 또는 줄 바꿈 하지 않는 합니다.  
  
 리디렉션된 스트림이 닫힐 때 이벤트 처리기에 null 줄 전송 됩니다. 이벤트 처리기 검사 확인는 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 속성에 액세스 하기 전에 적절 하 게 합니다. 예를 들어 정적 메서드를 사용할 수 있습니다 <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> 유효성을 검사 하 여 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> 이벤트 처리기에는 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 간단한 이벤트 처리기와 연결 된는 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트입니다. 이벤트 처리기는 리디렉션된 텍스트 줄을 받아서 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림에 텍스트의 서식을 지정 하 고 화면에 텍스트를 씁니다.  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>