<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DebuggerDisplayAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb7254d6c997b65bfab88e7d660763aa15c47b190ad3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54d6c997b65bfab88e7d660763aa15c47b190ad3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>Determines how a class or field is displayed in the debugger variable windows.</source>
          <target state="translated">클래스 또는 필드가 디버거 변수 창에 표시되는 방식을 결정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute.%23ctor%2A&gt;</ph> constructor has a single argument: a string to be displayed in the value column for instances of the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute.%23ctor%2A&gt;</ph> 생성자에는 형식 인스턴스에 대한 값 열에 표시되는 문자열인 단일 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>This string can contain braces ({ and }).</source>
          <target state="translated">이 문자열에는 중괄호({ 및 })가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>The text within a pair of braces is evaluated as the name of a field, property, or method.</source>
          <target state="translated">중괄호 쌍 안의 텍스트 필드, 속성 또는 메서드 이름으로 확인 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>For example, the following C# code causes "Count = 4" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <ph id="ph1">`MyHashtable`</ph>.</source>
          <target state="translated">예를 들어 더하기 기호(+)를 선택하여 <ph id="ph1">`MyHashtable`</ph> 인스턴스에 대한 디버거 표시를 확장하면 다음 C# 코드로 인해 “Count = 4”가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>For information about using this attribute in Visual Studio, see <bpt id="p1">[</bpt>Using the DebuggerDisplay Attribute<ept id="p1">](/visualstudio/debugger/using-the-debuggerdisplay-attribute)</ept>.</source>
          <target state="translated">Visual Studio에서이 특성을 사용 하는 방법에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>DebuggerDisplay 특성을 사용 하 여<ept id="p1">](/visualstudio/debugger/using-the-debuggerdisplay-attribute)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.DebuggerDisplayAttribute">
          <source>View the following example in Visual Studio to see the results of applying the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph>.</source>
          <target state="translated">다음 예제를 적용 한 결과 보려면 Visual Studio에서 보기는 <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>The string to be displayed in the value column for instances of the type; an empty string ("") causes the value column to be hidden.</source>
          <target state="translated">형식의 인스턴스에 대한 값 열에 표시될 문자열이며 빈 문자열("")을 사용하면 값 열이 숨겨집니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>The <ph id="ph1">`value`</ph> parameter can contain braces ({ and }).</source>
          <target state="translated"><ph id="ph1">`value`</ph> 매개 변수는 중괄호를 포함할 수 있습니다 ({및}).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>The text within a pair of braces is evaluated as the name of a field, property, or method.</source>
          <target state="translated">중괄호 쌍 안의 텍스트 필드, 속성 또는 메서드 이름으로 확인 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>For example, the following C# code causes "Count = 4" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <ph id="ph1">`MyTable`</ph>.</source>
          <target state="translated">예를 들어 더하기 기호(+)를 선택하여 <ph id="ph1">`MyTable`</ph> 인스턴스에 대한 디버거 표시를 확장하면 다음 C# 코드로 인해 “Count = 4”가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>The following code example causes the value of the <ph id="ph1">&lt;xref:System.Collections.Hashtable.Count%2A&gt;</ph> property from the inherited <ph id="ph2">&lt;xref:System.Collections.Hashtable&gt;</ph> class to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <ph id="ph3">`MyHashtable`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 하면 값이 고 <ph id="ph1">&lt;xref:System.Collections.Hashtable.Count%2A&gt;</ph> 를 상속 된 속성 <ph id="ph2">&lt;xref:System.Collections.Hashtable&gt;</ph> 더하기 기호 (+) 디버거 디스플레이의 인스턴스에 대 한 확장을 선택 될 때 표시 되는 클래스 <ph id="ph3">`MyHashtable`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
          <source>You must run the complete example, which is provided in the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> class, to see the results.</source>
          <target state="translated">제공 되는 전체 예제를 실행 해야는 <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> 클래스 결과를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>Gets or sets the name to display in the debugger variable windows.</source>
          <target state="translated">디버거 변수 창에 표시할 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>The name to display in the debugger variable windows.</source>
          <target state="translated">디버거 변수 창에 표시할 이름입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>The value can contain curly braces ({ and }).</source>
          <target state="translated">값이 중괄호 안에 포함 될 수 있습니다 ({및}).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>Text within a pair of braces is evaluated as the name of a field, property, or method.</source>
          <target state="translated">중괄호 쌍 안의 텍스트는 필드, 속성 또는 메서드 이름으로 확인 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>The following code example causes the name and value of each key to be displayed in the debugger variable windows.</source>
          <target state="translated">다음 코드 예제에는 이름 및 디버거 변수 창에 표시할 각 키의 값입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>When the attribute is not applied, the index and value type are displayed (for example: "[0] {KeyValuePairs}").</source>
          <target state="translated">특성이 적용 되지 않는 인덱스 및 값 형식이 표시 됩니다 (예: "[0] {KeyValuePairs}").</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>When the attribute is applied, the name of the key and its value are displayed (for example, if the first key is "one" and its value is 1, the display is: "one 1").</source>
          <target state="translated">특성이 적용 되는 키와 해당 값의 이름이 표시 됩니다 (예를 들어 첫 번째 키가 "one" 하는 경우 해당 값은 1 디스플레이가: "하나의 1").</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
          <source>Gets or sets the type of the attribute's target.</source>
          <target state="translated">특성의 대상 형식을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
          <source>The attribute's target type.</source>
          <target state="translated">특성의 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
          <source>Use this property to specify the target type when the attribute is used at the assembly level.</source>
          <target state="translated">특성은 어셈블리 수준에서 사용 하는 경우 대상 형식을 지정 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
          <source><ph id="ph1">&lt;see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
          <source>Gets or sets the type name of the attribute's target.</source>
          <target state="translated">특성 대상의 형식 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
          <source>The name of the attribute's target type.</source>
          <target state="translated">특성 대상의 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
          <source>Use this property to specify the name of the target type when the attribute is used at the assembly level.</source>
          <target state="translated">특성이 어셈블리 수준에서 사용 되는 대상 형식의 이름을 지정 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
          <source>Gets or sets the string to display in the type column of the debugger variable windows.</source>
          <target state="translated">디버거 변수 창의 형식 열에 표시할 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
          <source>The string to display in the type column of the debugger variable windows.</source>
          <target state="translated">디버거 변수 창의 형식 열에 표시할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
          <source>Gets the string to display in the value column of the debugger variable windows.</source>
          <target state="translated">디버거 변수 창의 값 열에 표시할 문자열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
          <source>The string to display in the value column of the debugger variable.</source>
          <target state="translated">디버거 변수의 값 열에 표시할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
          <source>This property contains the string passed in by the <ph id="ph1">`value`</ph> parameter of the constructor.</source>
          <target state="translated">이 속성에 의해 전달 된 문자열에 포함 된 <ph id="ph1">`value`</ph> 생성자의 매개 변수입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>