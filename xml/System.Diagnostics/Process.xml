<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Process.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55ac353c2085884d08c90d09fe4bb6c90bda8893f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ac353c2085884d08c90d09fe4bb6c90bda8893f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Provides access to local and remote processes and enables you to start and stop local system processes.</source>
          <target state="translated">로컬 및 원격 프로세스에 대한 액세스를 제공하고 로컬 시스템 프로세스를 시작하고 중지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component provides access to a process that is running on a computer.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 컴퓨터에서 실행 중인 프로세스에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A process, in the simplest terms, is a running app.</source>
          <target state="translated">간단히 말해에서는 프로세스를 실행 중인 앱입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A thread is the basic unit to which the operating system allocates processor time.</source>
          <target state="translated">스레드는 운영 체제에 있는 프로세서 시간을 할당 하는 기본 단위입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A thread can execute any part of the code of the process, including parts currently being executed by another thread.</source>
          <target state="translated">스레드가 다른 스레드에 의해 현재 실행 되 고 파트를 포함 하는 프로세스의 코드의 모든 부분을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component is a useful tool for starting, stopping, controlling, and monitoring apps.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 시작, 중지, 제어 및 응용 프로그램 모니터링에 대 한 유용한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>You can use the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component, to obtain a list of the processes that are running, or you can start a new process.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 있습니다 또는 구성 요소가 실행 되는 프로세스의 목록을 가져올 수는 새 프로세스를 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component is used to access system processes.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 시스템 프로세스를 액세스 하려면 구성 요소를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>After a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component has been initialized, it can be used to obtain information about the running process.</source>
          <target state="translated">이후에 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소가 초기화 된, 실행 중인 프로세스에 대 한 정보를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.</source>
          <target state="translated">프로세스 메모리의 양과 같은 성능 정보를 사용 하 여 및 이러한 정보에 로드 된 모듈 (.dll 및.exe 파일), 스레드 집합이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>32-bit processes cannot access the modules of a 64-bit process.</source>
          <target state="translated">32 비트 프로세스가 64 비트 프로세스의 모듈에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>If you try to get information about a 64-bit process from a 32-bit process, you will get a <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> exception.</source>
          <target state="translated">32 비트 프로세스에서 64 비트 프로세스에 대 한 정보를 가져올 하려는 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A 64-bit process, on the other hand, can access the modules of a 32-bit process.</source>
          <target state="translated">반면에 64 비트 프로세스를 32 비트 프로세스의 모듈을 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The process component obtains information about a group of properties all at once.</source>
          <target state="translated">프로세스 구성 요소 속성의 그룹에 대 한 정보를 한 번에 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>After the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method.</source>
          <target state="translated">이후에 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 모든 그룹의 멤버 중 하나에 대 한 정보를 확보 하는, 해당 그룹의 다른 속성에 대 한 값을 캐시 하 고 호출할 때까지 그룹의 다른 멤버에 대 한 새 정보를 가져올는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Therefore, a property value is not guaranteed to be any newer than the last call to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method.</source>
          <target state="translated">따라서 속성 값을 반드시를 마지막으로 호출한 보다 같을 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The group breakdowns are operating-system dependent.</source>
          <target state="translated">그룹 명세는 운영 체제에 종속적입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</source>
          <target state="translated">따옴표를 사용 하 여 시스템에 선언 된 경로 변수를 사용 하는 경우 해당 위치에 있는 프로세스를 시작할 때 해당 경로 완전히 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Otherwise, the system will not find the path.</source>
          <target state="translated">그렇지 않으면 시스템 경로 찾지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>For example, if <ph id="ph1">`c:\mypath`</ph> is not in your path, and you add it using quotation marks: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>, you must fully qualify any process in <ph id="ph3">`c:\mypath`</ph> when starting it.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">`c:\mypath`</ph> 사용자의 경로에 없는 따옴표를 사용 하 여 추가 하 고: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>의 모든 프로세스를 정규화 해야 <ph id="ph3">`c:\mypath`</ph> 시작할 때입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A system process is uniquely identified on the system by its process identifier.</source>
          <target state="translated">시스템 프로세스를 해당 프로세스 id 시스템에 고유 하 게 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer.</source>
          <target state="translated">많은 Windows 리소스와 마찬가지로 프로세스도 해당 컴퓨터에서 고유 않을 수도 있는 해당 핸들로 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A handle is the generic term for an identifier of a resource.</source>
          <target state="translated">핸들은 리소스의 식별자에 대 한 일반 용어입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The operating system persists the process handle, which is accessed through the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component, even when the process has exited.</source>
          <target state="translated">운영 체제를 통해 액세스할 수 있는 프로세스 핸들 계속 되 면는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 의 속성은 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 프로세스가 종료 하는 경우에 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Thus, you can get the process's administrative information, such as the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> (usually either zero for success or a nonzero error code) and the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>.</source>
          <target state="translated">따라서 같은 정보를 관리 하는 프로세스의를 읽을 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> (일반적으로 하거나 0의 성공 또는 0이 아닌 오류 코드)와 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.</source>
          <target state="translated">핸들 핸들 누수가 메모리 누수 보다 더 심각 이므로 매우 중요 한 리소스를은입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
          <target state="translated">이 클래스는 모든 멤버에 적용 되는 클래스 수준에 상속 요청과 링크 요청을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우에 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
          <target state="translated">보안 요청에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>링크 요청<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source><ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> Notes</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> 참고 사항</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>In the .NET Framework, the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class by default uses <ph id="ph2">&lt;xref:System.Console&gt;</ph> encodings, which are typically code page encodings, for the input, output, and error streams.</source>
          <target state="translated">.NET framework에서는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스를 사용 하 여 기본 여 <ph id="ph2">&lt;xref:System.Console&gt;</ph> 일반적으로 인코딩 코드 페이지 인코딩 입력, 출력 및 오류 스트림에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
          <target state="translated">예를 들어 코드, 문화권이 영어 (미국) 인 시스템에서 코드 페이지 437는 기본에 대 한 인코딩을 <ph id="ph1">&lt;xref:System.Console&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>However, <ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> may make only a limited subset of these encodings available.</source>
          <target state="translated">그러나 <ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> 이러한 인코딩은의 제한 된 하위 집합만 사용할 수 있게 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>If this is the case, it uses <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> as the default encoding.</source>
          <target state="translated">사용 하 여이 경우가 <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> 을 기본 인코딩으로 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>If a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object depends on specific code page encodings, you can still make them available by doing the following <bpt id="p1">*</bpt>before<ept id="p1">*</ept> you call any <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> methods:</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 개체가 특정 코드 페이지 인코딩에 종속, 있습니다 수 여전히 사용할 수 있도록 다음을 수행 하 여 <bpt id="p1">*</bpt>전에<ept id="p1">*</ept> 호출 하면 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</source>
          <target state="translated">프로젝트에 System.Text.Encoding.CodePages.dll 어셈블리에 대 한 참조를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Retrieve the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">검색 된 <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> 에서 개체는 <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>Pass the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType&gt;</ph> method to make the additional encodings supported by the encoding provider available.</source>
          <target state="translated">전달 된 <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> 개체를 <ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType&gt;</ph> 메서드를 사용할 수 있는 인코딩 공급자에서 지 원하는 추가 인코딩을 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스 다음 자동으로 사용 합니다, UTF8 아닌 기본 시스템 인코딩과를 호출 하기 전에 인코딩 공급자를 등록 한 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The following example uses an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class to start a process.</source>
          <target state="translated">다음 예제에서 사용 하는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스는 프로세스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class itself and a static <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method to start a process.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스 자체와 정적 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드 프로세스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The following F# example defines a <ph id="ph1">`runProc`</ph> function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run.</source>
          <target state="translated">다음 F # 예제에서는 정의 <ph id="ph1">`runProc`</ph> 함수는 프로세스를 시작 하는 모든 출력 및 오류 정보를 캡처하고 프로세스를 실행 하는 시간 (밀리초)의 수를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The <ph id="ph1">`runProc`</ph> function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.</source>
          <target state="translated"><ph id="ph1">`runProc`</ph> 함수에 세 개의 매개 변수가: 응용 프로그램의 시작 디렉터리를 제공 하는 인수를 시작 하려면 응용 프로그램의 이름입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>The code for the <ph id="ph1">`runProc`</ph> function was written by <bpt id="p1">[</bpt>ImaginaryDevelopment<ept id="p1">](http://fssnip.net/authors/ImaginaryDevelopment)</ept> and is available under the <bpt id="p2">[</bpt>Microsoft Public License<ept id="p2">](http://opensource.org/licenses/ms-pl)</ept>.</source>
          <target state="translated">에 대 한 코드는 <ph id="ph1">`runProc`</ph> 함수에 의해 작성 되었으므로 <bpt id="p1">[</bpt>ImaginaryDevelopment<ept id="p1">](http://fssnip.net/authors/ImaginaryDevelopment)</ept> 사용할 수는 <bpt id="p2">[</bpt>Microsoft Public License<ept id="p2">](http://opensource.org/licenses/ms-pl)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Process">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>If you do not specify the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MachineName%2A&gt;</ph> property, the default is the local computer, (".").</source>
          <target state="translated">지정 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MachineName%2A&gt;</ph> 속성, 기본값은 로컬 컴퓨터 (".").</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>You have two options for associating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component with a process on the computer.</source>
          <target state="translated">새 연결에 대 한 두 가지 옵션이 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 컴퓨터에 있는 프로세스와 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>The first option is to use the constructor to create the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component, set the appropriate members of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property and call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to associate the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> with a new system process.</source>
          <target state="translated">첫 번째 옵션은 만들려는 생성자를 사용 하는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 의 적절 한 멤버를 설정 하는 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 연결 하는 <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> 를 새로운 시스템 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>The second option is to associate the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> with a running system process by using <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> or one of the <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> return values.</source>
          <target state="translated">두 번째 방법은 연결 하는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 를 사용 하 여 실행 중인 시스템 프로세스와 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 또는 중 하나는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>If you use a <ph id="ph1">`static`</ph> overload of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method to start a new system process, the method creates a new <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component and associates it with the process.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">`static`</ph> 오버 로드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드는 새 시스템 프로세스를 시작 하는 메서드를 새로 만듭니다. <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 프로세스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>When the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> property is set to its default value, <ph id="ph2">`true`</ph>, you can start applications and documents in a way that is similar to using the <ph id="ph3">`Run`</ph> dialog box of the Windows <ph id="ph4">`Start`</ph> menu.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> 속성이 해당 기본값으로 설정 되어 <ph id="ph2">`true`</ph>를 사용 하 여 유사한 방식으로 응용 프로그램 및 문서를 시작할 수 있습니다는 <ph id="ph3">`Run`</ph> Windows의 대화 상자 <ph id="ph4">`Start`</ph> 메뉴.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`false`</ph>, you can start only executables.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph2">`false`</ph>, 실행 파일만 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property and calling the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method with no parameters, or by passing the appropriate parameter to the <ph id="ph3">`static`</ph><ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> member.</source>
          <target state="translated">명령줄에서 호출할 수 있는 모든 실행 파일을 두 가지 방법 중 하나로 시작할 수 있습니다:의 적절 한 멤버를 설정 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출은 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드 매개 변수 없이 또는 적절 한 매개 변수를 전달 하 여는 <ph id="ph3">`static`</ph> <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>You can create a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component by using the constructor, one of the static <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> overloads, or any of the <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> methods.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 생성자는 정적 중 하나를 사용 하 여 구성 요소 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 오버 로드, 또는 중 하나는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>After you have done so, you have a view into the associated process.</source>
          <target state="translated">그렇게 않은 후에 연결된 된 프로세스에 대 한 뷰를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</source>
          <target state="translated">메모리에서 프로세스 속성이 변경 될 때 자동으로 업데이트 하는 동적 뷰 아닙니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>Instead, you must call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> for the component to update the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> property information in your application.</source>
          <target state="translated">대신, 호출 해야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 업데이트할 구성 요소에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 응용 프로그램에서 속성 정보입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.#ctor">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.BasePriority">
          <source>Gets the base priority of the associated process.</source>
          <target state="translated">연결된 프로세스의 기본 우선 순위를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The base priority, which is computed from the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph> of the associated process.</source>
          <target state="translated">연결된 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph>에서 계산되는 기본 우선 순위입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> of the process is the starting priority for threads created within the associated process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 프로세스의 연결된 된 프로세스 내에서 만든 스레드에 대 한 시작 우선 순위입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>You can view information about the base priority through the System Monitor's Priority Base counter.</source>
          <target state="translated">시스템 모니터의 기본 우선 순위 카운터를 통해 기본 우선 순위에 대 한 정보를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.</source>
          <target state="translated">시간 경과 또는 다른 운영 체제 상승이 앞 다른 프로세스에 배치 되어야 하는 경우 기본 우선 순위를 변경할 수 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> property lets you view the starting priority assigned to a process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 속성을 사용 하면 프로세스에 할당 된 우선 순위를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>However, because it is read-only, you cannot use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> to set the priority of the process.</source>
          <target state="translated">그러나 읽기 전용 이므로 사용할 수 없습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 프로세스의 우선 순위를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>To change the priority, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> property.</source>
          <target state="translated">우선 순위를 변경 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> is viewable using the System Monitor, while the <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> is not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 을 볼 수 있습니다 하지만 시스템 모니터를 사용 하는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 않습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>Both the <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> can be viewed programmatically.</source>
          <target state="translated">둘 다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 프로그래밍 방식으로 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The following table shows the relationship between <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> values and <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> values.</source>
          <target state="translated">다음 표에서 간의 관계를 보여 줍니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 값 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>BasePriority</source>
          <target state="translated">BasePriority</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>PriorityClass</source>
          <target state="translated">PriorityClass</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>13</source>
          <target state="translated">13</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>24</source>
          <target state="translated">24</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성을 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.BasePriority">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.BasePriority">
          <source>The process has not started, so there is no process ID.</source>
          <target state="translated">프로세스가 시작되지 않아서 프로세스 ID가 없습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.BasePriority">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Begins asynchronous read operations on the redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream of the application.</source>
          <target state="translated">응용 프로그램의 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림에 대해 비동기 읽기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 동기적 또는 비동기적으로 스트림은 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the error output stream of the process.</source>
          <target state="translated">와 같은 메서드 <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> 프로세스의 오류 출력 스트림에서 동기 읽기 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or closes the stream.</source>
          <target state="translated">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 쓰려는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트리밍하거나 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 시작 비동기 읽기 작업에는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
          <target state="translated">이 메서드는 스트림 출력에 대 한 지정 된 이벤트 처리기 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Follow these steps to perform asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> :</source>
          <target state="translated">비동기 읽기 작업을 수행 하려면 다음이 단계에 따라 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> :</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph>를 <ph id="ph2">`false`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt;</ph>를 <ph id="ph2">`true`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Add your event handler to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event.</source>
          <target state="translated">이벤트 처리기를 추가 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The event handler must match the <ph id="ph1">&lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType&gt;</ph> delegate signature.</source>
          <target state="translated">이벤트 처리기와 일치 해야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType&gt;</ph> 대리자 서명입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Start the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph>.</source>
          <target state="translated">시작 된 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>This call starts asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>.</source>
          <target state="translated">이 호출에서 비동기 읽기 작업을 시작 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>When asynchronous read operations start, the event handler is called each time the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes a line of text to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">연결 된 사용자가 비동기 읽기 작업을 시작, 이벤트 처리기가 호출 될 때 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 텍스트의 줄을 쓰는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>You can cancel an asynchronous read operation by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>.</source>
          <target state="translated">호출 하 여 비동기 읽기 작업을 취소할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The read operation can be canceled by the caller or by the event handler.</source>
          <target state="translated">호출자에 의해 또는 이벤트 처리기에서 읽기 작업을 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>After canceling, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> again to resume asynchronous read operations.</source>
          <target state="translated">취소 후 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 비동기 읽기 작업을 다시 시작을 다시 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
          <target state="translated">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>For example, do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> with a call to <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or vice versa.</source>
          <target state="translated">예를 들어을 따르지 않는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 을 호출 하 여 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 또는 그 반대로 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>However, you can read two different streams in different modes.</source>
          <target state="translated">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> and then call <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The following example uses the <ph id="ph1">`net view`</ph> command to list the available network resources on a remote computer.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`net view`</ph> 명령을 원격 컴퓨터에서 사용 가능한 네트워크 리소스를 나열 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The user supplies the target computer name as a command-line argument.</source>
          <target state="translated">사용자가 대상 컴퓨터 이름 명령줄 인수로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The user can also supply a file name for error output.</source>
          <target state="translated">사용자 오류 출력에 대 한 파일 이름을 제공할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</source>
          <target state="translated">이 예제에서는 net 명령, 프로세스가 끝날 때까지 및 다음 쓰기 출력 결과 콘솔에 대 한 대기 작업의 출력을 수집 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>If the user supplies the optional error file, the example writes errors to the file.</source>
          <target state="translated">필요에 따라 오류 파일의 사용자가 제공 하는 경우이 예제에서는 파일에 오류를 씁니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>An asynchronous read operation is already in progress on the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림에서 비동기 읽기 작업이 이미 진행 중입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream has been used by a synchronous read operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림이 동기적 읽기 작업에 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginErrorReadLine">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Begins asynchronous read operations on the redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream of the application.</source>
          <target state="translated">응용 프로그램의 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림에 대해 비동기 읽기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 동기적 또는 비동기적으로 스트림은 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the output stream of the process.</source>
          <target state="translated">와 같은 메서드 <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> 프로세스의 출력 스트림에서 동기 읽기 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or closes the stream.</source>
          <target state="translated">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 쓰려는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트리밍하거나 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 시작 비동기 읽기 작업에는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
          <target state="translated">이 메서드는 스트림 출력에 대 한 지정 된 이벤트 처리기 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Follow these steps to perform asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> :</source>
          <target state="translated">비동기 읽기 작업을 수행 하려면 다음이 단계에 따라 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> :</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph>를 <ph id="ph2">`false`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;</ph>를 <ph id="ph2">`true`</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Add your event handler to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event.</source>
          <target state="translated">이벤트 처리기를 추가 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The event handler must match the <ph id="ph1">&lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType&gt;</ph> delegate signature.</source>
          <target state="translated">이벤트 처리기와 일치 해야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType&gt;</ph> 대리자 서명입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Start the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph>.</source>
          <target state="translated">시작 된 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>This call starts asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>.</source>
          <target state="translated">이 호출에서 비동기 읽기 작업을 시작 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>When asynchronous read operations start, the event handler is called each time the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes a line of text to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">연결 된 사용자가 비동기 읽기 작업을 시작, 이벤트 처리기가 호출 될 때 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 텍스트의 줄을 쓰는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>You can cancel an asynchronous read operation by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>.</source>
          <target state="translated">호출 하 여 비동기 읽기 작업을 취소할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The read operation can be canceled by the caller or by the event handler.</source>
          <target state="translated">호출자에 의해 또는 이벤트 처리기에서 읽기 작업을 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>After canceling, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> again to resume asynchronous read operations.</source>
          <target state="translated">취소 후 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 비동기 읽기 작업을 다시 시작을 다시 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
          <target state="translated">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>For example, do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> with a call to <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or vice versa.</source>
          <target state="translated">예를 들어을 따르지 않는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 을 호출 하 여 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 또는 그 반대로 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>However, you can read two different streams in different modes.</source>
          <target state="translated">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> and then call <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The following example illustrates how to perform asynchronous read operations on the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream of the <ph id="ph2">`sort`</ph> command.</source>
          <target state="translated">다음 예제에서는 리디렉션된에 대해 비동기 읽기 작업을 수행 하는 방법을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림을 <ph id="ph2">`sort`</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The <ph id="ph1">`sort`</ph> command is a console application that reads and sorts text input.</source>
          <target state="translated"><ph id="ph1">`sort`</ph> 명령 읽고 텍스트 입력을 정렬 하는 콘솔 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The example creates an event delegate for the <ph id="ph1">`SortOutputHandler`</ph> event handler and associates it with the <ph id="ph2">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event.</source>
          <target state="translated">이 예에서는 대 한 이벤트 대리자를 만듭니다는 <ph id="ph1">`SortOutputHandler`</ph> 이벤트 처리기에 연결 된 <ph id="ph2">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The event handler receives text lines from the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, formats the text, and writes the text to the screen.</source>
          <target state="translated">이벤트 처리기는 리디렉션된 텍스트 줄을 받아서 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림에 텍스트의 서식을 지정 하 고 화면에 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>An asynchronous read operation is already in progress on the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림에서 비동기 읽기 작업이 이미 진행 중입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream has been used by a synchronous read operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림이 동기적 읽기 작업에 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.BeginOutputReadLine">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>Cancels the asynchronous read operation on the redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream of an application.</source>
          <target state="translated">응용 프로그램의 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림에 대해 비동기 읽기 작업을 취소합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> starts an asynchronous read operation on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 시작에 비동기 읽기 작업의 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph> ends the asynchronous read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph> 끝 비동기 읽기 작업입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>After canceling, you can resume the asynchronous read operation by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> again.</source>
          <target state="translated">취소 후 호출 하 여 비동기 읽기 작업을 재개할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 다시 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>When you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>, all in-progress read operations for <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> are completed and then the event handler is disabled.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>모든 진행 중인 읽기 작업에 대 한 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 완료 된 이벤트 처리기를 사용할 수 없는 다음 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>All further redirected output to <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> is saved in a buffer.</source>
          <target state="translated">이후의 모든 리디렉션된 출력을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 버퍼에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>If you re-enable the event handler with a call to <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph>, the saved output is sent to the event handler and asynchronous read operations resume.</source>
          <target state="translated">이벤트 처리기에 대 한 호출으로 다시 설정 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph>, 이벤트 처리기에 저장 된 출력은 전송 및 비동기 읽기 작업을 다시 시작 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</source>
          <target state="translated">비동기 읽기 작업을 다시 시작 하기 전에 이벤트 처리기를 변경 하려는 경우 새 이벤트 처리기를 추가 하기 전에 기존 이벤트 처리기를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>You cannot mix asynchronous and synchronous read operations on the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">리디렉션된에서 비동기 및 동기 읽기 작업을 혼합할 수 없습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>If you cancel an asynchronous read operation on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> and then need to read from the stream again, you must use <ph id="ph2">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> to resume asynchronous read operations.</source>
          <target state="translated">취소 하는 경우 비동기 읽기 작업에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 다음 사용 해야 듯이 스트림에서 읽은 해야 <ph id="ph2">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 비동기 읽기 작업을 다시 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>Do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph> with a call to the synchronous read methods of <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> such as <ph id="ph3">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph>.</source>
          <target state="translated">수행 하지 않도록 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph> 동기에 대 한 호출의 메서드를 읽을 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 같은 <ph id="ph3">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>The following example starts the <ph id="ph1">`nmake`</ph> command with user supplied arguments.</source>
          <target state="translated">다음 예제에서는 시작는 <ph id="ph1">`nmake`</ph> 사용자를 사용 하 여 명령을 제공 된 인수입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</source>
          <target state="translated">오류 및 출력 스트림은 비동기적으로 읽는 수집 된 텍스트 줄은 콘솔에 표시으로 로그 파일에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</source>
          <target state="translated">명령 출력에서 지정 된 개수의 줄을 초과할 경우 비동기 읽기 작업이 취소 됩니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream is not enabled for asynchronous read operations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림을 비동기 읽기 작업용으로 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelErrorRead">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>Cancels the asynchronous read operation on the redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream of an application.</source>
          <target state="translated">응용 프로그램의 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림에 대해 비동기 읽기 작업을 취소합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> starts an asynchronous read operation on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 시작에 비동기 읽기 작업의 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph> ends the asynchronous read operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph> 끝 비동기 읽기 작업입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>After canceling, you can resume asynchronous read operations by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> again.</source>
          <target state="translated">취소 후 다시 시작할 수 있습니다 비동기 읽기 작업을 호출 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 다시 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>When you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>, all in-progress read operations for <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> are completed and then the event handler is disabled.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>모든 진행 중인 읽기 작업에 대 한 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 완료 된 이벤트 처리기를 사용할 수 없는 다음 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>All further redirected output to <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> is saved in a buffer.</source>
          <target state="translated">이후의 모든 리디렉션된 출력을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 버퍼에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>If you re-enable the event handler with a call to <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph>, the saved output is sent to the event handler and asynchronous read operations resume.</source>
          <target state="translated">이벤트 처리기에 대 한 호출으로 다시 설정 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph>, 이벤트 처리기에 저장 된 출력은 전송 및 비동기 읽기 작업을 다시 시작 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</source>
          <target state="translated">비동기 읽기 작업을 다시 시작 하기 전에 이벤트 처리기를 변경 하려는 경우 새 이벤트 처리기를 추가 하기 전에 기존 이벤트 처리기를 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>You cannot mix asynchronous and synchronous read operations on the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">리디렉션된에서 비동기 및 동기 읽기 작업을 혼합할 수 없습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>If you cancel an asynchronous read operation on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> and then need to read from the stream again, you must use <ph id="ph2">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> to resume asynchronous read operations.</source>
          <target state="translated">취소 하는 경우 비동기 읽기 작업에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 다음 사용 해야 듯이 스트림에서 읽은 해야 <ph id="ph2">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 비동기 읽기 작업을 다시 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>Do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph> with a call to the synchronous read methods of <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> such as <ph id="ph3">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph>.</source>
          <target state="translated">수행 하지 않도록 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph> 동기에 대 한 호출의 메서드를 읽을 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 같은 <ph id="ph3">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>The following example starts the <ph id="ph1">`nmake`</ph> command with user supplied arguments.</source>
          <target state="translated">다음 예제에서는 시작는 <ph id="ph1">`nmake`</ph> 사용자를 사용 하 여 명령을 제공 된 인수입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</source>
          <target state="translated">오류 및 출력 스트림은 비동기적으로 읽는 수집 된 텍스트 줄은 콘솔에 표시으로 로그 파일에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</source>
          <target state="translated">명령 출력에서 지정 된 개수의 줄을 초과할 경우 비동기 읽기 작업이 취소 됩니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream is not enabled for asynchronous read operations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림을 비동기 읽기 작업용으로 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CancelOutputRead">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Close">
          <source>Frees all the resources that are associated with this component.</source>
          <target state="translated">해당 구성 요소에 연결된 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 메서드를 사용 하면 프로세스 종료, 대기 프로세스 핸들을 닫고를 프로세스 관련 속성을 지웁니다에 대 한 대기를 중지 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> does not close the standard output, input, and error readers and writers in case they are being referenced externally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 닫히지 않습니다 표준 출력, 입력 및 오류 판독기와 작성기 외부에서 참조 하는 경우.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Dispose%2A&gt;</ph> method calls <ph id="ph2">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Dispose%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>Placing the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object in a <ph id="ph2">`using`</ph> block disposes of resources without the need to call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph>.</source>
          <target state="translated">배치는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 개체는 <ph id="ph2">`using`</ph> 블록 리소스를 호출할 필요 없이 삭제 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds.</source>
          <target state="translated">최대 10 초에 대 한 2 초 간격으로 연결된 된 프로세스의 실제 메모리 사용률을 검색합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>The example detects whether the process exits before 10 seconds have elapsed.</source>
          <target state="translated">이 예제에서는 10 초가 경과 하기 전에 프로세스를 종료 여부를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>The example closes the process if it is still running after 10 seconds.</source>
          <target state="translated">이 예제에서는 10 초 후 실행 중인 프로세스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Close">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>Closes a process that has a user interface by sending a close message to its main window.</source>
          <target state="translated">주 창에 닫기 메시지를 보내 사용자 인터페이스가 있는 프로세스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the close message was successfully sent; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</source>
          <target state="translated">닫기 메시지를 보낸 경우에는 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 연결된 프로세스에 주 창이 없거나 모달 대화 상자가 표시된 때 같이 주 창을 사용할 수 없는 경우에는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>When a process is executing, its message loop is in a wait state.</source>
          <target state="translated">프로세스를 실행할 때 해당 메시지 루프는 대기 상태에 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The message loop executes every time a Windows message is sent to the process by the operating system.</source>
          <target state="translated">운영 체제에 의해 프로세스에 Windows 메시지를 보낼 때마다 메시지 루프를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 는 잘 구성 된 응용 프로그램에서 자식 창을 닫고 응용 프로그램에 대 한 실행 중인 모든 메시지 루프를 취소 주 창에 근접 하는 요청을 보냅니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The request to exit the process by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> does not force the application to quit.</source>
          <target state="translated">요청을 호출 하 여 프로세스를 종료 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 응용 프로그램 종료을 강제로 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The application can ask for user verification before quitting, or it can refuse to quit.</source>
          <target state="translated">응용 프로그램을 종료 하기 전에 사용자 확인을 위해 묻거나 종료를 거부할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>To force the application to quit, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램을 종료 하려면을 사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> is identical to that of a user closing an application's main window using the system menu.</source>
          <target state="translated">동작은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 시스템 메뉴를 사용 하 여 응용 프로그램의 주 창을 닫을 수 있는 사용자와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</source>
          <target state="translated">따라서 주 창을 닫아 프로세스를 종료를 요청 응용 프로그램이 즉시 종료 강제로 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>Data edited by the process or resources allocated to the process can be lost if you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">프로세스에 의해 편집 하는 데이터 또는 프로세스에 할당 된 리소스 손실 될 수 있습니다를 호출 하면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> causes an abnormal process termination, and should be used only when necessary.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 비정상 프로세스 종료를 사용 하면 필요한 경우에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 프로세스의 순차적 종료가 가능 하 고 인터페이스와 함께 응용 프로그램에 대 한 것 이므로 모든 창을 닫습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> fails, you can use <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> to terminate the process.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 실패 하면 צ ְ ײ <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 으 프로세스를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> is the only way to terminate processes that do not have graphical interfaces.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 그래픽 인터페이스를 갖지 않는 프로세스를 종료 하는 유일한 방법이입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>You can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> only for processes that are running on the local computer.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>You cannot cause processes on remote computers to exit.</source>
          <target state="translated">종료 하려면 원격 컴퓨터에서 프로세스 할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>You can only view information for processes running on remote computers.</source>
          <target state="translated">만 원격 컴퓨터에서 실행 중인 프로세스에 대 한 정보를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</source>
          <target state="translated">최대 10 초 동안 2 초 간격 연결된 된 프로세스의 실제 메모리 사용률을 검색합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The example detects whether the process exits before 10 seconds have elapsed.</source>
          <target state="translated">이 예제에서는 10 초가 경과 하기 전에 프로세스를 종료 여부를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The example closes the process if it is still running after 10 seconds.</source>
          <target state="translated">이 예제에서는 10 초 후 실행 중인 프로세스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성을 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>The process has already exited.</source>
          <target state="translated">프로세스가 이미 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>No process is associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.CloseMainWindow">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Dispose(System.Boolean)">
          <source>Release all resources used by this process.</source>
          <target state="translated">이 프로세스에서 사용하는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Gets or sets whether the <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event should be raised when the process terminates.</source>
          <target state="translated">프로세스가 종료될 때 <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트를 발생시켜야 하는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event should be raised when the associated process is terminated (through either an exit or a call to <ph id="ph3">&lt;see cref="M:System.Diagnostics.Process.Kill" /&gt;</ph>); otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">종료 명령 또는 <ph id="ph3">&lt;see cref="M:System.Diagnostics.Process.Kill" /&gt;</ph> 호출을 통해 연결된 프로세스가 종료될 때 <ph id="ph2">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트가 발생해야 한다면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Note that the <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event is raised even if the value of <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> when the process exits during or before the user performs a <ph id="ph4">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> check.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트는 경우에 값 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /&gt;</ph> 은 <ph id="ph3">&lt;see langword="false" /&gt;</ph> 하는 동안 프로세스가 종료 될 때 또는 사용자가을 수행 하기 전에 <ph id="ph4">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 확인 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property suggests whether the component should be notified when the operating system has shut down a process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 속성에 운영 체제 프로세스를 종료 하는 경우 구성 요소가 알림을 받을지 여부를 제안 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property is used in asynchronous processing to notify your application that a process has exited.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 속성은 프로세스의 종료 하는 응용 프로그램에 알리기 위해 비동기 처리에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method.</source>
          <target state="translated">동기식으로 대기 (종료 이벤트가 발생할 때까지 응용 프로그램의 프로세스를 중단)이 표시 되는 종료 이벤트에 대 한 응용 프로그램을 강제로 사용 합니다.는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>If you're using Visual Studio and double-click a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component in your project, an <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event delegate and event handler are automatically generated.</source>
          <target state="translated">Visual Studio를 사용 중이 고 두 번 클릭 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 프로젝트의 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트 대리자와 이벤트 처리기는 자동으로 생성 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Additional code sets the <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">추가 코드 집합은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>You must change this property to <ph id="ph1">`true`</ph> for your event handler to execute when the associated process exits.</source>
          <target state="translated">이 속성을 변경 해야 <ph id="ph1">`true`</ph> 때 실행할 이벤트 처리기가 연결된 된 프로세스가 종료 됩니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>If the component's <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> value is <ph id="ph2">`true`</ph>, or when <ph id="ph3">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph4">`false`</ph> and a <ph id="ph5">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> check is invoked by the component, the component can access the administrative information for the associated process, which remains stored by the operating system.</source>
          <target state="translated">하는 경우 구성 요소의 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 값은 <ph id="ph2">`true`</ph>, 되거나 <ph id="ph3">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph4">`false`</ph> 및 <ph id="ph5">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 검사 구성 요소에 의해 호출 되 면 구성 요소 상태로 남아 있는 연결된 된 프로세스에 대 한 관리 정보에 액세스할 수 운영 체제에 의해 저장 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Such information includes the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph>.</source>
          <target state="translated">이러한 정보에 포함 됩니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>After the associated process exits, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> of the component no longer points to an existing process resource.</source>
          <target state="translated">연결된 된 프로세스가 종료 된 후, <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 의 구성 요소는 기존 프로세스 리소스에 더 이상 가리키지 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Instead, it can only be used to access the operating system's information about the process resource.</source>
          <target state="translated">대신,만 사용할 수 있습니다 프로세스 리소스에 대 한 운영 체제의 정보에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The operating system is aware that there are handles to exited processes that haven't been released by <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components, so it keeps the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> information in memory.</source>
          <target state="translated">운영 체제는 의해 해제 하지 않은 종료 된 프로세스에 대 한 핸들 사항이 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 유지할 수 있도록 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 메모리에 있는 정보입니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>There's a cost associated with watching for a process to exit.</source>
          <target state="translated">프로세스 종료를 감시 하는 비용이 듭니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event is raised when the associated process terminates.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트는 연결된 된 프로세스가 종료 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Your procedures for the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event run at that time.</source>
          <target state="translated">에 대 한 프로시저는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 당시에 실행 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Sometimes, your application starts a process but doesn't require notification of its closure.</source>
          <target state="translated">경우에 따라 응용 프로그램 프로세스를 시작 하지만 종료 되는 대 한 알림이 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>For example, your application can start Notepad to allow the user to perform text editing but make no further use of the Notepad application.</source>
          <target state="translated">예를 들어 응용 프로그램 사용자가 텍스트 편집을 수행 하지만 더 이상 하 게 메모장 응용 프로그램의 사용을 허용 하려면 메모장을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>You can choose to avoid notification when the process exits because it's not relevant to the continued operation of your application.</source>
          <target state="translated">관련 응용 프로그램의 지속적인된 작동에 없기 때문에 프로세스가 종료 될 때 알림을 방지 하기 위해 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>Setting <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> to <ph id="ph2">`false`</ph> can save system resources.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 를 <ph id="ph2">`false`</ph> 시스템 리소스를 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The following code example creates a process that prints a file.</source>
          <target state="translated">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>It sets the <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property to cause the process to raise the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event when it exits.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 속성을 발생 시키는 프로세스는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 종료 될 때 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event handler displays process information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트 처리기 프로세스 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.EnableRaisingEvents">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>Puts a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component in state to interact with operating system processes that run in a special mode by enabling the native property <ph id="ph2">&lt;see langword="SeDebugPrivilege" /&gt;</ph> on the current thread.</source>
          <target state="translated">현재 스레드에서 네이티브 속성 <ph id="ph2">&lt;see langword="SeDebugPrivilege" /&gt;</ph>를 활성화하여 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 특수 모드에서 실행되는 운영 체제 프로세스와 상호 작용하는 상태로 만듭니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>Some operating system processes run in a special mode.</source>
          <target state="translated">일부 운영 체제 프로세스를 특수 모드에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>Attempting to read properties of or attach to these processes is not possible unless you have called <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> on the component.</source>
          <target state="translated">속성을 읽거나 이러한 프로세스에 연결할 수 없으면 호출 하지 않는 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> 구성 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> when you no longer need access to these processes that run in special mode.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> 특수 모드에서 실행 되는 이러한 프로세스에 대 한 액세스를 더 이상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.EnterDebugMode">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>Occurs when an application writes to its redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream.</source>
          <target state="translated">응용 프로그램이 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림에 쓸 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event indicates that the associated process has written to its redirected <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> 이벤트가 리디렉션된 연결된 된 프로세스에 기록 나타냅니다 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The event only occurs during asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>.</source>
          <target state="translated">이벤트는 런타임에만 발생 비동기 읽기 작업 중에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>To start asynchronous read operations, you must redirect the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream of a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, add your event handler to the <ph id="ph3">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event, and call <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph>.</source>
          <target state="translated">비동기 읽기 작업을 시작 하려면 리디렉션해야는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림을 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, 이벤트 처리기에 추가 <ph id="ph3">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> 이벤트 및 호출 <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>Thereafter, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event signals each time the process writes a line to the redirected <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, until the process exits or calls <ph id="ph3">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>.</source>
          <target state="translated">그런 다음는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> 이벤트 신호 프로세스 리디렉션된 쓸 때마다 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림, 프로세스 종료 또는 호출 될 때까지 <ph id="ph3">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The application that is processing the asynchronous output should call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> method to ensure that the output buffer has been flushed.</source>
          <target state="translated">비동기 출력을 처리 하는 응용 프로그램은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 메서드를 출력 버퍼 플러시 되었습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>Note that specifying a timeout by using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit(System.Int32)&gt;</ph> overload does <bpt id="p1">*</bpt>not<ept id="p1">*</ept> ensure the output buffer has been flushed.</source>
          <target state="translated">사용 하 여를 지정 시간 초과 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit(System.Int32)&gt;</ph> 오버 로드는 <bpt id="p1">*</bpt>하지<ept id="p1">*</ept> 출력 버퍼 플러시 되었습니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The following example uses the <ph id="ph1">`net view`</ph> command to list the available network resources on a remote computer.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`net view`</ph> 명령을 원격 컴퓨터에서 사용 가능한 네트워크 리소스를 나열 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The user supplies the target computer name as a command-line argument.</source>
          <target state="translated">사용자가 대상 컴퓨터 이름 명령줄 인수로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The user can also supply a file name for error output.</source>
          <target state="translated">사용자 오류 출력에 대 한 파일 이름을 제공할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</source>
          <target state="translated">이 예제에서는 net 명령, 프로세스가 끝날 때까지 및 다음 쓰기 출력 결과 콘솔에 대 한 대기 작업의 출력을 수집 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>If the user supplies the optional error file, the example writes errors to the file.</source>
          <target state="translated">필요에 따라 오류 파일의 사용자가 제공 하는 경우이 예제에서는 파일에 오류를 씁니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.ErrorDataReceived">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Gets the value that the associated process specified when it terminated.</source>
          <target state="translated">연결된 프로세스가 종료될 때 연결된 프로세스에서 지정한 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The code that the associated process specified when it terminated.</source>
          <target state="translated">연결된 프로세스가 종료될 때 연결된 프로세스에서 지정한 코드입니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> to get the status that the system process returned when it exited.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 시스템 프로세스 종료 될 때 반환 되는 상태를 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>You can use the exit code much like an integer return value from a <ph id="ph1">`main()`</ph> procedure.</source>
          <target state="translated">정수 값을 반환할 처럼 종료 코드를 훨씬 사용할 수 있습니다는 <ph id="ph1">`main()`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> value for a process reflects the specific convention implemented by the application developer for that process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 해당 프로세스에 대 한 응용 프로그램 개발자가 구현한 특정 규칙을 반영 하는 프로세스에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</source>
          <target state="translated">결정을 내릴 코드에서 종료 코드 값을 사용 하는 경우 응용 프로그램 프로세스에서 사용 하는 종료 코드 규칙을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Developers usually indicate a successful exit by an <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</source>
          <target state="translated">개발자는 일반적으로 하 여 성공적인 종료를 나타내고는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 0이 고 지정 된 오류 값을 호출 하는 메서드에서 프로세스가 비정상적 종료의 원인을 확인 하는 데 사용할 수 있는 0이 아닌 값으로.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>It is not necessary to follow these guidelines, but they are the convention.</source>
          <target state="translated">다음이 지침을 따르는 필요는 없지만 규칙입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>If you try to get the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> before the process has exited, the attempt throws an exception.</source>
          <target state="translated">얻으려고 시도 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 프로세스가 종료 되기 전에 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Examine the <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property first to verify whether the associated process has terminated.</source>
          <target state="translated">검사는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 먼저 연결된 된 프로세스가 종료 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">비동기 이벤트 처리기로 표준 출력이 리디렉션된, 경우에 출력 프로세스가 완료 되지 않을 때 가능한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>To ensure that asynchronous event handling has been completed, call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> overload that takes no parameter before checking <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph>.</source>
          <target state="translated">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 오버 로드를 확인 하기 전에 매개 변수를 취하지 <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>You can use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method to cause an associated process to exit.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드를 연결 된 프로세스를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>There are two ways of being notified when the associated process exits: synchronously and asynchronously.</source>
          <target state="translated">두 가지 방법으로 연결된 된 프로세스가 종료 될 때 알려진 시점: 동기적 및 비동기적으로 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Synchronous notification relies on calling the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to pause the processing of your application until the associated component exits.</source>
          <target state="translated">동기식 알림에서는 호출에는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> 메서드를 연결 된 구성 요소가 종료 될 때까지 응용 프로그램의 처리를 일시 중지 합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>Asynchronous notification relies on the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event.</source>
          <target state="translated">비동기식 알림은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>When using asynchronous notification, <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph> for the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component to receive notification that the process has exited.</source>
          <target state="translated">비동기 알림을 사용 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 으로 설정 되어 있어야 <ph id="ph2">`true`</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 프로세스 종료 되었다는 알림을 받을 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The process has not exited.</source>
          <target state="translated">프로세스가 끝나지 않았습니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> is not valid.</source>
          <target state="translated">프로세스 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph>이 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ExitCode" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ExitCode" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitCode">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitCode">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="E:System.Diagnostics.Process.Exited">
          <source>Occurs when a process exits.</source>
          <target state="translated">프로세스가 종료될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event indicates that the associated process exited.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트는 연결된 된 프로세스가 종료 되었음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>This occurrence means either that the process terminated (aborted) or successfully closed.</source>
          <target state="translated">이 항목 것을 의미 하는 프로세스 종료 (중단) 되었거나 닫힌 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>This event can occur only if the value of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 이벤트는 경우에 발생할 수의 값은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>There are two ways of being notified when the associated process exits: synchronously and asynchronously.</source>
          <target state="translated">두 가지 방법으로 연결된 된 프로세스가 종료 될 때 알려진 시점: 동기적 및 비동기적으로 합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>Synchronous notification means calling the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to block the current thread until the process exits.</source>
          <target state="translated">동기 알림 호출을 의미는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> 프로세스가 종료 될 때까지 현재 스레드를 차단 하는 메서드.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>Asynchronous notification uses the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event, which allows the calling thread to continue execution in the meantime.</source>
          <target state="translated">비동기 알림이 사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 그 동안에 실행을 계속 호출 스레드를 허용 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>In the latter case, <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph> for the calling application to receive the Exited event.</source>
          <target state="translated">후자의 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 으로 설정 되어 있어야 <ph id="ph2">`true`</ph> Exited 이벤트를 받기 위해 호출 응용 프로그램에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</source>
          <target state="translated">운영 체제 프로세스를 종료할 때 Exited 이벤트에 대 한 처리기를 등록 한 다른 모든 프로세스를 알립니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>At this time, the handle of the process that just exited can be used to access some properties such as  <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> that the operating system maintains until it releases that handle completely.</source>
          <target state="translated">이때 방금 전에 종료 하는 프로세스의 핸들 데 사용할 수와 같은 일부 속성을 액세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 이 핸들을 완전히 해제 될 때까지 운영 체제에서 유지 관리 하는지 합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>Even if you have a handle to an exited process, you cannot call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> again to reconnect to the same process.</source>
          <target state="translated">호출할 수 없습니다 종료 된 프로세스에 대 한 핸들, 있는 경우에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 다시 동일한 프로세스에 연결 하려면.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> automatically releases the associated process and connects to a process with the same file but an entirely new <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph>.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 자동으로 연결된 된 프로세스를 해제 하 고 동일한 파일 이지만 완전히 새로운 프로세스에 연결 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>For more information about the use of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event in Windows Forms applications, see the <ph id="ph2">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> property.</source>
          <target state="translated">사용에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> Windows Forms 응용 프로그램에서 이벤트 참조는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>The following code example creates a process that prints a file.</source>
          <target state="translated">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>It raises the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event when the process exits because the <ph id="ph2">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property was set when the process was created.</source>
          <target state="translated">발생 시킵니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 때문에 프로세스가 종료 될 때 이벤트는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> 프로세스를 만들 때 속성이 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event handler displays process information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트 처리기 프로세스 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.Exited">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitTime">
          <source>Gets the time that the associated process exited.</source>
          <target state="translated">연결된 프로세스가 종료된 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>A <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> that indicates when the associated process was terminated.</source>
          <target state="translated">연결된 프로세스가 종료된 시간을 나타내는 <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>If the process has not terminated, attempting to retrieve the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> property throws an exception.</source>
          <target state="translated">검색을 시도 하는 프로세스가 종료 되지 않은 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 속성 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> before getting the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> property to determine whether the associated process has terminated.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 을 가져오기 전에 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 속성을 연결된 된 프로세스가 종료 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>The following code example creates a process that prints a file.</source>
          <target state="translated">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>The process raises the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event when it exits, and the event handler displays the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> property and other process information.</source>
          <target state="translated">프로세스가 발생 시키는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 종료 될 때 이벤트 및 이벤트 처리기 표시는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 속성 오류 코드 및 기타 정보를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitTime">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitTime">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ExitTime" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ExitTime" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ExitTime">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ExitTime">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>Gets a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component and associates it with the currently active process.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 가져온 후 현재 활성화되어 있는 프로세스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component associated with the process resource that is running the calling application.</source>
          <target state="translated">호출하는 응용 프로그램에서 실행 중인 프로세스 리소스에 연결된 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance and associate it with the process resource on the local computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스 및 로컬 컴퓨터에서 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>Like the similar <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> methods, <ph id="ph4">&lt;xref:System.Diagnostics.Process.GetCurrentProcess%2A&gt;</ph> associates an existing resource with a new <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
          <target state="translated">마찬가지로 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 메서드 <ph id="ph4">&lt;xref:System.Diagnostics.Process.GetCurrentProcess%2A&gt;</ph> 기존 리소스를 새 연결 <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetCurrentProcess">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component, and associates it with the existing process resource that you specify.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 만들어 사용자가 지정한 기존 프로세스 리소스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The system-unique identifier of a process resource.</source>
          <target state="translated">프로세스 리소스의 시스템 고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component, given the identifier of a process on the local computer.</source>
          <target state="translated">로컬 컴퓨터의 프로세서에 대한 식별자가 주어지면 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component that is associated with the local process resource identified by the <ph id="ph2">&lt;paramref name="processId" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="processId" /&gt;</ph> 매개 변수에 의해 식별되는 로컬 프로세스 리소스에 연결된 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component and associate it with a process resource on the local computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 로컬 컴퓨터에 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The process resource must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> does not create a system resource, but rather associates a resource with an application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
          <target state="translated">프로세스 리소스 때문에 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> 시스템 리소스를 만들지 않고 응용 프로그램에서 생성 된는 리소스를 연결 하지만 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>A process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> can be retrieved only for a process that is currently running on the computer.</source>
          <target state="translated">프로세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 컴퓨터에서 현재 실행 중인 프로세스에만 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>After the process terminates, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> throws an exception if you pass it an expired identifier.</source>
          <target state="translated">프로세스가 종료 된 후 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> 만료 된 식별자를 전달 하는 경우 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>On any particular computer, the identifier of a process is unique.</source>
          <target state="translated">프로세스의 식별자는 모든 컴퓨터에서 고유 합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> returns one process at most.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> 최대 하나의 프로세스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>If you want to get all the processes running a particular application, use <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph>.</source>
          <target state="translated">사용 하 여 특정 응용 프로그램을 실행 중인 모든 프로세스를 가져올 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>If multiple processes exist on the computer running the specified application, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph> returns an array containing all the associated processes.</source>
          <target state="translated">여러 프로세스는 지정된 된 응용 프로그램을 실행 하는 컴퓨터에 있는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph> 은 연결 된 모든 프로세스가 포함 된 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>You can query each of these processes in turn for its identifier.</source>
          <target state="translated">이러한 각 프로세스 식별자에 대 한 다시 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The process identifier can be viewed in the <ph id="ph1">`Processes`</ph> panel of the Windows Task Manager.</source>
          <target state="translated">프로세스 식별자를 볼 수 있습니다는 <ph id="ph1">`Processes`</ph> Windows 작업 관리자의 패널입니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The <ph id="ph1">`PID`</ph> column displays the process identifier that is assigned to a process.</source>
          <target state="translated"><ph id="ph1">`PID`</ph> 프로세스에 할당 된 프로세스 식별자 열에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The process specified by the <ph id="ph1">&lt;paramref name="processId" /&gt;</ph> parameter is not running.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="processId" /&gt;</ph> 매개 변수로 지정된 프로세스가 실행되고 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The identifier might be expired.</source>
          <target state="translated">식별자가 만료되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>The process was not started by this object.</source>
          <target state="translated">프로세스가 이 개체에 의해 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The system-unique identifier of a process resource.</source>
          <target state="translated">프로세스 리소스의 시스템 고유 식별자입니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The name of a computer on the network.</source>
          <target state="translated">네트워크에 있는 컴퓨터 이름입니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component, given a process identifier and the name of a computer on the network.</source>
          <target state="translated">프로세스 식별자 및 네트워크에 있는 컴퓨터의 이름이 주어지면 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component that is associated with a remote process resource identified by the <ph id="ph2">&lt;paramref name="processId" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="processId" /&gt;</ph> 매개 변수에 의해 식별되는 원격 프로세스 리소스에 연결된 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component and associate it with a process resource on a remote computer on the network.</source>
          <target state="translated">이 메서드를 사용 하 여 새 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 네트워크에서 원격 컴퓨터에서 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The process resource must already exist on the specified computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> does not create a system resource, but rather associates a resource with an application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
          <target state="translated">프로세스 리소스 때문에 지정된 된 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> 시스템 리소스를 만들지 않고 응용 프로그램에서 생성 된는 리소스를 연결 하지만 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>A process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> can be retrieved only for a process that is currently running on the computer.</source>
          <target state="translated">프로세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 컴퓨터에서 현재 실행 중인 프로세스에만 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>After the process terminates, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> throws an exception if you pass it an expired identifier.</source>
          <target state="translated">프로세스가 종료 된 후 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> 만료 된 식별자를 전달 하는 경우 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>On any particular computer, the identifier of a process is unique.</source>
          <target state="translated">프로세스의 식별자는 모든 컴퓨터에서 고유 합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> returns one process at most.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> 최대 하나의 프로세스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>If you want to get all the processes running a particular application, use <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph>.</source>
          <target state="translated">사용 하 여 특정 응용 프로그램을 실행 중인 모든 프로세스를 가져올 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>If multiple processes exist on the computer running the specified application, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph> returns an array containing all the associated processes.</source>
          <target state="translated">여러 프로세스는 지정된 된 응용 프로그램을 실행 하는 컴퓨터에 있는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29&gt;</ph> 은 연결 된 모든 프로세스가 포함 된 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>You can query each of these processes in turn for its identifier.</source>
          <target state="translated">이러한 각 프로세스 식별자에 대 한 다시 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The process identifier can be viewed in the <ph id="ph1">`Processes`</ph> panel of the Windows Task Manager.</source>
          <target state="translated">프로세스 식별자를 볼 수 있습니다는 <ph id="ph1">`Processes`</ph> Windows 작업 관리자의 패널입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The <ph id="ph1">`PID`</ph> column displays the process identifier that is assigned to a process.</source>
          <target state="translated"><ph id="ph1">`PID`</ph> 프로세스에 할당 된 프로세스 식별자 열에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>If you do not specify a <ph id="ph1">`machineName`</ph>, the local computer is used.</source>
          <target state="translated">지정 하지 않는 경우는 <ph id="ph1">`machineName`</ph>, 로컬 컴퓨터가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>Alternatively, you can specify the local computer by setting <ph id="ph1">`machineName`</ph> to the value "." or to an empty string ("").</source>
          <target state="translated">또는 설정 하 여 로컬 컴퓨터를 지정할 수 있습니다 <ph id="ph1">`machineName`</ph> 값에 "." 또는 빈 문자열 ("").</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The process specified by the <ph id="ph1">&lt;paramref name="processId" /&gt;</ph> parameter is not running.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="processId" /&gt;</ph> 매개 변수로 지정된 프로세스가 실행되고 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The identifier might be expired.</source>
          <target state="translated">식별자가 만료되었을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter syntax is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수 구문이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The name might have length zero (0).</source>
          <target state="translated">이름의 길이가 0일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>The process was not started by this object.</source>
          <target state="translated">프로세스가 이 개체에 의해 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Creates an array of new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> components and associates them with existing process resources.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소로 이루어진 배열을 만들어 기존 프로세스 리소스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component for each process resource on the local computer.</source>
          <target state="translated">로컬 컴퓨터의 각 프로세스 리소스에 대해 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that represents all the process resources running on the local computer.</source>
          <target state="translated">로컬 컴퓨터에서 실행 중인 모든 프로세스 리소스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources on the local computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새로의 배열을 만드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 로컬 컴퓨터에 있는 모든 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>The process resources must already exist on the local computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> does not create system resources but rather associates resources with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components.</source>
          <target state="translated">프로세스 리소스 때문에 로컬 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 아니라 응용 프로그램에서 생성 된 리소스에 연결 하지만 시스템 리소스를 만들지 않습니다 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>Because the operating system itself is running background processes, this array is never empty.</source>
          <target state="translated">백그라운드 프로세스를 실행 하는 운영 체제 자체에서는 때문에이 배열은 비어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> method.</source>
          <target state="translated">모든 컴퓨터에서 실행 중인 프로세스를 검색 하지 않을 경우 사용 하 여의 수를 제한할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component that is associated with the process identified on the system by the process identifier that you pass to the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 만듭니다는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드에 전달 하는 프로세스 식별자에 의해 시스템에 식별 되는 프로세스와 연결 된 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> creates an array of <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components whose associated process resources share the executable file you pass to the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 이루어진 배열을 만들어 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드에 전달할 연결된 된 프로세스 자원이 실행 파일을 공유 하는 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</source>
          <target state="translated">서비스 호스트 프로세스 (svchost.exe)의 동일한 인스턴스 내에서 여러 Windows 서비스를 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>GetProcesses does not identify those individual services; for that, see <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;</ph>.</source>
          <target state="translated">GetProcesses 개별 서비스를 식별 하지 않습니다. 이 위해 참조 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The computer from which to read the list of processes.</source>
          <target state="translated">프로세스 목록을 읽어 올 컴퓨터입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component for each process resource on the specified computer.</source>
          <target state="translated">지정한 컴퓨터의 각 프로세스 리소스에 대해 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that represents all the process resources running on the specified computer.</source>
          <target state="translated">지정된 컴퓨터에서 실행 중인 모든 프로세스 리소스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources on the specified (usually remote) computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새로의 배열을 만드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소 (일반적으로 원격) 지정한 컴퓨터에 있는 모든 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The process resources must already exist on the local computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> does not create system resources but rather associates resources with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components.</source>
          <target state="translated">프로세스 리소스 때문에 로컬 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 아니라 응용 프로그램에서 생성 된 리소스에 연결 하지만 시스템 리소스를 만들지 않습니다 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>Because the operating system itself is running background processes, this array is never empty.</source>
          <target state="translated">백그라운드 프로세스를 실행 하는 운영 체제 자체에서는 때문에이 배열은 비어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> method.</source>
          <target state="translated">모든 컴퓨터에서 실행 중인 프로세스를 검색 하지 않을 경우 사용 하 여의 수를 제한할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component that is associated with the process identified on the system by the process identifier that you pass to the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 만듭니다는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드에 전달 하는 프로세스 식별자에 의해 시스템에 식별 되는 프로세스와 연결 된 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> creates an array of <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components whose associated process resources share the executable file you pass to the method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 이루어진 배열을 만들어 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드에 전달할 연결된 된 프로세스 자원이 실행 파일을 공유 하는 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</source>
          <target state="translated">이 오버 로드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 메서드는 네트워크의 원격 컴퓨터에서 실행 중인 프로세스 리소스의 목록을 검색 하려면 일반적으로 사용 되지만 전달 하 여 로컬 컴퓨터를 지정할 수 있습니다 "."입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</source>
          <target state="translated">서비스 호스트 프로세스 (svchost.exe)의 동일한 인스턴스 내에서 여러 Windows 서비스를 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>GetProcesses does not identify those individual services; for that, see <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;</ph>.</source>
          <target state="translated">GetProcesses 개별 서비스를 식별 하지 않습니다. 이 위해 참조 <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.GetServices%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter syntax is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수 구문이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>It might have length zero (0).</source>
          <target state="translated">길이가 0일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>The operating system platform does not support this operation on remote computers.</source>
          <target state="translated">운영 체제 플랫폼이 원격 컴퓨터에서 이 작업을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
          <target state="translated">프로세스 정보를 가져오는 데 사용되는  성능 카운터 API에 액세스하는 데 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
          <target state="translated">이 예외는 Windows NT, Windows 2000 및 Windows XP에 해당됩니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>A problem occurred accessing an underlying system API.</source>
          <target state="translated">내부 시스템 API에 액세스하는 동안 문제가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcesses(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Creates an array of new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> components and associates them with the existing process resources that all share the specified process name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 모든 기존 프로세스 리소스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>The friendly name of the process.</source>
          <target state="translated">프로세스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>Creates an array of new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> components and associates them with all the process resources on the local computer that share the specified process name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 로컬 컴퓨터의 모든 프로세스 리소스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that represents the process resources running the specified application or file.</source>
          <target state="translated">지정한 응용 프로그램 또는 파일을 실행 중인 프로세스 리소스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources that are running the same executable file on the local computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새로의 배열을 만드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 로컬 컴퓨터에서 동일한 실행 파일을 실행 하는 모든 프로세스 리소스와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>The process resources must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> does not create system resources but rather associates them with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components.</source>
          <target state="translated">프로세스 리소스 때문에 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 시스템 리소스를 만들지 않습니다 되지만 아니라 응용 프로그램에서 생성 된 연결 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</source>
          <target state="translated">A <ph id="ph1">`processName`</ph> 메서드가 반환한 배열이 비워 둘 수 있으므로 로컬 컴퓨터에서 현재 실행 하지 않는 실행 파일에 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</source>
          <target state="translated">프로세스 이름은 예: Outlook에서 확장명이.exe 또는 경로 포함 하지 않는 프로세스에 대 한는 친숙 한 이름이입니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 가져오고 동일한 실행 파일에 연관 된 모든 프로세스를 조작 하는 데 도움이 됩니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>For example, you can pass an executable file name as the <ph id="ph1">`processName`</ph> parameter, in order to shut down all the running instances of that executable file.</source>
          <target state="translated">예를 들어 실행 파일 이름으로 전달할 수 있습니다는 <ph id="ph1">`processName`</ph> 해당 실행 파일의 모든 실행 중인 인스턴스를 종료 하기 위해 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>Although a process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <ph id="ph2">`processName`</ph> parameter.</source>
          <target state="translated">하지만 프로세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 은 시스템에 단일 프로세스 리소스를 고유 로컬 컴퓨터에서 여러 프로세스가 실행 될 수 있습니다 하 여 지정 된 응용 프로그램은 <ph id="ph2">`processName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> returns one process at most, but <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> returns an array containing all the associated processes.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 많아야 한 프로세스를 반환 하지만 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 은 연결 된 모든 프로세스가 포함 된 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</source>
          <target state="translated">표준 API 호출을 사용 하는 프로세스를 조작 해야 하는 경우 이러한 각 프로세스 식별자에 대 한 다시 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>You cannot access process resources through the process name alone but, once you have retrieved an array of <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</source>
          <target state="translated">프로세스 이름만 통해 표시 되지만의 배열을 검색 했으면 프로세스 리소스에 액세스할 수 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 연관 된 구성 요소 프로세스 리소스 있습니다 수 시작, 종료 및 시스템 리소스를 조작 합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
          <target state="translated">프로세스 정보를 가져오는 데 사용되는  성능 카운터 API에 액세스하는 데 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
          <target state="translated">이 예외는 Windows NT, Windows 2000 및 Windows XP에 해당됩니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The friendly name of the process.</source>
          <target state="translated">프로세스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The name of a computer on the network.</source>
          <target state="translated">네트워크에 있는 컴퓨터 이름입니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Creates an array of new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> components and associates them with all the process resources on a remote computer that share the specified process name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 원격 컴퓨터에 있는 모든 프로세스 리소스에 연결합니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that represents the process resources running the specified application or file.</source>
          <target state="translated">지정한 응용 프로그램 또는 파일을 실행 중인 프로세스 리소스를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources that are running the same executable file on the specified computer.</source>
          <target state="translated">이 메서드를 사용 하 여 새로의 배열을 만드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소와 지정된 된 컴퓨터에서 동일한 실행 파일을 실행 하는 모든 프로세스 리소스를 연결 합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The process resources must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> does not create system resources but rather associates them with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components.</source>
          <target state="translated">프로세스 리소스 때문에 컴퓨터에 이미 있어야 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 시스템 리소스를 만들지 않습니다 되지만 아니라 응용 프로그램에서 생성 된 연결 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</source>
          <target state="translated">A <ph id="ph1">`processName`</ph> 메서드가 반환한 배열이 비워 둘 수 있으므로 로컬 컴퓨터에서 현재 실행 하지 않는 실행 파일에 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</source>
          <target state="translated">프로세스 이름은 예: Outlook에서 확장명이.exe 또는 경로 포함 하지 않는 프로세스에 대 한는 친숙 한 이름이입니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 가져오고 동일한 실행 파일에 연관 된 모든 프로세스를 조작 하는 데 도움이 됩니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>For example, you can pass an executable file name as the <ph id="ph1">`processName`</ph> parameter, in order to shut down all the running instances of that executable file.</source>
          <target state="translated">예를 들어 실행 파일 이름으로 전달할 수 있습니다는 <ph id="ph1">`processName`</ph> 해당 실행 파일의 모든 실행 중인 인스턴스를 종료 하기 위해 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Although a process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the <ph id="ph2">`processName`</ph> parameter.</source>
          <target state="translated">하지만 프로세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 은 시스템에 단일 프로세스 리소스를 고유 로컬 컴퓨터에서 여러 프로세스가 실행 될 수 있습니다 하 여 지정 된 응용 프로그램은 <ph id="ph2">`processName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> returns one process at most, but <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> returns an array containing all the associated processes.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 많아야 한 프로세스를 반환 하지만 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> 은 연결 된 모든 프로세스가 포함 된 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</source>
          <target state="translated">표준 API 호출을 사용 하는 프로세스를 조작 해야 하는 경우 이러한 각 프로세스 식별자에 대 한 다시 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>You cannot access process resources through the process name alone but, once you have retrieved an array of <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</source>
          <target state="translated">프로세스 이름만 통해 표시 되지만의 배열을 검색 했으면 프로세스 리소스에 액세스할 수 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 연관 된 구성 요소 프로세스 리소스 있습니다 수 시작, 종료 및 시스템 리소스를 조작 합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>You can use this overload to get processes on the local computer as well as on a remote computer.</source>
          <target state="translated">프로세스를 가져올 원격 컴퓨터 모두 로컬 컴퓨터에이 오버 로드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Use "." to specify the local computer.</source>
          <target state="translated">사용 하 여 "." 로컬 컴퓨터를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Another overload exists that uses the local computer by default.</source>
          <target state="translated">다른 오버 로드를 존재 하는 기본적으로 로컬 컴퓨터를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>You can access processes on remote computers only to view information, such as statistics, about the processes.</source>
          <target state="translated">프로세스 통계와 같은 프로세스에 대 한 정보를 보려면에 원격 컴퓨터에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>You cannot close, terminate (using <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>), or start processes on remote computers.</source>
          <target state="translated">닫기, 종료할 수 없습니다 (사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>), 또는 원격 컴퓨터에서 프로세스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</source>
          <target state="translated">다음 예제에서는 로컬 컴퓨터와 로컬 컴퓨터에서 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스는 현재 프로세스의 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>It then retrieves information for the same processes on a remote computer.</source>
          <target state="translated">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter syntax is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수 구문이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>It might have length zero (0).</source>
          <target state="translated">길이가 0일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="machineName" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>The operating system platform does not support this operation on remote computers.</source>
          <target state="translated">운영 체제 플랫폼이 원격 컴퓨터에서 이 작업을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>There are problems accessing the performance counter API's used to get process information.</source>
          <target state="translated">프로세스 정보를 가져오는 데 사용되는  성능 카운터 API에 액세스하는 데 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>This exception is specific to Windows NT, Windows 2000, and Windows XP.</source>
          <target state="translated">이 예외는 Windows NT, Windows 2000 및 Windows XP에 해당됩니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>A problem occurred accessing an underlying system API.</source>
          <target state="translated">내부 시스템 API에 액세스하는 동안 문제가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>Gets the native handle of the associated process.</source>
          <target state="translated">연결된 프로세스의 기본 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>The handle that the operating system assigned to the associated process when the process was started.</source>
          <target state="translated">연결된 프로세스가 시작될 때 운영 체제에서 해당 프로세스에 할당한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>The system uses this handle to keep track of process attributes.</source>
          <target state="translated">시스템에서는 이 핸들을 사용하여 프로세스 특성을 추적합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions.</source>
          <target state="translated">응용 프로그램 여러 프로세스 정보 및 제어 기능에 대 한 매개 변수로 사용할 수 있는 프로세스에 대 한 핸들을 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>You can use this handle to initialize a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> or to call native methods with platform invoke.</source>
          <target state="translated">이 핸들을 사용 하 여 초기화는 <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> 하거나 플랫폼 네이티브 메서드를 호출를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>This process handle is private to an application--in other words, process handles cannot be shared.</source>
          <target state="translated">이 프로세스 핸들은 개인 응용 프로그램에 즉, 프로세스를 공유할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>A process also has a process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> which, unlike the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph>, is unique and, therefore, valid throughout the system.</source>
          <target state="translated">프로세스는 또한 프로세스에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 는 달리는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph>, 고유한 그리고이 시스템 전체에서 유효 합니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>Only processes started through a call to <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> set the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> property of the corresponding <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> instances.</source>
          <target state="translated">호출을 통해 시작 되는 프로세스만 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 설정는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 해당 속성 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>The process has not been started or has exited.</source>
          <target state="translated">프로세스가 시작되지 않았거나 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> property cannot be read because there is no process associated with this <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> instance.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> 인스턴스에 연결된 프로세스가 없으므로 <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 속성을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 인스턴스가 실행 프로세스에 연결되었지만 모든 액세스 권한을 가진 핸들을 가져오는 데 필요한 사용 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Handle">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Handle">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HandleCount">
          <source>Gets the number of handles opened by the process.</source>
          <target state="translated">프로세스에서 연 핸들 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>The number of operating system handles the process has opened.</source>
          <target state="translated">프로세스에서 연 운영 체제 핸들의 수입니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>Handles provide a way for a process to refer to objects.</source>
          <target state="translated">핸들은 프로세스 개체를 참조할 수 있는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>A process can obtain handles to files, resources, message queues, and many other operating system objects.</source>
          <target state="translated">프로세스는 파일, 리소스, 메시지 큐, 및 기타 여러 운영 체제 개체에 대 한 핸들을 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>The operating system reclaims the memory associated with the process only when the handle count is zero.</source>
          <target state="translated">운영 체제 프로세스에 연결 된 핸들 수 0 일 경우에 메모리를 회수 합니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HandleCount">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성을 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HandleCount">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HasExited">
          <source>Gets a value indicating whether the associated process has been terminated.</source>
          <target state="translated">연결된 프로세스가 종료되었는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operating system process referenced by the <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component has terminated; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소가 참조하는 운영 체제 프로세스가 종료되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>A value of <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> indicates that the associated process has terminated, either normally or abnormally.</source>
          <target state="translated">값이 <ph id="ph1">`true`</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 연결된 된 프로세스가 종료 되었음을 나타냅니다, 정상 또는 비정상으로 합니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>You can request or force the associated process to exit by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">요청 하거나 강제로 연결된 된 프로세스를 호출 하 여 종료 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time.</source>
          <target state="translated">프로세스에 열려 있는 핸들이 없으면 프로세스는 종료 되었으므로 하지만 핸들, 종료 코드 및 종료 시간과 같은 프로세스에 대 한 관리 정보는 유지 하는 경우 운영 체제 프로세스 메모리를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>To get this information, you can use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> properties.</source>
          <target state="translated">이 정보를 얻으려면 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>These properties are populated automatically for processes that were started by this component.</source>
          <target state="translated">이러한 속성은이 구성 요소에 의해 시작 된 프로세스에 대 한 자동으로 채워집니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>The administrative information is released when all the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components that are associated with the system process are destroyed and hold no more handles to the exited process.</source>
          <target state="translated">관리 정보를 놓을 때 모든는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 시스템 프로세스와 관련 된 구성 요소 소멸 되 고 종료 된 프로세스에 핸들이 더 이상 없을 합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>A process can terminate independently of your code.</source>
          <target state="translated">코드와는 별개로 프로세스를 종료할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>If you started the process using this component, the system updates the value of <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> automatically, even if the associated process exits independently.</source>
          <target state="translated">이 구성 요소를 사용 하 여 프로세스를 시작한 경우 시스템의 값을 업데이트 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 자동으로 연결된 된 프로세스가 종료 되지 독립적으로 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">비동기 이벤트 처리기로 표준 출력이 리디렉션된 때 마일스 톤을 출력 프로세스가 완료 되지 않을 때이 속성은 반환 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>To ensure that asynchronous event handling has been completed, call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> overload that takes no parameter before checking <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph>.</source>
          <target state="translated">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 오버 로드를 확인 하기 전에 매개 변수를 취하지 <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</source>
          <target state="translated">최대 10 초 동안 2 초 간격 연결된 된 프로세스의 실제 메모리 사용률을 검색합니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>The example detects whether the process exits before 10 seconds have elapsed.</source>
          <target state="translated">이 예제에서는 10 초가 경과 하기 전에 프로세스를 종료 여부를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>The example closes the process if it is still running after 10 seconds.</source>
          <target state="translated">이 예제에서는 10 초 후 실행 중인 프로세스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HasExited">
          <source>There is no process associated with the object.</source>
          <target state="translated">개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HasExited">
          <source>The exit code for the process could not be retrieved.</source>
          <target state="translated">프로세스의 종료 코드를 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HasExited">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.HasExited">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.HasExited">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Id">
          <source>Gets the unique identifier for the associated process.</source>
          <target state="translated">연결된 프로세스의 고유 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>The system-generated unique identifier of the process that is referenced by this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> instance.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 인스턴스에서 참조하는 프로세스의 고유 식별자입니다. 이 식별자는 시스템에서 생성됩니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>The process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> is not valid if the associated process is not running.</source>
          <target state="translated">프로세스 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 연결된 된 프로세스가 실행 되지 않는 경우에 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>Therefore, you should ensure that the process is running before attempting to retrieve the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> property.</source>
          <target state="translated">검색 하기 전에 프로세스가 실행 되 고 있는지 확인 해야 따라서는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>Until the process terminates, the process identifier uniquely identifies the process throughout the system.</source>
          <target state="translated">프로세스가 종료 될 때까지 프로세스 식별자가 시스템에서 프로세스를 고유 하 게 식별 합니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>You can connect a process that is running on a local or remote computer to a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance by passing the process identifier to the <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> method.</source>
          <target state="translated">새 로컬 또는 원격 컴퓨터에서 실행 중인 프로세스에 연결할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 프로세스 식별자를 전달 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> is a <ph id="ph2">`static`</ph> method that creates a new component and sets the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> property for the new <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> instance automatically.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph> <ph id="ph2">`static`</ph> 새 구성 요소를 만드는 메서드를 설정 하 고는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 새 속성 <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> 자동으로 인스턴스.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>Process identifiers can be reused by the system.</source>
          <target state="translated">시스템 프로세스 식별자를 다시 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> property value is unique only while the associated process is running.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 연결된 프로세스가 실행 중인 동안에 속성 값이 고유 합니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>After the process has terminated, the system can reuse the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> property value for an unrelated process.</source>
          <target state="translated">시스템 프로세스 작업이 종료 된 후 다시 사용할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 관련 되지 않은 프로세스에 대 한 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">시스템에서 고유 식별자 이므로 전달할 수 있습니다 다른 스레드에 전달 하는 대신 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>This action can save system resources yet guarantee that the process is correctly identified.</source>
          <target state="translated">이 작업 시스템 리소스를 절약 하면서 프로세스가 올바르게 확인 되더라도 보장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>The following example demonstrates how to obtain the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> for all running instances of an application.</source>
          <target state="translated">다음 예제를 가져오는 방법을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 모든 응용 프로그램의 인스턴스를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> number to remove a specific instance.</source>
          <target state="translated">코드 메모장의 새 인스턴스를 만들고 메모장의 모든 인스턴스를 나열 하 고 사용자를 입력할 수 있도록 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> 특정 인스턴스를 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Id">
          <source>The process's <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> property has not been set.</source>
          <target state="translated">프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 속성이 설정되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Id">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Id">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Id">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성을 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Id">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>Immediately stops the associated process.</source>
          <target state="translated">연결된 프로세스를 즉시 중지합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> forces a termination of the process, while <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> only requests a termination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 프로세스의 종료를 강제로 수행 하는 동안 <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 만 종료를 요청 합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>When a process with a graphical interface is executing, its message loop is in a wait state.</source>
          <target state="translated">그래픽 인터페이스를 사용 하 여 프로세스를 실행할 때 해당 메시지 루프는 대기 상태에 있습니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>The message loop executes every time a Windows message is sent to the process by the operating system.</source>
          <target state="translated">운영 체제에 의해 프로세스에 Windows 메시지를 보낼 때마다 메시지 루프를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 는 잘 구성 된 응용 프로그램에서 자식 창을 닫고 응용 프로그램에 대 한 실행 중인 모든 메시지 루프를 취소 주 창에 근접 하는 요청을 보냅니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>The request to exit the process by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> does not force the application to quit.</source>
          <target state="translated">요청을 호출 하 여 프로세스를 종료 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 응용 프로그램 종료을 강제로 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>The application can ask for user verification before quitting, or it can refuse to quit.</source>
          <target state="translated">응용 프로그램을 종료 하기 전에 사용자 확인을 위해 묻거나 종료를 거부할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>To force the application to quit, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램을 종료 하려면을 사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> is identical to that of a user closing an application's main window using the system menu.</source>
          <target state="translated">동작은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 시스템 메뉴를 사용 하 여 응용 프로그램의 주 창을 닫을 수 있는 사용자와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</source>
          <target state="translated">따라서 주 창을 닫아 프로세스를 종료를 요청 응용 프로그램이 즉시 종료 강제로 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method executes asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드가 비동기적으로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>After calling the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method, call the <ph id="ph2">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to wait for the process to exit, or check the <ph id="ph3">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property to determine if the process has exited.</source>
          <target state="translated">호출한 후의 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드를 호출은 <ph id="ph2">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> 검사를 종료 하려면 프로세스를 대기 하는 메서드는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성을 확인 하는 경우 프로세스가 종료 되었습니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>Data edited by the process or resources allocated to the process can be lost if you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">프로세스에 의해 편집 하는 데이터 또는 프로세스에 할당 된 리소스 손실 될 수 있습니다를 호출 하면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> causes an abnormal process termination and should be used only when necessary.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 비정상적인 프로세스 종료를 사용 하면 필요한 경우에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 프로세스의 순차적 종료가 가능 하 고 인터페이스와 함께 응용 프로그램에 대 한 것 이므로 모든 창을 닫습니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> fails, you can use <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> to terminate the process.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 실패 하면 צ ְ ײ <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 으 프로세스를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> is the only way to terminate processes that do not have graphical interfaces.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 그래픽 인터페이스를 갖지 않는 프로세스를 종료 하는 유일한 방법이입니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>You can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> only for processes that are running on the local computer.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>You cannot cause processes on remote computers to exit.</source>
          <target state="translated">종료 하려면 원격 컴퓨터에서 프로세스 할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>You can only view information for processes running on remote computers.</source>
          <target state="translated">만 원격 컴퓨터에서 실행 중인 프로세스에 대 한 정보를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>If the call to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> method is made while the process is currently terminating, a <ph id="ph2">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> is thrown for Access Denied.</source>
          <target state="translated">경우에 대 한 호출은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 메서드는 프로세스를 종료 하는 동안 구성 됩니다는 <ph id="ph2">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> 액세스가 거부에 대해 발생 합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>The associated process could not be terminated.</source>
          <target state="translated">연결된 프로세스를 종료할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>The process is terminating.</source>
          <target state="translated">프로세스가 종료됩니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>The associated process is a Win16 executable.</source>
          <target state="translated">연결된 프로세스가 Win16 실행 파일입니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>You are attempting to call <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.Kill" /&gt;</ph> for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.Kill" /&gt;</ph>를 호출하려고 합니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>The method is available only for processes running on the local computer.</source>
          <target state="translated">이 메서드는 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>The process has already exited.</source>
          <target state="translated">프로세스가 이미 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Kill">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Kill">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>Takes a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component out of the state that lets it interact with operating system processes that run in a special mode.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 특수 모드에서 실행되는 운영 체제 프로세스와 상호 작용할 수 없는 상태로 만듭니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>Some operating system processes run in a special mode.</source>
          <target state="translated">일부 운영 체제 프로세스를 특수 모드에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>Attempting to read properties of or attach to these processes is not possible unless you have called <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> on the component.</source>
          <target state="translated">속성을 읽거나 이러한 프로세스에 연결할 수 없으면 호출 하지 않는 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> 구성 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> when you no longer need access to these processes that run in special mode.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> 특수 모드에서 실행 되는 이러한 프로세스에 대 한 액세스를 더 이상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.LeaveDebugMode">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MachineName">
          <source>Gets the name of the computer the associated process is running on.</source>
          <target state="translated">연결된 프로세스가 실행 중인 컴퓨터 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>The name of the computer that the associated process is running on.</source>
          <target state="translated">연결된 프로세스가 실행 중인 컴퓨터 이름입니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>You can view statistical data and process information for processes running on remote computers but you cannot call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> on remote computers.</source>
          <target state="translated">호출할 수 없습니다. 하지만 원격 컴퓨터에서 실행 중인 프로세스에 대 한 프로세스 정보 및 통계 데이터를 볼 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> 원격 컴퓨터에 있습니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>When the associated process is executing on the local machine, this property returns a period (".") for the machine name.</source>
          <target state="translated">연결된 된 프로세스를 로컬 컴퓨터에서 실행할 때이 속성은 마침표 반환 (".") 컴퓨터 이름입니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>You should use the <ph id="ph1">&lt;xref:System.Environment.MachineName%2A?displayProperty=nameWithType&gt;</ph> property to get the correct machine name.</source>
          <target state="translated">사용 해야는 <ph id="ph1">&lt;xref:System.Environment.MachineName%2A?displayProperty=nameWithType&gt;</ph> 올바른 컴퓨터 이름을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>To use the following example you must first start at least one instance of Notepad on a remote computer.</source>
          <target state="translated">사용 먼저 다음 예제에서는 원격 컴퓨터에서 메모장의 인스턴스를 하나 이상 시작 합니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>The example requests the name of the remote computer on which Notepad is running, and then displays the respective <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.Process.MachineName%2A&gt;</ph> properties for each instance.</source>
          <target state="translated">이 예제에서는 요청 메모장 실행 되 고 해당을 표시 하는 원격 컴퓨터의 이름을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.MachineName%2A&gt;</ph> 각 인스턴스에 대 한 속성입니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MachineName">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MachineName">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>Gets the main module for the associated process.</source>
          <target state="translated">연결된 프로세스의 주 모듈을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainModule">
          <source>The <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessModule" /&gt;</ph> that was used to start the process.</source>
          <target state="translated">프로세스를 시작하는 데 사용된 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessModule" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainModule">
          <source>A process module represents a.dll or .exe file that is loaded into a particular process.</source>
          <target state="translated">프로세스 모듈 특정 프로세스에 로드 되는.dll 또는.exe 파일을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainModule">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> 속성을 사용 하면 모듈 이름, 파일 이름 및 모듈 메모리 정보를 포함 하 여 프로세스를 시작 하는 데 사용 되는 실행 파일에 대 한 정보를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainModule" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainModule" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>A 32-bit process is trying to access the modules of a 64-bit process.</source>
          <target state="translated">32비트 프로세스가 64비트 프로세스의 모듈에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainModule">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainModule">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainModule">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>Gets the window handle of the main window of the associated process.</source>
          <target state="translated">연결된 프로세스의 주 창에 대한 창 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The system-generated window handle of the main window of the associated process.</source>
          <target state="translated">연결된 프로세스의 주 창에 대한 창 핸들입니다. 이 창 핸들은 시스템에서 생성됩니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The main window is the window opened by the process that currently has the focus (the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TopLevel%2A&gt;</ph> form).</source>
          <target state="translated">주 현재 포커스가 있는 프로세스에서 연 창입니다 (의 <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TopLevel%2A&gt;</ph> 양식).</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>You must use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method to refresh the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> object to get the current main window handle if it has changed.</source>
          <target state="translated">사용 해야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 를 새로 고치려면 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 변경 된 경우 현재 주 창 핸들을 가져올 개체입니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>In general, because the window handle is cached, use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> beforehand to guarantee that you’ll retrieve the current handle.</source>
          <target state="translated">창 핸들은 캐시 되므로 일반적으로 사용 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 현재 핸들 검색을 보장 하기 위해 사전에 미리 합니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>You can get the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> property only for processes that are running on the local computer.</source>
          <target state="translated">가져올 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> 로컬 컴퓨터에서 실행 되는 프로세스에 대해서만 속성입니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> property is a value that uniquely identifies the window that is associated with the process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> 속성은 고유 하 게 식별 하는 프로세스와 연결 된 창은 값입니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>A process has a main window associated with it only if the process has a graphical interface.</source>
          <target state="translated">프로세스에 연결 된 프로세스에 그래픽 인터페이스 하는 경우에 주 창.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>If the associated process does not have a main window, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> value is zero.</source>
          <target state="translated">연결된 된 프로세스에는 주 창, 없는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> 값은 0입니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</source>
          <target state="translated">값 0이 숨겨져 있는 프로세스에 대 한 즉, 작업 표시줄에 표시 되지 않는 처리 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</source>
          <target state="translated">이 작업 표시줄의 맨 오른쪽 알림 영역에서 아이콘으로 표시 되는 프로세스에 대 한 사례 수 있습니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>If you have just started a process and want to use its main window handle, consider using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> method to allow the process to finish starting, ensuring that the main window handle has been created.</source>
          <target state="translated">사용 하 여 방금 시작한 프로세스의 주 창 핸들을 사용할 경우 고려해는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> 메서드 시작이 완료 하는 프로세스의 주 창 핸들이 만들어졌는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>Otherwise, an exception will be thrown.</source>
          <target state="translated">그렇지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowHandle" /&gt;</ph> is not defined because the process has exited.</source>
          <target state="translated">프로세스가 종료되어 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowHandle" /&gt;</ph>이 정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowHandle" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowHandle" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowHandle">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>Gets the caption of the main window of the process.</source>
          <target state="translated">프로세스의 주 창에 대한 캡션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>The main window title of the process.</source>
          <target state="translated">프로세스의 주 창 제목입니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>A process has a main window associated with it only if the process has a graphical interface.</source>
          <target state="translated">프로세스에 연결 된 프로세스에 그래픽 인터페이스 하는 경우에 주 창.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>If the associated process does not have a main window (so that <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> is zero), <ph id="ph2">&lt;xref:System.Diagnostics.Process.MainWindowTitle%2A&gt;</ph> is an empty string ("").</source>
          <target state="translated">연결된 된 프로세스에 주 창이 없는 경우 (있도록 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> 0), <ph id="ph2">&lt;xref:System.Diagnostics.Process.MainWindowTitle%2A&gt;</ph> 은 빈 문자열 ("").</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>If you have just started a process and want to use its main window title, consider using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> method to allow the process to finish starting, ensuring that the main window handle has been created.</source>
          <target state="translated">사용 하 여 방금 시작한 프로세스의 주 창 제목에 사용 하려는 하는 경우 고려는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> 메서드 시작이 완료 하는 프로세스의 주 창 핸들이 만들어졌는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>Otherwise, the system throws an exception.</source>
          <target state="translated">그렇지 않으면 시스템에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>The main window is the window that currently has the focus; note that this might not be the primary window for the process.</source>
          <target state="translated">현재 포커스가 있는; 창인지 주 창 프로세스에 대 한 기본 창 되지 않을 수 있습니다이 note 합니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>You must use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method to refresh the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> object to get the current main window handle if it has changed.</source>
          <target state="translated">사용 해야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 를 새로 고치려면 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 변경 된 경우 현재 주 창 핸들을 가져올 개체입니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>The following example starts an instance of Notepad and retrieves the caption of the main window of the process.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 하 고 프로세스의 주 창의 캡션을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowTitle" /&gt;</ph> property is not defined because the process has exited.</source>
          <target state="translated">프로세스가 종료되어 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowTitle" /&gt;</ph> 속성이 정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowTitle" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MainWindowTitle" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MainWindowTitle">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</source>
          <target state="translated">연결된 프로세스에 대한 최대 허용 작업 집합 크기(바이트)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The maximum working set size that is allowed in memory for the process, in bytes.</source>
          <target state="translated">프로세스에 대해 메모리에서 허용된 작업 집합의 최대 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</source>
          <target state="translated">공유 데이터에는.dll 파일, system.dll 파일에서 페이지를 포함 하 여 응용 프로그램을 실행 하는 모든 명령이 들어 있는 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>As the working set size increases, memory demand increases.</source>
          <target state="translated">작업 집합의 증가 하는 크기, 메모리 수요가 증가 합니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>A process has minimum and maximum working set sizes.</source>
          <target state="translated">프로세스에 최대 및 최소 작업 집합 크기입니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</source>
          <target state="translated">프로세스 리소스를 만들 때마다 시스템의 최소 작업 집합 크기는 프로세스를 같은 메모리 용량을 예약 합니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</source>
          <target state="translated">가상 메모리 관리자 유지 하려고 이상 최소 메모리 양을 상주 하는 프로세스 활성화 되어 있지만 최대 크기 보다 유지 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The system sets the default working set sizes.</source>
          <target state="translated">작업 집합 크기 기본을 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>You can modify these sizes using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MaxWorkingSet%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.MinWorkingSet%2A&gt;</ph> members.</source>
          <target state="translated">사용 하 여 이러한 크기를 수정할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MaxWorkingSet%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.MinWorkingSet%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>However, setting these values does not guarantee that the memory will be reserved or resident.</source>
          <target state="translated">그러나 이러한 값을 설정할 보장 하지 않습니다 예약 되거나 상주 하는 메모리 한 이루어집니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>When you increase the working set size of a process, you take physical memory away from the rest of the system.</source>
          <target state="translated">프로세스의 작업 집합 크기를 늘리면 수행한 실제 메모리를 시스템의 나머지 가져오게 됩니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</source>
          <target state="translated">최소 또는 최대 작업 집합 크기 시스템 성능이 저하 수 때문에 너무 커서를 요청 하지 않으면 확인 합니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The maximum working set size is invalid.</source>
          <target state="translated">최대 작업 집합 크기가 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>It must be greater than or equal to the minimum working set size.</source>
          <target state="translated">최소 작업 집합 크기보다 크거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>Working set information cannot be retrieved from the associated process resource.</source>
          <target state="translated">작업 집합 정보를 연결된 프로세스 리소스에서 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The process identifier or process handle is zero because the process has not been started.</source>
          <target state="translated">프로세스가 시작되지 않아서 프로세스 식별자 또는 프로세스 핸들이 0입니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MaxWorkingSet" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MaxWorkingSet" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MaxWorkingSet">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</source>
          <target state="translated">연결된 프로세스에 대해 허용되는 작업 집합의 최소 크기(바이트)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The minimum working set size that is required in memory for the process, in bytes.</source>
          <target state="translated">프로세스에 대해 메모리에서 필요로 하는 작업 집합의 최소 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</source>
          <target state="translated">공유 데이터에는.dll 파일, system.dll 파일에서 페이지를 포함 하 여 응용 프로그램을 실행 하는 모든 명령이 들어 있는 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>As the working set size increases, memory demand increases.</source>
          <target state="translated">작업 집합의 증가 하는 크기, 메모리 수요가 증가 합니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>A process has minimum and maximum working set sizes.</source>
          <target state="translated">프로세스에 최대 및 최소 작업 집합 크기입니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</source>
          <target state="translated">프로세스 리소스를 만들 때마다 시스템의 최소 작업 집합 크기는 프로세스를 같은 메모리 용량을 예약 합니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</source>
          <target state="translated">가상 메모리 관리자 유지 하려고 이상 최소 메모리 양을 상주 하는 프로세스 활성화 되어 있지만 최대 크기 보다 유지 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The system sets the default working set sizes.</source>
          <target state="translated">작업 집합 크기 기본을 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>You can modify these sizes using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MaxWorkingSet%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.MinWorkingSet%2A&gt;</ph> members.</source>
          <target state="translated">사용 하 여 이러한 크기를 수정할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MaxWorkingSet%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.MinWorkingSet%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>However, setting these values does not guarantee that the memory will be reserved or resident.</source>
          <target state="translated">그러나 이러한 값을 설정할 보장 하지 않습니다 예약 되거나 상주 하는 메모리 한 이루어집니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>When you increase the working set size of a process, you take physical memory away from the rest of the system.</source>
          <target state="translated">프로세스의 작업 집합 크기를 늘리면 수행한 실제 메모리를 시스템의 나머지 가져오게 됩니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</source>
          <target state="translated">최소 또는 최대 작업 집합 크기 시스템 성능이 저하 수 때문에 너무 커서를 요청 하지 않으면 확인 합니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The minimum working set size is invalid.</source>
          <target state="translated">최소 작업 집합 크기가 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>It must be less than or equal to the maximum working set size.</source>
          <target state="translated">최대 작업 집합 크기와 작거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>Working set information cannot be retrieved from the associated process resource.</source>
          <target state="translated">작업 집합 정보를 연결된 프로세스 리소스에서 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The process identifier or process handle is zero because the process has not been started.</source>
          <target state="translated">프로세스가 시작되지 않아서 프로세스 식별자 또는 프로세스 핸들이 0입니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>You are trying to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MinWorkingSet" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.MinWorkingSet" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.MinWorkingSet">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>Gets the modules that have been loaded by the associated process.</source>
          <target state="translated">연결된 프로세스에 의해 로드된 모듈을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessModule" /&gt;</ph> that represents the modules that have been loaded by the associated process.</source>
          <target state="translated">연결된 프로세스에 의해 로드된 모듈을 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessModule" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>A process module represents a.dll or .exe file that is loaded into a particular process.</source>
          <target state="translated">프로세스 모듈 특정 프로세스에 로드 되는.dll 또는.exe 파일을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> instance lets you view information about a module, including the module name, file name, and module memory details.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 인스턴스 모듈 이름, 파일 이름 및 모듈 메모리 정보를 포함 하 여 모듈에 대 한 정보를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>A process can load multiple modules into memory.</source>
          <target state="translated">프로세스는 메모리에 여러 모듈을 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>For example,.exe files that load additional .dll files have multiple modules.</source>
          <target state="translated">예를 들어 추가.dll 파일을 로드 하는.exe 파일에 여러 개의 모듈이 있습니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>After starting the process, this collection is empty until the system has loaded the process.</source>
          <target state="translated">프로세스를 시작한 후 시스템에서 프로세스를 로드할 때까지이 컬렉션은 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>If the process has a main window, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> before retrieving this property to ensure that the collection is nonempty when you get the list.</source>
          <target state="translated">프로세스에 주 창이 경우 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> 목록을 컬렉션에 비어 있지 않은 경우를 위해이 속성을 검색 하기 전에 가져옵니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Modules" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Modules" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Modules" /&gt;</ph> property for either the system process or the idle process.</source>
          <target state="translated">시스템 프로세스 또는 유휴 프로세스에 대한 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Modules" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Modules">
          <source>These processes do not have modules.</source>
          <target state="translated">이러한 프로세스에 모듈이 없습니다.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Modules">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
          <source>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 비페이징 시스템 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
          <source>The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 없는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 비페이징 시스템 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 없는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서 프로세스에서 사용 된 비페이징된 시스템 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</source>
          <target state="translated">시스템 메모리는 운영 체제에서 사용 하는 실제 메모리와 페이지 단위 및 비페이징 풀 나뉘어 있습니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.</source>
          <target state="translated">비페이징된 메모리 할당 시스템 메모리에 유지 되 고 가상 메모리 페이징 파일에 페이지 아웃 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Pool Nonpaged Bytes<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>Pool Nonpaged Bytes<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.OnExited">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> is the API method that raises the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> 발생 시키는 API 메서드는는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> causes the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event to occur and is the only way to raise the event using the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> 하면는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트를 발생 및 사용 하 여 이벤트를 발생 하는 유일한 방법은 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> is primarily used when deriving classes from the component.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> 이 구성 요소에서 클래스를 파생할 때 주로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>As an alternative to <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph>, you can write your own event handler.</source>
          <target state="translated">대신 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph>, 이벤트 처리기를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>You create your own event handler delegate and your own event-handling method.</source>
          <target state="translated">사용자 고유의 이벤트 처리기 대리자 및 사용자 고유의 이벤트 처리 메서드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component onto a form and double-click the icon.</source>
          <target state="translated">Visual Studio 환경을 사용 하는 경우 이벤트 처리기 대리자 (AddOnExited) 및 이벤트 처리 메서드 (Process1_Exited) 만들어집니다 끌면는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소를 폼의 아이콘을 두 번 클릭 합니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>The code you create to run when the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event occurs is entered into the Process1_Exited procedure.</source>
          <target state="translated">만들 때 실행할 코드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> Process1_Exited 프로시저에 입력 된 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>You do not need to create the <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> member, because it is implemented for you.</source>
          <target state="translated">만들 필요가 없습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> 멤버, 사용자에 대 한 구현 되기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>For an overview, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">에 대 한 개요 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> method in a derived class.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> 파생된 클래스에서 메서드.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.OnExited">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>Occurs each time an application writes a line to its redirected <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream.</source>
          <target state="translated">응용 프로그램이 리디렉션된 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림에 쓸 때마다 발생합니다.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event indicates that the associated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> has written a line, terminating with a newline character, to its redirected <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트는 연결 된 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 리디렉션된 줄 바꿈 문자로 종료 줄 입력 된 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The event is enabled during asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>.</source>
          <target state="translated">이벤트를 사용할지 비동기 읽기 작업 동안 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>To start asynchronous read operations, you must redirect the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream of a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, add your event handler to the <ph id="ph3">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event, and call <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph>.</source>
          <target state="translated">비동기 읽기 작업을 시작 하려면 리디렉션해야는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림을 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, 이벤트 처리기에 추가 <ph id="ph3">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트 및 호출 <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>Thereafter, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event signals each time the process writes a line to the redirected <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, until the process exits or calls <ph id="ph3">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>.</source>
          <target state="translated">그런 다음는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트 신호 프로세스 리디렉션된 쓸 때마다 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림, 프로세스 종료 또는 호출 될 때까지 <ph id="ph3">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The application that is processing the asynchronous output should call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to ensure that the output buffer has been flushed.</source>
          <target state="translated">비동기 출력을 처리 하는 응용 프로그램은 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> 메서드를 출력 버퍼 플러시 되었습니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The following example illustrates how to perform asynchronous read operations on the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream of the <ph id="ph2">`ipconfig`</ph> command.</source>
          <target state="translated">다음 예제에서는 리디렉션된에 대해 비동기 읽기 작업을 수행 하는 방법을 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림을 <ph id="ph2">`ipconfig`</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The example creates an event delegate for the <ph id="ph1">`OutputHandler`</ph> event handler and associates it with the <ph id="ph2">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event.</source>
          <target state="translated">이 예에서는 대 한 이벤트 대리자를 만듭니다는 <ph id="ph1">`OutputHandler`</ph> 이벤트 처리기에 연결 된 <ph id="ph2">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>The event handler receives text lines from the redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, formats the text, and saves it in an output string that’s later shown in the example’s console window.</source>
          <target state="translated">이벤트 처리기는 리디렉션된 텍스트 줄을 받아서 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림에 텍스트의 서식을 지정 하 고 나중 예에 나오는 콘솔 창에 표시 되는 출력 문자열에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Process.OutputDataReceived">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedMemorySize">
          <source>Gets the amount of paged memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 페이징 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize">
          <source>The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 의해 할당된 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>Gets the amount of paged memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 페이징 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</source>
          <target state="translated">연결된 프로세스의 가상 메모리 페이징 파일에 할당된 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)는 프로세스에서 사용 하는 가상 메모리 페이징 파일에 있는 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</source>
          <target state="translated">운영 체제를 사용 하 여 함께에서 가상 메모리 페이징 파일 실제 메모리와 각 프로세스에 대 한 가상 주소 공간을 관리 합니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
          <target state="translated">사용 중인 페이징 가능한 메모리 없는 경우 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>To obtain the size of memory used by the operating system for the process, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A&gt;</ph> property.</source>
          <target state="translated">프로세스에 대 한 운영 체제에서 사용 되는 메모리의 크기를 가져오려면는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Page File Bytes<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>페이지 파일 바이트<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 하 고 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedSystemMemorySize">
          <source>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 페이징할 수 있는 시스템 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize">
          <source>The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedSystemMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 페이징할 수 있는 시스템 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 대해 할당된 시스템 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The value returned by this property value represents the current size of pageable system memory used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서 프로세스에 의해 사용 되는 페이징할 수 있는 시스템 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</source>
          <target state="translated">시스템 메모리는 운영 체제에서 사용 하는 실제 메모리와 페이지 단위 및 비페이징 풀 나뉘어 있습니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
          <target state="translated">사용 중인 페이징 가능한 메모리 없는 경우 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>To obtain the size of the application memory used by the process, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PagedMemorySize64%2A&gt;</ph> property.</source>
          <target state="translated">프로세스에서 사용 되는 응용 프로그램 메모리의 크기를 가져오려면는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PagedMemorySize64%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Pool Paged Bytes<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>Pool Paged Bytes<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PagedSystemMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakPagedMemorySize">
          <source>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</source>
          <target state="translated">연결된 프로세스에서 사용하는 가상 메모리 페이징 파일의 최대 메모리 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize">
          <source>The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</source>
          <target state="translated">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 의해 할당된 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakPagedMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</source>
          <target state="translated">연결된 프로세스에서 사용하는 가상 메모리 페이징 파일의 최대 메모리 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</source>
          <target state="translated">연결된 프로세스가 시작된 이후 연결된 프로세스의 가상 메모리 페이징 파일에 할당된 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서 시작 된 이후 프로세스에서 사용 되는 가상 메모리 페이징 파일에는 메모리의 최대 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</source>
          <target state="translated">운영 체제를 사용 하 여 함께에서 가상 메모리 페이징 파일 실제 메모리와 각 프로세스에 대 한 가상 주소 공간을 관리 합니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</source>
          <target state="translated">사용 중인 페이징 가능한 메모리 없는 경우 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Page File Bytes Peak<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>페이지 파일 바이트 피크<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakPagedMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize">
          <source>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</source>
          <target state="translated">연결된 프로세스에서 사용되는 가상 메모리의 최대 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize">
          <source>The maximum amount of virtual memory, in bytes, that the associated process has requested.</source>
          <target state="translated">연결된 프로세스에서 요청한 가상 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</source>
          <target state="translated">연결된 프로세스에서 사용되는 가상 메모리의 최대 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</source>
          <target state="translated">연결된 프로세스가 시작된 이후 해당 프로세스에 할당된 가상 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서 시작 된 이후 프로세스에서 사용 하는 가상 메모리의 최대 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</source>
          <target state="translated">운영 체제 디스크에 있는 가상 메모리 페이징 파일에 저장 된 페이지 또는 실제 메모리에 로드 하는 페이지에 각 프로세스에 대 한 가상 주소 공간을 매핑합니다.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Virtual Bytes Peak<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>가상 바이트 피크<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>Gets the peak working set size for the associated process, in bytes.</source>
          <target state="translated">연결된 프로세스의 최대 작업 집합 크기(바이트)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>The maximum amount of physical memory that the associated process has required all at once, in bytes.</source>
          <target state="translated">연결된 프로세스에서 한 번에 요청한 실제 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</source>
          <target state="translated">공유 데이터에는 프로세스는 실행 프로세스 모듈와 시스템 라이브러리를 포함 하는 모든 명령이 포함 된 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>Gets the maximum amount of physical memory, in bytes, used by the associated process.</source>
          <target state="translated">연결된 프로세스에서 사용되는 실제 메모리의 최대 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</source>
          <target state="translated">연결된 프로세스가 시작된 이후 해당 프로세스에 할당된 실제 메모리의 최대 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값의 작업 집합 메모리 바이트에서 시작 된 이후 프로세스에서 사용 되는 최대 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</source>
          <target state="translated">공유 데이터에는 프로세스는 실행 프로세스 모듈와 시스템 라이브러리의 지침을 포함 하는 모든 명령이 포함 된 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Working Set Peak<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>Working Set Peak<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PeakWorkingSet64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</source>
          <target state="translated">포커스가 주 창에 있을 때 운영 체제가 연결된 프로세스의 우선 순위를 일시적으로 높일지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">프로세스가 대기 상태에서 빠져 나올 때 프로세스의 우선 순위를 동적으로 높여야 하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<ph id="ph1">&lt;xref:System.Diagnostics.ProcessPriorityClass.Normal&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.ProcessPriorityClass.High&gt;</ph>, or <ph id="ph3">&lt;xref:System.Diagnostics.ProcessPriorityClass.RealTime&gt;</ph>), the system temporarily boosts the thread's priority when it is taken out of a wait state.</source>
          <target state="translated">프로세스 우선 순위 클래스에 있는 동적 우선 순위 열거형 값 중 하나에서 스레드가 실행 하는 경우 (<ph id="ph1">&lt;xref:System.Diagnostics.ProcessPriorityClass.Normal&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.ProcessPriorityClass.High&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessPriorityClass.RealTime&gt;</ph>), 시스템 스레드의 우선 순위를 대기 상태에서 나올 때 일시적으로 상승 시킵니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>This action prevents other processes from interrupting the processing of the current thread.</source>
          <target state="translated">이렇게 하면 다른 프로세스에서 현재 스레드의 처리를 중단 합니다.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> setting affects all the existing threads and any threads subsequently created by the process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> 설정은 모든 기존 스레드 및 프로세스에서 만든 모든 스레드에 적용 합니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>To restore normal behavior, set the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">일반 동작을 복원 하려면 설정는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</source>
          <target state="translated">우선 순위를 너무 승격 중요 한 운영 체제 및 네트워크 기능을 다른 운영 체제 작업에 문제가 발생 리소스를 드레이닝 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>Priority boost information could not be retrieved from the associated process resource.</source>
          <target state="translated">연결된 프로세스 리소스에서 우선순위 높임 정보를 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>The process identifier or process handle is zero.</source>
          <target state="translated">프로세스 식별자 또는 프로세스 핸들이 0입니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>(The process has not been started.)</source>
          <target state="translated">(프로세스가 시작되지 않았습니다.)</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityBoostEnabled">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Gets or sets the overall priority category for the associated process.</source>
          <target state="translated">연결된 프로세스에 대한 전체 우선 순위 범주를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The priority category for the associated process, from which the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.BasePriority" /&gt;</ph> of the process is calculated.</source>
          <target state="translated">연결된 프로세스에 대한 우선 순위 범주입니다. 이를 통해 해당 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.BasePriority" /&gt;</ph>를 계산할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>A process priority class encompasses a range of thread priority levels.</source>
          <target state="translated">프로세스 우선 순위 클래스 스레드 우선 순위 수준의 범위를 포함합니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Threads with different priorities that are running in the process run relative to the priority class of the process.</source>
          <target state="translated">프로세스에서 실행 되는 우선 순위가 서로 다른 스레드는 프로세스의 우선 순위 클래스를 기준으로 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Win32 uses four priority classes with seven base priority levels per class.</source>
          <target state="translated">Win32 클래스당 7 개 기본 우선 순위 수준을 4 개의 우선 순위 클래스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>These process priority classes are captured in the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;</ph> enumeration, which lets you set the process priority to <ph id="ph2">&lt;xref:System.Diagnostics.ProcessPriorityClass.Idle&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessPriorityClass.Normal&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessPriorityClass.High&gt;</ph>, <ph id="ph5">&lt;xref:System.Diagnostics.ProcessPriorityClass.AboveNormal&gt;</ph>, <ph id="ph6">&lt;xref:System.Diagnostics.ProcessPriorityClass.BelowNormal&gt;</ph>, or <ph id="ph7">&lt;xref:System.Diagnostics.ProcessPriorityClass.RealTime&gt;</ph>.</source>
          <target state="translated">이러한 프로세스 우선 순위 클래스에 기록 되는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessPriorityClass&gt;</ph> 프로세스 우선 순위를 설정 하는 수 있는 열거형 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessPriorityClass.Idle&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessPriorityClass.Normal&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessPriorityClass.High&gt;</ph>, <ph id="ph5">&lt;xref:System.Diagnostics.ProcessPriorityClass.AboveNormal&gt;</ph>, <ph id="ph6">&lt;xref:System.Diagnostics.ProcessPriorityClass.BelowNormal&gt;</ph>, 또는 <ph id="ph7">&lt;xref:System.Diagnostics.ProcessPriorityClass.RealTime&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</source>
          <target state="translated">시간 경과 또는 기타 상승이, 기본 우선 순위 수준을 프로세스 프로세서에 대 한 액세스에 대 한 다른 미리 설정 해야 하는 경우 운영 체제에서 변경할 수 있습니다 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>In addition, you can set the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> to temporarily boost the priority level of threads that have been taken out of the wait state.</source>
          <target state="translated">또한 설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> 일시적으로 높일 대기 상태에서 가져온 스레드의 우선 순위 수준에 있습니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The priority is reset when the process returns to the wait state.</source>
          <target state="translated">우선 순위에는 프로세스가 대기 상태를 반환할 때 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> property lets you view the starting priority that is assigned to a process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 속성을 사용 하면 프로세스에 할당 된 우선 순위를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>However, because it is read-only, you cannot use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> property to set the priority of a process.</source>
          <target state="translated">그러나 읽기 전용 이므로 사용할 수 없습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 속성을 프로세스의 우선 순위를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>To change the priority, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> property, which gets or sets the overall priority category for the process.</source>
          <target state="translated">우선 순위를 변경 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 프로세스에 대 한 전체 우선 순위 범주를 가져오거나 설정 합니다.이 속성입니다.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The priority class cannot be viewed using System Monitor.</source>
          <target state="translated">시스템 모니터를 사용 하 여 우선 순위 클래스를 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> values.</source>
          <target state="translated">다음 표에서 간의 관계를 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.Process.PriorityClass%2A&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>BasePriority</source>
          <target state="translated">BasePriority</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>PriorityClass</source>
          <target state="translated">PriorityClass</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>13</source>
          <target state="translated">13</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>24</source>
          <target state="translated">24</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Process priority information could not be set or retrieved from the associated process resource.</source>
          <target state="translated">프로세스 우선 순위 정보를 연결된 프로세스 리소스에서 설정하거나 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The process identifier or process handle is zero.</source>
          <target state="translated">프로세스 식별자 또는 프로세스 핸들이 0입니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>(The process has not been started.)</source>
          <target state="translated">(프로세스가 시작되지 않았습니다.)</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> is not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>You have set the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph> to <ph id="ph2">&lt;see langword="AboveNormal" /&gt;</ph> or <ph id="ph3">&lt;see langword="BelowNormal" /&gt;</ph> when using Windows 98 or Windows Millennium Edition (Windows Me).</source>
          <target state="translated">Windows 98 또는 Windows Me(Millennium Edition)를 사용하는 경우 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PriorityClass" /&gt;</ph>를 <ph id="ph2">&lt;see langword="AboveNormal" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="BelowNormal" /&gt;</ph>로 설정했습니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>These platforms do not support those values for the priority class.</source>
          <target state="translated">이러한 플랫폼에서는 우선 순위 클래스에 대한 이러한 값을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>Priority class cannot be set because it does not use a valid value, as defined in the <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessPriorityClass" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessPriorityClass" /&gt;</ph> 열거형에 정의된 유효한 값이 사용되지 않으므로 우선 순위 클래스를 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PriorityClass">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivateMemorySize">
          <source>Gets the amount of private memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 전용 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize">
          <source>The number of bytes allocated by the associated process that cannot be shared with other processes.</source>
          <target state="translated">연결된 프로세스에서 할당하여 다른 프로세스에서는 공유할 수 없는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivateMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>Gets the amount of private memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 전용 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</source>
          <target state="translated">연결된 프로세스에 할당되어 다른 프로세스와는 공유할 수 없는 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)를 다른 프로세스와 공유할 수 없는 프로세스에서 사용 되는 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Private Bytes<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>전용 바이트<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivateMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>Gets the privileged processor time for this process.</source>
          <target state="translated">해당 프로세스의 권한 있는 프로세서 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that indicates the amount of time that the process has spent running code inside the operating system core.</source>
          <target state="translated">프로세스가 운영 체제 코어 내부에서 코드를 실행하는 데 소비한 시간을 나타내는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.PrivilegedProcessorTime">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>Gets the name of the process.</source>
          <target state="translated">프로세스의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The name that the system uses to identify the process to the user.</source>
          <target state="translated">사용자가 프로세스를 식별할 수 있도록 시스템에서 사용하는 이름입니다.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> property holds an executable file name, such as Outlook, that does not include the .exe extension or the path.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> .exe 확장명 또는 경로 포함 하지 않는 Outlook과 같은 실행 파일 이름, 속성에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>It is helpful for getting and manipulating all the processes that are associated with the same executable file.</source>
          <target state="translated">가져오기 및 동일한 실행 파일에 연관 된 모든 프로세스를 조작 하기 위한 것이 유용 합니다.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>On <ph id="ph1">[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]</ph> operating systems, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> property may be truncated to 15 characters if the process module information cannot be obtained.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]</ph> 운영 체제는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> 프로세스 모듈 정보를 가져올 수 없으면 15 자로 속성 잘릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>You can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph>, 지정된 된 컴퓨터에서 실행 중인 모든 인스턴스를 포함 하는 배열을 검색 하는 실행 파일 이름을 전달 합니다.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>You can use this array, for example, to shut down all the running instances of the executable file.</source>
          <target state="translated">실행 파일의 모든 실행 중인 인스턴스를 종료 하려면 예를 들어이 배열에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The process does not have an identifier, or no process is associated with the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>.</source>
          <target state="translated">프로세스에 식별자가 없거나 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The associated process has exited.</source>
          <target state="translated">연결된 프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessName">
          <source>The process is not on this computer.</source>
          <target state="translated">이 컴퓨터에서 진행되는 프로세스가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessName">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Gets or sets the processors on which the threads in this process can be scheduled to run.</source>
          <target state="translated">이 프로세스에 포함된 스레드의 실행을 예약할 수 있는 프로세서를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>A bitmask representing the processors that the threads in the associated process can run on.</source>
          <target state="translated">연결된 프로세스의 스레드가 실행될 수 있는 프로세서를 나타내는 비트 마스크입니다.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The default depends on the number of processors on the computer.</source>
          <target state="translated">기본값은 컴퓨터의 프로세서 수에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The default value is 2 <bpt id="p1">&lt;sup&gt;</bpt>n<ept id="p1">&lt;/sup&gt;</ept> -1, where n is the number of processors.</source>
          <target state="translated">기본값은 2 <bpt id="p1">&lt;sup&gt;</bpt>n<ept id="p1">&lt;/sup&gt;</ept> -1로, 여기서 n은 프로세서의 수입니다.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache.</source>
          <target state="translated">Windows 2000 이상 버전에서는 프로세스에서 스레드 프로세서 캐시 다시 로드 하는 각 마이그레이션을 사용 하 여 프로세서에서 마이그레이션할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded.</source>
          <target state="translated">시스템 로드가 특정 스레드를 실행 해야 하는 프로세서를 지정 하 수 줄여서 성능을 향상 시킬 수 있는 프로세서 캐시 다시 로드 되는 횟수입니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The association between a processor and a thread is called the processor affinity.</source>
          <target state="translated">프로세서 및 스레드 간의 연결을 프로세서 선호도 라고 합니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Each processor is represented as a bit.</source>
          <target state="translated">각 프로세서 약간으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Bit 0 is processor one, bit 1 is processor two, and so forth.</source>
          <target state="translated">비트 0은 프로세서 1, 1 비트가 프로세서 2, 등입니다.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</source>
          <target state="translated">값 1 약간 설정 하면 해당 하는 프로세서가 스레드 할당에 대해 선택 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>When you set the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> value to zero, the operating system's scheduling algorithms set the thread's affinity.</source>
          <target state="translated">설정 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> 값을 0으로 운영 체제의 예약 알고리즘 집합 스레드의 선호도입니다.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>When the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> 값이 0이 아닌 값으로 설정, 값은 선택 가능한 프로세서를 지정 하는 비트 마스크로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The following table shows a selection of <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> values for an eight-processor system.</source>
          <target state="translated">다음 표에서 다양 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessorAffinity%2A&gt;</ph> 프로세서가 8 개인 시스템에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Bitmask</source>
          <target state="translated">비트 마스크</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Binary value</source>
          <target state="translated">이진 값</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>Eligible processors</source>
          <target state="translated">사용할 수 있는 프로세서</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>0x0001</source>
          <target state="translated">0x0001</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>00000000 00000001</source>
          <target state="translated">00000000 00000001</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>0x0003</source>
          <target state="translated">0x0003</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>00000000 00000011</source>
          <target state="translated">00000000 00000011</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>1 and 2</source>
          <target state="translated">1과 2</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>0x0007</source>
          <target state="translated">0x0007</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>00000000 00000111</source>
          <target state="translated">00000000 00000111</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>1, 2 and 3</source>
          <target state="translated">1, 2 및 3</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>0x0009</source>
          <target state="translated">0x0009</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>00000000 00001001</source>
          <target state="translated">00000000 00001001</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>1 and 4</source>
          <target state="translated">1에서 4</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>0x007F</source>
          <target state="translated">0x007F</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>00000000 01111111</source>
          <target state="translated">00000000 01111111</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>1, 2, 3, 4, 5, 6 and 7</source>
          <target state="translated">1, 2, 3, 4, 5, 6 및 7</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessorAffinity" /&gt;</ph> information could not be set or retrieved from the associated process resource.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessorAffinity" /&gt;</ph> 정보를 연결된 프로세스 리소스에서 설정하거나 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The process identifier or process handle is zero.</source>
          <target state="translated">프로세스 식별자 또는 프로세스 핸들이 0입니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>(The process has not been started.)</source>
          <target state="translated">(프로세스가 시작되지 않았습니다.)</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessorAffinity" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessorAffinity" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> was not available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.ProcessorAffinity">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Refresh">
          <source>Discards any information about the associated process that has been cached inside the process component.</source>
          <target state="translated">프로세스 구성 요소 내에 캐시되어 있는 연결된 프로세스 정보를 모두 삭제합니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>After <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> is called, the first request for information about each property causes the process component to obtain a new value from the associated process.</source>
          <target state="translated">후 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 호출 되는 첫 번째 요청 각 속성에 대 한 내용은 하면 연결된 된 프로세스에서 새 값을 가져올 프로세스 구성 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component is associated with a process resource, the property values of the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> are immediately populated according to the status of the associated process.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 연결 된 프로세스 리소스의 속성 값은 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 즉시 연결된 된 프로세스의 상태에 따라 채워집니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>If the information about the associated process subsequently changes, those changes are not reflected in the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component's cached values.</source>
          <target state="translated">에 연결된 된 프로세스에 대 한 정보는 이후에 변경 되 면 해당 변경 내용이 반영 되지 않습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소의 값을 캐시 합니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component is a snapshot of the process resource at the time they are associated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소는 연결 된 시간에 프로세스 리소스의 스냅숏입니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>To view the current values for the associated process, call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method.</source>
          <target state="translated">연결된 된 프로세스에 대 한 현재 값을 보려면 호출에서 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</source>
          <target state="translated">최대 10 초 동안 2 초 간격 연결된 된 프로세스의 실제 메모리 사용률을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>The example detects whether the process exits before 10 seconds have elapsed.</source>
          <target state="translated">이 예제에서는 10 초가 경과 하기 전에 프로세스를 종료 여부를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>The example closes the process if it is still running after 10 seconds.</source>
          <target state="translated">이 예제에서는 10 초 후 실행 중인 프로세스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Refresh">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Responding">
          <source>Gets a value indicating whether the user interface of the process is responding.</source>
          <target state="translated">프로세스의 사용자 인터페이스가 응답하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the user interface of the associated process is responding to the system; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">연결된 프로세스의 사용자 인터페이스가 시스템에 응답하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>If a process has a user interface, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> property contacts the user interface to determine whether the process is responding to user input.</source>
          <target state="translated">에 사용자 인터페이스가 있는 프로세스는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> 프로세스 사용자 입력에 응답 하는지 여부를 확인 하는 사용자 인터페이스를 연결 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>If the interface does not respond immediately, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">인터페이스에 즉시 응답 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>Use this property to determine whether the interface of the associated process has stopped responding.</source>
          <target state="translated">연결된 된 프로세스의 인터페이스의 응답이 중지 하는지 여부를 확인 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>If the process does not have a <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph>, this property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">프로세스에 없는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph>,이 속성은 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Responding">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Responding">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Responding">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Responding" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Responding" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Responding">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Responding">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SafeHandle">
          <source>Gets the native handle to this process.</source>
          <target state="translated">이 프로세스에 대한 기본 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SafeHandle">
          <source>The native handle to this process.</source>
          <target state="translated">이 프로세스에 대한 기본 핸들입니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SafeHandle">
          <source>The handle is only available if the calling component started the process.</source>
          <target state="translated">핸들은만 호출 하는 구성 요소는 프로세스를 시작 하는 경우에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>Gets the Terminal Services session identifier for the associated process.</source>
          <target state="translated">연결된 프로세스의 터미널 서비스 세션 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SessionId">
          <source>The Terminal Services session identifier for the associated process.</source>
          <target state="translated">연결된 프로세스의 터미널 서비스 세션 식별자입니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SessionId">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.SessionId%2A&gt;</ph> property identifies the session in which the application is currently running.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.SessionId%2A&gt;</ph> 속성 응용 프로그램이 현재 실행 중인 세션을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>There is no session associated with this process.</source>
          <target state="translated">이 프로세스에 연결된 세션이 없습니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>There is no process associated with this session identifier.</source>
          <target state="translated">이 세션 식별자와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>The associated process is not on this machine.</source>
          <target state="translated">연결된 프로세스가 이 컴퓨터에 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SessionId">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.SessionId" /&gt;</ph> property is not supported on Windows 98.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.SessionId" /&gt;</ph> 속성은 Windows 98에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SessionId">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SessionId">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardError">
          <source>Gets a stream used to read the error output of the application.</source>
          <target state="translated">응용 프로그램의 오류 출력을 읽는 데 사용되는 스트림을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph> that can be used to read the standard error stream of the application.</source>
          <target state="translated">응용 프로그램의 표준 오류 스트림을 읽는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard error stream, that text is normally displayed on the console.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 표준 오류 스트림에 텍스트를 쓰는 해당 텍스트는 일반적으로 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, you can manipulate or suppress the error output of a process.</source>
          <target state="translated">리디렉션하여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림을 조작 하거나 프로세스의 오류 출력을 표시 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
          <target state="translated">예를 들어 텍스트를 필터링 다르게 형식을 지정 하거나 콘솔 및 지정 된 로그 파일 모두에 출력을 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>To use <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>, you must set <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`false`</ph>, and you must set <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">사용 하려면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>, 설정 해야 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph3">`false`</ph>, 설정 해야 하 고 <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>Otherwise, reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream throws an exception.</source>
          <target state="translated">그렇지 않은 경우에서 읽기는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
          <target state="translated">리디렉션된 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 동기적 또는 비동기적으로 스트림은 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the error output stream of the process.</source>
          <target state="translated">와 같은 메서드 <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> 프로세스의 오류 출력 스트림에서 동기 읽기 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or closes the stream.</source>
          <target state="translated">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 쓰려는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트리밍하거나 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 시작 비동기 읽기 작업에는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
          <target state="translated">이 메서드는 스트림 출력에 대 한 지정 된 이벤트 처리기 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>Synchronous read operations introduce a dependency between the caller reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream and the child process writing to that stream.</source>
          <target state="translated">동기 작업에서 읽는 호출자 간의 종속성을 유발 읽기는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림과 자식 해당 스트림에 쓰기를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>These dependencies can result in deadlock conditions.</source>
          <target state="translated">이러한 종속성은 교착 상태 조건이 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
          <target state="translated">호출자에 게 자식 프로세스의 리디렉션된 스트림에서 읽으면 자식에 종속 됩니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The caller waits on the read operation until the child writes to the stream or closes the stream.</source>
          <target state="translated">호출자에 게 자식 스트림에 쓰거나 스트림을 닫고 때까지 읽기 작업을 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
          <target state="translated">리디렉션된 스트림을 맞게 충분 한 데이터를 기록 하는 자식 프로세스를 부모에 종속 됩니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</source>
          <target state="translated">자식 프로세스 부모 전체 스트림을 읽기 / 스트림의 닫을 때까지 다음 쓰기 작업에서 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</source>
          <target state="translated">호출자와 자식 프로세스는 작업을 완료 하려면 서로 대기 하 고 아무 작업도 처리할 수 하는 경우 교착 상태가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
          <target state="translated">호출자와 자식 프로세스 간의 종속성을 평가 하 여 교착 상태를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</source>
          <target state="translated">예를 들어 다음 C# 코드에는 리디렉션된 스트림에서 읽은 하 고 자식 프로세스가 종료 될 때까지 대기 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The code example avoids a deadlock condition by calling <ph id="ph1">`p.StandardError.ReadToEnd`</ph> before <ph id="ph2">`p.WaitForExit`</ph>.</source>
          <target state="translated">호출 하 여 교착 상태를 방지 하는 코드 예제에서는 <ph id="ph1">`p.StandardError.ReadToEnd`</ph> 전에 <ph id="ph2">`p.WaitForExit`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
          <target state="translated">부모 호출을 처리 하는 경우 교착 상태가 발생할 수 있습니다 <ph id="ph1">`p.WaitForExit`</ph> 전에 <ph id="ph2">`p.StandardError.ReadToEnd`</ph> 자식 프로세스 리디렉션된 스트림에 맞게 충분 한 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
          <target state="translated">부모 프로세스를 종료 하는 자식 프로세스 무기한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">자식 프로세스 전체에서 읽을 수 부모 무기한 대기 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
          <target state="translated">표준 출력과 표준 오류 스트림 모두에서 모든 텍스트를 읽을 때에 유사한 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The following C# code, for example, performs a read operation on both streams.</source>
          <target state="translated">예를 들어 다음 C# 코드에서는 두 스트림이 읽기 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The code example avoids the deadlock condition by performing asynchronous read operations on the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">비동기 읽기 작업에서 수행 하 여 교착 상태를 방지 하는 코드 예제는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
          <target state="translated">부모 호출을 처리 하는 경우 교착 상태가 발생 <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> 이어서 <ph id="ph2">`p.StandardError.ReadToEnd`</ph> 자식 프로세스 오류 스트림을 맞게 충분 한 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The parent process would wait indefinitely for the child process to close its <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">부모 프로세스는 자식 프로세스를 닫으려면 무기한 대기 해당 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">자식 프로세스 전체에서 읽을 수 부모 무기한 대기 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
          <target state="translated">이러한 종속성과 교착 방지 하기 위해 비동기 읽기 작업을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
          <target state="translated">또는 두 개의 스레드를 만들고 각 스트림에서 별도 스레드에서 출력을 읽는 하 여 교착 상태를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
          <target state="translated">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>For example, do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> with a call to <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or vice versa.</source>
          <target state="translated">예를 들어을 따르지 않는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> 을 호출 하 여 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 또는 그 반대로 합니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>However, you can read two different streams in different modes.</source>
          <target state="translated">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> and then call <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>The following example uses the <ph id="ph1">`net use`</ph> command together with a user supplied argument to map a network resource.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`net use`</ph> 명령을 사용자와 함께 네트워크 리소스를 매핑할 수는 인수를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>It then reads the standard error stream of the net command and writes it to console.</source>
          <target state="translated">그런 다음 net 명령의 표준 오류 스트림을 읽고 콘솔에 씁니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardError">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream has not been defined for redirection; ensure <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> is set to <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림이 리디렉션에 대해 정의되지 않았습니다. <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph>가 <ph id="ph3">&lt;see langword="true" /&gt;</ph>로 설정되고 <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>가 <ph id="ph5">&lt;see langword="false" /&gt;</ph>로 설정되어 있는지 확인하세요.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardError">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardError">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> stream has been opened for asynchronous read operations with <ph id="ph2">&lt;see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 스트림이 <ph id="ph2">&lt;see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /&gt;</ph>을 사용한 비동기 읽기 작업을 위해 열려 있습니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardError">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardInput">
          <source>Gets a stream used to write the input of the application.</source>
          <target state="translated">응용 프로그램의 입력을 쓰는 데 사용되는 스트림을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> that can be used to write the standard input stream of the application.</source>
          <target state="translated">응용 프로그램의 표준 입력 스트림을 쓰는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> can read input text from its standard input stream, typically the keyboard.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 는 표준 입력된 스트림 일반적으로 키보드에서에서 입력된 텍스트를 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream, you can programmatically specify the input.</source>
          <target state="translated">리디렉션하여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> 스트림 입력을 프로그래밍 방식으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</source>
          <target state="translated">예를 들어, 키보드 입력을 사용 하는 대신 지정 된 파일의 내용에서 텍스트 또는 다른 응용 프로그램에서 출력을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>To use <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph>, you must set <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`false`</ph>, and you must set <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">사용 하려면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph>, 설정 해야 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph3">`false`</ph>, 설정 해야 하 고 <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>Otherwise, writing to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream throws an exception.</source>
          <target state="translated">그렇지 않은 경우에 쓰기는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> 스트림 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>The following example illustrates how to redirect the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream of a process.</source>
          <target state="translated">리디렉션하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> 프로세스의 스트림입니다.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>The example starts the <ph id="ph1">`sort`</ph> command with redirected input.</source>
          <target state="translated">이 예제에서는 시작는 <ph id="ph1">`sort`</ph> 명령이 리디렉션된 입력을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>It then prompts the user for text, and passes that to the <ph id="ph1">`sort`</ph> process by means of the redirected <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream.</source>
          <target state="translated">그런 다음 텍스트에 대 한 사용자 요청에 해당 전달 하 고는 <ph id="ph1">`sort`</ph> 리디렉션된를 사용 하 여 프로세스 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>The <ph id="ph1">`sort`</ph> results are displayed to the user on the console.</source>
          <target state="translated"><ph id="ph1">`sort`</ph> 결과가 콘솔에 사용자에 게 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardInput">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardInput" /&gt;</ph> stream has not been defined because <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph> is set to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph>이 <ph id="ph3">&lt;see langword="false" /&gt;</ph>로 설정되어 있어서 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardInput" /&gt;</ph> 스트림이 정의되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardInput">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Gets a stream used to read the textual output of the application.</source>
          <target state="translated">응용 프로그램의 텍스트 출력을 읽는 데 사용되는 스트림을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph> that can be used to read the standard output stream of the application.</source>
          <target state="translated">응용 프로그램의 표준 출력 스트림을 읽는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.IO.StreamReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard stream, that text is normally displayed on the console.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 해당 텍스트는 일반적으로 콘솔에 표시 됩니다 텍스트를 표준 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, you can manipulate or suppress the output of a process.</source>
          <target state="translated">리디렉션하여는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림을 조작 하거나 프로세스의 출력을 표시 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
          <target state="translated">예를 들어 텍스트를 필터링 다르게 형식을 지정 하거나 콘솔 및 지정 된 로그 파일 모두에 출력을 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>To use <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>, you must set <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`false`</ph>, and you must set <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">사용 하려면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>, 설정 해야 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph3">`false`</ph>, 설정 해야 하 고 <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType&gt;</ph> 를 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Otherwise, reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream throws an exception.</source>
          <target state="translated">그렇지 않은 경우에서 읽기는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
          <target state="translated">리디렉션된 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 동기적 또는 비동기적으로 스트림은 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the output stream of the process.</source>
          <target state="translated">와 같은 메서드 <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> 프로세스의 출력 스트림에서 동기 읽기 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or closes the stream.</source>
          <target state="translated">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 쓰려는 해당 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트리밍하거나 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">반면, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 시작 비동기 읽기 작업에는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
          <target state="translated">이 메서드는 스트림 출력에 대 한 지정 된 이벤트 처리기 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Synchronous read operations introduce a dependency between the caller reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream and the child process writing to that stream.</source>
          <target state="translated">동기 작업에서 읽는 호출자 간의 종속성을 유발 읽기는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림과 자식 해당 스트림에 쓰기를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>These dependencies can result in deadlock conditions.</source>
          <target state="translated">이러한 종속성은 교착 상태 조건이 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
          <target state="translated">호출자에 게 자식 프로세스의 리디렉션된 스트림에서 읽으면 자식에 종속 됩니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The caller waits on the read operation until the child writes to the stream or closes the stream.</source>
          <target state="translated">호출자에 게 자식 스트림에 쓰거나 스트림을 닫고 때까지 읽기 작업을 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
          <target state="translated">리디렉션된 스트림을 맞게 충분 한 데이터를 기록 하는 자식 프로세스를 부모에 종속 됩니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</source>
          <target state="translated">자식 프로세스 부모 전체 스트림을 읽기 / 스트림의 닫을 때까지 다음 쓰기 작업에서 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</source>
          <target state="translated">호출자와 자식 프로세스는 작업을 완료 하려면 서로 대기 하 고 아무 작업도 처리할 수 하는 경우 교착 상태가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
          <target state="translated">호출자와 자식 프로세스 간의 종속성을 평가 하 여 교착 상태를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</source>
          <target state="translated">예를 들어 다음 C# 코드에는 리디렉션된 스트림에서 읽은 하 고 자식 프로세스가 종료 될 때까지 대기 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The code example avoids a deadlock condition by calling <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> before <ph id="ph2">`p.WaitForExit`</ph>.</source>
          <target state="translated">호출 하 여 교착 상태를 방지 하는 코드 예제에서는 <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> 전에 <ph id="ph2">`p.WaitForExit`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardOutput.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
          <target state="translated">부모 호출을 처리 하는 경우 교착 상태가 발생할 수 있습니다 <ph id="ph1">`p.WaitForExit`</ph> 전에 <ph id="ph2">`p.StandardOutput.ReadToEnd`</ph> 자식 프로세스 리디렉션된 스트림에 맞게 충분 한 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
          <target state="translated">부모 프로세스를 종료 하는 자식 프로세스 무기한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">자식 프로세스 전체에서 읽을 수 부모 무기한 대기 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
          <target state="translated">표준 출력과 표준 오류 스트림 모두에서 모든 텍스트를 읽을 때에 유사한 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The following C# code, for example, performs a read operation on both streams.</source>
          <target state="translated">예를 들어 다음 C# 코드에서는 두 스트림이 읽기 작업을 수행합니다.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The code example avoids the deadlock condition by performing asynchronous read operations on the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">비동기 읽기 작업에서 수행 하 여 교착 상태를 방지 하는 코드 예제는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
          <target state="translated">부모 호출을 처리 하는 경우 교착 상태가 발생 <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> 이어서 <ph id="ph2">`p.StandardError.ReadToEnd`</ph> 자식 프로세스 오류 스트림을 맞게 충분 한 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The parent process would wait indefinitely for the child process to close its <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
          <target state="translated">부모 프로세스는 자식 프로세스를 닫으려면 무기한 대기 해당 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">자식 프로세스 전체에서 읽을 수 부모 무기한 대기 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
          <target state="translated">이러한 종속성과 교착 방지 하기 위해 비동기 읽기 작업을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
          <target state="translated">또는 두 개의 스레드를 만들고 각 스트림에서 별도 스레드에서 출력을 읽는 하 여 교착 상태를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>You cannot mix asynchronous and synchronous read operations on a redirected stream.</source>
          <target state="translated">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>Once the redirected stream of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</source>
          <target state="translated">리디렉션된 스트림이의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 열릴 비동기 또는 동기 모드에서 모든 이후 읽기 해당 스트림에서 작업을 동일한 모드에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>For example, do not follow <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> with a call to <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or vice versa.</source>
          <target state="translated">예를 들어을 따르지 않는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 을 호출 하 여 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> 스트림 또는 그 반대로 합니다.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>However, you can read two different streams in different modes.</source>
          <target state="translated">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> and then call <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 스트림 합니다.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The following example runs the ipconfig.exe command and redirects its standard output to the example’s console window.</source>
          <target state="translated">다음 예제에서는 ipconfig.exe 명령을 실행 하 고 예에 나오는 콘솔 창에는 표준 출력을 리디렉션합니다.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream has not been defined for redirection; ensure <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph> is set to <ph id="ph3">&lt;see langword="true" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> is set to <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림이 리디렉션에 대해 정의되지 않았습니다. <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph>가 <ph id="ph3">&lt;see langword="true" /&gt;</ph>로 설정되고 <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>가 <ph id="ph5">&lt;see langword="false" /&gt;</ph>로 설정되어 있는지 확인하세요.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardOutput">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> stream has been opened for asynchronous read operations with <ph id="ph2">&lt;see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardOutput" /&gt;</ph> 스트림이 <ph id="ph2">&lt;see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /&gt;</ph>을 사용한 비동기 읽기 작업을 위해 열려 있습니다.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StandardOutput">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Starts a process resource and associates it with a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">프로세스 리소스를 시작한 후 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>Starts (or reuses) the process resource that is specified by the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component and associates it with the component.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph> 구성 요소의 <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 속성으로 지정된 프로세스 리소스를 시작하거나 다시 사용하여 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a process resource is started; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if no new process resource is started (for example, if an existing process is reused).</source>
          <target state="translated">프로세스 리소스가 시작된 경우에는 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 기존 프로세스를 다시 사용한 경우처럼 새 프로세스 리소스가 시작되지 않은 경우에는 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Use this overload to start a process resource and associate it with the current <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
          <target state="translated">이 오버 로드를 사용 하 여 프로세스 리소스를 시작 하 여 현재 연결 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The return value <ph id="ph1">`true`</ph> indicates that a new process resource was started.</source>
          <target state="translated">반환 값은 <ph id="ph1">`true`</ph> 는 새 프로세스 리소스가 시작 되었다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>If the process resource specified by the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> member of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property is already running on the computer, no additional process resource is started.</source>
          <target state="translated">변수로 지정 된 프로세스 리소스는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 의 멤버는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성은 컴퓨터에서 이미 실행 중, 추가 프로세스 리소스가 시작 되지 않은 합니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Instead, the running process resource is reused and <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">대신, 실행 중인 프로세스 리소스를 다시 사용 및 <ph id="ph1">`false`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</source>
          <target state="translated">처음 설치한 응용 프로그램 (예를 들어 웹 주소) 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard drive.</source>
          <target state="translated">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>If you are using Visual Studio, this overload of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method is the one that you insert into your code after you drag a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component onto the designer.</source>
          <target state="translated">Visual Studio의이 오버 로드를 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드는 끌어 놓고 코드에 삽입 하는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 디자이너 구성 요소를 합니다.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Use the <ph id="ph1">`Properties`</ph> window to expand the <ph id="ph2">`StartInfo`</ph> category and write the appropriate value into the <ph id="ph3">`FileName`</ph> property.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`Properties`</ph> 창이 확장 된 <ph id="ph2">`StartInfo`</ph> 범주에 적절 한 값을 작성 하 고는 <ph id="ph3">`FileName`</ph> 속성.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Your changes will appear in the form's <ph id="ph1">`InitializeComponent`</ph> procedure.</source>
          <target state="translated">폼의 변경 내용은 나타납니다 <ph id="ph1">`InitializeComponent`</ph> 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>This overload of <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> is not a <ph id="ph2">`static`</ph> method.</source>
          <target state="translated">이 오버 로드의 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 않습니다는 <ph id="ph2">`static`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>You must call it from an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class.</source>
          <target state="translated">인스턴스에서 호출 해야는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Before calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph>, you must first specify <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property information for this <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, because that information is used to determine the process resource to start.</source>
          <target state="translated">호출 하기 전에 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph>를 먼저 지정 해야 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 이 대 한 속성 정보 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 정보가 사용 되는 시작 된 프로세스 리소스를 확인 하려면 않았기 때문에 인스턴스에 있습니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The other overloads of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method are <ph id="ph2">`static`</ph> members.</source>
          <target state="translated">다른 오버 로드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드가 <ph id="ph2">`static`</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>You do not need to create an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component before you call those overloads of the method.</source>
          <target state="translated">인스턴스를 만들 필요가 없습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 메서드의 이러한 오버 로드를 호출 하기 전에 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Instead, you can call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> class itself, and a new <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component is created if the process was started.</source>
          <target state="translated">대신, 호출 수 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스 자체 및 새 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 프로세스가 시작 된 경우 구성 요소가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Or, <ph id="ph1">`null`</ph> is returned if a process was reused.</source>
          <target state="translated">또는, <ph id="ph1">`null`</ph> 프로세스를 다시 사용 하는 경우 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The process resource is automatically associated with the new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component that is returned by the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method.</source>
          <target state="translated">프로세스 리소스를 자동으로 연결 된 새 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 에서 반환 되는 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> members can be used to duplicate the functionality of the <ph id="ph2">`Run`</ph> dialog box of the Windows <ph id="ph3">`Start`</ph> menu.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 의 기능을 복제 하는 멤버를 사용할 수는 <ph id="ph2">`Run`</ph> 대화 상자는 창의 <ph id="ph3">`Start`</ph> 메뉴.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Anything that can be typed into a command line can be started by setting the appropriate values in the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property.</source>
          <target state="translated">명령줄에 입력할 수 있는 모든 항목에서 적절 한 값을 설정 하 여 시작할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The only <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property that must be set is the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
          <target state="translated">유일한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 설정 해야 하는 속성은는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property does not have to be an executable file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성 실행 파일 일 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>It can be of any file type for which the extension has been associated with an application that is installed on the system.</source>
          <target state="translated">확장 시스템에 설치 된 응용 프로그램에 연결 된 파일 형식일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>For example, the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성 편집기, 메모장과 같은 텍스트 파일에 연결 했는지 또는.doc 파일을 Microsoft Word와 같은 워드 프로세서 도구에 있는 경우.doc 확장명을 가질 수 있습니다 하는 경우.txt 확장명을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>In the command line, you can specify actions to take for certain types of files.</source>
          <target state="translated">명령줄에서 특정 형식의 파일에 대해 수행할 동작을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>For example, you can print documents or edit text files.</source>
          <target state="translated">예를 들어 문서를 인쇄 하거나 텍스트 파일을 편집할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Specify these actions using the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> member of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 이러한 동작을 지정 된 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> 의 멤버는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>For other types of files, you can specify command-line arguments when you start the file from the <ph id="ph1">`Run`</ph> dialog box.</source>
          <target state="translated">다른 형식의 파일에 대해 지정할 수에서 파일을 시작할 때 명령줄 인수는 <ph id="ph1">`Run`</ph> 대화 상자.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>For example, you can pass a URL as an argument if you specify your browser as the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>.</source>
          <target state="translated">예를 들어 전달할 수 있습니다는 URL을 인수로으로 브라우저를 지정 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>These arguments can be specified in the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property's <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> member.</source>
          <target state="translated">이 인수에 지정할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성의 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</source>
          <target state="translated">따옴표를 사용 하 여 시스템에 선언 된 경로 변수를 사용 하는 경우 해당 위치에 있는 프로세스를 시작할 때 해당 경로 완전히 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Otherwise, the system will not find the path.</source>
          <target state="translated">그렇지 않으면 시스템 경로 찾지 않습니다.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>For example, if <ph id="ph1">`c:\mypath`</ph> is not in your path, and you add it using quotation marks: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>, you must fully qualify any process in <ph id="ph3">`c:\mypath`</ph> when starting it.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">`c:\mypath`</ph> 사용자의 경로에 없는 따옴표를 사용 하 여 추가 하 고: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>의 모든 프로세스를 정규화 해야 <ph id="ph3">`c:\mypath`</ph> 시작할 때입니다.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</source>
          <target state="translated">ASP.NET 웹 페이지 및 서버 제어 코드는 웹 서버에서 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>If you use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 새 프로세스에서 ASP.NET 웹 페이지 또는 서버 컨트롤의 메서드를 제한 된 권한으로 웹 서버에서 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The process does not start in the same context as the client browser, and does not have access to the user desktop.</source>
          <target state="translated">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으면 되며 사용자 데스크톱에 대 한 액세스를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property.</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>A note about apartment states in managed threads is necessary here.</source>
          <target state="translated">관리 되는 스레드의 아파트 상태에 대 한 메모는 여기에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph> on the process component's <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, make sure you have set a threading model on your application by setting the attribute <ph id="ph4">`[STAThread]`</ph> on the <ph id="ph5">`main()`</ph> method.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 프로세스 구성 요소에 대해 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성을 특성을 설정 하 여 응용 프로그램에 스레딩 모델을 설정 했는지 확인 <ph id="ph4">`[STAThread]`</ph> 에 <ph id="ph5">`main()`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Otherwise, a managed thread can be in an <ph id="ph1">`unknown`</ph> state or put in the <ph id="ph2">`MTA`</ph> state, the latter of which conflicts with <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> being <ph id="ph4">`true`</ph>.</source>
          <target state="translated">그렇지 않은 경우 관리 되는 스레드 수는 <ph id="ph1">`unknown`</ph> 상태 또는 <ph id="ph2">`MTA`</ph> 상태 이면와 충돌 하는 후자 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 되 고 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>Some methods require that the apartment state not be <ph id="ph1">`unknown`</ph>.</source>
          <target state="translated">일부 방법의 경우 아파트 상태 수 없음을 <ph id="ph1">`unknown`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>If the state is not explicitly set, when the application encounters such a method, it defaults to <ph id="ph1">`MTA`</ph>, and once set, the apartment state cannot be changed.</source>
          <target state="translated">기본적으로 상태는 명시적으로 설정 하지, 응용 프로그램에서 이러한 메서드를 발견 한 경우, <ph id="ph1">`MTA`</ph>를 설정한 후에 아파트 상태를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>However, <ph id="ph1">`MTA`</ph> causes an exception to be thrown when the operating system shell is managing the thread.</source>
          <target state="translated">그러나 <ph id="ph1">`MTA`</ph> 를 운영 체제 셸을 스레드를 관리할 경우 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>The following example uses an instance of the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class to start a process.</source>
          <target state="translated">다음 예제에서 사용 하는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 클래스는 프로세스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>No file name was specified in the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component's <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소의 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph>에 파일 이름이 지정되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>-or- The <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> member of the <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph> property is <ph id="ph3">&lt;see langword="true" /&gt;</ph> while <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph>, or <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">또는 <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph>가 <ph id="ph7">&lt;see langword="true" /&gt;</ph>인 동안 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph> 속성의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 멤버는 <ph id="ph3">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>There was an error in opening the associated file.</source>
          <target state="translated">연결된 파일을 여는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start">
          <source>Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</source>
          <target state="translated">메서드는 Nano Server와 같은 셸 지원 없이 운영 체제에서 지원되지 않습니다(.NET Core에만 해당).</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> that contains the information that is used to start the process, including the file name and any command-line arguments.</source>
          <target state="translated">파일 이름 및 모든 명령줄 인수를 포함하여 프로세스를 시작하는 데 사용되는 정보가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">시작할 프로세스의 파일 이름 같은 프로세스 시작 정보가 포함된 매개 변수에 의해 지정된 프로세스 리소스를 시작하고 해당 리소스를 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that is associated with the process resource, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no process resource is started.</source>
          <target state="translated">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>에 연결되는 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
          <target state="translated">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>In addition, Start may return a non-null Process with its <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property already set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">뿐만 아니라 시작 시 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성이 이미 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
          <target state="translated">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Use this overload to start a process resource by specifying a <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하 여 지정 하 여 프로세스 리소스를 시작 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.</source>
          <target state="translated">오버 로드를 새 리소스를 연결 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">시작할 실행 파일의 주소가 URL 인 경우에 프로세스가 시작 되지 않은 및 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>This overload lets you start a process without first creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하는 프로세스를 만들지 않고 새 시작할 수 있습니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Using this overload with a <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> parameter is an alternative to the explicit steps of creating a new <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, setting its <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> properties, and calling <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">있는이 오버 로드를 사용 하 여 한 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 매개 변수는 새로 만드는 데 따른 명시적 단계에 대 한 대안 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 설정 인스턴스를 해당 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성 및 호출 <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Using a <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> instance as the parameter lets you call <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> with the most control over what is passed into the call to start the process.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 매개 변수를 사용 하면 호출 인스턴스 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 가장 전달 프로세스를 시작 하는 호출에 대해 제어 권한이 있는 합니다.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> instance, although that is an option.</source>
          <target state="translated">새로 만들 필요가 없다는 묶은 파일 이름 또는 파일 이름 및 인수를 전달 해야 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 옵션은 인스턴스.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The only <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType&gt;</ph> property that must be set is the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
          <target state="translated">유일한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType&gt;</ph> 설정 해야 하는 속성은는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property does not need to represent an executable file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성이 실행 파일을 나타내는 데 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>It can be of any file type for which the extension has been associated with an application that is installed on the system.</source>
          <target state="translated">확장 시스템에 설치 된 응용 프로그램에 연결 된 파일 형식일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성 편집기, 메모장과 같은 텍스트 파일에 연결 했는지 또는.doc 파일을 Microsoft Word와 같은 워드 프로세서 도구에 있는 경우.doc 확장명을 가질 수 있습니다 하는 경우.txt 확장명을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</source>
          <target state="translated">처음 설치한 응용 프로그램 (예를 들어 웹 주소) 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard drive.</source>
          <target state="translated">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> instance are set, the unmanaged <ph id="ph4">`CreateProcessWithLogonW`</ph> function is called, which starts the process in a new window even if the <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType&gt;</ph> property value is <ph id="ph6">`true`</ph> or the <ph id="ph7">&lt;xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType&gt;</ph> property value is <ph id="ph8">&lt;xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 인스턴스 설정 된 관리 되지 않는 <ph id="ph4">`CreateProcessWithLogonW`</ph> 함수가 호출 됩니다는 <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType&gt;</ph> 속성 값이 <ph id="ph6">`true`</ph> 또는 <ph id="ph7">&lt;xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType&gt;</ph> 속성 값은 <ph id="ph8">&lt;xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> property must be in UPN format, <bpt id="p1">*</bpt>user<ept id="p1">*</ept><ph id="ph4">@</ph><bpt id="p2">*</bpt>DNS_domain_name<ept id="p2">*</ept>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType&gt;</ph> 속성은 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> 속성 UPN 형식 이어야 합니다 <bpt id="p1">*</bpt>사용자<ept id="p1">*</ept><ph id="ph4">@</ph><bpt id="p2">*</bpt>DNS_domain_name<ept id="p2">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Unlike the other overloads, the overload of <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> that has no parameters is not a <ph id="ph2">`static`</ph> member.</source>
          <target state="translated">다른 오버 로드를 오버 로드와는 달리 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 매개 변수가 없는 않습니다는 <ph id="ph2">`static`</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Use that overload when you have already created a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이미 만든 경우 오버 로드를 사용 하 여 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스, 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Use one of the <ph id="ph1">`static`</ph> overloads when you want to create a new <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component rather than start a process for an existing component.</source>
          <target state="translated">중 하나를 사용 하 여는 <ph id="ph1">`static`</ph> 새 하려는 경우 overloads <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드와 매개 변수가 없는 오버 로드를 사용 하면 사용 하 여 프로세스 리소스에 대 한 시작 정보를 지정할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</source>
          <target state="translated">따옴표를 사용 하 여 시스템에 선언 된 경로 변수를 사용 하는 경우 해당 위치에 있는 프로세스를 시작할 때 해당 경로 완전히 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Otherwise, the system will not find the path.</source>
          <target state="translated">그렇지 않으면 시스템 경로 찾지 않습니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>For example, if <ph id="ph1">`c:\mypath`</ph> is not in your path, and you add it using quotation marks: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>, you must fully qualify any process in <ph id="ph3">`c:\mypath`</ph> when starting it.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">`c:\mypath`</ph> 사용자의 경로에 없는 따옴표를 사용 하 여 추가 하 고: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>의 모든 프로세스를 정규화 해야 <ph id="ph3">`c:\mypath`</ph> 시작할 때입니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</source>
          <target state="translated">ASP.NET 웹 페이지 및 서버 제어 코드는 웹 서버에서 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If you use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 새 프로세스에서 ASP.NET 웹 페이지 또는 서버 컨트롤의 메서드를 제한 된 권한으로 웹 서버에서 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The process does not start in the same context as the client browser, and does not have access to the user desktop.</source>
          <target state="translated">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으면 되며 사용자 데스크톱에 대 한 액세스를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property.</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>A note about apartment states in managed threads is necessary here.</source>
          <target state="translated">관리 되는 스레드의 아파트 상태에 대 한 메모는 여기에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph> on the <ph id="ph3">`startInfo`</ph> parameter, make sure you have set a threading model on your application by setting the attribute <ph id="ph4">`[STAThread]`</ph> on the <ph id="ph5">`main()`</ph> method.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 에 <ph id="ph3">`startInfo`</ph> 매개 변수를 특성을 설정 하 여 응용 프로그램에 스레딩 모델을 설정 했는지 확인 <ph id="ph4">`[STAThread]`</ph> 에 <ph id="ph5">`main()`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Otherwise, a managed thread can be in an <ph id="ph1">`unknown`</ph> state or put in the <ph id="ph2">`MTA`</ph> state, the latter of which conflicts with <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> being <ph id="ph4">`true`</ph>.</source>
          <target state="translated">그렇지 않은 경우 관리 되는 스레드 수는 <ph id="ph1">`unknown`</ph> 상태 또는 <ph id="ph2">`MTA`</ph> 상태 이면와 충돌 하는 후자 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 되 고 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Some methods require that the apartment state not be <ph id="ph1">`unknown`</ph>.</source>
          <target state="translated">일부 방법의 경우 아파트 상태 수 없음을 <ph id="ph1">`unknown`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>If the state is not explicitly set, when the application encounters such a method, it defaults to <ph id="ph1">`MTA`</ph>, and once set, the apartment state cannot be changed.</source>
          <target state="translated">기본적으로 상태는 명시적으로 설정 하지, 응용 프로그램에서 이러한 메서드를 발견 한 경우, <ph id="ph1">`MTA`</ph>를 설정한 후에 아파트 상태를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>However, <ph id="ph1">`MTA`</ph> causes an exception to be thrown when the operating system shell is managing the thread.</source>
          <target state="translated">그러나 <ph id="ph1">`MTA`</ph> 를 운영 체제 셸을 스레드를 관리할 경우 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</source>
          <target state="translated">먼저 다음 예제에서는 Internet Explorer의 인스턴스를 생성 하 고 브라우저의 즐겨찾기 폴더의 내용을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>It then starts some other instances of Internet Explorer and displays some specific pages or sites.</source>
          <target state="translated">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지 또는 사이트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</source>
          <target state="translated">마지막으로 특정 사이트를 탐색 하는 동안 최소화 된 상태로 창으로 Internet Explorer를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>For additional examples of other uses of this method, refer to the individual properties of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> class.</source>
          <target state="translated">이 방법의 다른 사용의 또 다른 예에 대 한 참조의 각 속성에는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>No file name was specified in the <ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> parameter's <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> 매개 변수의 <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /&gt;</ph> 속성에 파일 이름이 지정되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="startInfo" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="true" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph>, or <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> property is also <ph id="ph7">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="startInfo" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 및 <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /&gt;</ph>이고, <ph id="ph5">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /&gt;</ph> 속성 또한 <ph id="ph7">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="startInfo" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="true" /&gt;</ph> and the <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /&gt;</ph> property is not <ph id="ph5">&lt;see langword="null" /&gt;</ph> or empty or the <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.Password" /&gt;</ph> property is not <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="startInfo" /&gt;</ph> 매개 변수의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="true" /&gt;</ph>이고 <ph id="ph4">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /&gt;</ph> 속성이 <ph id="ph5">&lt;see langword="null" /&gt;</ph> 또는 비어 있거나 <ph id="ph6">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.Password" /&gt;</ph> 속성이 <ph id="ph7">&lt;see langword="null" /&gt;</ph>이 아닙니다.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The <ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The file specified in the <ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> parameter's <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /&gt;</ph> property could not be found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startInfo" /&gt;</ph> 매개 변수의 <ph id="ph2">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /&gt;</ph> 속성에 지정된 파일을 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>An error occurred when opening the associated file.</source>
          <target state="translated">연결된 파일을 열 때 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</source>
          <target state="translated">인수의 길이와 프로세스에 대한 전체 경로 길이를 합하면 2080을 초과합니다.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
          <target state="translated">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>or "Access is denied."</source>
          <target state="translated">또는 “액세스가 거부되었습니다.”</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</source>
          <target state="translated">메서드는 Nano Server와 같은 셸 지원 없이 운영 체제에서 지원되지 않습니다(.NET Core에만 해당).</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The name of a document or application file to run in the process.</source>
          <target state="translated">프로세스에서 실행될 문서 또는 응용 프로그램 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">문서 또는 응용 프로그램 파일 이름을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that is associated with the process resource, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no process resource is started.</source>
          <target state="translated">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>에 연결되는 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
          <target state="translated">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>In addition, Start may return a non-null Process with its <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property already set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">뿐만 아니라 시작 시 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성이 이미 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
          <target state="translated">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Use this overload to start a process resource by specifying its file name.</source>
          <target state="translated">이 오버 로드를 사용 하 여 해당 파일 이름을 지정 하 여 프로세스 리소스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.</source>
          <target state="translated">오버 로드를 새 리소스를 연결 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">시작할 실행 파일의 주소가 URL 인 경우에 프로세스가 시작 되지 않은 및 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>This overload lets you start a process without first creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하는 프로세스를 만들지 않고 새 시작할 수 있습니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The overload is an alternative to the explicit steps of creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, setting the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> member of the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, and calling <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">오버 로드는 새로 만드는 데 따른 명시적 단계에 대 한 대안 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 설정 인스턴스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 의 멤버는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출 <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>You can start a ClickOnce application by setting the <ph id="ph1">`fileName`</ph> parameter to the location (for example, a Web address) from which you originally installed the application.</source>
          <target state="translated">설정 하 여 ClickOnce 응용 프로그램을 시작할 수는 <ph id="ph1">`fileName`</ph> 위치 (예를 들어 웹 주소)를 처음 설치한 응용 프로그램에 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard drive.</source>
          <target state="translated">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Starting a process by specifying its file name is similar to typing the information in the <ph id="ph1">`Run`</ph> dialog box of the Windows <ph id="ph2">`Start`</ph> menu.</source>
          <target state="translated">해당 파일 이름을 지정 하는 프로세스를 시작 하는 것은에 정보를 입력 비슷합니다는 <ph id="ph1">`Run`</ph> 대화 상자는 창의 <ph id="ph2">`Start`</ph> 메뉴.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Therefore, the file name does not need to represent an executable file.</source>
          <target state="translated">따라서 파일 이름이 실행 파일을 나타내는 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>It can be of any file type for which the extension has been associated with an application installed on the system.</source>
          <target state="translated">모든 형식의 파일을 확장에 연결 된 시스템에 설치 된 응용 프로그램 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
          <target state="translated">예를 들어.doc 파일을 Microsoft Word와 같은 워드 프로세서 도구에 있는 경우에 확장명이.doc를 가질 수 있습니다 또는 텍스트 파일을 메모장과 같은 편집기에 연결한 경우 파일 이름은.txt 확장명을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Similarly, in the same way that the <ph id="ph1">`Run`</ph> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph2">`fileName`</ph> parameter.</source>
          <target state="translated">동일한 방식으로 <ph id="ph1">`Run`</ph> .exe 확장명은의 경우 선택 사항, 대화 상자에는.exe 확장명이 있거나 없는 실행 파일 이름을 사용할 수는 <ph id="ph2">`fileName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
          <target state="translated">예를 들어, 설정할 수는 <ph id="ph1">`fileName`</ph> "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>This overload does not allow command-line arguments for the process.</source>
          <target state="translated">이 오버 로드 하는 프로세스에 대 한 명령줄 인수를 허용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>If you need to specify one or more command-line arguments for the process, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> overloads.</source>
          <target state="translated">프로세스에 대 한 하나 이상의 명령줄 인수를 지정 해야 할 경우 사용 된 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Unlike the other overloads, the overload of <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> that has no parameters is not a <ph id="ph2">`static`</ph> member.</source>
          <target state="translated">다른 오버 로드를 오버 로드와는 달리 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 매개 변수가 없는 않습니다는 <ph id="ph2">`static`</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Use that overload when you have already created a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이미 만든 경우 오버 로드를 사용 하 여 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스, 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Use one of the <ph id="ph1">`static`</ph> overloads when you want to create a new <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component rather than start a process for an existing component.</source>
          <target state="translated">중 하나를 사용 하 여는 <ph id="ph1">`static`</ph> 새 하려는 경우 overloads <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.</source>
          <target state="translated">이 오버 로드와 매개 변수가 없는 오버 로드 시작할 프로세스 리소스의 파일 이름을 지정할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</source>
          <target state="translated">따옴표를 사용 하 여 시스템에 선언 된 경로 변수를 사용 하는 경우 해당 위치에 있는 프로세스를 시작할 때 해당 경로 완전히 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Otherwise, the system will not find the path.</source>
          <target state="translated">그렇지 않으면 시스템 경로 찾지 않습니다.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>For example, if <ph id="ph1">`c:\mypath`</ph> is not in your path, and you add it using quotation marks: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>, you must fully qualify any process in <ph id="ph3">`c:\mypath`</ph> when starting it.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">`c:\mypath`</ph> 사용자의 경로에 없는 따옴표를 사용 하 여 추가 하 고: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>의 모든 프로세스를 정규화 해야 <ph id="ph3">`c:\mypath`</ph> 시작할 때입니다.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</source>
          <target state="translated">ASP.NET 웹 페이지 및 서버 제어 코드는 웹 서버에서 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>If you use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 새 프로세스에서 ASP.NET 웹 페이지 또는 서버 컨트롤의 메서드를 제한 된 권한으로 웹 서버에서 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The process does not start in the same context as the client browser, and does not have access to the user desktop.</source>
          <target state="translated">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으면 되며 사용자 데스크톱에 대 한 액세스를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property.</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>A note about apartment states in managed threads is necessary here.</source>
          <target state="translated">관리 되는 스레드의 아파트 상태에 대 한 메모는 여기에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph> on the process component's <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, make sure you have set a threading model on your application by setting the attribute <ph id="ph4">`[STAThread]`</ph> on the <ph id="ph5">`main()`</ph> method.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 프로세스 구성 요소에 대해 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성을 특성을 설정 하 여 응용 프로그램에 스레딩 모델을 설정 했는지 확인 <ph id="ph4">`[STAThread]`</ph> 에 <ph id="ph5">`main()`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Otherwise, a managed thread can be in an <ph id="ph1">`unknown`</ph> state or put in the <ph id="ph2">`MTA`</ph> state, the latter of which conflicts with <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> being <ph id="ph4">`true`</ph>.</source>
          <target state="translated">그렇지 않은 경우 관리 되는 스레드 수는 <ph id="ph1">`unknown`</ph> 상태 또는 <ph id="ph2">`MTA`</ph> 상태 이면와 충돌 하는 후자 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 되 고 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Some methods require that the apartment state not be <ph id="ph1">`unknown`</ph>.</source>
          <target state="translated">일부 방법의 경우 아파트 상태 수 없음을 <ph id="ph1">`unknown`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>If the state is not explicitly set, when the application encounters such a method, it defaults to <ph id="ph1">`MTA`</ph>, and once set, the apartment state cannot be changed.</source>
          <target state="translated">기본적으로 상태는 명시적으로 설정 하지, 응용 프로그램에서 이러한 메서드를 발견 한 경우, <ph id="ph1">`MTA`</ph>를 설정한 후에 아파트 상태를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>However, <ph id="ph1">`MTA`</ph> causes an exception to be thrown when the operating system shell is managing the thread.</source>
          <target state="translated">그러나 <ph id="ph1">`MTA`</ph> 를 운영 체제 셸을 스레드를 관리할 경우 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</source>
          <target state="translated">먼저 다음 예제에서는 Internet Explorer의 인스턴스를 생성 하 고 브라우저의 즐겨찾기 폴더의 내용을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>It then starts some other instances of Internet Explorer and displays some specific pages or sites.</source>
          <target state="translated">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지 또는 사이트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</source>
          <target state="translated">마지막으로 특정 사이트를 탐색 하는 동안 최소화 된 상태로 창으로 Internet Explorer를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>An error occurred when opening the associated file.</source>
          <target state="translated">연결된 파일을 열 때 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>The PATH environment variable has a string containing quotes.</source>
          <target state="translated">PATH 환경 변수에 따옴표를 포함하는 문자열이 있습니다.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The name of an application file to run in the process.</source>
          <target state="translated">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">응용 프로그램 이름 및 명령줄 인수 집합을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that is associated with the process resource, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no process resource is started.</source>
          <target state="translated">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>에 연결되는 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
          <target state="translated">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>In addition, Start may return a non-null Process with its <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property already set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">뿐만 아니라 시작 시 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성이 이미 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
          <target state="translated">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Use this overload to start a process resource by specifying its file name and command-line arguments.</source>
          <target state="translated">이 오버 로드를 사용 하 여 파일 이름 및 명령줄 인수를 지정 하 여 프로세스 리소스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.</source>
          <target state="translated">오버 로드를 새 리소스를 연결 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">시작할 실행 파일의 주소가 URL 인 경우에 프로세스가 시작 되지 않은 및 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>This overload lets you start a process without first creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하는 프로세스를 만들지 않고 새 시작할 수 있습니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The overload is an alternative to the explicit steps of creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, setting the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> members of the <ph id="ph4">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, and calling <ph id="ph5">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph6">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">오버 로드는 새로 만드는 데 따른 명시적 단계에 대 한 대안 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 설정 인스턴스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> 의 멤버는 <ph id="ph4">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출 <ph id="ph5">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph6">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the <ph id="ph1">`Run`</ph> dialog box of the Windows <ph id="ph2">`Start`</ph> menu.</source>
          <target state="translated">파일 이름 및 인수를 지정 하 여 프로세스를 시작 하는 것은 파일 이름 및 명령줄 인수에서 입력 비슷합니다는 <ph id="ph1">`Run`</ph> 대화 상자는 창의 <ph id="ph2">`Start`</ph> 메뉴.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Therefore, the file name does not need to represent an executable file.</source>
          <target state="translated">따라서 파일 이름이 실행 파일을 나타내는 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>It can be of any file type for which the extension has been associated with an application installed on the system.</source>
          <target state="translated">모든 형식의 파일을 확장에 연결 된 시스템에 설치 된 응용 프로그램 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
          <target state="translated">예를 들어.doc 파일을 Microsoft Word와 같은 워드 프로세서 도구에 있는 경우에 확장명이.doc를 가질 수 있습니다 또는 텍스트 파일을 메모장과 같은 편집기에 연결한 경우 파일 이름은.txt 확장명을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Similarly, in the same way that the <ph id="ph1">`Run`</ph> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph2">`fileName`</ph> parameter.</source>
          <target state="translated">동일한 방식으로 <ph id="ph1">`Run`</ph> .exe 확장명은의 경우 선택 사항, 대화 상자에는.exe 확장명이 있거나 없는 실행 파일 이름을 사용할 수는 <ph id="ph2">`fileName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
          <target state="translated">예를 들어, 설정할 수는 <ph id="ph1">`fileName`</ph> "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents an executable file, the <ph id="ph2">`arguments`</ph> parameter might represent a file to act upon, such as the text file in <ph id="ph3">`Notepad.exe myfile.txt`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`fileName`</ph> 매개 변수는 실행 파일로 나타냅니다는 <ph id="ph2">`arguments`</ph> 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 <ph id="ph3">`Notepad.exe myfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents a command (.cmd) file, the <ph id="ph2">`arguments`</ph> parameter must include either a "<ph id="ph3">`/c`</ph>" or "<ph id="ph4">`/k`</ph>" argument to specify whether the command window exits or remains after completion.</source>
          <target state="translated">경우는 <ph id="ph1">`fileName`</ph> 매개 변수는 명령 파일 (.cmd)을 나타냅니다는 <ph id="ph2">`arguments`</ph> 매개 변수 하나를 포함 해야는 "<ph id="ph3">`/c`</ph>"또는"<ph id="ph4">`/k`</ph>" 인수를 명령 창 종료 또는 완료 된 후 남아 있는지 여부를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Unlike the other overloads, the overload of <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> that has no parameters is not a <ph id="ph2">`static`</ph> member.</source>
          <target state="translated">다른 오버 로드를 오버 로드와는 달리 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 매개 변수가 없는 않습니다는 <ph id="ph2">`static`</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Use that overload when you have already created a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이미 만든 경우 오버 로드를 사용 하 여 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스, 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Use one of the <ph id="ph1">`static`</ph> overloads when you want to create a new <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component rather than start a process for an existing component.</source>
          <target state="translated">중 하나를 사용 하 여는 <ph id="ph1">`static`</ph> 새 하려는 경우 overloads <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.</source>
          <target state="translated">이 오버 로드와 매개 변수가 없는 오버 로드 프로세스 리소스를 시작 및 전달할 명령줄 인수 파일 이름을 지정할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</source>
          <target state="translated">따옴표를 사용 하 여 시스템에 선언 된 경로 변수를 사용 하는 경우 해당 위치에 있는 프로세스를 시작할 때 해당 경로 완전히 정규화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Otherwise, the system will not find the path.</source>
          <target state="translated">그렇지 않으면 시스템 경로 찾지 않습니다.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>For example, if <ph id="ph1">`c:\mypath`</ph> is not in your path, and you add it using quotation marks: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>, you must fully qualify any process in <ph id="ph3">`c:\mypath`</ph> when starting it.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">`c:\mypath`</ph> 사용자의 경로에 없는 따옴표를 사용 하 여 추가 하 고: <ph id="ph2">`path = %path%;"c:\mypath"`</ph>의 모든 프로세스를 정규화 해야 <ph id="ph3">`c:\mypath`</ph> 시작할 때입니다.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</source>
          <target state="translated">ASP.NET 웹 페이지 및 서버 제어 코드는 웹 서버에서 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If you use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 새 프로세스에서 ASP.NET 웹 페이지 또는 서버 컨트롤의 메서드를 제한 된 권한으로 웹 서버에서 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The process does not start in the same context as the client browser, and does not have access to the user desktop.</source>
          <target state="translated">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으면 되며 사용자 데스크톱에 대 한 액세스를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property..</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성...</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>A note about apartment states in managed threads is necessary here.</source>
          <target state="translated">관리 되는 스레드의 아파트 상태에 대 한 메모는 여기에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph> on the process component's <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, make sure you have set a threading model on your application by setting the attribute <ph id="ph4">`[STAThread]`</ph> on the <ph id="ph5">`main()`</ph> method.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 은 <ph id="ph2">`true`</ph> 프로세스 구성 요소에 대해 <ph id="ph3">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성을 특성을 설정 하 여 응용 프로그램에 스레딩 모델을 설정 했는지 확인 <ph id="ph4">`[STAThread]`</ph> 에 <ph id="ph5">`main()`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Otherwise, a managed thread can be in an <ph id="ph1">`unknown`</ph> state or put in the <ph id="ph2">`MTA`</ph> state, the latter of which conflicts with <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> being <ph id="ph4">`true`</ph>.</source>
          <target state="translated">그렇지 않은 경우 관리 되는 스레드 수는 <ph id="ph1">`unknown`</ph> 상태 또는 <ph id="ph2">`MTA`</ph> 상태 이면와 충돌 하는 후자 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> 되 고 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Some methods require that the apartment state not be <ph id="ph1">`unknown`</ph>.</source>
          <target state="translated">일부 방법의 경우 아파트 상태 수 없음을 <ph id="ph1">`unknown`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>If the state is not explicitly set, when the application encounters such a method, it defaults to <ph id="ph1">`MTA`</ph>, and once set, the apartment state cannot be changed.</source>
          <target state="translated">기본적으로 상태는 명시적으로 설정 하지, 응용 프로그램에서 이러한 메서드를 발견 한 경우, <ph id="ph1">`MTA`</ph>를 설정한 후에 아파트 상태를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>However, <ph id="ph1">`MTA`</ph> causes an exception to be thrown when the operating system shell is managing the thread.</source>
          <target state="translated">그러나 <ph id="ph1">`MTA`</ph> 를 운영 체제 셸을 스레드를 관리할 경우 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</source>
          <target state="translated">먼저 다음 예제에서는 Internet Explorer의 인스턴스를 생성 하 고 브라우저의 즐겨찾기 폴더의 내용을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>It then starts some other instances of Internet Explorer and displays some specific pages or sites.</source>
          <target state="translated">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지 또는 사이트를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</source>
          <target state="translated">마지막으로 특정 사이트를 탐색 하는 동안 최소화 된 상태로 창으로 Internet Explorer를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="arguments" /&gt;</ph> 매개 변수가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>An error occurred when opening the associated file.</source>
          <target state="translated">연결된 파일을 열 때 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</source>
          <target state="translated">인수의 길이와 프로세스에 대한 전체 경로 길이를 합하면 2080을 초과합니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
          <target state="translated">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>or "Access is denied."</source>
          <target state="translated">또는 “액세스가 거부되었습니다.”</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>The PATH environment variable has a string containing quotes.</source>
          <target state="translated">PATH 환경 변수에 따옴표를 포함하는 문자열이 있습니다.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The name of an application file to run in the process.</source>
          <target state="translated">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The user name to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 사용자 이름입니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> that contains the password to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 암호가 포함된 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The domain to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 도메인입니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">응용 프로그램 이름, 사용자 이름, 암호 및 도메인을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that is associated with the process resource, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no process resource is started.</source>
          <target state="translated">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>에 연결되는 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
          <target state="translated">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>In addition, Start may return a non-null Process with its <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property already set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">뿐만 아니라 시작 시 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성이 이미 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
          <target state="translated">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain.</source>
          <target state="translated">이 오버 로드를 사용 하 여 해당 파일 이름, 사용자 이름, 암호 및 도메인을 지정 하 여 새 프로세스와 해당 주 스레드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</source>
          <target state="translated">새 프로세스는 다음 지정 된 자격 증명 (사용자, 도메인 및 암호)의 보안 컨텍스트에서 지정된 된 실행 파일을 실행합니다.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</source>
          <target state="translated">실행 파일을 원격 드라이브에 있는 경우 연결 된 드라이브 문자가 아닌 uniform resource identifier (URI)를 사용 하 여 네트워크 공유를 식별 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">시작할 실행 파일의 주소가 URL 인 경우에 프로세스가 시작 되지 않은 및 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>This overload lets you start a process without first creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하는 프로세스를 만들지 않고 새 시작할 수 있습니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The overload is an alternative to the explicit steps of creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, setting the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt;</ph> properties of the <ph id="ph6">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, and calling <ph id="ph7">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph8">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">오버 로드는 새로 만드는 데 따른 명시적 단계에 대 한 대안 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 설정 인스턴스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt;</ph> 의 속성은 <ph id="ph6">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출 <ph id="ph7">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한 <ph id="ph8">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph1">`fileName`</ph> parameter.</source>
          <target state="translated">동일한 방식으로 <bpt id="p1">**</bpt>실행<ept id="p1">**</ept> .exe 확장명은의 경우 선택 사항, 대화 상자에는.exe 확장명이 있거나 없는 실행 파일 이름을 사용할 수는 <ph id="ph1">`fileName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
          <target state="translated">예를 들어, 설정할 수는 <ph id="ph1">`fileName`</ph> "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents an executable file, the <ph id="ph2">`arguments`</ph> parameter might represent a file to act upon, such as the text file in <ph id="ph3">`Notepad.exe myfile.txt`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`fileName`</ph> 매개 변수는 실행 파일로 나타냅니다는 <ph id="ph2">`arguments`</ph> 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 <ph id="ph3">`Notepad.exe myfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The file name must represent an executable file in the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> overloads that have <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, and <ph id="ph4">`domain`</ph> parameters.</source>
          <target state="translated">파일 이름에는 실행 파일을 나타내야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 오버 로드의 <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, 및 <ph id="ph4">`domain`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property..</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성...</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> when an attempt is made to start an application associated with a nonexecutable file.</source>
          <target state="translated">다음 코드 예제에서는이 오버 로드를 실행 파일로 시작의 사용법을 보여줍니다 및에서는의 <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> 파일과와 연결 된 응용 프로그램을 시작 하려고 할 때입니다.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>No file name was specified.</source>
          <target state="translated">파일 이름을 지정하지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>There was an error in opening the associated file.</source>
          <target state="translated">연결된 파일을 여는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>Method not supported on Linux or macOS (.NET Core only).</source>
          <target state="translated">메서드는 Linux 또는 macOS에서 지원되지 않습니다(.NET Core에만 해당).</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The name of an application file to run in the process.</source>
          <target state="translated">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The user name to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 사용자 이름입니다.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> that contains the password to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 암호가 포함된 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The domain to use when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 사용할 도메인입니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component.</source>
          <target state="translated">응용 프로그램 이름, 명령줄 인수 집합, 사용자 이름, 암호 및 도메인을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> that is associated with the process resource, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no process resource is started.</source>
          <target state="translated">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>에 연결되는 새 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</source>
          <target state="translated">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>In addition, Start may return a non-null Process with its <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> property already set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">뿐만 아니라 시작 시 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> 속성이 이미 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>In this case, the started process may have activated an existing instance of itself and then exited.</source>
          <target state="translated">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain.</source>
          <target state="translated">이 오버 로드를 사용 하 여 파일 이름, 명령줄 인수, 사용자 이름, 암호 및 도메인을 지정 하 여 새 프로세스와 해당 주 스레드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</source>
          <target state="translated">새 프로세스는 다음 지정 된 자격 증명 (사용자, 도메인 및 암호)의 보안 컨텍스트에서 지정된 된 실행 파일을 실행합니다.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</source>
          <target state="translated">실행 파일을 원격 드라이브에 있는 경우 연결 된 드라이브 문자가 아닌 uniform resource identifier (URI)를 사용 하 여 네트워크 공유를 식별 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">시작할 실행 파일의 주소가 URL 인 경우에 프로세스가 시작 되지 않은 및 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>This overload lets you start a process without first creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">이 오버 로드를 사용 하는 프로세스를 만들지 않고 새 시작할 수 있습니다. <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The overload is an alternative to the explicit steps of creating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, setting the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt;</ph> properties of the <ph id="ph7">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property, and calling <ph id="ph8">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for the <ph id="ph9">&lt;xref:System.Diagnostics.Process&gt;</ph> instance.</source>
          <target state="translated">오버 로드는 새로 만드는 데 따른 명시적 단계에 대 한 대안 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 설정 인스턴스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt;</ph> 의 속성은 <ph id="ph7">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성과 호출 <ph id="ph8">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph9">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph1">`fileName`</ph> parameter.</source>
          <target state="translated">동일한 방식으로 <bpt id="p1">**</bpt>실행<ept id="p1">**</ept> .exe 확장명은의 경우 선택 사항, 대화 상자에는.exe 확장명이 있거나 없는 실행 파일 이름을 사용할 수는 <ph id="ph1">`fileName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>For example, you can set the <ph id="ph1">`fileName`</ph> parameter to either "Notepad.exe" or "Notepad".</source>
          <target state="translated">예를 들어, 설정할 수는 <ph id="ph1">`fileName`</ph> "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>If the <ph id="ph1">`fileName`</ph> parameter represents an executable file, the <ph id="ph2">`arguments`</ph> parameter might represent a file to act upon, such as the text file in <ph id="ph3">`Notepad.exe myfile.txt`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`fileName`</ph> 매개 변수는 실행 파일로 나타냅니다는 <ph id="ph2">`arguments`</ph> 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 <ph id="ph3">`Notepad.exe myfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The file name must represent an executable file in the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> overloads that have <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, and <ph id="ph4">`domain`</ph> parameters.</source>
          <target state="translated">파일 이름에는 실행 파일을 나타내야 합니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 오버 로드의 <ph id="ph2">`userName`</ph>, <ph id="ph3">`password`</ph>, 및 <ph id="ph4">`domain`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Whenever you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to start a process, you might need to close it or you risk losing system resources.</source>
          <target state="translated">사용할 때마다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하려면를 닫습니다 하거나 시스템 리소스를 손실 될 위험이 있습니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Close processes using <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스를 닫습니다 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>You can check whether a process has already been closed by using its <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> property..</source>
          <target state="translated">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> 속성...</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>No file name was specified.</source>
          <target state="translated">파일 이름을 지정하지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>An error occurred when opening the associated file.</source>
          <target state="translated">연결된 파일을 열 때 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</source>
          <target state="translated">인수의 길이와 연결된 파일의 전체 경로 길이를 합하면 2080을 초과합니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</source>
          <target state="translated">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>or "Access is denied."</source>
          <target state="translated">또는 “액세스가 거부되었습니다.”</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>The process object has already been disposed.</source>
          <target state="translated">프로세스 개체가 이미 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>Method not supported on Linux or macOS (.NET Core only).</source>
          <target state="translated">메서드는 Linux 또는 macOS에서 지원되지 않습니다(.NET Core에만 해당).</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Gets or sets the properties to pass to the <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.Start" /&gt;</ph> method of the <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.Start" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 메서드에 전달할 속성을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>The <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph> that represents the data with which to start the process.</source>
          <target state="translated">프로세스를 시작하는 데 사용된 데이터를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessStartInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>These arguments include the name of the executable file or document used to start the process.</source>
          <target state="translated">이러한 인수에는 프로세스를 시작하는 데 사용된 실행 파일이나 문서 이름이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> represents the set of parameters to use to start a process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 프로세스를 시작 하는 데 매개 변수 집합을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> is used to specify the process to start.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 호출 되는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 프로세스가 시작 되도록 지정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>The only necessary <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> member to set is the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
          <target state="translated">유일한 필수 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 설정 하는 멤버는는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Starting a process by specifying the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property is similar to typing the information in the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box of the Windows <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> menu.</source>
          <target state="translated">지정 하 여 프로세스를 시작는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성에 정보를 입력 하는 것과 비슷합니다는 <bpt id="p1">**</bpt>실행<ept id="p1">**</ept> 대화 상자는 창의 <bpt id="p2">**</bpt>시작<ept id="p2">**</ept> 메뉴.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property does not need to represent an executable file.</source>
          <target state="translated">따라서는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성이 실행 파일을 나타내는 데 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>It can be of any file type for which the extension has been associated with an application installed on the system.</source>
          <target state="translated">모든 형식의 파일을 확장에 연결 된 시스템에 설치 된 응용 프로그램 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>For example the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 편집기, 메모장과 같은 텍스트 파일에 연결 했는지 또는.doc 파일을 Microsoft Word와 같은 워드 프로세서 도구에 있는 경우에 확장명이.doc를 가질 수 있습니다 하는 경우.txt 확장명을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Similarly, in the same way that the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> member.</source>
          <target state="translated">동일한 방식으로 <bpt id="p1">**</bpt>실행<ept id="p1">**</ept> .exe 확장명은의 경우 선택 사항, 대화 상자에는.exe 확장명이 있거나 없는 실행 파일 이름을 사용할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>For example, you can set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property to either "Notepad.exe" or "Notepad".</source>
          <target state="translated">예를 들어, 설정할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성을 "Notepad.exe" 또는 "Notepad" 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>You can start a ClickOnce application by setting the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property to the location (for example, a Web address) from which you originally installed the application.</source>
          <target state="translated">설정 하 여 ClickOnce 응용 프로그램을 시작할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성을 원래 응용 프로그램 설치 위치 (예를 들어 웹 주소).</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard drive.</source>
          <target state="translated">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</source>
          <target state="translated">파일 이름 예:.doc 파일 파일과 포함 되는 경우에 파일에 수행할 동작을 지정 하는 동사를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>For example, you could set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> to "Print" for a file ending in the .doc extension.</source>
          <target state="translated">예를 들어 설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> .doc 확장명으로 끝나는 파일에 대 한 "print"입니다.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>The file name specified in the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property does not need to have an extension if you manually enter a value for the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property.</source>
          <target state="translated">지정 된 파일 이름이 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성에 대 한 값을 수동으로 입력 하는 경우 확장명을 가질 필요가 없습니다는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>However, if you use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> property to determine what verbs are available, you must include the extension.</source>
          <target state="translated">그러나 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> 동사를 확인 하려면 속성을 사용할 수 있는 확장을 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>You can change the parameters specified in the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property up to the time that you call the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method on the process.</source>
          <target state="translated">에 지정 된 매개 변수를 변경할 수는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 호출 전까지 속성은 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스에서 메서드.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>After you start the process, changing the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> values does not affect or restart the associated process.</source>
          <target state="translated">프로세스를 시작 하면 변경 된 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 값에 영향을 하거나 연결된 된 프로세스를 다시 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>If you call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType&gt;</ph> properties set, the unmanaged <ph id="ph4">`CreateProcessWithLogonW`</ph> function is called, which starts the process in a new window even if the <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A&gt;</ph> property value is <ph id="ph6">`true`</ph> or the <ph id="ph7">&lt;xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A&gt;</ph> property value is <ph id="ph8">&lt;xref:System.Diagnostics.ProcessWindowStyle.Hidden&gt;</ph>.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType&gt;</ph> 속성 집합, 관리 되지 않는 <ph id="ph4">`CreateProcessWithLogonW`</ph> 함수가 호출 되는 <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A&gt;</ph> 속성 값이 <ph id="ph6">`true`</ph> 또는 <ph id="ph7">&lt;xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A&gt;</ph> 속성 값은 <ph id="ph8">&lt;xref:System.Diagnostics.ProcessWindowStyle.Hidden&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>If you did not use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method to start a process, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property does not reflect the parameters used to start the process.</source>
          <target state="translated">사용 하지 않은 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 프로세스를 시작 하는 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성 매개 변수는 프로세스를 시작 하는 데 사용 되지는지 않습니다.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>For example, if you use <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> to get an array of processes running on the computer, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property of each <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> does not contain the original file name or arguments used to start the process.</source>
          <target state="translated">예를 들어, 사용 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> 컴퓨터에서 실행 중인 프로세스의 배열을 가져올 수는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 각 속성 <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> 원래 파일 이름 또는 프로세스를 시작 하는 데 사용 되는 인수를 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>When the process is started, the file name is the file that populates the (read-only) <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> property.</source>
          <target state="translated">파일 이름 (읽기 전용) 정보를 표시 하는 파일은 프로세스가 시작 되 면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>If you want to retrieve the executable file that is associated with the process after the process has started, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> property.</source>
          <target state="translated">프로세스가 시작 된 후 프로세스와 연결 된 실행 파일을 검색, 사용 하려는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>If you want to set the executable file of a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance for which an associated process has not been started, use the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property's <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> member.</source>
          <target state="translated">실행 파일을 설정 하려는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 있는 연결된 된 프로세스가 시작 되지 않은 대 한 인스턴스를 사용 하 여는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성의 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>Because the members of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property are arguments that are passed to the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method of a process, changing the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property after the associated process has started will not reset the <ph id="ph4">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> property.</source>
          <target state="translated">때문에의 멤버는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 속성에 전달 되는 인수는는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 변경 하는 프로세스의 메서드는 <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> 속성 연결된 된 프로세스가 시작 된 후 다시 설정 되지 것입니다는 <ph id="ph4">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>These properties are used only to initialize the associated process.</source>
          <target state="translated">이러한 속성은 연결된 된 프로세스 초기화에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>The following example populates a <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> with the file to execute, the action performed on it and whether it should displays a user interface.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> 실행 파일에 대해 수행 된 작업 및 사용자 인터페이스를 표시 해야 하는지 여부입니다.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>For additional examples, refer to the reference pages for properties of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> class.</source>
          <target state="translated">다른 예제를 보려면 참조 페이지의 속성에 대 한 참조는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartInfo">
          <source>The value that specifies the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartInfo" /&gt;</ph>를 지정하는 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartInfo">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>Gets the time that the associated process was started.</source>
          <target state="translated">연결된 프로세스가 시작된 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartTime">
          <source>An object  that indicates when the process started.</source>
          <target state="translated">해당 프로세스가 시작된 시간을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartTime">
          <source>An exception is thrown if the process is not running.</source>
          <target state="translated">프로세스가 실행되고 있지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartTime" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StartTime" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>The process has exited.</source>
          <target state="translated">프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>The process has not been started.</source>
          <target state="translated">프로세스가 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.StartTime">
          <source>An error occurred in the call to the Windows function.</source>
          <target state="translated">Windows 함수 호출 시 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartTime">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.StartTime">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</source>
          <target state="translated">프로세스 종료 이벤트의 결과로 발생하는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> used to marshal event handler calls that are issued as a result of an <ph id="ph2">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event on the process.</source>
          <target state="translated">프로세스에서 <ph id="ph2">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트의 결과로 발생하는 이벤트 처리기 호출을 마샬링하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods that handle the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event are called on a thread from the system thread pool.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.SynchronizingObject%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>를 처리 하는 메서드는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 시스템 스레드 풀의 스레드라도에서 이벤트를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>For more information about system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">시스템 스레드 풀에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event is handled by a visual Windows Forms component, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or might result in an exception.</source>
          <target state="translated">때는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트가 같은 visual Windows Forms 구성 요소에 의해 처리 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소를 액세스 하거나 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>Avoid this by setting <ph id="ph1">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the methods handling the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event to be called on the same thread on which the component was created.</source>
          <target state="translated">설정 하 여이 문제를 방지 <ph id="ph1">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> 처리 하는 메서드가 때문에 Windows Forms 구성 요소에는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 구성 요소를 만든 동일한 스레드에서 호출 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> is used inside <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> in a Windows Forms designer, <ph id="ph3">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 안에서 사용 <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> Windows Forms 디자이너에서 <ph id="ph3">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> 포함 하는 컨트롤에 자동으로 설정 됩니다는 <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> on a designer for <ph id="ph2">`Form1`</ph> (which inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>) the <ph id="ph4">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> is set to the instance of <ph id="ph6">`Form1`</ph>:</source>
          <target state="translated">예를 들어, 배치 하는 경우는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 에 대 한 디자이너에서 <ph id="ph2">`Form1`</ph> (에서 상속 되 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>)는 <ph id="ph4">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> 속성 <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스의로 설정 된 <ph id="ph6">`Form1`</ph>:</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</source>
          <target state="translated">일반적으로 이러한 구성 요소는 특정 스레드에 바인딩되어 있기 때문에 구성 요소 컨트롤 또는 폼에 배치 된 경우이 속성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.SynchronizingObject">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Threads">
          <source>Gets the set of threads that are running in the associated process.</source>
          <target state="translated">연결된 프로세스에서 실행 중인 스레드를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessThread" /&gt;</ph> representing the operating system threads currently running in the associated process.</source>
          <target state="translated">연결된 프로세스에서 현재 실행 중인 운영 체제 스레드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Diagnostics.ProcessThread" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>A thread executes code in a process.</source>
          <target state="translated">스레드는 프로세스의 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>Each process is started with a single thread, its primary thread.</source>
          <target state="translated">각 프로세스는 단일 스레드로 기본 스레드도 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>Any thread can create additional threads.</source>
          <target state="translated">모든 스레드가 추가 스레드를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>Threads within a process share the address space of the process.</source>
          <target state="translated">프로세스 내에서 스레드 프로세스의 주소 공간을 공유 합니다.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.ProcessThread&gt;</ph> to get all the threads associated with the current process.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessThread&gt;</ph> 현재 프로세스와 관련 된 모든 스레드를 가져오려면 합니다.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>The primary thread is not necessarily at index zero in the array.</source>
          <target state="translated">주 스레드를 반드시 배열의 인덱스 0에 없습니다.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Threads">
          <source>The process does not have an <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph>, or no process is associated with the <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> instance.</source>
          <target state="translated">프로세스에 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph>가 없거나 <ph id="ph2">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 인스턴스와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Threads">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Threads">
          <source>The associated process has exited.</source>
          <target state="translated">연결된 프로세스가 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.Threads">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph> to access this property on Windows 98 and Windows Me.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /&gt;</ph>를 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.Threads">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.ToString">
          <source>Formats the process's name as a string, combined with the parent component type, if applicable.</source>
          <target state="translated">가능한 경우 부모 구성 요소 형식을 결합하여 프로세스 이름을 문자열로 서식화합니다.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessName" /&gt;</ph>, combined with the base component's <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> return value.</source>
          <target state="translated">기본 구성 요소의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.ProcessName" /&gt;</ph> 반환 값과 결합된 <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.ToString">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.ToString">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.ToString">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.ToString">
          <source><ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.ToString" /&gt;</ph> is not supported on Windows 98.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.ToString" /&gt;</ph>은 Windows 98에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.ToString">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.ToString">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>Gets the total processor time for this process.</source>
          <target state="translated">이 프로세스의 총 프로세서 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that indicates the amount of time that the associated process has spent utilizing the CPU.</source>
          <target state="translated">연결된 프로세스에서 CPU를 사용해 소비한 시간을 나타내는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>This value is the sum of the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.UserProcessorTime" /&gt;</ph> and the <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.UserProcessorTime" /&gt;</ph>과 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /&gt;</ph>의 합입니다.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.TotalProcessorTime" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.TotalProcessorTime" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.TotalProcessorTime">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>Gets the user processor time for this process.</source>
          <target state="translated">이 프로세스의 사용자 프로세서 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</source>
          <target state="translated">연결된 프로세스가 운영 체제 코어 내부가 아닌 프로세스의 응용 프로그램 부분 내부에서 코드를 실행하는 데 소비한 시간을 나타내는 <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>The example detects when the process exits, and displays the process's exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>You are attempting to access the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.UserProcessorTime" /&gt;</ph> property for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.UserProcessorTime" /&gt;</ph> 속성에 액세스하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>This property is available only for processes that are running on the local computer.</source>
          <target state="translated">이 속성은 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.UserProcessorTime">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.VirtualMemorySize">
          <source>Gets the size of the process's virtual memory, in bytes.</source>
          <target state="translated">프로세스의 가상 메모리 크기(바이트)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize">
          <source>The amount of virtual memory, in bytes, that the associated process has requested.</source>
          <target state="translated">연결된 프로세스에서 요청한 가상 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.VirtualMemorySize">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 가상 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The amount of virtual memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 가상 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The value returned by this property represents the current size of virtual memory used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서 프로세스에 의해 사용 되는 가상 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</source>
          <target state="translated">운영 체제 디스크에 있는 가상 메모리 페이징 파일에 저장 된 페이지 또는 실제 메모리에 로드 하는 페이지에 각 프로세스에 대 한 가상 주소 공간을 매핑합니다.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Virtual Bytes<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>가상 바이트<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.VirtualMemorySize64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Sets the period of time to wait for the associated process to exit, and blocks the current thread of execution until the time has elapsed or the process has exited.</source>
          <target state="translated">연결된 프로세스가 종료될 때까지 대기하는 시간을 설정하고, 시간이 경과하거나 프로세스가 종료될 때까지 현재 실행의 스레드를 차단합니다.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>To avoid blocking the current thread, use the <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event.</source>
          <target state="translated">현재 스레드가 차단되는 것을 방지하려면 <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> 이벤트를 사용합니다.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>For code examples, see the <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> and the <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.ExitCode" /&gt;</ph> property reference pages.</source>
          <target state="translated">코드 예제는 <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.StandardError" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.ExitCode" /&gt;</ph> 속성 참조 페이지를 참조하세요.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>Instructs the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component to wait indefinitely for the associated process to exit.</source>
          <target state="translated">연결된 프로세스가 종료될 때까지 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 무기한 대기하게 합니다.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> makes the current thread wait until the associated process terminates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 연결된 된 프로세스가 종료 될 때까지 대기 하는 현재 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>It should be called after all other methods are called on the process.</source>
          <target state="translated">프로세스에서 다른 모든 메서드를 호출 후에 호출 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>To avoid blocking the current thread, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event.</source>
          <target state="translated">현재 스레드가 차단되는 것을 방지하려면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트를 사용합니다.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>This method instructs the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait an infinite amount of time for the process and event handlers to exit.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소를 종료 하려면 프로세스 및 이벤트 처리기에 대 한 시간을 무기한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>This can cause an application to stop responding.</source>
          <target state="translated">이 인해 응답 하지 응용 프로그램이 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</source>
          <target state="translated">예를 들어, 호출 하는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> 사용자 인터페이스가 있는 프로세스에 대해 연결된 된 프로세스를 종료 하는 운영 체제에 요청 수 처리할 수 없는 입력 하지 않는 것의 메시지 루프를 작성 하는 경우.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> and earlier versions, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> overload waited for <ph id="ph3">&lt;xref:System.Int32.MaxValue&gt;</ph> milliseconds (approximately 24 days), not indefinitely.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 및 이전 버전의 <ph id="ph2">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 오버 로드에 대 한 대기 <ph id="ph3">&lt;xref:System.Int32.MaxValue&gt;</ph> 밀리초 (약 24 일), not 무기한 합니다.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>Also, previous versions did not wait for the event handlers to exit if the full <ph id="ph1">&lt;xref:System.Int32.MaxValue&gt;</ph> time was reached.</source>
          <target state="translated">또한 이전 버전 기다리지 않고 이벤트 처리기를 끝낼 전체 <ph id="ph1">&lt;xref:System.Int32.MaxValue&gt;</ph> 시간에 도달 했습니다.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</source>
          <target state="translated">이 오버 로드는 모든 처리가 완료 되었음을 나타내는, 리디렉션된 표준 출력에 대 한 비동기 이벤트 처리를 포함 하 여 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>You should use this overload after a call to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> overload when standard output has been redirected to asynchronous event handlers.</source>
          <target state="translated">호출한 후이 오버 로드를 사용 해야는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> 비동기 이벤트 처리기로 표준 출력이 리디렉션된 경우 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph>.</source>
          <target state="translated">시스템 프로세스에 대 한 관리 정보를 저장 하 고이 호출한 하는 구성 요소를 반환 (즉, 것 종료 될 때 운영 체제의 정상 또는 비정상 종료에서) 연결된 된 프로세스가 종료 될 때 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component can then access the information, which includes the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>, by using the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> to the exited process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소에 포함 된 정보를 액세스할 수는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>, 사용 하 여는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 종료 프로세스에 있습니다.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>Because the associated process has exited, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> property of the component no longer points to an existing process resource.</source>
          <target state="translated">연결된 된 프로세스가 종료 되었으므로 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 의 구성 요소 속성은 더 이상 기존 프로세스 리소스를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>Instead, the handle can be used only to access the operating system's information about the process resource.</source>
          <target state="translated">대신, 핸들 프로세스 리소스에 대 한 운영 체제의 정보를 액세스할 때만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>The system is aware of handles to exited processes that have not been released by <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components, so it keeps the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> information in memory until the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> component specifically frees the resources.</source>
          <target state="translated">시스템에서 인식 하 여 해제 되지 않은 종료 된 프로세스에 대 한 핸들의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 유지할 수 있도록 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 될 때까지 메모리에 대 한 정보는 <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소 리소스를 해제할 합니다.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>For this reason, any time you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> when the associated process has terminated and you no longer need any administrative information about it.</source>
          <target state="translated">이러한 이유로 든 지 호출할 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스를 호출 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 때 연결된 된 프로세스가 종료 하 고 항목에 대 한 관리 정보는 더 이상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> frees the memory allocated to the exited process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 종료 프로세스에 할당 된 메모리를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> property reference page.</source>
          <target state="translated">설명 섹션을 참조는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> 속성 참조 페이지입니다.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>The wait setting could not be accessed.</source>
          <target state="translated">대기 설정에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>No process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> has been set, and a <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> from which the <ph id="ph3">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> property can be determined does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스가 설정되지 않았으며, <ph id="ph3">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 속성을 파악할 수 있는 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph>이 없습니다.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>You are attempting to call <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.WaitForExit" /&gt;</ph> for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.WaitForExit" /&gt;</ph>를 호출하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>This method is available only for processes that are running on the local computer.</source>
          <target state="translated">이 메서드는 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>The amount of time, in milliseconds, to wait for the associated process to exit.</source>
          <target state="translated">연결된 프로세스가 종료될 때까지 대기하는 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</source>
          <target state="translated">최대값은 사용 가능한 가장 큰 32비트 정수 값이며, 이는 운영 체제에서 사실상 무기한 대기한다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>Instructs the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component to wait the specified number of milliseconds for the associated process to exit.</source>
          <target state="translated">연결된 프로세스가 종료되도록 지정한 밀리초 동안 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 대기하게 합니다.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the associated process has exited; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">연결된 프로세스가 종료된 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> makes the current thread wait until the associated process terminates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> 연결된 된 프로세스가 종료 될 때까지 대기 하는 현재 스레드를 만듭니다.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>It should be called after all other methods are called on the process.</source>
          <target state="translated">프로세스에서 다른 모든 메서드를 호출 후에 호출 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>To avoid blocking the current thread, use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event.</source>
          <target state="translated">현재 스레드가 차단되는 것을 방지하려면 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 이벤트를 사용합니다.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>This method instructs the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait a finite amount of time for the process to exit.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소를 종료 하려면 프로세스에 대 한 유한 기간 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>If the associated process does not exit by the end of the interval because the request to terminate is denied, <ph id="ph1">`false`</ph> is returned to the calling procedure.</source>
          <target state="translated">연결된 된 프로세스가 종료 요청이 거부 되었기 때문에 간격의 끝에서 종료 되지 않은 경우 <ph id="ph1">`false`</ph> 호출 하는 프로시저로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>You can specify <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`milliseconds`</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType&gt;</ph> will behave the same as the <ph id="ph4">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> overload.</source>
          <target state="translated">지정할 수 있습니다 <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> 에 대 한 <ph id="ph2">`milliseconds`</ph>, 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType&gt;</ph> 동작이 동일는 <ph id="ph4">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>If you pass 0 (zero) to the method, it returns <ph id="ph1">`true`</ph> only if the process has already exited; otherwise, it immediately returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">반환 하는 경우에 0 (영) 메서드에 전달, <ph id="ph1">`true`</ph> 프로세스가 이미 종료 되었습니다; 경우에 이렇게 하지 않으면 즉시 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>In the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> and earlier versions, if <ph id="ph2">`milliseconds`</ph> was -1, the <ph id="ph3">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> overload waited for <ph id="ph4">&lt;xref:System.Int32.MaxValue&gt;</ph> milliseconds (approximately 24 days), not indefinitely.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 및 이전 버전 경우 <ph id="ph2">`milliseconds`</ph> 가-1는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> 오버 로드에 대 한 대기 <ph id="ph4">&lt;xref:System.Int32.MaxValue&gt;</ph> 밀리초 (약 24 일), not 무기한 합니다.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</source>
          <target state="translated">비동기 이벤트 처리기로 표준 출력이 리디렉션된, 경우에 출력 프로세스가 완료 되지 않을이 메서드가 반환 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>To ensure that asynchronous event handling has been completed, call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> overload that takes no parameter after receiving a <ph id="ph2">`true`</ph> from this overload.</source>
          <target state="translated">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> 수신 후 없는 매개 변수를 사용 하는 오버 로드는 <ph id="ph2">`true`</ph> 이 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>To help ensure that the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event is handled correctly in Windows Forms applications, set the <ph id="ph2">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> property.</source>
          <target state="translated">않도록 하기 위한는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> 설정, Windows Forms 응용 프로그램에서 이벤트를 올바르게 처리는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.SynchronizingObject%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph>.</source>
          <target state="translated">연결된 된 프로세스가 종료 되는 경우 (종료 된 운영 체제의 정상 또는 비정상 종료에서) 시스템의 프로세스에 대 한 관리 정보를 저장 하 고 마치 호출 하는 구성 요소에 반환 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component can then access the information, which includes the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>, by using the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> to the exited process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소에 포함 된 정보를 액세스할 수는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph>, 사용 하 여는 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 종료 프로세스에 있습니다.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>Because the associated process has exited, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> property of the component no longer points to an existing process resource.</source>
          <target state="translated">연결된 된 프로세스가 종료 되었으므로 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 의 구성 요소 속성은 더 이상 기존 프로세스 리소스를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>Instead, the handle can be used only to access the operating system's information about the process resource.</source>
          <target state="translated">대신, 핸들 프로세스 리소스에 대 한 운영 체제의 정보를 액세스할 때만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>The system is aware of handles to exited processes that have not been released by <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components, so it keeps the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> information in memory until the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> component specifically frees the resources.</source>
          <target state="translated">시스템에서 인식 하 여 해제 되지 않은 종료 된 프로세스에 대 한 핸들의 <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> 유지할 수 있도록 구성 요소는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Handle%2A&gt;</ph> 될 때까지 메모리에 대 한 정보는 <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소 리소스를 해제할 합니다.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>For this reason, any time you call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> instance, call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> when the associated process has terminated and you no longer need any administrative information about it.</source>
          <target state="translated">이러한 이유로 든 지 호출할 <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 인스턴스를 호출 <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 때 연결된 된 프로세스가 종료 하 고 항목에 대 한 관리 정보는 더 이상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> frees the memory allocated to the exited process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> 종료 프로세스에 할당 된 메모리를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>See the code example for the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> property.</source>
          <target state="translated">에 대 한 코드 예제를 보려면는 <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>The wait setting could not be accessed.</source>
          <target state="translated">대기 설정에 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>No process <ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> has been set, and a <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph> from which the <ph id="ph3">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> property can be determined does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 프로세스가 설정되지 않았으며, <ph id="ph3">&lt;see cref="P:System.Diagnostics.Process.Id" /&gt;</ph> 속성을 파악할 수 있는 <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.Handle" /&gt;</ph>이 없습니다.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>There is no process associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>You are attempting to call <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /&gt;</ph> for a process that is running on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 중인 프로세스의 <ph id="ph1">&lt;see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /&gt;</ph>를 호출하려고 합니다.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>This method is available only for processes that are running on the local computer.</source>
          <target state="translated">이 메서드는 로컬 컴퓨터에서 실행되는 프로세스에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="milliseconds" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="milliseconds" /&gt;</ph>이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Process">
          <source>Causes the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component to wait for the associated process to enter an idle state.</source>
          <target state="translated">연결된 프로세스가 유휴 상태가 될 때까지 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 대기하게 합니다.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>Causes the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component to wait indefinitely for the associated process to enter an idle state.</source>
          <target state="translated">연결된 프로세스가 유휴 상태가 될 때까지 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 무기한 대기하도록 합니다.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>This overload applies only to processes with a user interface and, therefore, a message loop.</source>
          <target state="translated">이 오버로드는 사용자 인터페이스가 있는, 즉 메시지 루프가 있는 프로세스에만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the associated process has reached an idle state.</source>
          <target state="translated">연결된 프로세스가 유휴 상태가 된 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> to force the processing of your application to wait until the message loop has returned to the idle state.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> 메시지 루프에 유휴 상태로 반환 될 때까지 대기 하는 응용 프로그램의 처리 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</source>
          <target state="translated">사용자 인터페이스를 사용 하 여 프로세스를 실행할 때 운영 체제에 의해 프로세스에 Windows 메시지를 보낼 때마다의 메시지 루프를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>The process then returns to the message loop.</source>
          <target state="translated">프로세스는 다음 메시지 루프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>A process is said to be in an idle state when it is waiting for messages inside of a message loop.</source>
          <target state="translated">메시지 루프 내에서 메시지를 대기 하 고 유휴 상태에 있는 것으로 프로세스 라고 합니다.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</source>
          <target state="translated">이 상태는 응용 프로그램에 응용 프로그램이 해당 창와 통신 하기 전에 주 창을 만들기를 완료 프로세스를 시작 하는 대기 해야 하는 경우 예를 들어 유용 합니다.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>If a process does not have a message loop, <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">프로세스에 메시지 루프에 없는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> throw는 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> overload instructs the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait indefinitely for the process to become idle in the message loop.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> 오버 로드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소를 메시지 루프에서 유휴 상태가 프로세스에 대 한 무기한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>This instruction can cause an application to stop responding.</source>
          <target state="translated">이 명령에 응답을 중지 하도록 응용 프로그램 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>For example, if the process is written to always exit its message loop immediately, as in the code fragment <ph id="ph1">`while(true)`</ph>.</source>
          <target state="translated">예를 들어 프로세스에 항상 기록 하는 경우의 메시지 루프 즉시 종료 코드 조각에서와 같이 <ph id="ph1">`while(true)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>The process does not have a graphical interface.</source>
          <target state="translated">프로세스에 그래픽 인터페이스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>An unknown error occurred.</source>
          <target state="translated">알 수 없는 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>The process failed to enter an idle state.</source>
          <target state="translated">프로세스가 유휴 상태로 전환하지 못했습니다.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>The process has already exited.</source>
          <target state="translated">프로세스가 이미 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>No process is associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>A value of 1 to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>에 대한 값 1은 연결된 프로세스가 유휴 상태가 될 때까지 대기하는 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</source>
          <target state="translated">값이 0이면 즉시 반환이 이루어지고, 값이 -1이면 무기한 대기하게 됩니다.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>Causes the <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> component to wait the specified number of milliseconds for the associated process to enter an idle state.</source>
          <target state="translated">연결된 프로세스가 유휴 상태가 될 때까지 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 구성 요소를 지정한 시간(밀리초) 동안 대기하도록 합니다.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>This overload applies only to processes with a user interface and, therefore, a message loop.</source>
          <target state="translated">이 오버로드는 사용자 인터페이스가 있는, 즉 메시지 루프가 있는 프로세스에만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the associated process has reached an idle state; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">연결된 프로세스가 유휴 상태에 도달한 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> to force the processing of your application to wait until the message loop has returned to the idle state.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> 메시지 루프에 유휴 상태로 반환 될 때까지 대기 하는 응용 프로그램의 처리 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</source>
          <target state="translated">사용자 인터페이스를 사용 하 여 프로세스를 실행할 때 운영 체제에 의해 프로세스에 Windows 메시지를 보낼 때마다의 메시지 루프를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>The process then returns to the message loop.</source>
          <target state="translated">프로세스는 다음 메시지 루프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>A process is said to be in an idle state when it is waiting for messages inside of a message loop.</source>
          <target state="translated">메시지 루프 내에서 메시지를 대기 하 고 유휴 상태에 있는 것으로 프로세스 라고 합니다.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</source>
          <target state="translated">이 상태는 응용 프로그램에 응용 프로그램이 해당 창와 통신 하기 전에 주 창을 만들기를 완료 프로세스를 시작 하는 대기 해야 하는 경우 예를 들어 유용 합니다.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>If a process does not have a message loop, <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">프로세스에 메시지 루프에 없는 경우 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> throw는 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> overload instructs the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait a finite amount of time for the process to become idle in the message loop.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> 오버 로드는 <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> 구성 요소를 제한 된 양의 메시지 루프에서 유휴 상태가 프로세스 시간을 대기 합니다.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>If the associated process has not become idle by the end of the interval because the loop is still processing messages, <ph id="ph1">`false`</ph> is returned to the calling procedure.</source>
          <target state="translated">루프에서 계속 메시지를 처리 하므로 연결된 된 프로세스에 간격의 끝에서 유휴 상태가 되지 경우 <ph id="ph1">`false`</ph> 호출 하는 프로시저로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>The process does not have a graphical interface.</source>
          <target state="translated">프로세스에 그래픽 인터페이스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>An unknown error occurred.</source>
          <target state="translated">알 수 없는 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>The process failed to enter an idle state.</source>
          <target state="translated">프로세스가 유휴 상태로 전환하지 못했습니다.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>The process has already exited.</source>
          <target state="translated">프로세스가 이미 종료되었습니다.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>No process is associated with this <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Diagnostics.Process" /&gt;</ph> 개체와 연결된 프로세스가 없습니다.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>Gets the associated process's physical memory usage, in bytes.</source>
          <target state="translated">연결된 프로세스의 실제 메모리 사용량(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The total amount of physical memory the associated process is using, in bytes.</source>
          <target state="translated">연결된 프로세스에서 사용 중인 실제 메모리의 총 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The value returned by this property represents the current size of working set memory used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서, 프로세스에서 사용한 작업 집합 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</source>
          <target state="translated">공유 데이터에는 프로세스는 실행 프로세스 모듈와 시스템 라이브러리를 포함 하는 모든 명령이 포함 된 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The following example starts an instance of Notepad.</source>
          <target state="translated">다음 예제에서는 메모장의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The example detects when the process exits, and displays the process' exit code.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 하 고 프로세스의 종료 코드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>Gets the amount of physical memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 실제 메모리의 양(바이트)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The amount of physical memory, in bytes, allocated for the associated process.</source>
          <target state="translated">연결된 프로세스에 할당된 실제 메모리의 양(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The value returned by this property represents the current size of working set memory used by the process, in bytes.</source>
          <target state="translated">이 속성에서 반환 되는 값 (바이트)에서, 프로세스에서 사용한 작업 집합 메모리의 현재 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</source>
          <target state="translated">프로세스의 작업 집합은 실제 RAM 메모리에서 프로세스에 현재 표시 된 메모리 페이지의 집합.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>These pages are resident and available for an application to use without triggering a page fault.</source>
          <target state="translated">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The working set includes both shared and private data.</source>
          <target state="translated">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</source>
          <target state="translated">공유 데이터에는 시스템 라이브러리 및 프로세스 모듈의 명령을 포함 하 여 프로세스에서 실행 하는 모든 명령이 포함 된 페이지가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</source>
          <target state="translated">프로세서 32 비트 또는 64 비트 프로세서가 있는 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The property value is equivalent to the <bpt id="p1">**</bpt>Working Set<ept id="p1">**</ept> performance counter for the process.</source>
          <target state="translated">속성 값은 해당 하는 <bpt id="p1">**</bpt>작업 집합<ept id="p1">**</ept> 프로세스에 대 한 성능 카운터입니다.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The following code example starts an instance of the Notepad application.</source>
          <target state="translated">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The example then retrieves and displays various properties of the associated process.</source>
          <target state="translated">검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The example detects when the process exits, and displays its exit code and peak memory statistics.</source>
          <target state="translated">예제에서는 프로세스가 종료 될 때 감지 된 종료 코드와 최고 메모리 통계를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</source>
          <target state="translated">플랫폼은 Windows 98 또는 Windows Me(Windows Millennium Edition)로서, 이 속성을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.Process.WorkingSet64">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>