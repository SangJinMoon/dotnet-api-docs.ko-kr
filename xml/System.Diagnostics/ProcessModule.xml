<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ProcessModule.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5540f92fd7392575a34bdd5a677cd8de9167884f7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">540f92fd7392575a34bdd5a677cd8de9167884f7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.ProcessModule">
          <source>Represents a.dll or .exe file that is loaded into a particular process.</source>
          <target state="translated">특정 프로세스에 로드된 .dll 또는 .exe 파일을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>A module is an executable file or a dynamic link library (DLL).</source>
          <target state="translated">모듈은 실행 파일 또는 동적 연결 라이브러리 (DLL)입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>Each process consists of one or more modules.</source>
          <target state="translated">각 프로세스는 하나 이상의 모듈 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>You can use this class to get information about the module.</source>
          <target state="translated">모듈에 대 한 정보를 가져오려면이 클래스를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>The following code sample demonstrates how to use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> class to get and display information about all the modules that are used by the Notepad.exe application.</source>
          <target state="translated">다음 코드 샘플을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 가져와 Notepad.exe 응용 프로그램에서 사용 되는 모든 모듈에 대 한 정보를 표시 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.ProcessModule">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.BaseAddress">
          <source>Gets the memory address where the module was loaded.</source>
          <target state="translated">모듈이 로드된 메모리 주소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.BaseAddress">
          <source>The load address of the module.</source>
          <target state="translated">모듈의 로드 주소입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.BaseAddress">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.BaseAddress">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.BaseAddress">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> and  <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.BaseAddress%2A&gt;</ph> properties are used to display the module name and the memory address where each module was loaded.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.BaseAddress%2A&gt;</ph> 각 모듈이 로드 된 속성의 이름 및 메모리 주소를 표시 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>Gets the memory address for the function that runs when the system loads and runs the module.</source>
          <target state="translated">시스템에서 모듈을 로드하고 실행할 때 실행되는 함수의 메모리 주소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>The entry point of the module.</source>
          <target state="translated">모듈의 진입점입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>The module's entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown.</source>
          <target state="translated">모듈의 진입점에 프로세스 시작, 스레드 시작, 프로세스 종료 및 스레드 종료 하는 동안 호출 된 함수의 위치입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>While the entry point is not the address of the DllMain function, it should be close enough for most purposes.</source>
          <target state="translated">진입점은 DllMain 함수의 주소를 않지만 대부분 가까이 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>Due to changes in the way that Windows loads assemblies, <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A&gt;</ph> will always return 0 on <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> or <ph id="ph3">[!INCLUDE[win81](~/includes/win81-md.md)]</ph> and should not be relied on for those platforms.</source>
          <target state="translated">어셈블리를 로드 하는 방법의 변경으로 인해 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A&gt;</ph> 에 항상 0을 반환 <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> 또는 <ph id="ph3">[!INCLUDE[win81](~/includes/win81-md.md)]</ph> 및 해당 플랫폼에에 의존 해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.EntryPointAddress">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A&gt;</ph> properties are used to display the name and the entry point address for each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A&gt;</ph> 속성 이름 및 각 모듈에 대 한 진입점 주소를 표시 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>Gets the full path to the module.</source>
          <target state="translated">모듈의 전체 경로를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>The fully qualified path that defines the location of the module.</source>
          <target state="translated">모듈의 위치를 정의하는 정규화된 경로입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>If the file name is longer than the maximum number of characters allowed, the file name is truncated.</source>
          <target state="translated">파일 이름이 최대 허용 문자 보다 긴 경우 파일 이름이 잘립니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileName">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.FileName%2A&gt;</ph> properties are used to display the module name and the full path information for each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.FileName%2A&gt;</ph> 속성을 사용 하는 모듈 이름과 각 모듈에 대 한 전체 경로 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.FileVersionInfo">
          <source>Gets version information about the module.</source>
          <target state="translated">모듈의 버전 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileVersionInfo">
          <source>A <ph id="ph1">&lt;see cref="T:System.Diagnostics.FileVersionInfo" /&gt;</ph> that contains the module's version information.</source>
          <target state="translated">모듈의 버전 정보가 포함된 <ph id="ph1">&lt;see cref="T:System.Diagnostics.FileVersionInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileVersionInfo">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileVersionInfo">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.FileVersionInfo">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A&gt;</ph> properties are used to display the module name and the file version information for each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A&gt;</ph> 속성을 사용 하는 모듈 이름과 각 모듈에 대 한 파일 버전 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source>Gets the amount of memory that is required to load the module.</source>
          <target state="translated">모듈을 로드하는 데 필요한 메모리의 양을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source>The size, in bytes, of the memory that the module occupies.</source>
          <target state="translated">모듈이 자치하는 메모리의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A&gt;</ph> does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A&gt;</ph> 모듈에서는; 실행 되 면 모두 추가 메모리 할당이 포함 되지 않습니다. 모듈 파일에만 정적 코드와 데이터의 크기를 포함합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A&gt;</ph> properties are used to display the module name and the amount of memory needed for each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A&gt;</ph> 속성의 이름 및 각 모듈에 필요한 메모리 양을 표시 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>Gets the name of the process module.</source>
          <target state="translated">프로세스 모듈의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>The name of the module.</source>
          <target state="translated">모듈의 이름입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>If the name is longer than the maximum number of characters allowed, it is truncated.</source>
          <target state="translated">이름이 최대 허용 문자 보다 긴 경우 잘립니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Diagnostics.ProcessModule.ModuleName">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> property is used to display the name of each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ModuleName%2A&gt;</ph> 속성은 각 모듈의 이름을 표시 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ProcessModule.ToString">
          <source>Converts the name of the module to a string.</source>
          <target state="translated">모듈 이름을 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.ProcessModule.ToString">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessModule.ModuleName" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Diagnostics.ProcessModule.ModuleName" /&gt;</ph> 속성 값</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ProcessModule.ToString">
          <source>The following code example creates a new process for the Notepad.exe application.</source>
          <target state="translated">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ProcessModule.ToString">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> class to obtain a <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> object for each module in the collection.</source>
          <target state="translated">코드 반복는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModuleCollection&gt;</ph> 얻으려고 클래스는 <ph id="ph2">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> 컬렉션의 각 모듈에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.ProcessModule.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ToString%2A&gt;</ph> method is used to display the name for each module.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule.ToString%2A&gt;</ph> 메서드는 각 모듈의 이름을 표시 하는 데 사용 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>