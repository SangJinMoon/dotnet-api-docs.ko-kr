<Type Name="ProcessModule" FullName="System.Diagnostics.ProcessModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="540f92fd7392575a34bdd5a677cd8de9167884f7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProcessModule : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessModule extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessModule" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessModule&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessModule : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bfd21-101">특정 프로세스에 로드된 .dll 또는 .exe 파일을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bfd21-101">Represents a.dll or .exe file that is loaded into a particular process.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bfd21-102">모듈은 실행 파일 또는 동적 연결 라이브러리 (DLL)입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-102">A module is an executable file or a dynamic link library (DLL).</span></span> <span data-ttu-id="bfd21-103">각 프로세스는 하나 이상의 모듈 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-103">Each process consists of one or more modules.</span></span> <span data-ttu-id="bfd21-104">모듈에 대 한 정보를 가져오려면이 클래스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-104">You can use this class to get information about the module.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bfd21-105">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="bfd21-106">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="bfd21-107">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="bfd21-108">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="bfd21-109">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bfd21-110">다음 코드 샘플을 사용 하는 방법을 보여 줍니다는 <xref:System.Diagnostics.ProcessModule> 가져와 Notepad.exe 응용 프로그램에서 사용 되는 모든 모듈에 대 한 정보를 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-110">The following code sample demonstrates how to use the <xref:System.Diagnostics.ProcessModule> class to get and display information about all the modules that are used by the Notepad.exe application.</span></span>  
  
 [!code-cpp[ProcessModule#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule/CPP/processmodule.cpp#1)]
 [!code-csharp[ProcessModule#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule/CS/processmodule.cs#1)]
 [!code-vb[ProcessModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule/VB/processmodule.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="bfd21-111">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bfd21-111">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="bfd21-112">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bfd21-112">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="bfd21-113">상속자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bfd21-113">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="bfd21-114">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bfd21-114">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public IntPtr BaseAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr BaseAddress { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-115">모듈이 로드된 메모리 주소를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-115">Gets the memory address where the module was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-116">모듈의 로드 주소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-116">The load address of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bfd21-117">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-117">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-118">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-118">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-119"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 및 <xref:System.Diagnostics.ProcessModule.BaseAddress%2A> 각 모듈이 로드 된 속성의 이름 및 메모리 주소를 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-119">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and  <xref:System.Diagnostics.ProcessModule.BaseAddress%2A> properties are used to display the module name and the memory address where each module was loaded.</span></span>  
  
 [!code-cpp[ProcessModule_BaseAddress#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_BaseAddress/CPP/processmodule_baseaddress.cpp#1)]
 [!code-csharp[ProcessModule_BaseAddress#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_BaseAddress/CS/processmodule_baseaddress.cs#1)]
 [!code-vb[ProcessModule_BaseAddress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_BaseAddress/VB/processmodule_baseaddress.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryPointAddress">
      <MemberSignature Language="C#" Value="public IntPtr EntryPointAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int EntryPointAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.EntryPointAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryPointAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr EntryPointAddress { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The base memory address of the entry point of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-120">시스템에서 모듈을 로드하고 실행할 때 실행되는 함수의 메모리 주소를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-120">Gets the memory address for the function that runs when the system loads and runs the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-121">모듈의 진입점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-121">The entry point of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bfd21-122">모듈의 진입점에 프로세스 시작, 스레드 시작, 프로세스 종료 및 스레드 종료 하는 동안 호출 된 함수의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-122">The module's entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown.</span></span> <span data-ttu-id="bfd21-123">진입점은 DllMain 함수의 주소를 않지만 대부분 가까이 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-123">While the entry point is not the address of the DllMain function, it should be close enough for most purposes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bfd21-124">어셈블리를 로드 하는 방법의 변경으로 인해 <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> 에 항상 0을 반환 [!INCLUDE[win8](~/includes/win8-md.md)] 또는 [!INCLUDE[win81](~/includes/win81-md.md)] 및 해당 플랫폼에에 의존 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-124">Due to changes in the way that Windows loads assemblies, <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> will always return 0 on [!INCLUDE[win8](~/includes/win8-md.md)] or [!INCLUDE[win81](~/includes/win81-md.md)] and should not be relied on for those platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bfd21-125">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-125">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-126">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-126">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-127"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 및 <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> 속성 이름 및 각 모듈에 대 한 진입점 주소를 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-127">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.EntryPointAddress%2A> properties are used to display the name and the entry point address for each module.</span></span>  
  
 [!code-cpp[ProcessModule_EntryPoint#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_EntryPoint/CPP/processmodule_entrypoint.cpp#1)]
 [!code-csharp[ProcessModule_EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_EntryPoint/CS/processmodule_entrypoint.cs#1)]
 [!code-vb[ProcessModule_EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_EntryPoint/VB/processmodule_entrypoint.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The file name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-128">모듈의 전체 경로를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-128">Gets the full path to the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-129">모듈의 위치를 정의하는 정규화된 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-129">The fully qualified path that defines the location of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bfd21-130">파일 이름이 최대 허용 문자 보다 긴 경우 파일 이름이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-130">If the file name is longer than the maximum number of characters allowed, the file name is truncated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bfd21-131">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-131">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-132">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-132">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-133"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 및 <xref:System.Diagnostics.ProcessModule.FileName%2A> 속성을 사용 하는 모듈 이름과 각 모듈에 대 한 전체 경로 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-133">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.FileName%2A> properties are used to display the module name and the full path information for each module.</span></span>  
  
 [!code-cpp[ProcessModule_FileName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileName/CPP/processmodule_filename.cpp#1)]
 [!code-csharp[ProcessModule_FileName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileName/CS/processmodule_filename.cs#1)]
 [!code-vb[ProcessModule_FileName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileName/VB/processmodule_filename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileVersionInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.FileVersionInfo FileVersionInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.FileVersionInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileVersionInfo As FileVersionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::FileVersionInfo ^ FileVersionInfo { System::Diagnostics::FileVersionInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.FileVersionInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-134">모듈의 버전 정보를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-134">Gets version information about the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-135">모듈의 버전 정보가 포함된 <see cref="T:System.Diagnostics.FileVersionInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-135">A <see cref="T:System.Diagnostics.FileVersionInfo" /> that contains the module's version information.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bfd21-136">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-136">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-137">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-137">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-138"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 및 <xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A> 속성을 사용 하는 모듈 이름과 각 모듈에 대 한 파일 버전 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-138">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.FileVersionInfo%2A> properties are used to display the module name and the file version information for each module.</span></span>  
  
 [!code-cpp[ProcessModule_FileVersionInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CPP/processmodule_fileversioninfo.cpp#1)]
 [!code-csharp[ProcessModule_FileVersionInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_FileVersionInfo/CS/processmodule_fileversioninfo.cs#1)]
 [!code-vb[ProcessModule_FileVersionInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_FileVersionInfo/VB/processmodule_fileversioninfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleMemorySize">
      <MemberSignature Language="C#" Value="public int ModuleMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ModuleMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ModuleMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The memory needed by this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-139">모듈을 로드하는 데 필요한 메모리의 양을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-139">Gets the amount of memory that is required to load the module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-140">모듈이 자치하는 메모리의 크기(바이트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-140">The size, in bytes, of the memory that the module occupies.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bfd21-141"><xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> 모듈에서는; 실행 되 면 모두 추가 메모리 할당이 포함 되지 않습니다. 모듈 파일에만 정적 코드와 데이터의 크기를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-141"><xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bfd21-142">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-142">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-143">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-143">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-144"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 및 <xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> 속성의 이름 및 각 모듈에 필요한 메모리 양을 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-144">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and <xref:System.Diagnostics.ProcessModule.ModuleMemorySize%2A> properties are used to display the module name and the amount of memory needed for each module.</span></span>  
  
 [!code-cpp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CPP/processmodule_modulememorysize.cpp#1)]
 [!code-csharp[ProcessModule_ModuleMemorySize#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/CS/processmodule_modulememorysize.cs#1)]
 [!code-vb[ProcessModule_ModuleMemorySize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleMemorySize/VB/processmodule_modulememorysize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleName">
      <MemberSignature Language="C#" Value="public string ModuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ModuleName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessModule.ModuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ModuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this module")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-145">프로세스 모듈의 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-145">Gets the name of the process module.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bfd21-146">모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-146">The name of the module.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bfd21-147">이름이 최대 허용 문자 보다 긴 경우 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-147">If the name is longer than the maximum number of characters allowed, it is truncated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bfd21-148">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-148">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-149">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-149">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-150"><xref:System.Diagnostics.ProcessModule.ModuleName%2A> 속성은 각 모듈의 이름을 표시 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-150">The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> property is used to display the name of each module.</span></span>  
  
 [!code-cpp[ProcessModule_ModuleName#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ModuleName/CPP/processmodule_modulename.cpp#1)]
 [!code-csharp[ProcessModule_ModuleName#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ModuleName/CS/processmodule_modulename.cs#1)]
 [!code-vb[ProcessModule_ModuleName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ModuleName/VB/processmodule_modulename.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessModule.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bfd21-151">모듈 이름을 문자열로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-151">Converts the name of the module to a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bfd21-152">
            <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> 속성 값</span>
          <span class="sxs-lookup">
            <span data-stu-id="bfd21-152">The value of the <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bfd21-153">다음 코드 예제에서는 Notepad.exe 응용 프로그램에 대 한 새 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-153">The following code example creates a new process for the Notepad.exe application.</span></span> <span data-ttu-id="bfd21-154">코드 반복는 <xref:System.Diagnostics.ProcessModuleCollection> 얻으려고 클래스는 <xref:System.Diagnostics.ProcessModule> 컬렉션의 각 모듈에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-154">The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection.</span></span> <span data-ttu-id="bfd21-155"><xref:System.Diagnostics.ProcessModule.ToString%2A> 메서드는 각 모듈의 이름을 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bfd21-155">The <xref:System.Diagnostics.ProcessModule.ToString%2A> method is used to display the name for each module.</span></span>  
  
 [!code-cpp[ProcessModule_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ProcessModule_ToString/CPP/processmodule_tostring.cpp#1)]
 [!code-csharp[ProcessModule_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessModule_ToString/CS/processmodule_tostring.cs#1)]
 [!code-vb[ProcessModule_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessModule_ToString/VB/processmodule_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>