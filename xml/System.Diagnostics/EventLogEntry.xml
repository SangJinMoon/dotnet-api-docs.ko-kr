<Type Name="EventLogEntry" FullName="System.Diagnostics.EventLogEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7e853eba92ac12a35bdff18e6aa0fe055816241" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36674951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EventLogEntry extends System.ComponentModel.Component implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogEntry" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventLogEntry&#xA;Inherits Component&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogEntry sealed : System::ComponentModel::Component, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type EventLogEntry = class&#xA;    inherit Component&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>이벤트 로그에 단일 레코드를 캡슐화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 인스턴스의 만들지 것입니다 <xref:System.Diagnostics.EventLogEntry> 직접 작업할 때는 <xref:System.Diagnostics.EventLog> 클래스입니다. <xref:System.Diagnostics.EventLog.Entries%2A> 의 멤버는 <xref:System.Diagnostics.EventLog> 의 컬렉션을 포함 하는 클래스 <xref:System.Diagnostics.EventLogEntry> 인스턴스를 사용 하 여 읽을 때 반복 되는 <xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=nameWithType> 클래스 인덱스 멤버입니다.  
  
> [!IMPORTANT]
>  이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다. 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Diagnostics.EventLogEntry> 클래스입니다. 이 예제는 `switch` 문은 콘솔 입력을 사용 하 여 지정된 된 이벤트 형식에 대 한 이벤트 로그 항목을 찾으려고 합니다.  일치 하는 항목이 로그 항목 소스 정보는 콘솔에 표시 됩니다.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
    <altmember cref="T:System.Diagnostics.EventInstance" />
  </Docs>
  <Members>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="System.Diagnostics.EventLogEntry.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 엔트리의 <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> 속성과 관련된 텍스트를 가져옵니다.</summary>
        <value>응용 프로그램별 범주 텍스트입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 응용 프로그램 (이벤트 소스) 자체 번호가 매겨진된 범주 및 매핑되어 있는 텍스트 문자열 정의할 수 있습니다. 이벤트 뷰어 로그에 이벤트를 필터링 하려면 범주를 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">해당 범주와 관련된 삽입 문자열 중 하나에 대해 공간을 할당할 수 없는 경우</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="CategoryNumber">
      <MemberSignature Language="C#" Value="public short CategoryNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 CategoryNumber" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryNumber As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short CategoryNumber { short get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryNumber : int16" Usage="System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID for the category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 로그 엔트리의 범주 번호를 가져옵니다.</summary>
        <value>이 엔트리의 응용 프로그램별 범주 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 응용 프로그램 (이벤트 소스) 자체 번호가 매겨진된 범주 및 매핑되어 있는 텍스트 문자열 정의할 수 있습니다. 이벤트 뷰어 로그에 이벤트를 필터링 하려면 범주를 사용할 수 있습니다. 범주 연속적으로 매겨야 시작 부분에 1입니다. 지정 된 항목 번호는 <xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=nameWithType> 속성입니다. 이벤트 뷰어를 숫자 값으로 범주를 표시할 수 있습니다 또는 지역화 된 범주 문자열을 표시 하는 범주를 리소스 식별자로 사용할 수 있습니다. 자세한 내용은 <xref:System.Diagnostics.EventInstance>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.Category" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Data { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : byte[]" Usage="System.Diagnostics.EventLogEntry.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Binary data associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>엔트리와 관련된 이진 데이터를 가져옵니다.</summary>
        <value>항목과 연관된 이진 데이터를 보유하는 바이트의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 항목의 이벤트 관련 이진 데이터를 결합 된 16 진수 및 텍스트 형식에서 이벤트 뷰어에 표시 됩니다. 복사본을 보유 하는 배열을 만듭니다. 이벤트 뷰어를 독립적으로 예를 들어 응용 프로그램에서 처리 하는 정보를 저장, 로그 파일에서 보고서를 만들기에 경우에 따라 이벤트 관련 데이터가 사용 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType" Usage="System.Diagnostics.EventLogEntry.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The type of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 엔트리의 이벤트 형식을 가져옵니다.</summary>
        <value>이벤트 로그 엔트리와 연결된 이벤트 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 이벤트 유형을 잘 정의 된 공통 데이터 및 이벤트 관련 데이터가 포함 될 수 있습니다. 각 이벤트는 응용 프로그램 이벤트를 보고할 때 나타내는 단일 형식입니다. 이벤트 뷰어에서 이벤트 로그의 목록 보기에 표시할 아이콘을 확인 하려면 이벤트 유형을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Diagnostics.EventLogEntry.EntryType%2A> 속성입니다. 이 예제는 `switch` 문은 콘솔 입력을 사용 하 여 지정 된 항목에 대 한 이벤트 로그 항목을 찾으려고 <xref:System.Diagnostics.EventLogEntry.EntryType%2A>합니다.  일치 하는 항목이 로그 항목 소스 정보는 콘솔에 표시 됩니다.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventInstance.EntryType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Diagnostics.EventLogEntry otherEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Diagnostics.EventLogEntry otherEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (otherEntry As EventLogEntry) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Diagnostics::EventLogEntry ^ otherEntry);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Diagnostics.EventLogEntry -&gt; bool" Usage="eventLogEntry.Equals otherEntry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntry" Type="System.Diagnostics.EventLogEntry" />
      </Parameters>
      <Docs>
        <param name="otherEntry">비교할 <see cref="T:System.Diagnostics.EventLogEntry" />입니다.</param>
        <summary>두 이벤트 로그 엔트리 간을 비교합니다.</summary>
        <returns>
          <see cref="T:System.Diagnostics.EventLogEntry" /> 개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 두 개체 간의 바이트 단위 비교를 수행 합니다. 확인 하지 않습니다 여부 두 <xref:System.Diagnostics.EventLogEntry> 인스턴스가 동일한 개체를 참조 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventID">
      <MemberSignature Language="C#" Value="public int EventID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventID" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EventID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EventID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.EventID : int" Usage="System.Diagnostics.EventLogEntry.EventID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID number for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use InstanceId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 이벤트 엔트리의 응용 프로그램별 이벤트 식별자를 가져옵니다.</summary>
        <value>이벤트 메시지의 응용 프로그램별 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트 로그에는 상위 두 비트 린 상태로이 값 항목에 대 한 이벤트 식별자를 나타냅니다. <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 이벤트 로그 항목에 대 한 속성은 이벤트 소스의 메시지 리소스 파일에서 이벤트에 대 한 완전 한 32 비트 리소스 식별자를 나타냅니다. 일치 하는 동일한 소스에서 두 개의 이벤트 로그 항목이 있을 수 있습니다 <xref:System.Diagnostics.EventLogEntry.EventID%2A> 값, 있지만 다른 저마다 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 이벤트 식별자의 맨 위 두 비트의 차이로 인해 값입니다.  
  
 응용 프로그램 이벤트 항목 중 하나를 사용 하 여 작성 하는 경우는 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 메서드는 <xref:System.Diagnostics.EventLogEntry.EventID%2A> 속성이 선택적 일치 `eventId` 매개 변수입니다. 응용 프로그램을 사용 하 여 이벤트를 작성 하는 경우 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 또는 Win32 API `ReportEvent`, <xref:System.Diagnostics.EventLogEntry.EventID%2A> 속성에 마스크 해제 하 고 상위 두 비트는 이벤트에 대 한 리소스 식별자와 일치 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Diagnostics.EventLogEntry.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Sequence numer of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 로그에서 이 엔트리의 인덱스를 가져옵니다.</summary>
        <value>이벤트 로그에서 이 엔트리의 인덱스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 번호는 0부터 시작할 필요가 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64" Usage="System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The instance ID for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 엔트리의 메시지 텍스트를 지정하는 리소스 식별자를 가져옵니다.</summary>
        <value>이벤트 소스의 메시지 리소스 파일에 있는 문자열 정의에 해당하는 리소스 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 속성은 고유 하 게 구성 된 이벤트 소스에 대 한 이벤트 항목을 식별 합니다. <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 이벤트 로그에 대 한 항목은 이벤트 소스의 메시지 리소스 파일에서 이벤트에 대 한 완전 한 32 비트 리소스 식별자를 나타냅니다. <xref:System.Diagnostics.EventLogEntry.EventID%2A> 속성과 같은 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 마스크 해제 하 고 상위 두 비트입니다. 일치 하는 동일한 소스에서 두 개의 이벤트 로그 항목이 있을 수 있습니다 <xref:System.Diagnostics.EventLogEntry.EventID%2A> 값, 있지만 다른 저마다 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 리소스 식별자의 맨 위 두 비트의 차이로 인해 값입니다.  
  
 응용 프로그램 이벤트 항목 중 하나를 사용 하 여 작성 하는 경우는 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 메서드는 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 속성이 선택적 일치 `eventId` 매개 변수입니다. 응용 프로그램을 사용 하 여 이벤트를 작성 하는 경우 <xref:System.Diagnostics.EventLog.WriteEvent%2A>, <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 속성에 지정 된 리소스 식별자와 일치는 <xref:System.Diagnostics.EventInstance.InstanceId%2A> 의 `instance` 매개 변수입니다. 응용 프로그램이 Win32 API를 사용 하 여 이벤트를 쓴 경우 `ReportEvent`, <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 속성에 지정 된 리소스 식별자와 일치는 `dwEventID` 매개 변수입니다.  
  
 에 있는 Platform SDK 설명서의 "메시지 컴파일러" 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 로그 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [ http://msdn.microsoft.com ](http://msdn.microsoft.com/)합니다. 이벤트 로그 식별자에 대 한 자세한 Platform SDK의 "이벤트 식별자" 항목을 참조 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 이벤트 로그에서 특정 리소스 식별자가 포함 된 항목을 검색합니다. 일치 하는 각 항목에 대 한 이벤트 메시지를 표시 하 고 로그에서 일치 하는 항목의 총 수를 계산 하는 코드 예제입니다. 각 항목에 대 한 메시지 텍스트 되거나 같지는 되지 않을 수 있습니다. 각 이벤트 메시지는 이벤트 소스 메시지 파일, 삽입 문자열 및 쓰여진 때 사용할 매개 변수를 바탕으로 수행 합니다.  
  
 [!code-cpp[EventLog_WriteEvent#10](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#10)]
 [!code-csharp[EventLog_WriteEvent#10](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#10)]
 [!code-vb[EventLog_WriteEvent#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.EventLogEntry.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The Computer on which this event entry occured.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 엔트리가 생성된 컴퓨터의 이름을 가져옵니다.</summary>
        <value>이벤트 로그를 포함하는 컴퓨터의 이름입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Diagnostics.EventLogEntry.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The message of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트 엔트리와 관련된 지역화된 메시지를 가져옵니다.</summary>
        <value>형식이 지정되고 지역화된 메시지 텍스트입니다. 여기에는 연관된 대체 문자열이 포함됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 가져오는 지역화 된 텍스트를 포함 하는.dll 파일의 파일 이름을 확인 하도록 레지스트리를 엽니다. 소스 코드를 테스트할 때 레지스트리 오류를 나타나면.dll 파일이 컴퓨터에 있는지 확인 합니다. 삽입 문자열 포함 된 경우 메시지에, 해당 할당에서 오류를 catch 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">메시지와 관련된 삽입 문자열 중 하나에 대해 해당 공간을 할당할 수 없는 경우</exception>
        <altmember cref="T:System.Diagnostics.EventInstance" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementStrings">
      <MemberSignature Language="C#" Value="public string[] ReplacementStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ReplacementStrings" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementStrings As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ReplacementStrings { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementStrings : string[]" Usage="System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Application strings for this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 로그 엔트리와 연결된 대체 문자열을 가져옵니다.</summary>
        <value>이벤트 엔트리에 저장된 대체 문자열을 포함하는 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 항목에 대 한 대체 문자열만 검색합니다. 전체 메시지를 검색 하려면 읽기는 <xref:System.Diagnostics.EventLogEntry.Message%2A> 속성입니다.  
  
 <xref:System.Diagnostics.EventLogEntry.ReplacementStrings%2A> 속성은 이벤트 로그 항목에 사용 되는 대체 문자열의 지역화 된 버전을 포함 합니다. 응용 프로그램에 대 한 각 대상 언어에는 문자열이 포함 된 리소스 파일을 제공 하는 경우 해당 컴퓨터에서 사용 되는 언어의 이벤트 로그 메시지를 내보낼 수 있습니다. 인스턴스를 만들고이 위해는 <xref:System.Resources.ResourceManager> 대체 문자열을 포함 하는 리소스 어셈블리에 대 한 클래스입니다. 첫 번째 매개 변수는 <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> 생성자 사용할 리소스 어셈블리를 식별 합니다. 사용 하 여는 <xref:System.Resources.ResourceManager.GetString%2A> 해당 인스턴스의 로그 이벤트에 대 한 지역화 된 메시지를 제공 하는 메서드. 다음 코드는 자동으로 현재 문화권에 대 한 언어에 메시지를 설정합니다.  
  
```  
ResourceManager LocRM = new ResourceManager("ReplacementStrings.TestStrings",   
      typeof(Program).Assembly);  
EventLog e1 = new EventLog("LocTest", "MyMachine", "LocTest");  
// Get the string associated with the current culture.  
e1.WriteEntry(LocRM.GetString("strMessage"),  
   EventLogEntryType.Information);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Message" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Source" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Source : string" Usage="System.Diagnostics.EventLogEntry.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The source application of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트를 생성한 응용 프로그램의 이름을 가져옵니다.</summary>
        <value>이 이벤트 소스로 이벤트 로그에 등록되는 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트 소스 이벤트를 기록 하는 기능을 나타냅니다. 것이 응용 프로그램의 이름 또는 응용 프로그램의 하위 구성의 이름을 응용 프로그램이 큰 경우입니다. 응용 프로그램 및 서비스에 일반적으로 쓸 (및 해당 소스에 대 한) 응용 프로그램 로그 나 사용자 지정 로그입니다. 장치 드라이버는 일반적으로 시스템 로그에 기록 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Diagnostics.EventLogEntry.Source%2A> 속성입니다. 이 예제는 `switch` 문은 콘솔 입력을 사용 하 여 지정 된 항목에 대 한 이벤트 로그 항목을 찾으려고 <xref:System.Diagnostics.EventLogEntry.EntryType%2A>합니다.  일치 하는 항목이 없는 경우는 <xref:System.Diagnostics.EventLogEntry.Source%2A> 속성 정보가 콘솔에 표시 됩니다.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Needs serialization support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
        <param name="context">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
        <summary>대상 개체를 직렬화하는 데 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 채웁니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeGenerated">
      <MemberSignature Language="C#" Value="public DateTime TimeGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeGenerated As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeGenerated { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeGenerated : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Generation time of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트가 생성된 현지 시간을 가져옵니다.</summary>
        <value>이 이벤트가 생성된 현지 시간입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 이벤트가 생성 된 시간을 보유 합니다. 이 아닐 수 있습니다 이벤트 정보가 이벤트 로그에 쓴 시간 같습니다. 후자의 경우 읽기는 <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> 속성입니다.  
  
 일반적으로 기록 된 시간과 이벤트가 생성 되는 시간 사이의 지연이 됩니다. 이기 로깅에 중요 한 지연 인지 확인 하려는 경우가 아니면 이벤트를 생성 하는 경우를 확인 해야 합니다. 로그 파일이 다른 서버에 있고 병목 상태가 발생 하는 경우에 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      </Docs>
    </Member>
    <Member MemberName="TimeWritten">
      <MemberSignature Language="C#" Value="public DateTime TimeWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeWritten" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeWritten As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeWritten { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeWritten : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which this event entry was written to the logfile.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트가 로그에 기록된 현지 시간을 가져옵니다.</summary>
        <value>이 이벤트가 로그에 기록된 현지 시간입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버에는 이벤트의 정보가 이벤트 로그에 기록 되는 시간을 저장 합니다. 이 이벤트가 생성 된 때와 같은 시간 아닐 수 있습니다. 후자의 경우 읽기는 <xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.UserName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserName : string" Usage="System.Diagnostics.EventLogEntry.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of a user associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트를 담당하는 사용자의 이름을 가져옵니다.</summary>
        <value>사용자나 그룹을 고유하게 식별하는 SID(보안 식별자)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 보안 로그 외에 다른 로그에서 이벤트에 대 한 빈 경우가 많습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">사용자의 SID에 대해 계정 정보를 확보할 수 없는 경우</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Source" />
      </Docs>
    </Member>
  </Members>
</Type>