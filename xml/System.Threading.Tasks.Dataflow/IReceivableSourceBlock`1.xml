<Type Name="IReceivableSourceBlock&lt;TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d921e0963a6a253bb6a27565ad72b3b35e94218" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51312187" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReceivableSourceBlock&lt;TOutput&gt; : System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReceivableSourceBlock`1&lt;TOutput&gt; implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TOutput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReceivableSourceBlock(Of TOutput)&#xA;Implements ISourceBlock(Of TOutput)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TOutput&gt;&#xA;public interface class IReceivableSourceBlock : System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;" />
  <TypeSignature Language="F#" Value="type IReceivableSourceBlock&lt;'Output&gt; = interface&#xA;    interface IDataflowBlock&#xA;    interface ISourceBlock&lt;'Output&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOutput" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IDataflowBlock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TOutput">
      <span data-ttu-id="b8a61-101">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 제공하는 데이터 형식을 지정합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b8a61-101">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="b8a61-102">링크하지 않고 수신 메시지를 지원하는 데이터 흐름 블록을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b8a61-102">Represents a dataflow block that supports receiving messages without linking.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;TOutput&gt; filter, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!TOutput&gt; filter, [out] !TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(Predicate&lt;TOutput&gt; ^ filter, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : Predicate&lt;'Output&gt; *  -&gt; bool" Usage="iReceivableSourceBlock.TryReceive (filter, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;TOutput&gt;" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="b8a61-103">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-103">The predicate value must successfully pass in order for it to be received.</span>
          </span>
          <span data-ttu-id="b8a61-104">
            <c>filter</c>가 <see langword="null" />일 수 있습니다. 이 경우에 모든 항목이 통과됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-104">
              <c>filter</c> may be <see langword="null" />, in which case all items will pass.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b8a61-105">소스에서 받은 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-105">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8a61-106">
            <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-106">Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8a61-107">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-107">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8a61-108">이 메서드는 항목을 제공 하는 원본에 대 한 대기를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b8a61-108">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="b8a61-109">요소를 사용할 수 있는지 여부는 요소에 대 한 확인 한 후 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b8a61-109">It will return after checking for an element, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;TOutput&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!TOutput&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveAll (ByRef items As IList(Of TOutput)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;TOutput&gt; ^ % items);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveAll :  -&gt; bool" Usage="iReceivableSourceBlock.TryReceiveAll items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;TOutput&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="b8a61-110">소스에서 받은 항목입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-110">The items received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b8a61-111">
            <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-111">Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b8a61-112">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b8a61-112">
              <see langword="true" /> if one or more items could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8a61-113">이 메서드는 항목을 제공 하는 원본에 대 한 대기를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b8a61-113">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="b8a61-114">요소를 사용할 수 있는지 여부 요소에 대 한 확인 한 후 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b8a61-114">It will return after checking for elements, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>