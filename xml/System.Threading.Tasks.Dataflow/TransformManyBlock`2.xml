<Type Name="TransformManyBlock&lt;TInput,TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;TInput,TOutput&gt;">
  <TypeSignature Language="C#" Value="public sealed class TransformManyBlock&lt;TInput,TOutput&gt; : System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;, System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransformManyBlock`2&lt;TInput, TOutput&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!TInput, !TOutput&gt;, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TInput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TransformManyBlock(Of TInput, TOutput)&#xA;Implements IPropagatorBlock(Of TInput, TOutput), IReceivableSourceBlock(Of TOutput), ISourceBlock(Of TOutput), ITargetBlock(Of TInput)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public ref class TransformManyBlock sealed : System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt;, System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt;, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
    <TypeParameter Name="TOutput" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TInput"><span data-ttu-id="15ea2-101">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 수신하고 작업하는 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-101">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></typeparam>
    <typeparam name="TOutput"><span data-ttu-id="15ea2-102">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 출력하는 데이터 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-102">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></typeparam>
    <summary><span data-ttu-id="15ea2-103">수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Func`2" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-103">Provides a dataflow block that invokes a provided <see cref="T:System.Func`2" /> delegate for every data element received.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, IEnumerable(Of TOutput)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^ transform);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform"><span data-ttu-id="15ea2-104">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-104">The function to invoke with each data element received.</span></span> <span data-ttu-id="15ea2-105">반환된 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-105">All of the data from the returned <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <summary><span data-ttu-id="15ea2-106">지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-106">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-107"><paramref name="transform" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-107">The <paramref name="transform" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, Task(Of IEnumerable(Of TOutput))))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Threading::Tasks::Task&lt;System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^&gt; ^ transform);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform"><span data-ttu-id="15ea2-108">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-108">The function to invoke with each data element received.</span></span> <span data-ttu-id="15ea2-109"><see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-109">All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this  <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <summary><span data-ttu-id="15ea2-110">지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-110">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-111"><paramref name="transform" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-111">The <paramref name="transform" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, IEnumerable(Of TOutput)), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^ transform, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform"><span data-ttu-id="15ea2-112">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-112">The function to invoke with each data element received.</span></span> <span data-ttu-id="15ea2-113"><see cref="T:System.Collections.Generic.IEnumerable`1" />에서 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-113">All of the data from the returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this  <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="15ea2-114">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-114">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <summary><span data-ttu-id="15ea2-115">지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-115">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-116"><paramref name="transform" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-116">The <paramref name="transform" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="15ea2-117">또는</span><span class="sxs-lookup"><span data-stu-id="15ea2-117">-or-</span></span>  
  
 <span data-ttu-id="15ea2-118"><paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-118">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transform As Func(Of TInput, Task(Of IEnumerable(Of TOutput))), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TransformManyBlock(Func&lt;TInput, System::Threading::Tasks::Task&lt;System::Collections::Generic::IEnumerable&lt;TOutput&gt; ^&gt; ^&gt; ^ transform, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform"><span data-ttu-id="15ea2-119">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-119">The function to invoke with each data element received.</span></span> <span data-ttu-id="15ea2-120"><see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-120">All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this  <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="15ea2-121">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-121">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</span></span></param>
        <summary><span data-ttu-id="15ea2-122">지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-122">Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-123"><paramref name="transform" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-123">The <paramref name="transform" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="15ea2-124">또는</span><span class="sxs-lookup"><span data-stu-id="15ea2-124">-or-</span></span>  
  
 <span data-ttu-id="15ea2-125"><paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-125">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Complete();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15ea2-126"><see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-126">Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-127">후 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> 되었습니다를 데이터 흐름 블록에서 호출 해당 블록 완료 및 해당 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> 작업 이전에 사용 가능한 모든 데이터 처리 후 최종 상태로 전환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-127">After <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> task will enter a final state after it has processed all previously available data.</span></span> <span data-ttu-id="15ea2-128"><xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> 가 발생 하는 완료 되기를 기다리는 차단 하지 않습니다는; 요청을 초기화 하는 대신 하지만 가 발생 하는 완료를 기다리는 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> 작업을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-128"><xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> will not block waiting for completion to occur, but rather will initiate the request; to wait for completion to occur, the <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> task may be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="15ea2-129">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-129">Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</span></span></summary>
        <value><span data-ttu-id="15ea2-130">작업입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-130">The task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-131">데이터 흐름 블록에 완료 되지 현재 처리할 때 메시지와 시기는 것을 보장 메시지를 더 이상 처리 하지 것입니다으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-131">A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages.</span></span> <span data-ttu-id="15ea2-132">반환 된 <xref:System.Threading.Tasks.Task> 관련된 블록 완료 되었을 때 완료 된 상태로 전환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-132">The returned <xref:System.Threading.Tasks.Task> will transition to a completed state when the associated block has completed.</span></span> <span data-ttu-id="15ea2-133">전환 되 고 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 블록 처리 데이터 흐름 블록에 따라 성공적으로 완료 되 면 상태가 의미 체계를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-133">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state when the block completes its processing successfully according to the dataflow block’s defined semantics.</span></span> <span data-ttu-id="15ea2-134">전환 되 고 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Faulted> 전환 되 고 데이터 흐름 블록에서 처리 되지 않은 예외로 인해 중간 처리를 완료 하는 경우 상태는 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Canceled> 데이터 흐름 블록 완료 되었을 때 상태 취소 요청을 받았으므로 중간를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-134">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Faulted> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> state when the dataflow block has completed processing prematurely due to receiving a cancellation request.</span></span> <span data-ttu-id="15ea2-135">작업이 완료 된 경우에 <xref:System.Threading.Tasks.TaskStatus.Faulted> 상태에 해당 `Exception` 속성은 반환는 <xref:System.AggregateException> 블록 실패를 발생 시킨 하나 이상의 예외를 포함 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-135">If the task completes in the <xref:System.Threading.Tasks.TaskStatus.Faulted> state, its `Exception` property will return an <xref:System.AggregateException> containing the one or more exceptions that caused the block to fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputCount">
      <MemberSignature Language="C#" Value="public int InputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InputCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="15ea2-136">이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-136">Gets the number of input items waiting to be processed by this block.</span></span></summary>
        <value><span data-ttu-id="15ea2-137">입력 항목 수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-137">The number of input items.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-138"><xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.InputCount%2A> 블록 또는 블록에 의해 이미 처리 된 모든 항목에 의해 현재 처리 중인 모든 항목을 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-138">The <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.InputCount%2A> does not include any items currently being processed by the block or any items that have already been processed by the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinkTo (target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="15ea2-139">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-139">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</span></span></param>
        <param name="linkOptions"><span data-ttu-id="15ea2-140">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-140">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</span></span></param>
        <summary><span data-ttu-id="15ea2-141"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-141">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> .</span></span></summary>
        <returns><span data-ttu-id="15ea2-142">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-142">An IDisposable that, upon calling Dispose, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="15ea2-143"><paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-143"><paramref name="target" /> is null (Nothing in Visual Basic) or  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OutputCount">
      <MemberSignature Language="C#" Value="public int OutputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int OutputCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="15ea2-144">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-144">Gets the number of output items available to be received from this block.</span></span></summary>
        <value><span data-ttu-id="15ea2-145">출력 항목 수입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-145">The number of output items.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception ^ exception) = System::Threading::Tasks::Dataflow::IDataflowBlock::Fault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="15ea2-146">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-146">The <see cref="T:System.Exception" /> that caused the faulting.</span></span></param>
        <summary><span data-ttu-id="15ea2-147"><see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-147">Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-148">후 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> 되었습니다를 데이터 흐름 블록에서 호출 해당 블록 완료 및 해당 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> 작업이 최종 상태로 전환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-148">After <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> task will enter a final state.</span></span> <span data-ttu-id="15ea2-149">블록, 오류 있는으로 취소 하는 블록으로 하면 버퍼링 된 메시지 (처리 되지 않은 입력된 메시지 뿐만 아니라 unoffered 출력 메시지) 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-149">Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-150"><paramref name="exception" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-150">The <paramref name="exception" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="TOutput ISourceBlock&lt;TOutput&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !TOutput System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Function ConsumeMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput), ByRef messageConsumed As Boolean) As TOutput Implements ISourceBlock(Of TOutput).ConsumeMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual TOutput System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, [Runtime::InteropServices::Out] bool % messageConsumed) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ConsumeMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="15ea2-151">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-151">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being consumed.</span></span></param>
        <param name="target"><span data-ttu-id="15ea2-152">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-152">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consuming the message.</span></span></param>
        <param name="messageConsumed">
          <span data-ttu-id="15ea2-153">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-153"><see langword="true" /> if the message was successfully consumed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="15ea2-154">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-154">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to accept and consume a <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="15ea2-155">사용한 메시지의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-155">The value of the consumed message.</span></span> <span data-ttu-id="15ea2-156">이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-156">This may correspond to a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance than was previously reserved and passed as the <paramref name="messageHeader" /> to <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />.</span></span> <span data-ttu-id="15ea2-157">사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-157">The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> must use the returned value instead of the value passed as <paramref name="messageValue" /> through OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /></span></span>  
  
 <span data-ttu-id="15ea2-158">요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-158">If the message requested is not available, the return value will be <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-159">만 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 인스턴스를이 연결 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> 인스턴스에 사용할 수 있습니다 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, 사용 하기에 사용 해야 하 고 <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> 인스턴스는 이전에 대상에이 소스에서 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-159">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, and it must only be used to consume <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously offered by this source to the target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="15ea2-160"><paramref name="messageHeader" />이 올바르지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-160">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-161"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-161">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;TOutput&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberSignature Language="VB.NET" Value="Sub ReleaseReservation (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput)) Implements ISourceBlock(Of TOutput).ReleaseReservation" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ReleaseReservation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="15ea2-162">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-162">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the reserved message being released.</span></span></param>
        <param name="target"><span data-ttu-id="15ea2-163">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-163">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> releasing the message it previously reserved.</span></span></param>
        <summary><span data-ttu-id="15ea2-164">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-164">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to release a previously reserved <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-165">만 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 인스턴스를이 연결 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> 인스턴스에 사용할 수 있습니다 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A>, 해제 하에 사용 해야 하 고 <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> 인스턴스 대상에서 이전에 하 고 성공적으로 예약 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-165">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A>, and it must only be used to release <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously and successfully reserved by the target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="15ea2-166"><paramref name="messageHeader" />이 올바르지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-166">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-167"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-167">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="15ea2-168"><paramref name="target" />에 예약된 메시지가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-168">The <paramref name="target" /> did not have the message reserved.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;TOutput&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberSignature Language="VB.NET" Value="Function ReserveMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of TOutput)) As Boolean Implements ISourceBlock(Of TOutput).ReserveMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;::ReserveMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="15ea2-169">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-169">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being reserved.</span></span></param>
        <param name="target"><span data-ttu-id="15ea2-170">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-170">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> reserving the message.</span></span></param>
        <summary><span data-ttu-id="15ea2-171">이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-171">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="15ea2-172">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-172"><see langword="true" /> if the message was successfully reserved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-173">만 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 인스턴스가에 연결 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> 인스턴스에 사용할 수 있습니다 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>를 예약 하 고만 사용 해야 하 고 <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> 인스턴스는 이전에 대상에이 소스에서 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-173">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, and it must only be used to reserve <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously offered by this source to the target.</span></span>  
  
 <span data-ttu-id="15ea2-174">경우 `true` 반환 되는 <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> 호출 이후에 해야 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> 또는 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> 이 메시지에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-174">If `true` is returned, the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> must subsequently call either <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> or <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> for this message.</span></span> <span data-ttu-id="15ea2-175">이렇게 하지 않으면이 또는 다른 대상에 메시지를 더 이상 전파 수 없는 소스에서 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-175">Failure to do so may result in the source being unable to propagate any further messages to this or other targets.</span></span>  
  
 <span data-ttu-id="15ea2-176"><xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> 대상이 모든 내부 잠금을 보유 하는 동안 하지 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-176"><xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> must not be called while the target is holding any internal locks.</span></span> <span data-ttu-id="15ea2-177">이렇게 데이터 흐름 네트워크의 교착 상태를 방지 하기 위해 필요한 잠금 계층 구조를 위반 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-177">Doing so will violate the lock hierarchy necessary to avoid deadlocks in a dataflow network.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="15ea2-178"><paramref name="messageHeader" />이 올바르지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-178">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="15ea2-179"><paramref name="target" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-179">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;TInput&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, TInput messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !TInput messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TInput&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock&lt;TInput&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function OfferMessage (messageHeader As DataflowMessageHeader, messageValue As TInput, source As ISourceBlock(Of TInput), consumeToAccept As Boolean) As DataflowMessageStatus Implements ITargetBlock(Of TInput).OfferMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Threading::Tasks::Dataflow::DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, TInput messageValue, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TInput&gt; ^ source, bool consumeToAccept) = System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;::OfferMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="TInput" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="15ea2-180">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-180">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance that represents the header of the message being offered.</span></span></param>
        <param name="messageValue"><span data-ttu-id="15ea2-181">제공되는 메시지의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-181">The value of the message being offered.</span></span></param>
        <param name="source"><span data-ttu-id="15ea2-182">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-182">The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> offering the message.</span></span> <span data-ttu-id="15ea2-183">이 값은 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-183">This may be <see langword="null" />.</span></span></param>
        <param name="consumeToAccept">
          <span data-ttu-id="15ea2-184">대상이 메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 대한 호출 중 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출해야 하면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-184"><see langword="true" /> if the target must call <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> synchronously during the call to <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, prior to returning <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, in order to consume the message.</span></span></param>
        <summary><span data-ttu-id="15ea2-185">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-185">Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, giving the target the opportunity to consume or postpone the message.</span></span></summary>
        <returns><span data-ttu-id="15ea2-186">제공된 메시지의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-186">The status of the offered message.</span></span> <span data-ttu-id="15ea2-187">메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-187">If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> is returned, and the source should no longer use the offered message, as it is now owned by the target.</span></span> <span data-ttu-id="15ea2-188">메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-188">If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.</span></span>  
  
 <span data-ttu-id="15ea2-189">대상이 연기되더라도 원본이 <see langword="null" />인 경우 대신 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-189">If the target would have otherwise postponed but source was <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is instead returned.</span></span>  
  
 <span data-ttu-id="15ea2-190">대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-190">If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> is returned.</span></span>  
  
 <span data-ttu-id="15ea2-191">대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-191">If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is returned.</span></span> <span data-ttu-id="15ea2-192">대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-192">If the target chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="15ea2-193"><paramref name="messageHeader" />이 올바르지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="15ea2-193">The <paramref name="messageHeader" /> is not valid.</span></span>  
  
 <span data-ttu-id="15ea2-194">또는</span><span class="sxs-lookup"><span data-stu-id="15ea2-194">-or-</span></span>  
  
 <span data-ttu-id="15ea2-195">null이 아닌 <paramref name="consumeToAccept" />가 제공되는 경우 <paramref name="source" />는 true만 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-195"><paramref name="consumeToAccept" /> may only be true if provided with a non-null <paramref name="source" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="15ea2-196">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-196">Returns a string that represents the formatted name of this  <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></summary>
        <returns><span data-ttu-id="15ea2-197">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-197">A string that represents the formatted name of this  <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-198">상속 되며, <xref:System.Object> 합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-198">Inherited from  <xref:System.Object> .</span></span> <span data-ttu-id="15ea2-199">사용 하 여 <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-199">Uses the  <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;TOutput&gt; filter, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!TOutput&gt; filter, [out] !TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceive(Predicate&lt;TOutput&gt; ^ filter, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;TOutput&gt;" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="15ea2-200">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-200">The predicate value must successfully pass in order for it to be received.</span></span>  <span data-ttu-id="15ea2-201"><c>filter</c>가 <see langword="null" />일 수 있습니다. 이 경우에 모든 항목이 통과됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-201"><c>filter</c> may be <see langword="null" />, in which case all items will pass.</span></span></param>
        <param name="item"><span data-ttu-id="15ea2-202">소스에서 받은 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-202">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="15ea2-203"><see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-203">Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="15ea2-204">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-204"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-205">이 메서드는 항목을 제공 하는 원본에 대 한 대기를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-205">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="15ea2-206">요소를 사용할 수 있는지 여부는 요소에 대 한을 확인 한 후 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-206">It will return after checking for an element, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;TOutput&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!TOutput&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveAll (ByRef items As IList(Of TOutput)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;TOutput&gt; ^ % items);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;TOutput&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="15ea2-207">소스에서 받은 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-207">The items received from the source.</span></span></param>
        <summary><span data-ttu-id="15ea2-208"><see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-208">Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="15ea2-209">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-209"><see langword="true" /> if one or more items could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15ea2-210">이 메서드는 항목을 제공 하는 원본에 대 한 대기를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-210">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="15ea2-211">요소를 사용할 수 있는지 여부에 대 한 요소를 확인 한 후 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="15ea2-211">It will return after checking for elements, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>